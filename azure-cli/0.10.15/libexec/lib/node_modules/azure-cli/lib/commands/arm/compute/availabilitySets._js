/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

/*

Generated Command List:

azure availset config availability-set set
--parameter-file $f
--parse
--platform-update-domain-count $platformUpdateDomainCount
--platform-fault-domain-count $platformFaultDomainCount
--virtual-machines $virtualMachines
--statuses $statuses
--sku $sku
--id $id
--name $name
--type $type
--location $location
--tags $tags

azure availset config availability-set delete
--parameter-file $f
--platform-update-domain-count
--platform-fault-domain-count
--virtual-machines
--statuses
--sku
--id
--name
--type
--location
--tags

azure availset config virtual-machines set
--parameter-file $f
--index $i
--value $v
--parse
--id $id

azure availset config virtual-machines delete
--parameter-file $f
--index $pindex
--id

azure availset config statuses set
--parameter-file $f
--index $i
--value $v
--parse
--code $code
--level $level
--display-status $displayStatus
--message $message
--time $time

azure availset config statuses delete
--parameter-file $f
--index $pindex
--code
--level
--display-status
--message
--time

azure availset config sku set
--parameter-file $f
--parse
--name $name
--tier $tier
--capacity $capacity

azure availset config sku delete
--parameter-file $f
--name
--tier
--capacity

azure availset create-or-update 
--resource-group $p0
--name $p1
--parameters $p2
--parameter-file $f

azure availset config generate 
--parameter-file $f

azure availset config patch 
--parameter-file $f

azure availset list-available-sizes 
--resource-group $p0
--name $p1


*/

'use strict';
var fs = require('fs');
var jsonpatch = require('fast-json-patch');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;
function beautify(jsonText) {
  var obj = JSON.parse(jsonText);
  return JSON.stringify(obj, null, 2);
}

exports.init = function (cli) {



/*
  AvailabilitySets CreateOrUpdate
  --resource-group
  --name
  --parameters
=============================================
{
  "platformUpdateDomainCount":null,
  "platformFaultDomainCount":null,
  "virtualMachines":[
    {
      "id":""
    }
  ],
  "statuses":[
    {
      "code":"",
      "level":null,
      "displayStatus":"",
      "message":"",
      "time":null
    }
  ],
  "sku":{
    "name":"",
    "tier":"",
    "capacity":null
  },
  "id":null,
  "name":null,
  "type":null,
  "location":"",
  "tags":{
  }
}
*/
  var availabilitySetsCreateOrUpdate = cli.category('availset')
  .description($('Commands to manage your availability sets.  '));
  availabilitySetsCreateOrUpdate.command('create-or-update [resource-group] [name] [parameters]')
  .description($('Create or update an availability set.'))
  .usage('[options] <resource-group> <name> <parameters>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, parameters, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.availabilitySets.createOrUpdate(resourceGroup, name, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var availabilitySetsCreateOrUpdatecreateOrUpdateParameters2 = availabilitySetsCreateOrUpdate.category('config')
  .description($('Commands to manage configuration of availability-sets in the parameter file.'));
  availabilitySetsCreateOrUpdatecreateOrUpdateParameters2.command('create')
  .description($('Generate availabilitySetsCreateOrUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"platformUpdateDomainCount\":null,\"platformFaultDomainCount\":null,\"virtualMachines\":[{\"id\":\"\"}],\"statuses\":[{\"code\":\"\",\"level\":null,\"displayStatus\":\"\",\"message\":\"\",\"time\":null}],\"sku\":{\"name\":\"\",\"tier\":\"\",\"capacity\":null},\"id\":null,\"name\":null,\"type\":null,\"location\":\"\",\"tags\":{}}', _);
    var filePath = 'availabilitySetsCreateOrUpdate_createOrUpdate.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"platformUpdateDomainCount\":null,\r\n\"platformFaultDomainCount\":null,\r\n\"virtualMachines\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"statuses\":[\r\n{\r\n\"code\":\"\",\r\n\"level\":null,\r\n\"displayStatus\":\"\",\r\n\"message\":\"\",\r\n\"time\":null\r\n}\r\n],\r\n\"sku\":{\r\n\"name\":\"\",\r\n\"tier\":\"\",\r\n\"capacity\":null\r\n},\r\n\"id\":null,\r\n\"name\":null,\r\n\"type\":null,\r\n\"location\":\"\",\r\n\"tags\":{\r\n}\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  availabilitySetsCreateOrUpdatecreateOrUpdateParameters2.command('patch')
  .description($('Command to patch availabilitySetsCreateOrUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config set availability-set
  var catparametersCreateOrUpdateAvailabilitySetsAvailabilitySet01 = cli.category('availset');
  var parametersCreateOrUpdateAvailabilitySetsAvailabilitySet01 = catparametersCreateOrUpdateAvailabilitySetsAvailabilitySet01.category('config')
  .description($('Commands to manage configuration of availability-sets in the parameter file.'));
  var setparametersCreateOrUpdateAvailabilitySetsAvailabilitySet01 = parametersCreateOrUpdateAvailabilitySetsAvailabilitySet01.category('availability-set')
  .description($('Commands to configure availability-set of availset in config file.'));
  setparametersCreateOrUpdateAvailabilitySetsAvailabilitySet01.command('set')
  .description($('Set availability-set in config string or files, e.g. \r\n{\r\n  "platformUpdateDomainCount":null,\r\n  "platformFaultDomainCount":null,\r\n  "virtualMachines":[\r\n    {\r\n      "id":""\r\n    }\r\n  ],\r\n  "statuses":[\r\n    {\r\n      "code":"",\r\n      "level":null,\r\n      "displayStatus":"",\r\n      "message":"",\r\n      "time":null\r\n    }\r\n  ],\r\n  "sku":{\r\n    "name":"",\r\n    "tier":"",\r\n    "capacity":null\r\n  },\r\n  "id":null,\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--platform-update-domain-count <platformUpdateDomainCount>', $('Set the platform-update-domain-count value.'))
  .option('--platform-fault-domain-count <platformFaultDomainCount>', $('Set the platform-fault-domain-count value.'))
  .option('--virtual-machines <virtualMachines>', $('Set the virtual-machines value.'))
  .option('--statuses <statuses>', $('Set the statuses value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'platformUpdateDomainCount';
    if (options.platformUpdateDomainCount) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.platformUpdateDomainCount);
      cli.output.verbose('================================================');
      if (options.parse && options.platformUpdateDomainCount) {
        options.platformUpdateDomainCount = JSON.parse(options.platformUpdateDomainCount);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.platformUpdateDomainCount}]);
    }
    paramPath = options.path + '/' + 'platformFaultDomainCount';
    if (options.platformFaultDomainCount) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.platformFaultDomainCount);
      cli.output.verbose('================================================');
      if (options.parse && options.platformFaultDomainCount) {
        options.platformFaultDomainCount = JSON.parse(options.platformFaultDomainCount);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.platformFaultDomainCount}]);
    }
    paramPath = options.path + '/' + 'virtualMachines';
    if (options.virtualMachines) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.virtualMachines);
      cli.output.verbose('================================================');
      if (options.parse && options.virtualMachines) {
        options.virtualMachines = JSON.parse(options.virtualMachines);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualMachines}]);
    }
    paramPath = options.path + '/' + 'statuses';
    if (options.statuses) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.statuses);
      cli.output.verbose('================================================');
      if (options.parse && options.statuses) {
        options.statuses = JSON.parse(options.statuses);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.statuses}]);
    }
    paramPath = options.path + '/' + 'sku';
    if (options.sku) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sku);
      cli.output.verbose('================================================');
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    if (options.type) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.type);
      cli.output.verbose('================================================');
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    if (options.location) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.location);
      cli.output.verbose('================================================');
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    if (options.tags) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.tags);
      cli.output.verbose('================================================');
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete availability-set
  var catparametersCreateOrUpdateAvailabilitySetsAvailabilitySet11 = cli.category('availset');
  var parametersCreateOrUpdateAvailabilitySetsAvailabilitySet11 = catparametersCreateOrUpdateAvailabilitySetsAvailabilitySet11.category('config')
  .description($('Commands to manage configuration of availability-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateAvailabilitySetsAvailabilitySet11 = parametersCreateOrUpdateAvailabilitySetsAvailabilitySet11.category('availability-set')
  .description($('Commands to configure availability-set of availset in config file.'));
  deleteparametersCreateOrUpdateAvailabilitySetsAvailabilitySet11.command('delete')
  .description($('Remove availability-set in config string or files, e.g. \r\n{\r\n  "platformUpdateDomainCount":null,\r\n  "platformFaultDomainCount":null,\r\n  "virtualMachines":[\r\n    {\r\n      "id":""\r\n    }\r\n  ],\r\n  "statuses":[\r\n    {\r\n      "code":"",\r\n      "level":null,\r\n      "displayStatus":"",\r\n      "message":"",\r\n      "time":null\r\n    }\r\n  ],\r\n  "sku":{\r\n    "name":"",\r\n    "tier":"",\r\n    "capacity":null\r\n  },\r\n  "id":null,\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--platform-update-domain-count', $('Remove the platform-update-domain-count value.'))
  .option('--platform-fault-domain-count', $('Remove the platform-fault-domain-count value.'))
  .option('--virtual-machines', $('Remove the virtual-machines value.'))
  .option('--statuses', $('Remove the statuses value.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.platformUpdateDomainCount || options.platformFaultDomainCount || options.virtualMachines || options.statuses || options.sku || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.platformUpdateDomainCount) {
        subItemPath = options.path + '/platformUpdateDomainCount';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.platformFaultDomainCount) {
        subItemPath = options.path + '/platformFaultDomainCount';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualMachines) {
        subItemPath = options.path + '/virtualMachines';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.statuses) {
        subItemPath = options.path + '/statuses';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sku) {
        subItemPath = options.path + '/sku';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set virtual-machines
  var catparametersCreateOrUpdateAvailabilitySetsVirtualMachines0VM1 = cli.category('availset');
  var parametersCreateOrUpdateAvailabilitySetsVirtualMachines0VM1 = catparametersCreateOrUpdateAvailabilitySetsVirtualMachines0VM1.category('config')
  .description($('Commands to manage configuration of availability-sets in the parameter file.'));
  var setparametersCreateOrUpdateAvailabilitySetsVirtualMachines0VM1 = parametersCreateOrUpdateAvailabilitySetsVirtualMachines0VM1.category('virtual-machines')
  .description($('Commands to configure virtual-machines of availset in config file.'));
  setparametersCreateOrUpdateAvailabilitySetsVirtualMachines0VM1.command('set')
  .description($('Set virtual-machines in config string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualMachines" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachines' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete virtual-machines
  var catparametersCreateOrUpdateAvailabilitySetsVirtualMachines1VM1 = cli.category('availset');
  var parametersCreateOrUpdateAvailabilitySetsVirtualMachines1VM1 = catparametersCreateOrUpdateAvailabilitySetsVirtualMachines1VM1.category('config')
  .description($('Commands to manage configuration of availability-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateAvailabilitySetsVirtualMachines1VM1 = parametersCreateOrUpdateAvailabilitySetsVirtualMachines1VM1.category('virtual-machines')
  .description($('Commands to configure virtual-machines of availset in config file.'));
  deleteparametersCreateOrUpdateAvailabilitySetsVirtualMachines1VM1.command('delete')
  .description($('Remove virtual-machines in config string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualMachines" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachines' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set statuses
  var catparametersCreateOrUpdateAvailabilitySetsStatuses0S1 = cli.category('availset');
  var parametersCreateOrUpdateAvailabilitySetsStatuses0S1 = catparametersCreateOrUpdateAvailabilitySetsStatuses0S1.category('config')
  .description($('Commands to manage configuration of availability-sets in the parameter file.'));
  var setparametersCreateOrUpdateAvailabilitySetsStatuses0S1 = parametersCreateOrUpdateAvailabilitySetsStatuses0S1.category('statuses')
  .description($('Commands to configure statuses of availset in config file.'));
  setparametersCreateOrUpdateAvailabilitySetsStatuses0S1.command('set')
  .description($('Set statuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           "statuses" : {\r\n             "code":"",\r\n             "level":null,\r\n             "displayStatus":"",\r\n             "message":"",\r\n             "time":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--code <code>', $('Set the code value.'))
  .option('--level <level>', $('Set the level value.'))
  .option('--display-status <displayStatus>', $('Set the display-status value.'))
  .option('--message <message>', $('Set the message value.'))
  .option('--time <time>', $('Set the time value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/statuses' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'code';
    if (options.code) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.code);
      cli.output.verbose('================================================');
      if (options.parse && options.code) {
        options.code = JSON.parse(options.code);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.code}]);
    }
    paramPath = options.path + '/' + 'level';
    if (options.level) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.level);
      cli.output.verbose('================================================');
      if (options.parse && options.level) {
        options.level = JSON.parse(options.level);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.level}]);
    }
    paramPath = options.path + '/' + 'displayStatus';
    if (options.displayStatus) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.displayStatus);
      cli.output.verbose('================================================');
      if (options.parse && options.displayStatus) {
        options.displayStatus = JSON.parse(options.displayStatus);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.displayStatus}]);
    }
    paramPath = options.path + '/' + 'message';
    if (options.message) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.message);
      cli.output.verbose('================================================');
      if (options.parse && options.message) {
        options.message = JSON.parse(options.message);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.message}]);
    }
    paramPath = options.path + '/' + 'time';
    if (options.time) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.time);
      cli.output.verbose('================================================');
      if (options.parse && options.time) {
        options.time = JSON.parse(options.time);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.time}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete statuses
  var catparametersCreateOrUpdateAvailabilitySetsStatuses1S1 = cli.category('availset');
  var parametersCreateOrUpdateAvailabilitySetsStatuses1S1 = catparametersCreateOrUpdateAvailabilitySetsStatuses1S1.category('config')
  .description($('Commands to manage configuration of availability-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateAvailabilitySetsStatuses1S1 = parametersCreateOrUpdateAvailabilitySetsStatuses1S1.category('statuses')
  .description($('Commands to configure statuses of availset in config file.'));
  deleteparametersCreateOrUpdateAvailabilitySetsStatuses1S1.command('delete')
  .description($('Remove statuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           "statuses" : {\r\n             "code":"",\r\n             "level":null,\r\n             "displayStatus":"",\r\n             "message":"",\r\n             "time":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--code', $('Remove the code value.'))
  .option('--level', $('Remove the level value.'))
  .option('--display-status', $('Remove the display-status value.'))
  .option('--message', $('Remove the message value.'))
  .option('--time', $('Remove the time value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/statuses' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.code || options.level || options.displayStatus || options.message || options.time;
    if (anySubItem) {
      var subItemPath = null;
      if (options.code) {
        subItemPath = options.path + '/code';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.level) {
        subItemPath = options.path + '/level';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.displayStatus) {
        subItemPath = options.path + '/displayStatus';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.message) {
        subItemPath = options.path + '/message';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.time) {
        subItemPath = options.path + '/time';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set sku
  var catparametersCreateOrUpdateAvailabilitySetsSku0S1 = cli.category('availset');
  var parametersCreateOrUpdateAvailabilitySetsSku0S1 = catparametersCreateOrUpdateAvailabilitySetsSku0S1.category('config')
  .description($('Commands to manage configuration of availability-sets in the parameter file.'));
  var setparametersCreateOrUpdateAvailabilitySetsSku0S1 = parametersCreateOrUpdateAvailabilitySetsSku0S1.category('sku')
  .description($('Commands to configure sku of availset in config file.'));
  setparametersCreateOrUpdateAvailabilitySetsSku0S1.command('set')
  .description($('Set sku in config string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":"",\r\n             "tier":"",\r\n             "capacity":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--name <name>', $('Set the name value.'))
  .option('--tier <tier>', $('Set the tier value.'))
  .option('--capacity <capacity>', $('Set the capacity value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/sku';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'tier';
    if (options.tier) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.tier);
      cli.output.verbose('================================================');
      if (options.parse && options.tier) {
        options.tier = JSON.parse(options.tier);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tier}]);
    }
    paramPath = options.path + '/' + 'capacity';
    if (options.capacity) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.capacity);
      cli.output.verbose('================================================');
      if (options.parse && options.capacity) {
        options.capacity = JSON.parse(options.capacity);
      }
      options.capacity = JSON.parse(options.capacity);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.capacity}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete sku
  var catparametersCreateOrUpdateAvailabilitySetsSku1S1 = cli.category('availset');
  var parametersCreateOrUpdateAvailabilitySetsSku1S1 = catparametersCreateOrUpdateAvailabilitySetsSku1S1.category('config')
  .description($('Commands to manage configuration of availability-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateAvailabilitySetsSku1S1 = parametersCreateOrUpdateAvailabilitySetsSku1S1.category('sku')
  .description($('Commands to configure sku of availset in config file.'));
  deleteparametersCreateOrUpdateAvailabilitySetsSku1S1.command('delete')
  .description($('Remove sku in config string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":"",\r\n             "tier":"",\r\n             "capacity":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--name', $('Remove the name value.'))
  .option('--tier', $('Remove the tier value.'))
  .option('--capacity', $('Remove the capacity value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/sku';
    var anySubItem = false || options.name || options.tier || options.capacity;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tier) {
        subItemPath = options.path + '/tier';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.capacity) {
        subItemPath = options.path + '/capacity';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  AvailabilitySets ListAvailableSizes
  --resource-group
  --name
*/
  var availabilitySetsListAvailableSizes = cli.category('availset')
  .description($('Commands to manage your availability sets.  '));
  availabilitySetsListAvailableSizes.command('list-available-sizes [resource-group] [name]')
  .description($('Lists all available virtual machine sizes that can be used to create a new virtual machine in an existing availability set.'))
  .usage('[options] <resource-group> <name>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.availabilitySets.listAvailableSizes(resourceGroup, name, _);
    if (result) {
      cli.output.json(result);
    }
  });


};
