/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

/*

Generated Command List:

azure acs config container-service set
--parameter-file $f
--parse
--provisioning-state $provisioningState
--orchestrator-profile $orchestratorProfile
--custom-profile $customProfile
--service-principal-profile $servicePrincipalProfile
--master-profile $masterProfile
--agent-pool-profiles $agentPoolProfiles
--windows-profile $windowsProfile
--linux-profile $linuxProfile
--diagnostics-profile $diagnosticsProfile
--id $id
--name $name
--type $type
--location $location
--tags $tags

azure acs config container-service delete
--parameter-file $f
--provisioning-state
--orchestrator-profile
--custom-profile
--service-principal-profile
--master-profile
--agent-pool-profiles
--windows-profile
--linux-profile
--diagnostics-profile
--id
--name
--type
--location
--tags

azure acs config orchestrator-profile set
--parameter-file $f
--parse
--orchestrator-type $orchestratorType

azure acs config orchestrator-profile delete
--parameter-file $f
--orchestrator-type

azure acs config custom-profile set
--parameter-file $f
--parse
--orchestrator $orchestrator

azure acs config custom-profile delete
--parameter-file $f
--orchestrator

azure acs config service-principal-profile set
--parameter-file $f
--parse
--client-id $clientId
--secret $secret

azure acs config service-principal-profile delete
--parameter-file $f
--client-id
--secret

azure acs config master-profile set
--parameter-file $f
--parse
--count $count
--dns-prefix $dnsPrefix
--fqdn $fqdn

azure acs config master-profile delete
--parameter-file $f
--count
--dns-prefix
--fqdn

azure acs config agent-pool-profiles set
--parameter-file $f
--index $i
--value $v
--parse
--name $name
--count $count
--vm-size $vmSize
--dns-prefix $dnsPrefix
--fqdn $fqdn

azure acs config agent-pool-profiles delete
--parameter-file $f
--index $pindex
--name
--count
--vm-size
--dns-prefix
--fqdn

azure acs config windows-profile set
--parameter-file $f
--parse
--admin-username $adminUsername
--admin-password $adminPassword

azure acs config windows-profile delete
--parameter-file $f
--admin-username
--admin-password

azure acs config linux-profile set
--parameter-file $f
--parse
--admin-username $adminUsername
--ssh $ssh

azure acs config linux-profile delete
--parameter-file $f
--admin-username
--ssh

azure acs config ssh set
--parameter-file $f
--parse
--public-keys $publicKeys

azure acs config ssh delete
--parameter-file $f
--public-keys

azure acs config public-keys set
--parameter-file $f
--index $i
--value $v
--parse
--key-data $keyData

azure acs config public-keys delete
--parameter-file $f
--index $pindex
--key-data

azure acs config diagnostics-profile set
--parameter-file $f
--parse
--vm-diagnostics $vmDiagnostics

azure acs config diagnostics-profile delete
--parameter-file $f
--vm-diagnostics

azure acs config vm-diagnostics set
--parameter-file $f
--parse
--enabled $enabled
--storage-uri $storageUri

azure acs config vm-diagnostics delete
--parameter-file $f
--enabled
--storage-uri

azure acs create 
--resource-group $p0
--name $p1
--parameters $p2
--parameter-file $f

azure acs config generate 
--parameter-file $f

azure acs config patch 
--parameter-file $f

azure acs delete 
--resource-group $p0
--name $p1

azure acs show 
--resource-group $p0
--name $p1

azure acs list 
--resource-group $p0


*/

'use strict';
var fs = require('fs');
var jsonpatch = require('fast-json-patch');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;
function beautify(jsonText) {
  var obj = JSON.parse(jsonText);
  return JSON.stringify(obj, null, 2);
}
function capitalize(str) {
  if (str && str.length >= 1) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  else {
    return str;
  }
}

function makeTuple(k, v, d) {
  return { key : k, value : v, depth : d };
}

function displayImpl(o, key, depth, arr) {
  if ((!!o) && (o.constructor === Object || o.constructor === Array)) {
    arr.push(makeTuple(key, '', depth));
    var len = 0;
    Object.keys(o).forEach(function(k1) {
      var v1 = o[k1];
      var p1 = o.constructor === Array ? '#' : '';
      var w = displayImpl(v1, p1 + k1, depth + 1, arr);
      if (w > len) {
        len = w;
      }
    });
    return len;
  }
  else {
    arr.push(makeTuple(key, o ? o.toString() : '', depth));
    return depth * 2 + (key ? key.toString().length : 0);
  }
}

function display(cli, o) {
  var arr = [];
  var width = displayImpl(o, '', 0, arr);
  for (var t in arr) {
    var prebuf = new Array(arr[t].depth * 2).join(' ');
    var key = arr[t].key ? arr[t].key : '';
    var postLen = width - (prebuf.length + key.length);
    var postbuf = new Array(postLen > 0 ? postLen : 0).join(' ');
    var str = prebuf + capitalize(key) + postbuf;
    if (arr[t].value) {
      str += ' : ' + arr[t].value;
    }
    cli.output.data(str);
  }
}
exports.init = function (cli) {



/*
  ContainerServices CreateOrUpdate
  --resource-group
  --name
  --parameters
=============================================
{
  "provisioningState":"",
  "orchestratorProfile":{
    "orchestratorType":""
  },
  "customProfile":{
    "orchestrator":""
  },
  "servicePrincipalProfile":{
    "clientId":"",
    "secret":""
  },
  "masterProfile":{
    "count":null,
    "dnsPrefix":"",
    "fqdn":""
  },
  "agentPoolProfiles":[
    {
      "name":"",
      "count":"",
      "vmSize":"",
      "dnsPrefix":"",
      "fqdn":""
    }
  ],
  "windowsProfile":{
    "adminUsername":"",
    "adminPassword":""
  },
  "linuxProfile":{
    "adminUsername":"",
    "ssh":{
      "publicKeys":[
        {
          "keyData":""
        }
      ]
    }
  },
  "diagnosticsProfile":{
    "vmDiagnostics":{
      "enabled":false,
      "storageUri":""
    }
  },
  "id":null,
  "name":null,
  "type":null,
  "location":"",
  "tags":{
  }
}
*/
  var containerServicesCreateOrUpdate = cli.category('acs')
  .description($('Commands to manage your container services.  '));
  containerServicesCreateOrUpdate.command('create [resource-group] [name] [parameters]')
  .description($('Creates or updates a container service.'))
  .usage('[options] <resource-group> <name> <parameters>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, parameters, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.containerServices.createOrUpdate(resourceGroup, name, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var containerServicesCreateOrUpdatecreateOrUpdateParameters2 = containerServicesCreateOrUpdate.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  containerServicesCreateOrUpdatecreateOrUpdateParameters2.command('create')
  .description($('Generate containerServicesCreateOrUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"provisioningState\":\"\",\"orchestratorProfile\":{\"orchestratorType\":\"\"},\"customProfile\":{\"orchestrator\":\"\"},\"servicePrincipalProfile\":{\"clientId\":\"\",\"secret\":\"\"},\"masterProfile\":{\"count\":null,\"dnsPrefix\":\"\",\"fqdn\":\"\"},\"agentPoolProfiles\":[{\"name\":\"\",\"count\":\"\",\"vmSize\":\"\",\"dnsPrefix\":\"\",\"fqdn\":\"\"}],\"windowsProfile\":{\"adminUsername\":\"\",\"adminPassword\":\"\"},\"linuxProfile\":{\"adminUsername\":\"\",\"ssh\":{\"publicKeys\":[{\"keyData\":\"\"}]}},\"diagnosticsProfile\":{\"vmDiagnostics\":{\"enabled\":false,\"storageUri\":\"\"}},\"id\":null,\"name\":null,\"type\":null,\"location\":\"\",\"tags\":{}}', _);
    var filePath = 'containerServicesCreateOrUpdate_createOrUpdate.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"provisioningState\":\"\",\r\n\"orchestratorProfile\":{\r\n\"orchestratorType\":\"\"\r\n},\r\n\"customProfile\":{\r\n\"orchestrator\":\"\"\r\n},\r\n\"servicePrincipalProfile\":{\r\n\"clientId\":\"\",\r\n\"secret\":\"\"\r\n},\r\n\"masterProfile\":{\r\n\"count\":null,\r\n\"dnsPrefix\":\"\",\r\n\"fqdn\":\"\"\r\n},\r\n\"agentPoolProfiles\":[\r\n{\r\n\"name\":\"\",\r\n\"count\":\"\",\r\n\"vmSize\":\"\",\r\n\"dnsPrefix\":\"\",\r\n\"fqdn\":\"\"\r\n}\r\n],\r\n\"windowsProfile\":{\r\n\"adminUsername\":\"\",\r\n\"adminPassword\":\"\"\r\n},\r\n\"linuxProfile\":{\r\n\"adminUsername\":\"\",\r\n\"ssh\":{\r\n\"publicKeys\":[\r\n{\r\n\"keyData\":\"\"\r\n}\r\n]\r\n}\r\n},\r\n\"diagnosticsProfile\":{\r\n\"vmDiagnostics\":{\r\n\"enabled\":false,\r\n\"storageUri\":\"\"\r\n}\r\n},\r\n\"id\":null,\r\n\"name\":null,\r\n\"type\":null,\r\n\"location\":\"\",\r\n\"tags\":{\r\n}\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  containerServicesCreateOrUpdatecreateOrUpdateParameters2.command('patch')
  .description($('Command to patch containerServicesCreateOrUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config set container-service
  var catparametersCreateOrUpdateContainerServicesContainerService01 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesContainerService01 = catparametersCreateOrUpdateContainerServicesContainerService01.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var setparametersCreateOrUpdateContainerServicesContainerService01 = parametersCreateOrUpdateContainerServicesContainerService01.category('container-service')
  .description($('Commands to configure container-service of acs in config file.'));
  setparametersCreateOrUpdateContainerServicesContainerService01.command('set')
  .description($('Set container-service in config string or files, e.g. \r\n{\r\n  "provisioningState":"",\r\n  "orchestratorProfile":{\r\n    "orchestratorType":""\r\n  },\r\n  "customProfile":{\r\n    "orchestrator":""\r\n  },\r\n  "servicePrincipalProfile":{\r\n    "clientId":"",\r\n    "secret":""\r\n  },\r\n  "masterProfile":{\r\n    "count":null,\r\n    "dnsPrefix":"",\r\n    "fqdn":""\r\n  },\r\n  "agentPoolProfiles":[\r\n    {\r\n      "name":"",\r\n      "count":"",\r\n      "vmSize":"",\r\n      "dnsPrefix":"",\r\n      "fqdn":""\r\n    }\r\n  ],\r\n  "windowsProfile":{\r\n    "adminUsername":"",\r\n    "adminPassword":""\r\n  },\r\n  "linuxProfile":{\r\n    "adminUsername":"",\r\n    "ssh":{\r\n      "publicKeys":[\r\n        {\r\n          "keyData":""\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  "diagnosticsProfile":{\r\n    "vmDiagnostics":{\r\n      "enabled":false,\r\n      "storageUri":""\r\n    }\r\n  },\r\n  "id":null,\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--orchestrator-profile <orchestratorProfile>', $('Set the orchestrator-profile value.'))
  .option('--custom-profile <customProfile>', $('Set the custom-profile value.'))
  .option('--service-principal-profile <servicePrincipalProfile>', $('Set the service-principal-profile value.'))
  .option('--master-profile <masterProfile>', $('Set the master-profile value.'))
  .option('--agent-pool-profiles <agentPoolProfiles>', $('Set the agent-pool-profiles value.'))
  .option('--windows-profile <windowsProfile>', $('Set the windows-profile value.'))
  .option('--linux-profile <linuxProfile>', $('Set the linux-profile value.'))
  .option('--diagnostics-profile <diagnosticsProfile>', $('Set the diagnostics-profile value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'provisioningState';
    if (options.provisioningState) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.provisioningState);
      cli.output.verbose('================================================');
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'orchestratorProfile';
    if (options.orchestratorProfile) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.orchestratorProfile);
      cli.output.verbose('================================================');
      if (options.parse && options.orchestratorProfile) {
        options.orchestratorProfile = JSON.parse(options.orchestratorProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.orchestratorProfile}]);
    }
    paramPath = options.path + '/' + 'customProfile';
    if (options.customProfile) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.customProfile);
      cli.output.verbose('================================================');
      if (options.parse && options.customProfile) {
        options.customProfile = JSON.parse(options.customProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customProfile}]);
    }
    paramPath = options.path + '/' + 'servicePrincipalProfile';
    if (options.servicePrincipalProfile) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.servicePrincipalProfile);
      cli.output.verbose('================================================');
      if (options.parse && options.servicePrincipalProfile) {
        options.servicePrincipalProfile = JSON.parse(options.servicePrincipalProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.servicePrincipalProfile}]);
    }
    paramPath = options.path + '/' + 'masterProfile';
    if (options.masterProfile) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.masterProfile);
      cli.output.verbose('================================================');
      if (options.parse && options.masterProfile) {
        options.masterProfile = JSON.parse(options.masterProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.masterProfile}]);
    }
    paramPath = options.path + '/' + 'agentPoolProfiles';
    if (options.agentPoolProfiles) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.agentPoolProfiles);
      cli.output.verbose('================================================');
      if (options.parse && options.agentPoolProfiles) {
        options.agentPoolProfiles = JSON.parse(options.agentPoolProfiles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.agentPoolProfiles}]);
    }
    paramPath = options.path + '/' + 'windowsProfile';
    if (options.windowsProfile) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.windowsProfile);
      cli.output.verbose('================================================');
      if (options.parse && options.windowsProfile) {
        options.windowsProfile = JSON.parse(options.windowsProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsProfile}]);
    }
    paramPath = options.path + '/' + 'linuxProfile';
    if (options.linuxProfile) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.linuxProfile);
      cli.output.verbose('================================================');
      if (options.parse && options.linuxProfile) {
        options.linuxProfile = JSON.parse(options.linuxProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.linuxProfile}]);
    }
    paramPath = options.path + '/' + 'diagnosticsProfile';
    if (options.diagnosticsProfile) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.diagnosticsProfile);
      cli.output.verbose('================================================');
      if (options.parse && options.diagnosticsProfile) {
        options.diagnosticsProfile = JSON.parse(options.diagnosticsProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diagnosticsProfile}]);
    }
    paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    if (options.type) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.type);
      cli.output.verbose('================================================');
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    if (options.location) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.location);
      cli.output.verbose('================================================');
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    if (options.tags) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.tags);
      cli.output.verbose('================================================');
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete container-service
  var catparametersCreateOrUpdateContainerServicesContainerService11 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesContainerService11 = catparametersCreateOrUpdateContainerServicesContainerService11.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var deleteparametersCreateOrUpdateContainerServicesContainerService11 = parametersCreateOrUpdateContainerServicesContainerService11.category('container-service')
  .description($('Commands to configure container-service of acs in config file.'));
  deleteparametersCreateOrUpdateContainerServicesContainerService11.command('delete')
  .description($('Remove container-service in config string or files, e.g. \r\n{\r\n  "provisioningState":"",\r\n  "orchestratorProfile":{\r\n    "orchestratorType":""\r\n  },\r\n  "customProfile":{\r\n    "orchestrator":""\r\n  },\r\n  "servicePrincipalProfile":{\r\n    "clientId":"",\r\n    "secret":""\r\n  },\r\n  "masterProfile":{\r\n    "count":null,\r\n    "dnsPrefix":"",\r\n    "fqdn":""\r\n  },\r\n  "agentPoolProfiles":[\r\n    {\r\n      "name":"",\r\n      "count":"",\r\n      "vmSize":"",\r\n      "dnsPrefix":"",\r\n      "fqdn":""\r\n    }\r\n  ],\r\n  "windowsProfile":{\r\n    "adminUsername":"",\r\n    "adminPassword":""\r\n  },\r\n  "linuxProfile":{\r\n    "adminUsername":"",\r\n    "ssh":{\r\n      "publicKeys":[\r\n        {\r\n          "keyData":""\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  "diagnosticsProfile":{\r\n    "vmDiagnostics":{\r\n      "enabled":false,\r\n      "storageUri":""\r\n    }\r\n  },\r\n  "id":null,\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--orchestrator-profile', $('Remove the orchestrator-profile value.'))
  .option('--custom-profile', $('Remove the custom-profile value.'))
  .option('--service-principal-profile', $('Remove the service-principal-profile value.'))
  .option('--master-profile', $('Remove the master-profile value.'))
  .option('--agent-pool-profiles', $('Remove the agent-pool-profiles value.'))
  .option('--windows-profile', $('Remove the windows-profile value.'))
  .option('--linux-profile', $('Remove the linux-profile value.'))
  .option('--diagnostics-profile', $('Remove the diagnostics-profile value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.provisioningState || options.orchestratorProfile || options.customProfile || options.servicePrincipalProfile || options.masterProfile || options.agentPoolProfiles || options.windowsProfile || options.linuxProfile || options.diagnosticsProfile || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.orchestratorProfile) {
        subItemPath = options.path + '/orchestratorProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.customProfile) {
        subItemPath = options.path + '/customProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.servicePrincipalProfile) {
        subItemPath = options.path + '/servicePrincipalProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.masterProfile) {
        subItemPath = options.path + '/masterProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.agentPoolProfiles) {
        subItemPath = options.path + '/agentPoolProfiles';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.windowsProfile) {
        subItemPath = options.path + '/windowsProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.linuxProfile) {
        subItemPath = options.path + '/linuxProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.diagnosticsProfile) {
        subItemPath = options.path + '/diagnosticsProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set orchestrator-profile
  var catparametersCreateOrUpdateContainerServicesOrchestratorProfile0OP1 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesOrchestratorProfile0OP1 = catparametersCreateOrUpdateContainerServicesOrchestratorProfile0OP1.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var setparametersCreateOrUpdateContainerServicesOrchestratorProfile0OP1 = parametersCreateOrUpdateContainerServicesOrchestratorProfile0OP1.category('orchestrator-profile')
  .description($('Commands to configure orchestrator-profile of acs in config file.'));
  setparametersCreateOrUpdateContainerServicesOrchestratorProfile0OP1.command('set')
  .description($('Set orchestrator-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "orchestratorProfile" : {\r\n             "orchestratorType":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--orchestrator-type <orchestratorType>', $('Set the orchestrator-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/orchestratorProfile';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'orchestratorType';
    if (options.orchestratorType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.orchestratorType);
      cli.output.verbose('================================================');
      if (options.parse && options.orchestratorType) {
        options.orchestratorType = JSON.parse(options.orchestratorType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.orchestratorType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete orchestrator-profile
  var catparametersCreateOrUpdateContainerServicesOrchestratorProfile1OP1 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesOrchestratorProfile1OP1 = catparametersCreateOrUpdateContainerServicesOrchestratorProfile1OP1.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var deleteparametersCreateOrUpdateContainerServicesOrchestratorProfile1OP1 = parametersCreateOrUpdateContainerServicesOrchestratorProfile1OP1.category('orchestrator-profile')
  .description($('Commands to configure orchestrator-profile of acs in config file.'));
  deleteparametersCreateOrUpdateContainerServicesOrchestratorProfile1OP1.command('delete')
  .description($('Remove orchestrator-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "orchestratorProfile" : {\r\n             "orchestratorType":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--orchestrator-type', $('Remove the orchestrator-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/orchestratorProfile';
    var anySubItem = false || options.orchestratorType;
    if (anySubItem) {
      var subItemPath = null;
      if (options.orchestratorType) {
        subItemPath = options.path + '/orchestratorType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set custom-profile
  var catparametersCreateOrUpdateContainerServicesCustomProfile0CP1 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesCustomProfile0CP1 = catparametersCreateOrUpdateContainerServicesCustomProfile0CP1.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var setparametersCreateOrUpdateContainerServicesCustomProfile0CP1 = parametersCreateOrUpdateContainerServicesCustomProfile0CP1.category('custom-profile')
  .description($('Commands to configure custom-profile of acs in config file.'));
  setparametersCreateOrUpdateContainerServicesCustomProfile0CP1.command('set')
  .description($('Set custom-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "customProfile" : {\r\n             "orchestrator":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--orchestrator <orchestrator>', $('Set the orchestrator value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/customProfile';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'orchestrator';
    if (options.orchestrator) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.orchestrator);
      cli.output.verbose('================================================');
      if (options.parse && options.orchestrator) {
        options.orchestrator = JSON.parse(options.orchestrator);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.orchestrator}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete custom-profile
  var catparametersCreateOrUpdateContainerServicesCustomProfile1CP1 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesCustomProfile1CP1 = catparametersCreateOrUpdateContainerServicesCustomProfile1CP1.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var deleteparametersCreateOrUpdateContainerServicesCustomProfile1CP1 = parametersCreateOrUpdateContainerServicesCustomProfile1CP1.category('custom-profile')
  .description($('Commands to configure custom-profile of acs in config file.'));
  deleteparametersCreateOrUpdateContainerServicesCustomProfile1CP1.command('delete')
  .description($('Remove custom-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "customProfile" : {\r\n             "orchestrator":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--orchestrator', $('Remove the orchestrator value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/customProfile';
    var anySubItem = false || options.orchestrator;
    if (anySubItem) {
      var subItemPath = null;
      if (options.orchestrator) {
        subItemPath = options.path + '/orchestrator';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set service-principal-profile
  var catparametersCreateOrUpdateContainerServicesServicePrincipalProfile0SPP1 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesServicePrincipalProfile0SPP1 = catparametersCreateOrUpdateContainerServicesServicePrincipalProfile0SPP1.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var setparametersCreateOrUpdateContainerServicesServicePrincipalProfile0SPP1 = parametersCreateOrUpdateContainerServicesServicePrincipalProfile0SPP1.category('service-principal-profile')
  .description($('Commands to configure service-principal-profile of acs in config file.'));
  setparametersCreateOrUpdateContainerServicesServicePrincipalProfile0SPP1.command('set')
  .description($('Set service-principal-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "servicePrincipalProfile" : {\r\n             "clientId":"",\r\n             "secret":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--client-id <clientId>', $('Set the client-id value.'))
  .option('--secret <secret>', $('Set the secret value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/servicePrincipalProfile';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'clientId';
    if (options.clientId) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.clientId);
      cli.output.verbose('================================================');
      if (options.parse && options.clientId) {
        options.clientId = JSON.parse(options.clientId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.clientId}]);
    }
    paramPath = options.path + '/' + 'secret';
    if (options.secret) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.secret);
      cli.output.verbose('================================================');
      if (options.parse && options.secret) {
        options.secret = JSON.parse(options.secret);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.secret}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete service-principal-profile
  var catparametersCreateOrUpdateContainerServicesServicePrincipalProfile1SPP1 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesServicePrincipalProfile1SPP1 = catparametersCreateOrUpdateContainerServicesServicePrincipalProfile1SPP1.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var deleteparametersCreateOrUpdateContainerServicesServicePrincipalProfile1SPP1 = parametersCreateOrUpdateContainerServicesServicePrincipalProfile1SPP1.category('service-principal-profile')
  .description($('Commands to configure service-principal-profile of acs in config file.'));
  deleteparametersCreateOrUpdateContainerServicesServicePrincipalProfile1SPP1.command('delete')
  .description($('Remove service-principal-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "servicePrincipalProfile" : {\r\n             "clientId":"",\r\n             "secret":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--client-id', $('Remove the client-id value.'))
  .option('--secret', $('Remove the secret value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/servicePrincipalProfile';
    var anySubItem = false || options.clientId || options.secret;
    if (anySubItem) {
      var subItemPath = null;
      if (options.clientId) {
        subItemPath = options.path + '/clientId';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.secret) {
        subItemPath = options.path + '/secret';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set master-profile
  var catparametersCreateOrUpdateContainerServicesMasterProfile0MP1 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesMasterProfile0MP1 = catparametersCreateOrUpdateContainerServicesMasterProfile0MP1.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var setparametersCreateOrUpdateContainerServicesMasterProfile0MP1 = parametersCreateOrUpdateContainerServicesMasterProfile0MP1.category('master-profile')
  .description($('Commands to configure master-profile of acs in config file.'));
  setparametersCreateOrUpdateContainerServicesMasterProfile0MP1.command('set')
  .description($('Set master-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "masterProfile" : {\r\n             "count":null,\r\n             "dnsPrefix":"",\r\n             "fqdn":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--count <count>', $('Set the count value.'))
  .option('--dns-prefix <dnsPrefix>', $('Set the dns-prefix value.'))
  .option('--fqdn <fqdn>', $('Set the fqdn value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/masterProfile';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'count';
    if (options.count) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.count);
      cli.output.verbose('================================================');
      if (options.parse && options.count) {
        options.count = JSON.parse(options.count);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.count}]);
    }
    paramPath = options.path + '/' + 'dnsPrefix';
    if (options.dnsPrefix) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.dnsPrefix);
      cli.output.verbose('================================================');
      if (options.parse && options.dnsPrefix) {
        options.dnsPrefix = JSON.parse(options.dnsPrefix);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsPrefix}]);
    }
    paramPath = options.path + '/' + 'fqdn';
    if (options.fqdn) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.fqdn);
      cli.output.verbose('================================================');
      if (options.parse && options.fqdn) {
        options.fqdn = JSON.parse(options.fqdn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fqdn}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete master-profile
  var catparametersCreateOrUpdateContainerServicesMasterProfile1MP1 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesMasterProfile1MP1 = catparametersCreateOrUpdateContainerServicesMasterProfile1MP1.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var deleteparametersCreateOrUpdateContainerServicesMasterProfile1MP1 = parametersCreateOrUpdateContainerServicesMasterProfile1MP1.category('master-profile')
  .description($('Commands to configure master-profile of acs in config file.'));
  deleteparametersCreateOrUpdateContainerServicesMasterProfile1MP1.command('delete')
  .description($('Remove master-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "masterProfile" : {\r\n             "count":null,\r\n             "dnsPrefix":"",\r\n             "fqdn":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--count', $('Remove the count value.'))
  .option('--dns-prefix', $('Remove the dns-prefix value.'))
  .option('--fqdn', $('Remove the fqdn value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/masterProfile';
    var anySubItem = false || options.count || options.dnsPrefix || options.fqdn;
    if (anySubItem) {
      var subItemPath = null;
      if (options.count) {
        subItemPath = options.path + '/count';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.dnsPrefix) {
        subItemPath = options.path + '/dnsPrefix';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.fqdn) {
        subItemPath = options.path + '/fqdn';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set agent-pool-profiles
  var catparametersCreateOrUpdateContainerServicesAgentPoolProfiles0APP1 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesAgentPoolProfiles0APP1 = catparametersCreateOrUpdateContainerServicesAgentPoolProfiles0APP1.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var setparametersCreateOrUpdateContainerServicesAgentPoolProfiles0APP1 = parametersCreateOrUpdateContainerServicesAgentPoolProfiles0APP1.category('agent-pool-profiles')
  .description($('Commands to configure agent-pool-profiles of acs in config file.'));
  setparametersCreateOrUpdateContainerServicesAgentPoolProfiles0APP1.command('set')
  .description($('Set agent-pool-profiles in config string or files, e.g. \r\n         {\r\n           ...\r\n           "agentPoolProfiles" : {\r\n             "name":"",\r\n             "count":"",\r\n             "vmSize":"",\r\n             "dnsPrefix":"",\r\n             "fqdn":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--name <name>', $('Set the name value.'))
  .option('--count <count>', $('Set the count value.'))
  .option('--vm-size <vmSize>', $('Set the vm-size value.'))
  .option('--dns-prefix <dnsPrefix>', $('Set the dns-prefix value.'))
  .option('--fqdn <fqdn>', $('Set the fqdn value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/agentPoolProfiles' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'count';
    if (options.count) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.count);
      cli.output.verbose('================================================');
      if (options.parse && options.count) {
        options.count = JSON.parse(options.count);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.count}]);
    }
    paramPath = options.path + '/' + 'vmSize';
    if (options.vmSize) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.vmSize);
      cli.output.verbose('================================================');
      if (options.parse && options.vmSize) {
        options.vmSize = JSON.parse(options.vmSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmSize}]);
    }
    paramPath = options.path + '/' + 'dnsPrefix';
    if (options.dnsPrefix) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.dnsPrefix);
      cli.output.verbose('================================================');
      if (options.parse && options.dnsPrefix) {
        options.dnsPrefix = JSON.parse(options.dnsPrefix);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsPrefix}]);
    }
    paramPath = options.path + '/' + 'fqdn';
    if (options.fqdn) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.fqdn);
      cli.output.verbose('================================================');
      if (options.parse && options.fqdn) {
        options.fqdn = JSON.parse(options.fqdn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fqdn}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete agent-pool-profiles
  var catparametersCreateOrUpdateContainerServicesAgentPoolProfiles1APP1 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesAgentPoolProfiles1APP1 = catparametersCreateOrUpdateContainerServicesAgentPoolProfiles1APP1.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var deleteparametersCreateOrUpdateContainerServicesAgentPoolProfiles1APP1 = parametersCreateOrUpdateContainerServicesAgentPoolProfiles1APP1.category('agent-pool-profiles')
  .description($('Commands to configure agent-pool-profiles of acs in config file.'));
  deleteparametersCreateOrUpdateContainerServicesAgentPoolProfiles1APP1.command('delete')
  .description($('Remove agent-pool-profiles in config string or files, e.g. \r\n         {\r\n           ...\r\n           "agentPoolProfiles" : {\r\n             "name":"",\r\n             "count":"",\r\n             "vmSize":"",\r\n             "dnsPrefix":"",\r\n             "fqdn":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--count', $('Remove the count value.'))
  .option('--vm-size', $('Remove the vm-size value.'))
  .option('--dns-prefix', $('Remove the dns-prefix value.'))
  .option('--fqdn', $('Remove the fqdn value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/agentPoolProfiles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.count || options.vmSize || options.dnsPrefix || options.fqdn;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.count) {
        subItemPath = options.path + '/count';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vmSize) {
        subItemPath = options.path + '/vmSize';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.dnsPrefix) {
        subItemPath = options.path + '/dnsPrefix';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.fqdn) {
        subItemPath = options.path + '/fqdn';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set windows-profile
  var catparametersCreateOrUpdateContainerServicesWindowsProfile0WP1 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesWindowsProfile0WP1 = catparametersCreateOrUpdateContainerServicesWindowsProfile0WP1.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var setparametersCreateOrUpdateContainerServicesWindowsProfile0WP1 = parametersCreateOrUpdateContainerServicesWindowsProfile0WP1.category('windows-profile')
  .description($('Commands to configure windows-profile of acs in config file.'));
  setparametersCreateOrUpdateContainerServicesWindowsProfile0WP1.command('set')
  .description($('Set windows-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsProfile" : {\r\n             "adminUsername":"",\r\n             "adminPassword":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--admin-username <adminUsername>', $('Set the admin-username value.'))
  .option('--admin-password <adminPassword>', $('Set the admin-password value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/windowsProfile';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'adminUsername';
    if (options.adminUsername) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.adminUsername);
      cli.output.verbose('================================================');
      if (options.parse && options.adminUsername) {
        options.adminUsername = JSON.parse(options.adminUsername);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUsername}]);
    }
    paramPath = options.path + '/' + 'adminPassword';
    if (options.adminPassword) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.adminPassword);
      cli.output.verbose('================================================');
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete windows-profile
  var catparametersCreateOrUpdateContainerServicesWindowsProfile1WP1 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesWindowsProfile1WP1 = catparametersCreateOrUpdateContainerServicesWindowsProfile1WP1.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var deleteparametersCreateOrUpdateContainerServicesWindowsProfile1WP1 = parametersCreateOrUpdateContainerServicesWindowsProfile1WP1.category('windows-profile')
  .description($('Commands to configure windows-profile of acs in config file.'));
  deleteparametersCreateOrUpdateContainerServicesWindowsProfile1WP1.command('delete')
  .description($('Remove windows-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsProfile" : {\r\n             "adminUsername":"",\r\n             "adminPassword":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--admin-username', $('Remove the admin-username value.'))
  .option('--admin-password', $('Remove the admin-password value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/windowsProfile';
    var anySubItem = false || options.adminUsername || options.adminPassword;
    if (anySubItem) {
      var subItemPath = null;
      if (options.adminUsername) {
        subItemPath = options.path + '/adminUsername';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminPassword) {
        subItemPath = options.path + '/adminPassword';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set linux-profile
  var catparametersCreateOrUpdateContainerServicesLinuxProfile0LP1 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesLinuxProfile0LP1 = catparametersCreateOrUpdateContainerServicesLinuxProfile0LP1.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var setparametersCreateOrUpdateContainerServicesLinuxProfile0LP1 = parametersCreateOrUpdateContainerServicesLinuxProfile0LP1.category('linux-profile')
  .description($('Commands to configure linux-profile of acs in config file.'));
  setparametersCreateOrUpdateContainerServicesLinuxProfile0LP1.command('set')
  .description($('Set linux-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "linuxProfile" : {\r\n             "adminUsername":"",\r\n             "ssh":{\r\n               "publicKeys":[\r\n                 {\r\n                   "keyData":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--admin-username <adminUsername>', $('Set the admin-username value.'))
  .option('--ssh <ssh>', $('Set the ssh value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/linuxProfile';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'adminUsername';
    if (options.adminUsername) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.adminUsername);
      cli.output.verbose('================================================');
      if (options.parse && options.adminUsername) {
        options.adminUsername = JSON.parse(options.adminUsername);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUsername}]);
    }
    paramPath = options.path + '/' + 'ssh';
    if (options.ssh) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.ssh);
      cli.output.verbose('================================================');
      if (options.parse && options.ssh) {
        options.ssh = JSON.parse(options.ssh);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ssh}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete linux-profile
  var catparametersCreateOrUpdateContainerServicesLinuxProfile1LP1 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesLinuxProfile1LP1 = catparametersCreateOrUpdateContainerServicesLinuxProfile1LP1.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var deleteparametersCreateOrUpdateContainerServicesLinuxProfile1LP1 = parametersCreateOrUpdateContainerServicesLinuxProfile1LP1.category('linux-profile')
  .description($('Commands to configure linux-profile of acs in config file.'));
  deleteparametersCreateOrUpdateContainerServicesLinuxProfile1LP1.command('delete')
  .description($('Remove linux-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "linuxProfile" : {\r\n             "adminUsername":"",\r\n             "ssh":{\r\n               "publicKeys":[\r\n                 {\r\n                   "keyData":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--admin-username', $('Remove the admin-username value.'))
  .option('--ssh', $('Remove the ssh value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/linuxProfile';
    var anySubItem = false || options.adminUsername || options.ssh;
    if (anySubItem) {
      var subItemPath = null;
      if (options.adminUsername) {
        subItemPath = options.path + '/adminUsername';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ssh) {
        subItemPath = options.path + '/ssh';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set ssh
  var catparametersCreateOrUpdateContainerServicesSsh0LPs1 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesSsh0LPs1 = catparametersCreateOrUpdateContainerServicesSsh0LPs1.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var setparametersCreateOrUpdateContainerServicesSsh0LPs1 = parametersCreateOrUpdateContainerServicesSsh0LPs1.category('ssh')
  .description($('Commands to configure ssh of acs in config file.'));
  setparametersCreateOrUpdateContainerServicesSsh0LPs1.command('set')
  .description($('Set ssh in config string or files, e.g. \r\n         {\r\n           ...\r\n           "ssh" : {\r\n             "publicKeys":[\r\n               {\r\n                 "keyData":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--public-keys <publicKeys>', $('Set the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/linuxProfile/ssh';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'publicKeys';
    if (options.publicKeys) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publicKeys);
      cli.output.verbose('================================================');
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete ssh
  var catparametersCreateOrUpdateContainerServicesSsh1LPs1 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesSsh1LPs1 = catparametersCreateOrUpdateContainerServicesSsh1LPs1.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var deleteparametersCreateOrUpdateContainerServicesSsh1LPs1 = parametersCreateOrUpdateContainerServicesSsh1LPs1.category('ssh')
  .description($('Commands to configure ssh of acs in config file.'));
  deleteparametersCreateOrUpdateContainerServicesSsh1LPs1.command('delete')
  .description($('Remove ssh in config string or files, e.g. \r\n         {\r\n           ...\r\n           "ssh" : {\r\n             "publicKeys":[\r\n               {\r\n                 "keyData":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--public-keys', $('Remove the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/linuxProfile/ssh';
    var anySubItem = false || options.publicKeys;
    if (anySubItem) {
      var subItemPath = null;
      if (options.publicKeys) {
        subItemPath = options.path + '/publicKeys';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set public-keys
  var catparametersCreateOrUpdateContainerServicesPublicKeys0LPspK1 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesPublicKeys0LPspK1 = catparametersCreateOrUpdateContainerServicesPublicKeys0LPspK1.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var setparametersCreateOrUpdateContainerServicesPublicKeys0LPspK1 = parametersCreateOrUpdateContainerServicesPublicKeys0LPspK1.category('public-keys')
  .description($('Commands to configure public-keys of acs in config file.'));
  setparametersCreateOrUpdateContainerServicesPublicKeys0LPspK1.command('set')
  .description($('Set public-keys in config string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "keyData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--key-data <keyData>', $('Set the key-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/linuxProfile/ssh/publicKeys' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'keyData';
    if (options.keyData) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.keyData);
      cli.output.verbose('================================================');
      if (options.parse && options.keyData) {
        options.keyData = JSON.parse(options.keyData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete public-keys
  var catparametersCreateOrUpdateContainerServicesPublicKeys1LPspK1 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesPublicKeys1LPspK1 = catparametersCreateOrUpdateContainerServicesPublicKeys1LPspK1.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var deleteparametersCreateOrUpdateContainerServicesPublicKeys1LPspK1 = parametersCreateOrUpdateContainerServicesPublicKeys1LPspK1.category('public-keys')
  .description($('Commands to configure public-keys of acs in config file.'));
  deleteparametersCreateOrUpdateContainerServicesPublicKeys1LPspK1.command('delete')
  .description($('Remove public-keys in config string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "keyData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--key-data', $('Remove the key-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/linuxProfile/ssh/publicKeys' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.keyData;
    if (anySubItem) {
      var subItemPath = null;
      if (options.keyData) {
        subItemPath = options.path + '/keyData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set diagnostics-profile
  var catparametersCreateOrUpdateContainerServicesDiagnosticsProfile0DP1 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesDiagnosticsProfile0DP1 = catparametersCreateOrUpdateContainerServicesDiagnosticsProfile0DP1.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var setparametersCreateOrUpdateContainerServicesDiagnosticsProfile0DP1 = parametersCreateOrUpdateContainerServicesDiagnosticsProfile0DP1.category('diagnostics-profile')
  .description($('Commands to configure diagnostics-profile of acs in config file.'));
  setparametersCreateOrUpdateContainerServicesDiagnosticsProfile0DP1.command('set')
  .description($('Set diagnostics-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "diagnosticsProfile" : {\r\n             "vmDiagnostics":{\r\n               "enabled":false,\r\n               "storageUri":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--vm-diagnostics <vmDiagnostics>', $('Set the vm-diagnostics value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/diagnosticsProfile';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'vmDiagnostics';
    if (options.vmDiagnostics) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.vmDiagnostics);
      cli.output.verbose('================================================');
      if (options.parse && options.vmDiagnostics) {
        options.vmDiagnostics = JSON.parse(options.vmDiagnostics);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmDiagnostics}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete diagnostics-profile
  var catparametersCreateOrUpdateContainerServicesDiagnosticsProfile1DP1 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesDiagnosticsProfile1DP1 = catparametersCreateOrUpdateContainerServicesDiagnosticsProfile1DP1.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var deleteparametersCreateOrUpdateContainerServicesDiagnosticsProfile1DP1 = parametersCreateOrUpdateContainerServicesDiagnosticsProfile1DP1.category('diagnostics-profile')
  .description($('Commands to configure diagnostics-profile of acs in config file.'));
  deleteparametersCreateOrUpdateContainerServicesDiagnosticsProfile1DP1.command('delete')
  .description($('Remove diagnostics-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "diagnosticsProfile" : {\r\n             "vmDiagnostics":{\r\n               "enabled":false,\r\n               "storageUri":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--vm-diagnostics', $('Remove the vm-diagnostics value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/diagnosticsProfile';
    var anySubItem = false || options.vmDiagnostics;
    if (anySubItem) {
      var subItemPath = null;
      if (options.vmDiagnostics) {
        subItemPath = options.path + '/vmDiagnostics';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set vm-diagnostics
  var catparametersCreateOrUpdateContainerServicesVmDiagnostics0DPvD1 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesVmDiagnostics0DPvD1 = catparametersCreateOrUpdateContainerServicesVmDiagnostics0DPvD1.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var setparametersCreateOrUpdateContainerServicesVmDiagnostics0DPvD1 = parametersCreateOrUpdateContainerServicesVmDiagnostics0DPvD1.category('vm-diagnostics')
  .description($('Commands to configure vm-diagnostics of acs in config file.'));
  setparametersCreateOrUpdateContainerServicesVmDiagnostics0DPvD1.command('set')
  .description($('Set vm-diagnostics in config string or files, e.g. \r\n         {\r\n           ...\r\n           "vmDiagnostics" : {\r\n             "enabled":false,\r\n             "storageUri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--enabled <enabled>', $('Set the enabled value.'))
  .option('--storage-uri <storageUri>', $('Set the storage-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/diagnosticsProfile/vmDiagnostics';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'enabled';
    if (options.enabled) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.enabled);
      cli.output.verbose('================================================');
      if (options.parse && options.enabled) {
        options.enabled = JSON.parse(options.enabled);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enabled}]);
    }
    paramPath = options.path + '/' + 'storageUri';
    if (options.storageUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storageUri);
      cli.output.verbose('================================================');
      if (options.parse && options.storageUri) {
        options.storageUri = JSON.parse(options.storageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storageUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete vm-diagnostics
  var catparametersCreateOrUpdateContainerServicesVmDiagnostics1DPvD1 = cli.category('acs');
  var parametersCreateOrUpdateContainerServicesVmDiagnostics1DPvD1 = catparametersCreateOrUpdateContainerServicesVmDiagnostics1DPvD1.category('config')
  .description($('Commands to manage configuration of container-services in the parameter file.'));
  var deleteparametersCreateOrUpdateContainerServicesVmDiagnostics1DPvD1 = parametersCreateOrUpdateContainerServicesVmDiagnostics1DPvD1.category('vm-diagnostics')
  .description($('Commands to configure vm-diagnostics of acs in config file.'));
  deleteparametersCreateOrUpdateContainerServicesVmDiagnostics1DPvD1.command('delete')
  .description($('Remove vm-diagnostics in config string or files, e.g. \r\n         {\r\n           ...\r\n           "vmDiagnostics" : {\r\n             "enabled":false,\r\n             "storageUri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--enabled', $('Remove the enabled value.'))
  .option('--storage-uri', $('Remove the storage-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/diagnosticsProfile/vmDiagnostics';
    var anySubItem = false || options.enabled || options.storageUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.enabled) {
        subItemPath = options.path + '/enabled';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storageUri) {
        subItemPath = options.path + '/storageUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  ContainerServices Delete
  --resource-group
  --name
*/
  var containerServicesDelete = cli.category('acs')
  .description($('Commands to manage your container services.  '));
  containerServicesDelete.command('delete [resource-group] [name]')
  .description($('Deletes the specified container service.'))
  .usage('[options] <resource-group> <name>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.containerServices.deleteMethod(resourceGroup, name, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  ContainerServices Get
  --resource-group
  --name
*/
  var containerServicesGet = cli.category('acs')
  .description($('Commands to manage your container services.  '));
  containerServicesGet.command('show [resource-group] [name]')
  .description($('Gets the properties of the specified container service.'))
  .usage('[options] <resource-group> <name>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.containerServices.get(resourceGroup, name, _);
    if (cli.output.format().json) {
      cli.output.json(result);
    }
    else {
      display(cli, result);
    }
  });
/*
  ContainerServices ListByResourceGroup
  --resource-group
*/
  var containerServicesListByResourceGroup = cli.category('acs')
  .description($('Commands to manage your container services.  '));
  containerServicesListByResourceGroup.command('list [resource-group]')
  .description($('Gets a list of container services in the specified resource group.'))
  .usage('[options] <resource-group>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, options, _) {
    cli.output.verbose('resourceGroup = ' + resourceGroup);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = null;
    if (utils.stringIsNullOrEmpty(resourceGroup)) {
      result = computeManagementClient.containerServices.list(_);
    }
    else {
      result = computeManagementClient.containerServices.listByResourceGroup(resourceGroup, _);
    }
    var nextPageLink = result.nextLink;
    while (nextPageLink) {
      var pageResult = computeManagementClient.containerServices.listByResourceGroupNext(nextPageLink, _);
      pageResult.forEach(function(item) {
        result.push(item);
      });
      nextPageLink = pageResult.nextLink;
    }

    if (cli.output.format().json) {
      cli.output.json(result);
    }
    else {
      cli.output.table(result, function (row, item) {
        var rgName = item.id ? utils.parseResourceReferenceUri(item.id).resourceGroupName : null;
        row.cell($('ResourceGroupName'), rgName);
        row.cell($('Name'), item.name);
        row.cell($('ProvisioningState'), item.provisioningState);
        row.cell($('Location'), item.location);
      });
    }
  });


};
