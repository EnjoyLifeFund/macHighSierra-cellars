/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

/*

Generated Command List:

azure managed-image config image set
--parameter-file $f
--parse
--source-virtual-machine $sourceVirtualMachine
--storage-profile $storageProfile
--provisioning-state $provisioningState
--id $id
--name $name
--type $type
--location $location
--tags $tags

azure managed-image config image delete
--parameter-file $f
--source-virtual-machine
--storage-profile
--provisioning-state
--id
--name
--type
--location
--tags

azure managed-image config source-virtual-machine set
--parameter-file $f
--parse
--id $id

azure managed-image config source-virtual-machine delete
--parameter-file $f
--id

azure managed-image config storage-profile set
--parameter-file $f
--parse
--os-disk $osDisk
--data-disks $dataDisks

azure managed-image config storage-profile delete
--parameter-file $f
--os-disk
--data-disks

azure managed-image config os-disk set
--parameter-file $f
--parse
--os-type $osType
--os-state $osState
--snapshot $snapshot
--managed-disk $managedDisk
--blob-uri $blobUri
--caching $caching
--disk-size-g-b $diskSizeGB
--storage-account-type $storageAccountType

azure managed-image config os-disk delete
--parameter-file $f
--os-type
--os-state
--snapshot
--managed-disk
--blob-uri
--caching
--disk-size-g-b
--storage-account-type

azure managed-image config snapshot set
--parameter-file $f
--parse
--id $id

azure managed-image config snapshot delete
--parameter-file $f
--id

azure managed-image config managed-disk set
--parameter-file $f
--parse
--id $id

azure managed-image config managed-disk delete
--parameter-file $f
--id

azure managed-image config data-disks set
--parameter-file $f
--index $i
--value $v
--parse
--lun $lun
--snapshot $snapshot
--managed-disk $managedDisk
--blob-uri $blobUri
--caching $caching
--disk-size-g-b $diskSizeGB
--storage-account-type $storageAccountType

azure managed-image config data-disks delete
--parameter-file $f
--index $pindex
--lun
--snapshot
--managed-disk
--blob-uri
--caching
--disk-size-g-b
--storage-account-type

azure managed-image config data-disks-snapshot set
--parameter-file $f
--data-disks-index $i
--parse
--id $id

azure managed-image config data-disks-snapshot delete
--parameter-file $f
--data-disks-index $pdata-disks-index
--id

azure managed-image config data-disks-managed-disk set
--parameter-file $f
--data-disks-index $i
--parse
--id $id

azure managed-image config data-disks-managed-disk delete
--parameter-file $f
--data-disks-index $pdata-disks-index
--id

azure managed-image create 
--resource-group $p0
--name $p1
--parameters $p2
--parameter-file $f

azure managed-image config generate 
--parameter-file $f

azure managed-image config patch 
--parameter-file $f

azure managed-image delete 
--resource-group $p0
--name $p1

azure managed-image show 
--resource-group $p0
--name $p1
--expand $p2

azure managed-image list 
--resource-group $p0


*/

'use strict';
var fs = require('fs');
var jsonpatch = require('fast-json-patch');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;
function beautify(jsonText) {
  var obj = JSON.parse(jsonText);
  return JSON.stringify(obj, null, 2);
}
function capitalize(str) {
  if (str && str.length >= 1) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  else {
    return str;
  }
}

function makeTuple(k, v, d) {
  return { key : k, value : v, depth : d };
}

function displayImpl(o, key, depth, arr) {
  if ((!!o) && (o.constructor === Object || o.constructor === Array)) {
    arr.push(makeTuple(key, '', depth));
    var len = 0;
    Object.keys(o).forEach(function(k1) {
      var v1 = o[k1];
      var p1 = o.constructor === Array ? '#' : '';
      var w = displayImpl(v1, p1 + k1, depth + 1, arr);
      if (w > len) {
        len = w;
      }
    });
    return len;
  }
  else {
    arr.push(makeTuple(key, o ? o.toString() : '', depth));
    return depth * 2 + (key ? key.toString().length : 0);
  }
}

function display(cli, o) {
  var arr = [];
  var width = displayImpl(o, '', 0, arr);
  for (var t in arr) {
    var prebuf = new Array(arr[t].depth * 2).join(' ');
    var key = arr[t].key ? arr[t].key : '';
    var postLen = width - (prebuf.length + key.length);
    var postbuf = new Array(postLen > 0 ? postLen : 0).join(' ');
    var str = prebuf + capitalize(key) + postbuf;
    if (arr[t].value) {
      str += ' : ' + arr[t].value;
    }
    cli.output.data(str);
  }
}
exports.init = function (cli) {



/*
  Images CreateOrUpdate
  --resource-group
  --name
  --parameters
=============================================
{
  "sourceVirtualMachine":{
    "id":""
  },
  "storageProfile":{
    "osDisk":{
      "osType":"",
      "osState":"",
      "snapshot":{
        "id":""
      },
      "managedDisk":{
        "id":""
      },
      "blobUri":"",
      "caching":null,
      "diskSizeGB":null,
      "storageAccountType":null
    },
    "dataDisks":[
      {
        "lun":"",
        "snapshot":{
          "id":""
        },
        "managedDisk":{
          "id":""
        },
        "blobUri":"",
        "caching":null,
        "diskSizeGB":null,
        "storageAccountType":null
      }
    ]
  },
  "provisioningState":"",
  "id":null,
  "name":null,
  "type":null,
  "location":"",
  "tags":{
  }
}
*/
  var imagesCreateOrUpdate = cli.category('managed-image')
  .description($('Commands to manage your images.  '));
  imagesCreateOrUpdate.command('create [resource-group] [name] [parameters]')
  .description($('Create or update an image.'))
  .usage('[options] <resource-group> <name> <parameters>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, parameters, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.images.createOrUpdate(resourceGroup, name, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var imagesCreateOrUpdatecreateOrUpdateParameters2 = imagesCreateOrUpdate.category('config')
  .description($('Commands to manage configuration of images in the parameter file.'));
  imagesCreateOrUpdatecreateOrUpdateParameters2.command('create')
  .description($('Generate imagesCreateOrUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"sourceVirtualMachine\":{\"id\":\"\"},\"storageProfile\":{\"osDisk\":{\"osType\":\"\",\"osState\":\"\",\"snapshot\":{\"id\":\"\"},\"managedDisk\":{\"id\":\"\"},\"blobUri\":\"\",\"caching\":null,\"diskSizeGB\":null,\"storageAccountType\":null},\"dataDisks\":[{\"lun\":\"\",\"snapshot\":{\"id\":\"\"},\"managedDisk\":{\"id\":\"\"},\"blobUri\":\"\",\"caching\":null,\"diskSizeGB\":null,\"storageAccountType\":null}]},\"provisioningState\":\"\",\"id\":null,\"name\":null,\"type\":null,\"location\":\"\",\"tags\":{}}', _);
    var filePath = 'imagesCreateOrUpdate_createOrUpdate.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"sourceVirtualMachine\":{\r\n\"id\":\"\"\r\n},\r\n\"storageProfile\":{\r\n\"osDisk\":{\r\n\"osType\":\"\",\r\n\"osState\":\"\",\r\n\"snapshot\":{\r\n\"id\":\"\"\r\n},\r\n\"managedDisk\":{\r\n\"id\":\"\"\r\n},\r\n\"blobUri\":\"\",\r\n\"caching\":null,\r\n\"diskSizeGB\":null,\r\n\"storageAccountType\":null\r\n},\r\n\"dataDisks\":[\r\n{\r\n\"lun\":\"\",\r\n\"snapshot\":{\r\n\"id\":\"\"\r\n},\r\n\"managedDisk\":{\r\n\"id\":\"\"\r\n},\r\n\"blobUri\":\"\",\r\n\"caching\":null,\r\n\"diskSizeGB\":null,\r\n\"storageAccountType\":null\r\n}\r\n]\r\n},\r\n\"provisioningState\":\"\",\r\n\"id\":null,\r\n\"name\":null,\r\n\"type\":null,\r\n\"location\":\"\",\r\n\"tags\":{\r\n}\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  imagesCreateOrUpdatecreateOrUpdateParameters2.command('patch')
  .description($('Command to patch imagesCreateOrUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config set image
  var catparametersCreateOrUpdateImagesImage01 = cli.category('managed-image');
  var parametersCreateOrUpdateImagesImage01 = catparametersCreateOrUpdateImagesImage01.category('config')
  .description($('Commands to manage configuration of images in the parameter file.'));
  var setparametersCreateOrUpdateImagesImage01 = parametersCreateOrUpdateImagesImage01.category('image')
  .description($('Commands to configure image of managed-image in config file.'));
  setparametersCreateOrUpdateImagesImage01.command('set')
  .description($('Set image in config string or files, e.g. \r\n{\r\n  "sourceVirtualMachine":{\r\n    "id":""\r\n  },\r\n  "storageProfile":{\r\n    "osDisk":{\r\n      "osType":"",\r\n      "osState":"",\r\n      "snapshot":{\r\n        "id":""\r\n      },\r\n      "managedDisk":{\r\n        "id":""\r\n      },\r\n      "blobUri":"",\r\n      "caching":null,\r\n      "diskSizeGB":null,\r\n      "storageAccountType":null\r\n    },\r\n    "dataDisks":[\r\n      {\r\n        "lun":"",\r\n        "snapshot":{\r\n          "id":""\r\n        },\r\n        "managedDisk":{\r\n          "id":""\r\n        },\r\n        "blobUri":"",\r\n        "caching":null,\r\n        "diskSizeGB":null,\r\n        "storageAccountType":null\r\n      }\r\n    ]\r\n  },\r\n  "provisioningState":"",\r\n  "id":null,\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--source-virtual-machine <sourceVirtualMachine>', $('Set the source-virtual-machine value.'))
  .option('--storage-profile <storageProfile>', $('Set the storage-profile value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'sourceVirtualMachine';
    if (options.sourceVirtualMachine) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sourceVirtualMachine);
      cli.output.verbose('================================================');
      if (options.parse && options.sourceVirtualMachine) {
        options.sourceVirtualMachine = JSON.parse(options.sourceVirtualMachine);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceVirtualMachine}]);
    }
    paramPath = options.path + '/' + 'storageProfile';
    if (options.storageProfile) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storageProfile);
      cli.output.verbose('================================================');
      if (options.parse && options.storageProfile) {
        options.storageProfile = JSON.parse(options.storageProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storageProfile}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    if (options.provisioningState) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.provisioningState);
      cli.output.verbose('================================================');
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    if (options.type) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.type);
      cli.output.verbose('================================================');
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    if (options.location) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.location);
      cli.output.verbose('================================================');
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    if (options.tags) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.tags);
      cli.output.verbose('================================================');
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete image
  var catparametersCreateOrUpdateImagesImage11 = cli.category('managed-image');
  var parametersCreateOrUpdateImagesImage11 = catparametersCreateOrUpdateImagesImage11.category('config')
  .description($('Commands to manage configuration of images in the parameter file.'));
  var deleteparametersCreateOrUpdateImagesImage11 = parametersCreateOrUpdateImagesImage11.category('image')
  .description($('Commands to configure image of managed-image in config file.'));
  deleteparametersCreateOrUpdateImagesImage11.command('delete')
  .description($('Remove image in config string or files, e.g. \r\n{\r\n  "sourceVirtualMachine":{\r\n    "id":""\r\n  },\r\n  "storageProfile":{\r\n    "osDisk":{\r\n      "osType":"",\r\n      "osState":"",\r\n      "snapshot":{\r\n        "id":""\r\n      },\r\n      "managedDisk":{\r\n        "id":""\r\n      },\r\n      "blobUri":"",\r\n      "caching":null,\r\n      "diskSizeGB":null,\r\n      "storageAccountType":null\r\n    },\r\n    "dataDisks":[\r\n      {\r\n        "lun":"",\r\n        "snapshot":{\r\n          "id":""\r\n        },\r\n        "managedDisk":{\r\n          "id":""\r\n        },\r\n        "blobUri":"",\r\n        "caching":null,\r\n        "diskSizeGB":null,\r\n        "storageAccountType":null\r\n      }\r\n    ]\r\n  },\r\n  "provisioningState":"",\r\n  "id":null,\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--source-virtual-machine', $('Remove the source-virtual-machine value.'))
  .option('--storage-profile', $('Remove the storage-profile value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.sourceVirtualMachine || options.storageProfile || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.sourceVirtualMachine) {
        subItemPath = options.path + '/sourceVirtualMachine';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storageProfile) {
        subItemPath = options.path + '/storageProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set source-virtual-machine
  var catparametersCreateOrUpdateImagesSourceVirtualMachine0SVM1 = cli.category('managed-image');
  var parametersCreateOrUpdateImagesSourceVirtualMachine0SVM1 = catparametersCreateOrUpdateImagesSourceVirtualMachine0SVM1.category('config')
  .description($('Commands to manage configuration of images in the parameter file.'));
  var setparametersCreateOrUpdateImagesSourceVirtualMachine0SVM1 = parametersCreateOrUpdateImagesSourceVirtualMachine0SVM1.category('source-virtual-machine')
  .description($('Commands to configure source-virtual-machine of managed-image in config file.'));
  setparametersCreateOrUpdateImagesSourceVirtualMachine0SVM1.command('set')
  .description($('Set source-virtual-machine in config string or files, e.g. \r\n         {\r\n           ...\r\n           "sourceVirtualMachine" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/sourceVirtualMachine';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete source-virtual-machine
  var catparametersCreateOrUpdateImagesSourceVirtualMachine1SVM1 = cli.category('managed-image');
  var parametersCreateOrUpdateImagesSourceVirtualMachine1SVM1 = catparametersCreateOrUpdateImagesSourceVirtualMachine1SVM1.category('config')
  .description($('Commands to manage configuration of images in the parameter file.'));
  var deleteparametersCreateOrUpdateImagesSourceVirtualMachine1SVM1 = parametersCreateOrUpdateImagesSourceVirtualMachine1SVM1.category('source-virtual-machine')
  .description($('Commands to configure source-virtual-machine of managed-image in config file.'));
  deleteparametersCreateOrUpdateImagesSourceVirtualMachine1SVM1.command('delete')
  .description($('Remove source-virtual-machine in config string or files, e.g. \r\n         {\r\n           ...\r\n           "sourceVirtualMachine" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/sourceVirtualMachine';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set storage-profile
  var catparametersCreateOrUpdateImagesStorageProfile0SP1 = cli.category('managed-image');
  var parametersCreateOrUpdateImagesStorageProfile0SP1 = catparametersCreateOrUpdateImagesStorageProfile0SP1.category('config')
  .description($('Commands to manage configuration of images in the parameter file.'));
  var setparametersCreateOrUpdateImagesStorageProfile0SP1 = parametersCreateOrUpdateImagesStorageProfile0SP1.category('storage-profile')
  .description($('Commands to configure storage-profile of managed-image in config file.'));
  setparametersCreateOrUpdateImagesStorageProfile0SP1.command('set')
  .description($('Set storage-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "storageProfile" : {\r\n             "osDisk":{\r\n               "osType":"",\r\n               "osState":"",\r\n               "snapshot":{\r\n                 "id":""\r\n               },\r\n               "managedDisk":{\r\n                 "id":""\r\n               },\r\n               "blobUri":"",\r\n               "caching":null,\r\n               "diskSizeGB":null,\r\n               "storageAccountType":null\r\n             },\r\n             "dataDisks":[\r\n               {\r\n                 "lun":"",\r\n                 "snapshot":{\r\n                   "id":""\r\n                 },\r\n                 "managedDisk":{\r\n                   "id":""\r\n                 },\r\n                 "blobUri":"",\r\n                 "caching":null,\r\n                 "diskSizeGB":null,\r\n                 "storageAccountType":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--os-disk <osDisk>', $('Set the os-disk value.'))
  .option('--data-disks <dataDisks>', $('Set the data-disks value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/storageProfile';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'osDisk';
    if (options.osDisk) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.osDisk);
      cli.output.verbose('================================================');
      if (options.parse && options.osDisk) {
        options.osDisk = JSON.parse(options.osDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.osDisk}]);
    }
    paramPath = options.path + '/' + 'dataDisks';
    if (options.dataDisks) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.dataDisks);
      cli.output.verbose('================================================');
      if (options.parse && options.dataDisks) {
        options.dataDisks = JSON.parse(options.dataDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDisks}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete storage-profile
  var catparametersCreateOrUpdateImagesStorageProfile1SP1 = cli.category('managed-image');
  var parametersCreateOrUpdateImagesStorageProfile1SP1 = catparametersCreateOrUpdateImagesStorageProfile1SP1.category('config')
  .description($('Commands to manage configuration of images in the parameter file.'));
  var deleteparametersCreateOrUpdateImagesStorageProfile1SP1 = parametersCreateOrUpdateImagesStorageProfile1SP1.category('storage-profile')
  .description($('Commands to configure storage-profile of managed-image in config file.'));
  deleteparametersCreateOrUpdateImagesStorageProfile1SP1.command('delete')
  .description($('Remove storage-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "storageProfile" : {\r\n             "osDisk":{\r\n               "osType":"",\r\n               "osState":"",\r\n               "snapshot":{\r\n                 "id":""\r\n               },\r\n               "managedDisk":{\r\n                 "id":""\r\n               },\r\n               "blobUri":"",\r\n               "caching":null,\r\n               "diskSizeGB":null,\r\n               "storageAccountType":null\r\n             },\r\n             "dataDisks":[\r\n               {\r\n                 "lun":"",\r\n                 "snapshot":{\r\n                   "id":""\r\n                 },\r\n                 "managedDisk":{\r\n                   "id":""\r\n                 },\r\n                 "blobUri":"",\r\n                 "caching":null,\r\n                 "diskSizeGB":null,\r\n                 "storageAccountType":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--os-disk', $('Remove the os-disk value.'))
  .option('--data-disks', $('Remove the data-disks value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/storageProfile';
    var anySubItem = false || options.osDisk || options.dataDisks;
    if (anySubItem) {
      var subItemPath = null;
      if (options.osDisk) {
        subItemPath = options.path + '/osDisk';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.dataDisks) {
        subItemPath = options.path + '/dataDisks';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set os-disk
  var catparametersCreateOrUpdateImagesOsDisk0SPoD1 = cli.category('managed-image');
  var parametersCreateOrUpdateImagesOsDisk0SPoD1 = catparametersCreateOrUpdateImagesOsDisk0SPoD1.category('config')
  .description($('Commands to manage configuration of images in the parameter file.'));
  var setparametersCreateOrUpdateImagesOsDisk0SPoD1 = parametersCreateOrUpdateImagesOsDisk0SPoD1.category('os-disk')
  .description($('Commands to configure os-disk of managed-image in config file.'));
  setparametersCreateOrUpdateImagesOsDisk0SPoD1.command('set')
  .description($('Set os-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           "osDisk" : {\r\n             "osType":"",\r\n             "osState":"",\r\n             "snapshot":{\r\n               "id":""\r\n             },\r\n             "managedDisk":{\r\n               "id":""\r\n             },\r\n             "blobUri":"",\r\n             "caching":null,\r\n             "diskSizeGB":null,\r\n             "storageAccountType":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--os-type <osType>', $('Set the os-type value.'))
  .option('--os-state <osState>', $('Set the os-state value.'))
  .option('--snapshot <snapshot>', $('Set the snapshot value.'))
  .option('--managed-disk <managedDisk>', $('Set the managed-disk value.'))
  .option('--blob-uri <blobUri>', $('Set the blob-uri value.'))
  .option('--caching <caching>', $('Set the caching value.'))
  .option('--disk-size-g-b <diskSizeGB>', $('Set the disk-size-g-b value.'))
  .option('--storage-account-type <storageAccountType>', $('Set the storage-account-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/storageProfile/osDisk';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'osType';
    if (options.osType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.osType);
      cli.output.verbose('================================================');
      if (options.parse && options.osType) {
        options.osType = JSON.parse(options.osType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.osType}]);
    }
    paramPath = options.path + '/' + 'osState';
    if (options.osState) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.osState);
      cli.output.verbose('================================================');
      if (options.parse && options.osState) {
        options.osState = JSON.parse(options.osState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.osState}]);
    }
    paramPath = options.path + '/' + 'snapshot';
    if (options.snapshot) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.snapshot);
      cli.output.verbose('================================================');
      if (options.parse && options.snapshot) {
        options.snapshot = JSON.parse(options.snapshot);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.snapshot}]);
    }
    paramPath = options.path + '/' + 'managedDisk';
    if (options.managedDisk) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.managedDisk);
      cli.output.verbose('================================================');
      if (options.parse && options.managedDisk) {
        options.managedDisk = JSON.parse(options.managedDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.managedDisk}]);
    }
    paramPath = options.path + '/' + 'blobUri';
    if (options.blobUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.blobUri);
      cli.output.verbose('================================================');
      if (options.parse && options.blobUri) {
        options.blobUri = JSON.parse(options.blobUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.blobUri}]);
    }
    paramPath = options.path + '/' + 'caching';
    if (options.caching) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.caching);
      cli.output.verbose('================================================');
      if (options.parse && options.caching) {
        options.caching = JSON.parse(options.caching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.caching}]);
    }
    paramPath = options.path + '/' + 'diskSizeGB';
    if (options.diskSizeGB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.diskSizeGB);
      cli.output.verbose('================================================');
      if (options.parse && options.diskSizeGB) {
        options.diskSizeGB = JSON.parse(options.diskSizeGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskSizeGB}]);
    }
    paramPath = options.path + '/' + 'storageAccountType';
    if (options.storageAccountType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storageAccountType);
      cli.output.verbose('================================================');
      if (options.parse && options.storageAccountType) {
        options.storageAccountType = JSON.parse(options.storageAccountType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storageAccountType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete os-disk
  var catparametersCreateOrUpdateImagesOsDisk1SPoD1 = cli.category('managed-image');
  var parametersCreateOrUpdateImagesOsDisk1SPoD1 = catparametersCreateOrUpdateImagesOsDisk1SPoD1.category('config')
  .description($('Commands to manage configuration of images in the parameter file.'));
  var deleteparametersCreateOrUpdateImagesOsDisk1SPoD1 = parametersCreateOrUpdateImagesOsDisk1SPoD1.category('os-disk')
  .description($('Commands to configure os-disk of managed-image in config file.'));
  deleteparametersCreateOrUpdateImagesOsDisk1SPoD1.command('delete')
  .description($('Remove os-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           "osDisk" : {\r\n             "osType":"",\r\n             "osState":"",\r\n             "snapshot":{\r\n               "id":""\r\n             },\r\n             "managedDisk":{\r\n               "id":""\r\n             },\r\n             "blobUri":"",\r\n             "caching":null,\r\n             "diskSizeGB":null,\r\n             "storageAccountType":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--os-type', $('Remove the os-type value.'))
  .option('--os-state', $('Remove the os-state value.'))
  .option('--snapshot', $('Remove the snapshot value.'))
  .option('--managed-disk', $('Remove the managed-disk value.'))
  .option('--blob-uri', $('Remove the blob-uri value.'))
  .option('--caching', $('Remove the caching value.'))
  .option('--disk-size-g-b', $('Remove the disk-size-g-b value.'))
  .option('--storage-account-type', $('Remove the storage-account-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/storageProfile/osDisk';
    var anySubItem = false || options.osType || options.osState || options.snapshot || options.managedDisk || options.blobUri || options.caching || options.diskSizeGB || options.storageAccountType;
    if (anySubItem) {
      var subItemPath = null;
      if (options.osType) {
        subItemPath = options.path + '/osType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.osState) {
        subItemPath = options.path + '/osState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.snapshot) {
        subItemPath = options.path + '/snapshot';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.managedDisk) {
        subItemPath = options.path + '/managedDisk';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.blobUri) {
        subItemPath = options.path + '/blobUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.caching) {
        subItemPath = options.path + '/caching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.diskSizeGB) {
        subItemPath = options.path + '/diskSizeGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storageAccountType) {
        subItemPath = options.path + '/storageAccountType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set snapshot
  var catparametersCreateOrUpdateImagesSnapshot0SPoDs1 = cli.category('managed-image');
  var parametersCreateOrUpdateImagesSnapshot0SPoDs1 = catparametersCreateOrUpdateImagesSnapshot0SPoDs1.category('config')
  .description($('Commands to manage configuration of images in the parameter file.'));
  var setparametersCreateOrUpdateImagesSnapshot0SPoDs1 = parametersCreateOrUpdateImagesSnapshot0SPoDs1.category('snapshot')
  .description($('Commands to configure snapshot of managed-image in config file.'));
  setparametersCreateOrUpdateImagesSnapshot0SPoDs1.command('set')
  .description($('Set snapshot in config string or files, e.g. \r\n         {\r\n           ...\r\n           "snapshot" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/storageProfile/osDisk/snapshot';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete snapshot
  var catparametersCreateOrUpdateImagesSnapshot1SPoDs1 = cli.category('managed-image');
  var parametersCreateOrUpdateImagesSnapshot1SPoDs1 = catparametersCreateOrUpdateImagesSnapshot1SPoDs1.category('config')
  .description($('Commands to manage configuration of images in the parameter file.'));
  var deleteparametersCreateOrUpdateImagesSnapshot1SPoDs1 = parametersCreateOrUpdateImagesSnapshot1SPoDs1.category('snapshot')
  .description($('Commands to configure snapshot of managed-image in config file.'));
  deleteparametersCreateOrUpdateImagesSnapshot1SPoDs1.command('delete')
  .description($('Remove snapshot in config string or files, e.g. \r\n         {\r\n           ...\r\n           "snapshot" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/storageProfile/osDisk/snapshot';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set managed-disk
  var catparametersCreateOrUpdateImagesManagedDisk0SPoDmD1 = cli.category('managed-image');
  var parametersCreateOrUpdateImagesManagedDisk0SPoDmD1 = catparametersCreateOrUpdateImagesManagedDisk0SPoDmD1.category('config')
  .description($('Commands to manage configuration of images in the parameter file.'));
  var setparametersCreateOrUpdateImagesManagedDisk0SPoDmD1 = parametersCreateOrUpdateImagesManagedDisk0SPoDmD1.category('managed-disk')
  .description($('Commands to configure managed-disk of managed-image in config file.'));
  setparametersCreateOrUpdateImagesManagedDisk0SPoDmD1.command('set')
  .description($('Set managed-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           "managedDisk" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/storageProfile/osDisk/managedDisk';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete managed-disk
  var catparametersCreateOrUpdateImagesManagedDisk1SPoDmD1 = cli.category('managed-image');
  var parametersCreateOrUpdateImagesManagedDisk1SPoDmD1 = catparametersCreateOrUpdateImagesManagedDisk1SPoDmD1.category('config')
  .description($('Commands to manage configuration of images in the parameter file.'));
  var deleteparametersCreateOrUpdateImagesManagedDisk1SPoDmD1 = parametersCreateOrUpdateImagesManagedDisk1SPoDmD1.category('managed-disk')
  .description($('Commands to configure managed-disk of managed-image in config file.'));
  deleteparametersCreateOrUpdateImagesManagedDisk1SPoDmD1.command('delete')
  .description($('Remove managed-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           "managedDisk" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/storageProfile/osDisk/managedDisk';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set data-disks
  var catparametersCreateOrUpdateImagesDataDisks0SPdD1 = cli.category('managed-image');
  var parametersCreateOrUpdateImagesDataDisks0SPdD1 = catparametersCreateOrUpdateImagesDataDisks0SPdD1.category('config')
  .description($('Commands to manage configuration of images in the parameter file.'));
  var setparametersCreateOrUpdateImagesDataDisks0SPdD1 = parametersCreateOrUpdateImagesDataDisks0SPdD1.category('data-disks')
  .description($('Commands to configure data-disks of managed-image in config file.'));
  setparametersCreateOrUpdateImagesDataDisks0SPdD1.command('set')
  .description($('Set data-disks in config string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDisks" : {\r\n             "lun":"",\r\n             "snapshot":{\r\n               "id":""\r\n             },\r\n             "managedDisk":{\r\n               "id":""\r\n             },\r\n             "blobUri":"",\r\n             "caching":null,\r\n             "diskSizeGB":null,\r\n             "storageAccountType":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--lun <lun>', $('Set the lun value.'))
  .option('--snapshot <snapshot>', $('Set the snapshot value.'))
  .option('--managed-disk <managedDisk>', $('Set the managed-disk value.'))
  .option('--blob-uri <blobUri>', $('Set the blob-uri value.'))
  .option('--caching <caching>', $('Set the caching value.'))
  .option('--disk-size-g-b <diskSizeGB>', $('Set the disk-size-g-b value.'))
  .option('--storage-account-type <storageAccountType>', $('Set the storage-account-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/storageProfile/dataDisks' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'lun';
    if (options.lun) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.lun);
      cli.output.verbose('================================================');
      if (options.parse && options.lun) {
        options.lun = JSON.parse(options.lun);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.lun}]);
    }
    paramPath = options.path + '/' + 'snapshot';
    if (options.snapshot) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.snapshot);
      cli.output.verbose('================================================');
      if (options.parse && options.snapshot) {
        options.snapshot = JSON.parse(options.snapshot);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.snapshot}]);
    }
    paramPath = options.path + '/' + 'managedDisk';
    if (options.managedDisk) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.managedDisk);
      cli.output.verbose('================================================');
      if (options.parse && options.managedDisk) {
        options.managedDisk = JSON.parse(options.managedDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.managedDisk}]);
    }
    paramPath = options.path + '/' + 'blobUri';
    if (options.blobUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.blobUri);
      cli.output.verbose('================================================');
      if (options.parse && options.blobUri) {
        options.blobUri = JSON.parse(options.blobUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.blobUri}]);
    }
    paramPath = options.path + '/' + 'caching';
    if (options.caching) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.caching);
      cli.output.verbose('================================================');
      if (options.parse && options.caching) {
        options.caching = JSON.parse(options.caching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.caching}]);
    }
    paramPath = options.path + '/' + 'diskSizeGB';
    if (options.diskSizeGB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.diskSizeGB);
      cli.output.verbose('================================================');
      if (options.parse && options.diskSizeGB) {
        options.diskSizeGB = JSON.parse(options.diskSizeGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskSizeGB}]);
    }
    paramPath = options.path + '/' + 'storageAccountType';
    if (options.storageAccountType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storageAccountType);
      cli.output.verbose('================================================');
      if (options.parse && options.storageAccountType) {
        options.storageAccountType = JSON.parse(options.storageAccountType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storageAccountType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete data-disks
  var catparametersCreateOrUpdateImagesDataDisks1SPdD1 = cli.category('managed-image');
  var parametersCreateOrUpdateImagesDataDisks1SPdD1 = catparametersCreateOrUpdateImagesDataDisks1SPdD1.category('config')
  .description($('Commands to manage configuration of images in the parameter file.'));
  var deleteparametersCreateOrUpdateImagesDataDisks1SPdD1 = parametersCreateOrUpdateImagesDataDisks1SPdD1.category('data-disks')
  .description($('Commands to configure data-disks of managed-image in config file.'));
  deleteparametersCreateOrUpdateImagesDataDisks1SPdD1.command('delete')
  .description($('Remove data-disks in config string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDisks" : {\r\n             "lun":"",\r\n             "snapshot":{\r\n               "id":""\r\n             },\r\n             "managedDisk":{\r\n               "id":""\r\n             },\r\n             "blobUri":"",\r\n             "caching":null,\r\n             "diskSizeGB":null,\r\n             "storageAccountType":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--lun', $('Remove the lun value.'))
  .option('--snapshot', $('Remove the snapshot value.'))
  .option('--managed-disk', $('Remove the managed-disk value.'))
  .option('--blob-uri', $('Remove the blob-uri value.'))
  .option('--caching', $('Remove the caching value.'))
  .option('--disk-size-g-b', $('Remove the disk-size-g-b value.'))
  .option('--storage-account-type', $('Remove the storage-account-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/storageProfile/dataDisks' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.lun || options.snapshot || options.managedDisk || options.blobUri || options.caching || options.diskSizeGB || options.storageAccountType;
    if (anySubItem) {
      var subItemPath = null;
      if (options.lun) {
        subItemPath = options.path + '/lun';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.snapshot) {
        subItemPath = options.path + '/snapshot';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.managedDisk) {
        subItemPath = options.path + '/managedDisk';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.blobUri) {
        subItemPath = options.path + '/blobUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.caching) {
        subItemPath = options.path + '/caching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.diskSizeGB) {
        subItemPath = options.path + '/diskSizeGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storageAccountType) {
        subItemPath = options.path + '/storageAccountType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set data-disks-snapshot
  var catparametersCreateOrUpdateImagesSnapshot0SPdDDIs1 = cli.category('managed-image');
  var parametersCreateOrUpdateImagesSnapshot0SPdDDIs1 = catparametersCreateOrUpdateImagesSnapshot0SPdDDIs1.category('config')
  .description($('Commands to manage configuration of images in the parameter file.'));
  var setparametersCreateOrUpdateImagesSnapshot0SPdDDIs1 = parametersCreateOrUpdateImagesSnapshot0SPdDDIs1.category('data-disks-snapshot')
  .description($('Commands to configure data-disks-snapshot of managed-image in config file.'));
  setparametersCreateOrUpdateImagesSnapshot0SPdDDIs1.command('set')
  .description($('Set data-disks-snapshot in config string or files, e.g. \r\n         {\r\n           ...\r\n           "snapshot" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--data-disks-index <data-disks-index>', $('Indexer: data-disks-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/storageProfile/dataDisks/' + options.dataDisksIndex + '/snapshot';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete data-disks-snapshot
  var catparametersCreateOrUpdateImagesSnapshot1SPdDDIs1 = cli.category('managed-image');
  var parametersCreateOrUpdateImagesSnapshot1SPdDDIs1 = catparametersCreateOrUpdateImagesSnapshot1SPdDDIs1.category('config')
  .description($('Commands to manage configuration of images in the parameter file.'));
  var deleteparametersCreateOrUpdateImagesSnapshot1SPdDDIs1 = parametersCreateOrUpdateImagesSnapshot1SPdDDIs1.category('data-disks-snapshot')
  .description($('Commands to configure data-disks-snapshot of managed-image in config file.'));
  deleteparametersCreateOrUpdateImagesSnapshot1SPdDDIs1.command('delete')
  .description($('Remove data-disks-snapshot in config string or files, e.g. \r\n         {\r\n           ...\r\n           "snapshot" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--data-disks-index <data-disks-index>', $('Indexer: data-disks-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/storageProfile/dataDisks/' + options.dataDisksIndex + '/snapshot';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set data-disks-managed-disk
  var catparametersCreateOrUpdateImagesManagedDisk0SPdDDImD1 = cli.category('managed-image');
  var parametersCreateOrUpdateImagesManagedDisk0SPdDDImD1 = catparametersCreateOrUpdateImagesManagedDisk0SPdDDImD1.category('config')
  .description($('Commands to manage configuration of images in the parameter file.'));
  var setparametersCreateOrUpdateImagesManagedDisk0SPdDDImD1 = parametersCreateOrUpdateImagesManagedDisk0SPdDDImD1.category('data-disks-managed-disk')
  .description($('Commands to configure data-disks-managed-disk of managed-image in config file.'));
  setparametersCreateOrUpdateImagesManagedDisk0SPdDDImD1.command('set')
  .description($('Set data-disks-managed-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           "managedDisk" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--data-disks-index <data-disks-index>', $('Indexer: data-disks-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/storageProfile/dataDisks/' + options.dataDisksIndex + '/managedDisk';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete data-disks-managed-disk
  var catparametersCreateOrUpdateImagesManagedDisk1SPdDDImD1 = cli.category('managed-image');
  var parametersCreateOrUpdateImagesManagedDisk1SPdDDImD1 = catparametersCreateOrUpdateImagesManagedDisk1SPdDDImD1.category('config')
  .description($('Commands to manage configuration of images in the parameter file.'));
  var deleteparametersCreateOrUpdateImagesManagedDisk1SPdDDImD1 = parametersCreateOrUpdateImagesManagedDisk1SPdDDImD1.category('data-disks-managed-disk')
  .description($('Commands to configure data-disks-managed-disk of managed-image in config file.'));
  deleteparametersCreateOrUpdateImagesManagedDisk1SPdDDImD1.command('delete')
  .description($('Remove data-disks-managed-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           "managedDisk" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--data-disks-index <data-disks-index>', $('Indexer: data-disks-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/storageProfile/dataDisks/' + options.dataDisksIndex + '/managedDisk';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  Images Delete
  --resource-group
  --name
*/
  var imagesDelete = cli.category('managed-image')
  .description($('Commands to manage your images.  '));
  imagesDelete.command('delete [resource-group] [name]')
  .description($('Deletes an Image.'))
  .usage('[options] <resource-group> <name>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.images.deleteMethod(resourceGroup, name, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  Images Get
  --resource-group
  --name
  --expand
*/
  var imagesGet = cli.category('managed-image')
  .description($('Commands to manage your images.  '));
  imagesGet.command('show [resource-group] [name] [expand]')
  .description($('Gets an image.'))
  .usage('[options] <resource-group> <name> <expand>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('--expand <expand>', $('expand'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, expand, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!expand) {
      expand = cli.interaction.promptIfNotGiven($('expand : '), expand, _);
    }

    cli.output.verbose('expand = ' + expand);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.images.get(resourceGroup, name, expand, _);
    if (cli.output.format().json) {
      cli.output.json(result);
    }
    else {
      display(cli, result);
    }
  });
/*
  Images ListByResourceGroup
  --resource-group
*/
  var imagesListByResourceGroup = cli.category('managed-image')
  .description($('Commands to manage your images.  '));
  imagesListByResourceGroup.command('list [resource-group]')
  .description($('Gets the list of images under a resource group.'))
  .usage('[options] <resource-group>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, options, _) {
    cli.output.verbose('resourceGroup = ' + resourceGroup);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = null;
    if (utils.stringIsNullOrEmpty(resourceGroup)) {
      result = computeManagementClient.images.list(_);
    }
    else {
      result = computeManagementClient.images.listByResourceGroup(resourceGroup, _);
    }
    var nextPageLink = result.nextLink;
    while (nextPageLink) {
      var pageResult = computeManagementClient.images.listByResourceGroupNext(nextPageLink, _);
      pageResult.forEach(function(item) {
        result.push(item);
      });
      nextPageLink = pageResult.nextLink;
    }

    if (cli.output.format().json) {
      cli.output.json(result);
    }
    else {
      cli.output.table(result, function (row, item) {
        var rgName = item.id ? utils.parseResourceReferenceUri(item.id).resourceGroupName : null;
        row.cell($('ResourceGroupName'), rgName);
        row.cell($('Name'), item.name);
        row.cell($('ProvisioningState'), item.provisioningState);
        row.cell($('Location'), item.location);
      });
    }
  });


};
