/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

/*

Generated Command List:

azure managed-snapshot config snapshot set
--parameter-file $f
--parse
--sku $sku
--time-created $timeCreated
--os-type $osType
--creation-data $creationData
--disk-size-g-b $diskSizeGB
--encryption-settings $encryptionSettings
--provisioning-state $provisioningState
--id $id
--name $name
--type $type
--location $location
--tags $tags

azure managed-snapshot config snapshot delete
--parameter-file $f
--sku
--time-created
--os-type
--creation-data
--disk-size-g-b
--encryption-settings
--provisioning-state
--id
--name
--type
--location
--tags

azure managed-snapshot config sku set
--parameter-file $f
--parse
--name $name
--tier $tier

azure managed-snapshot config sku delete
--parameter-file $f
--name
--tier

azure managed-snapshot config creation-data set
--parameter-file $f
--parse
--create-option $createOption
--storage-account-id $storageAccountId
--image-reference $imageReference
--source-uri $sourceUri
--source-resource-id $sourceResourceId

azure managed-snapshot config creation-data delete
--parameter-file $f
--create-option
--storage-account-id
--image-reference
--source-uri
--source-resource-id

azure managed-snapshot config image-reference set
--parameter-file $f
--parse
--id $id
--lun $lun

azure managed-snapshot config image-reference delete
--parameter-file $f
--id
--lun

azure managed-snapshot config encryption-settings set
--parameter-file $f
--parse
--enabled $enabled
--disk-encryption-key $diskEncryptionKey
--key-encryption-key $keyEncryptionKey

azure managed-snapshot config encryption-settings delete
--parameter-file $f
--enabled
--disk-encryption-key
--key-encryption-key

azure managed-snapshot config disk-encryption-key set
--parameter-file $f
--parse
--source-vault $sourceVault
--secret-url $secretUrl

azure managed-snapshot config disk-encryption-key delete
--parameter-file $f
--source-vault
--secret-url

azure managed-snapshot config source-vault set
--parameter-file $f
--parse
--id $id

azure managed-snapshot config source-vault delete
--parameter-file $f
--id

azure managed-snapshot config key-encryption-key set
--parameter-file $f
--parse
--source-vault $sourceVault
--key-url $keyUrl

azure managed-snapshot config key-encryption-key delete
--parameter-file $f
--source-vault
--key-url

azure managed-snapshot config key-encryption-key-source-vault set
--parameter-file $f
--parse
--id $id

azure managed-snapshot config key-encryption-key-source-vault delete
--parameter-file $f
--id

azure managed-snapshot create 
--resource-group $p0
--name $p1
--snapshot $p2
--parameter-file $f

azure managed-snapshot config generate 
--parameter-file $f

azure managed-snapshot config patch 
--parameter-file $f

azure managed-snapshot delete 
--resource-group $p0
--name $p1

azure managed-snapshot show 
--resource-group $p0
--name $p1

azure managed-snapshot grant-access-parameters grant-access-data set
--parameter-file $f
--parse
--access $access
--duration-in-seconds $durationInSeconds

azure managed-snapshot grant-access-parameters grant-access-data delete
--parameter-file $f
--access
--duration-in-seconds

azure managed-snapshot grant-access 
--resource-group $p0
--name $p1
--grant-access-data $p2
--parameter-file $f

azure managed-snapshot grant-access-parameters generate 
--parameter-file $f

azure managed-snapshot grant-access-parameters patch 
--parameter-file $f

azure managed-snapshot list 
--resource-group $p0

azure managed-snapshot revoke-access 
--resource-group $p0
--name $p1

azure managed-snapshot update-parameters snapshot-update set
--parameter-file $f
--parse
--os-type $osType
--disk-size-g-b $diskSizeGB
--encryption-settings $encryptionSettings
--tags $tags
--sku $sku

azure managed-snapshot update-parameters snapshot-update delete
--parameter-file $f
--os-type
--disk-size-g-b
--encryption-settings
--tags
--sku

azure managed-snapshot update-parameters encryption-settings set
--parameter-file $f
--parse
--enabled $enabled
--disk-encryption-key $diskEncryptionKey
--key-encryption-key $keyEncryptionKey

azure managed-snapshot update-parameters encryption-settings delete
--parameter-file $f
--enabled
--disk-encryption-key
--key-encryption-key

azure managed-snapshot update-parameters disk-encryption-key set
--parameter-file $f
--parse
--source-vault $sourceVault
--secret-url $secretUrl

azure managed-snapshot update-parameters disk-encryption-key delete
--parameter-file $f
--source-vault
--secret-url

azure managed-snapshot update-parameters source-vault set
--parameter-file $f
--parse
--id $id

azure managed-snapshot update-parameters source-vault delete
--parameter-file $f
--id

azure managed-snapshot update-parameters key-encryption-key set
--parameter-file $f
--parse
--source-vault $sourceVault
--key-url $keyUrl

azure managed-snapshot update-parameters key-encryption-key delete
--parameter-file $f
--source-vault
--key-url

azure managed-snapshot update-parameters key-encryption-key-source-vault set
--parameter-file $f
--parse
--id $id

azure managed-snapshot update-parameters key-encryption-key-source-vault delete
--parameter-file $f
--id

azure managed-snapshot update-parameters sku set
--parameter-file $f
--parse
--name $name
--tier $tier

azure managed-snapshot update-parameters sku delete
--parameter-file $f
--name
--tier

azure managed-snapshot update 
--resource-group $p0
--name $p1
--snapshot $p2
--parameter-file $f

azure managed-snapshot update-parameters generate 
--parameter-file $f

azure managed-snapshot update-parameters patch 
--parameter-file $f


*/

'use strict';
var fs = require('fs');
var jsonpatch = require('fast-json-patch');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;
function beautify(jsonText) {
  var obj = JSON.parse(jsonText);
  return JSON.stringify(obj, null, 2);
}
function capitalize(str) {
  if (str && str.length >= 1) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  else {
    return str;
  }
}

function makeTuple(k, v, d) {
  return { key : k, value : v, depth : d };
}

function displayImpl(o, key, depth, arr) {
  if ((!!o) && (o.constructor === Object || o.constructor === Array)) {
    arr.push(makeTuple(key, '', depth));
    var len = 0;
    Object.keys(o).forEach(function(k1) {
      var v1 = o[k1];
      var p1 = o.constructor === Array ? '#' : '';
      var w = displayImpl(v1, p1 + k1, depth + 1, arr);
      if (w > len) {
        len = w;
      }
    });
    return len;
  }
  else {
    arr.push(makeTuple(key, o ? o.toString() : '', depth));
    return depth * 2 + (key ? key.toString().length : 0);
  }
}

function display(cli, o) {
  var arr = [];
  var width = displayImpl(o, '', 0, arr);
  for (var t in arr) {
    var prebuf = new Array(arr[t].depth * 2).join(' ');
    var key = arr[t].key ? arr[t].key : '';
    var postLen = width - (prebuf.length + key.length);
    var postbuf = new Array(postLen > 0 ? postLen : 0).join(' ');
    var str = prebuf + capitalize(key) + postbuf;
    if (arr[t].value) {
      str += ' : ' + arr[t].value;
    }
    cli.output.data(str);
  }
}
exports.init = function (cli) {



/*
  Snapshots CreateOrUpdate
  --resource-group
  --name
  --snapshot
=============================================
{
  "sku":{
    "name":null,
    "tier":""
  },
  "timeCreated":null,
  "osType":null,
  "creationData":{
    "createOption":"",
    "storageAccountId":"",
    "imageReference":{
      "id":"",
      "lun":null
    },
    "sourceUri":"",
    "sourceResourceId":""
  },
  "diskSizeGB":null,
  "encryptionSettings":{
    "enabled":null,
    "diskEncryptionKey":{
      "sourceVault":{
        "id":""
      },
      "secretUrl":""
    },
    "keyEncryptionKey":{
      "sourceVault":{
        "id":""
      },
      "keyUrl":""
    }
  },
  "provisioningState":"",
  "id":null,
  "name":null,
  "type":null,
  "location":"",
  "tags":{
  }
}
*/
  var snapshotsCreateOrUpdate = cli.category('managed-snapshot')
  .description($('Commands to manage your snapshots.  '));
  snapshotsCreateOrUpdate.command('create [resource-group] [name] [snapshot]')
  .description($('Creates or updates a snapshot.'))
  .usage('[options] <resource-group> <name> <snapshot>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('--snapshot <snapshot>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, snapshot, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    cli.output.verbose('snapshot = ' + snapshot);
    var snapshotObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      snapshotObj = JSON.parse(fileContent);
    }
    else {
      snapshotObj = JSON.parse(snapshot);
    }
    cli.output.verbose('snapshotObj = ' + JSON.stringify(snapshotObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.snapshots.createOrUpdate(resourceGroup, name, snapshotObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var snapshotsCreateOrUpdatecreateOrUpdateParameters2 = snapshotsCreateOrUpdate.category('config')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  snapshotsCreateOrUpdatecreateOrUpdateParameters2.command('create')
  .description($('Generate snapshotsCreateOrUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"sku\":{\"name\":null,\"tier\":\"\"},\"timeCreated\":null,\"osType\":null,\"creationData\":{\"createOption\":\"\",\"storageAccountId\":\"\",\"imageReference\":{\"id\":\"\",\"lun\":null},\"sourceUri\":\"\",\"sourceResourceId\":\"\"},\"diskSizeGB\":null,\"encryptionSettings\":{\"enabled\":null,\"diskEncryptionKey\":{\"sourceVault\":{\"id\":\"\"},\"secretUrl\":\"\"},\"keyEncryptionKey\":{\"sourceVault\":{\"id\":\"\"},\"keyUrl\":\"\"}},\"provisioningState\":\"\",\"id\":null,\"name\":null,\"type\":null,\"location\":\"\",\"tags\":{}}', _);
    var filePath = 'snapshotsCreateOrUpdate_createOrUpdate.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"sku\":{\r\n\"name\":null,\r\n\"tier\":\"\"\r\n},\r\n\"timeCreated\":null,\r\n\"osType\":null,\r\n\"creationData\":{\r\n\"createOption\":\"\",\r\n\"storageAccountId\":\"\",\r\n\"imageReference\":{\r\n\"id\":\"\",\r\n\"lun\":null\r\n},\r\n\"sourceUri\":\"\",\r\n\"sourceResourceId\":\"\"\r\n},\r\n\"diskSizeGB\":null,\r\n\"encryptionSettings\":{\r\n\"enabled\":null,\r\n\"diskEncryptionKey\":{\r\n\"sourceVault\":{\r\n\"id\":\"\"\r\n},\r\n\"secretUrl\":\"\"\r\n},\r\n\"keyEncryptionKey\":{\r\n\"sourceVault\":{\r\n\"id\":\"\"\r\n},\r\n\"keyUrl\":\"\"\r\n}\r\n},\r\n\"provisioningState\":\"\",\r\n\"id\":null,\r\n\"name\":null,\r\n\"type\":null,\r\n\"location\":\"\",\r\n\"tags\":{\r\n}\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  snapshotsCreateOrUpdatecreateOrUpdateParameters2.command('patch')
  .description($('Command to patch snapshotsCreateOrUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var snapshotObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(snapshotObj));
    if (options.operation == 'add') {
      jsonpatch.apply(snapshotObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(snapshotObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(snapshotObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(snapshotObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(snapshotObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config set snapshot
  var catparametersCreateOrUpdateSnapshotsSnapshot01 = cli.category('managed-snapshot');
  var parametersCreateOrUpdateSnapshotsSnapshot01 = catparametersCreateOrUpdateSnapshotsSnapshot01.category('config')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var setparametersCreateOrUpdateSnapshotsSnapshot01 = parametersCreateOrUpdateSnapshotsSnapshot01.category('snapshot')
  .description($('Commands to configure snapshot of managed-snapshot in config file.'));
  setparametersCreateOrUpdateSnapshotsSnapshot01.command('set')
  .description($('Set snapshot in config string or files, e.g. \r\n{\r\n  "sku":{\r\n    "name":null,\r\n    "tier":""\r\n  },\r\n  "timeCreated":null,\r\n  "osType":null,\r\n  "creationData":{\r\n    "createOption":"",\r\n    "storageAccountId":"",\r\n    "imageReference":{\r\n      "id":"",\r\n      "lun":null\r\n    },\r\n    "sourceUri":"",\r\n    "sourceResourceId":""\r\n  },\r\n  "diskSizeGB":null,\r\n  "encryptionSettings":{\r\n    "enabled":null,\r\n    "diskEncryptionKey":{\r\n      "sourceVault":{\r\n        "id":""\r\n      },\r\n      "secretUrl":""\r\n    },\r\n    "keyEncryptionKey":{\r\n      "sourceVault":{\r\n        "id":""\r\n      },\r\n      "keyUrl":""\r\n    }\r\n  },\r\n  "provisioningState":"",\r\n  "id":null,\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--time-created <timeCreated>', $('Set the time-created value.'))
  .option('--os-type <osType>', $('Set the os-type value.'))
  .option('--creation-data <creationData>', $('Set the creation-data value.'))
  .option('--disk-size-g-b <diskSizeGB>', $('Set the disk-size-g-b value.'))
  .option('--encryption-settings <encryptionSettings>', $('Set the encryption-settings value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'sku';
    if (options.sku) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sku);
      cli.output.verbose('================================================');
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'timeCreated';
    if (options.timeCreated) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.timeCreated);
      cli.output.verbose('================================================');
      if (options.parse && options.timeCreated) {
        options.timeCreated = JSON.parse(options.timeCreated);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeCreated}]);
    }
    paramPath = options.path + '/' + 'osType';
    if (options.osType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.osType);
      cli.output.verbose('================================================');
      if (options.parse && options.osType) {
        options.osType = JSON.parse(options.osType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.osType}]);
    }
    paramPath = options.path + '/' + 'creationData';
    if (options.creationData) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.creationData);
      cli.output.verbose('================================================');
      if (options.parse && options.creationData) {
        options.creationData = JSON.parse(options.creationData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.creationData}]);
    }
    paramPath = options.path + '/' + 'diskSizeGB';
    if (options.diskSizeGB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.diskSizeGB);
      cli.output.verbose('================================================');
      if (options.parse && options.diskSizeGB) {
        options.diskSizeGB = JSON.parse(options.diskSizeGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskSizeGB}]);
    }
    paramPath = options.path + '/' + 'encryptionSettings';
    if (options.encryptionSettings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.encryptionSettings);
      cli.output.verbose('================================================');
      if (options.parse && options.encryptionSettings) {
        options.encryptionSettings = JSON.parse(options.encryptionSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.encryptionSettings}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    if (options.provisioningState) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.provisioningState);
      cli.output.verbose('================================================');
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    if (options.type) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.type);
      cli.output.verbose('================================================');
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    if (options.location) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.location);
      cli.output.verbose('================================================');
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    if (options.tags) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.tags);
      cli.output.verbose('================================================');
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete snapshot
  var catparametersCreateOrUpdateSnapshotsSnapshot11 = cli.category('managed-snapshot');
  var parametersCreateOrUpdateSnapshotsSnapshot11 = catparametersCreateOrUpdateSnapshotsSnapshot11.category('config')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var deleteparametersCreateOrUpdateSnapshotsSnapshot11 = parametersCreateOrUpdateSnapshotsSnapshot11.category('snapshot')
  .description($('Commands to configure snapshot of managed-snapshot in config file.'));
  deleteparametersCreateOrUpdateSnapshotsSnapshot11.command('delete')
  .description($('Remove snapshot in config string or files, e.g. \r\n{\r\n  "sku":{\r\n    "name":null,\r\n    "tier":""\r\n  },\r\n  "timeCreated":null,\r\n  "osType":null,\r\n  "creationData":{\r\n    "createOption":"",\r\n    "storageAccountId":"",\r\n    "imageReference":{\r\n      "id":"",\r\n      "lun":null\r\n    },\r\n    "sourceUri":"",\r\n    "sourceResourceId":""\r\n  },\r\n  "diskSizeGB":null,\r\n  "encryptionSettings":{\r\n    "enabled":null,\r\n    "diskEncryptionKey":{\r\n      "sourceVault":{\r\n        "id":""\r\n      },\r\n      "secretUrl":""\r\n    },\r\n    "keyEncryptionKey":{\r\n      "sourceVault":{\r\n        "id":""\r\n      },\r\n      "keyUrl":""\r\n    }\r\n  },\r\n  "provisioningState":"",\r\n  "id":null,\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--time-created', $('Remove the time-created value.'))
  .option('--os-type', $('Remove the os-type value.'))
  .option('--creation-data', $('Remove the creation-data value.'))
  .option('--disk-size-g-b', $('Remove the disk-size-g-b value.'))
  .option('--encryption-settings', $('Remove the encryption-settings value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.sku || options.timeCreated || options.osType || options.creationData || options.diskSizeGB || options.encryptionSettings || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.sku) {
        subItemPath = options.path + '/sku';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeCreated) {
        subItemPath = options.path + '/timeCreated';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.osType) {
        subItemPath = options.path + '/osType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.creationData) {
        subItemPath = options.path + '/creationData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.diskSizeGB) {
        subItemPath = options.path + '/diskSizeGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.encryptionSettings) {
        subItemPath = options.path + '/encryptionSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set sku
  var catparametersCreateOrUpdateSnapshotsSku0S1 = cli.category('managed-snapshot');
  var parametersCreateOrUpdateSnapshotsSku0S1 = catparametersCreateOrUpdateSnapshotsSku0S1.category('config')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var setparametersCreateOrUpdateSnapshotsSku0S1 = parametersCreateOrUpdateSnapshotsSku0S1.category('sku')
  .description($('Commands to configure sku of managed-snapshot in config file.'));
  setparametersCreateOrUpdateSnapshotsSku0S1.command('set')
  .description($('Set sku in config string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":null,\r\n             "tier":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--name <name>', $('Set the name value.'))
  .option('--tier <tier>', $('Set the tier value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/sku';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'tier';
    if (options.tier) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.tier);
      cli.output.verbose('================================================');
      if (options.parse && options.tier) {
        options.tier = JSON.parse(options.tier);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tier}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete sku
  var catparametersCreateOrUpdateSnapshotsSku1S1 = cli.category('managed-snapshot');
  var parametersCreateOrUpdateSnapshotsSku1S1 = catparametersCreateOrUpdateSnapshotsSku1S1.category('config')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var deleteparametersCreateOrUpdateSnapshotsSku1S1 = parametersCreateOrUpdateSnapshotsSku1S1.category('sku')
  .description($('Commands to configure sku of managed-snapshot in config file.'));
  deleteparametersCreateOrUpdateSnapshotsSku1S1.command('delete')
  .description($('Remove sku in config string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":null,\r\n             "tier":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--name', $('Remove the name value.'))
  .option('--tier', $('Remove the tier value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/sku';
    var anySubItem = false || options.name || options.tier;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tier) {
        subItemPath = options.path + '/tier';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set creation-data
  var catparametersCreateOrUpdateSnapshotsCreationData0CD1 = cli.category('managed-snapshot');
  var parametersCreateOrUpdateSnapshotsCreationData0CD1 = catparametersCreateOrUpdateSnapshotsCreationData0CD1.category('config')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var setparametersCreateOrUpdateSnapshotsCreationData0CD1 = parametersCreateOrUpdateSnapshotsCreationData0CD1.category('creation-data')
  .description($('Commands to configure creation-data of managed-snapshot in config file.'));
  setparametersCreateOrUpdateSnapshotsCreationData0CD1.command('set')
  .description($('Set creation-data in config string or files, e.g. \r\n         {\r\n           ...\r\n           "creationData" : {\r\n             "createOption":"",\r\n             "storageAccountId":"",\r\n             "imageReference":{\r\n               "id":"",\r\n               "lun":null\r\n             },\r\n             "sourceUri":"",\r\n             "sourceResourceId":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--create-option <createOption>', $('Set the create-option value.'))
  .option('--storage-account-id <storageAccountId>', $('Set the storage-account-id value.'))
  .option('--image-reference <imageReference>', $('Set the image-reference value.'))
  .option('--source-uri <sourceUri>', $('Set the source-uri value.'))
  .option('--source-resource-id <sourceResourceId>', $('Set the source-resource-id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/creationData';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'createOption';
    if (options.createOption) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.createOption);
      cli.output.verbose('================================================');
      if (options.parse && options.createOption) {
        options.createOption = JSON.parse(options.createOption);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.createOption}]);
    }
    paramPath = options.path + '/' + 'storageAccountId';
    if (options.storageAccountId) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storageAccountId);
      cli.output.verbose('================================================');
      if (options.parse && options.storageAccountId) {
        options.storageAccountId = JSON.parse(options.storageAccountId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storageAccountId}]);
    }
    paramPath = options.path + '/' + 'imageReference';
    if (options.imageReference) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.imageReference);
      cli.output.verbose('================================================');
      if (options.parse && options.imageReference) {
        options.imageReference = JSON.parse(options.imageReference);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageReference}]);
    }
    paramPath = options.path + '/' + 'sourceUri';
    if (options.sourceUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sourceUri);
      cli.output.verbose('================================================');
      if (options.parse && options.sourceUri) {
        options.sourceUri = JSON.parse(options.sourceUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceUri}]);
    }
    paramPath = options.path + '/' + 'sourceResourceId';
    if (options.sourceResourceId) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sourceResourceId);
      cli.output.verbose('================================================');
      if (options.parse && options.sourceResourceId) {
        options.sourceResourceId = JSON.parse(options.sourceResourceId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceResourceId}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete creation-data
  var catparametersCreateOrUpdateSnapshotsCreationData1CD1 = cli.category('managed-snapshot');
  var parametersCreateOrUpdateSnapshotsCreationData1CD1 = catparametersCreateOrUpdateSnapshotsCreationData1CD1.category('config')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var deleteparametersCreateOrUpdateSnapshotsCreationData1CD1 = parametersCreateOrUpdateSnapshotsCreationData1CD1.category('creation-data')
  .description($('Commands to configure creation-data of managed-snapshot in config file.'));
  deleteparametersCreateOrUpdateSnapshotsCreationData1CD1.command('delete')
  .description($('Remove creation-data in config string or files, e.g. \r\n         {\r\n           ...\r\n           "creationData" : {\r\n             "createOption":"",\r\n             "storageAccountId":"",\r\n             "imageReference":{\r\n               "id":"",\r\n               "lun":null\r\n             },\r\n             "sourceUri":"",\r\n             "sourceResourceId":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--create-option', $('Remove the create-option value.'))
  .option('--storage-account-id', $('Remove the storage-account-id value.'))
  .option('--image-reference', $('Remove the image-reference value.'))
  .option('--source-uri', $('Remove the source-uri value.'))
  .option('--source-resource-id', $('Remove the source-resource-id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/creationData';
    var anySubItem = false || options.createOption || options.storageAccountId || options.imageReference || options.sourceUri || options.sourceResourceId;
    if (anySubItem) {
      var subItemPath = null;
      if (options.createOption) {
        subItemPath = options.path + '/createOption';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storageAccountId) {
        subItemPath = options.path + '/storageAccountId';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.imageReference) {
        subItemPath = options.path + '/imageReference';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceUri) {
        subItemPath = options.path + '/sourceUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceResourceId) {
        subItemPath = options.path + '/sourceResourceId';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set image-reference
  var catparametersCreateOrUpdateSnapshotsImageReference0CDiR1 = cli.category('managed-snapshot');
  var parametersCreateOrUpdateSnapshotsImageReference0CDiR1 = catparametersCreateOrUpdateSnapshotsImageReference0CDiR1.category('config')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var setparametersCreateOrUpdateSnapshotsImageReference0CDiR1 = parametersCreateOrUpdateSnapshotsImageReference0CDiR1.category('image-reference')
  .description($('Commands to configure image-reference of managed-snapshot in config file.'));
  setparametersCreateOrUpdateSnapshotsImageReference0CDiR1.command('set')
  .description($('Set image-reference in config string or files, e.g. \r\n         {\r\n           ...\r\n           "imageReference" : {\r\n             "id":"",\r\n             "lun":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--id <id>', $('Set the id value.'))
  .option('--lun <lun>', $('Set the lun value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/creationData/imageReference';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'lun';
    if (options.lun) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.lun);
      cli.output.verbose('================================================');
      if (options.parse && options.lun) {
        options.lun = JSON.parse(options.lun);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.lun}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete image-reference
  var catparametersCreateOrUpdateSnapshotsImageReference1CDiR1 = cli.category('managed-snapshot');
  var parametersCreateOrUpdateSnapshotsImageReference1CDiR1 = catparametersCreateOrUpdateSnapshotsImageReference1CDiR1.category('config')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var deleteparametersCreateOrUpdateSnapshotsImageReference1CDiR1 = parametersCreateOrUpdateSnapshotsImageReference1CDiR1.category('image-reference')
  .description($('Commands to configure image-reference of managed-snapshot in config file.'));
  deleteparametersCreateOrUpdateSnapshotsImageReference1CDiR1.command('delete')
  .description($('Remove image-reference in config string or files, e.g. \r\n         {\r\n           ...\r\n           "imageReference" : {\r\n             "id":"",\r\n             "lun":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--id', $('Remove the id value.'))
  .option('--lun', $('Remove the lun value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/creationData/imageReference';
    var anySubItem = false || options.id || options.lun;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.lun) {
        subItemPath = options.path + '/lun';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set encryption-settings
  var catparametersCreateOrUpdateSnapshotsEncryptionSettings0ES1 = cli.category('managed-snapshot');
  var parametersCreateOrUpdateSnapshotsEncryptionSettings0ES1 = catparametersCreateOrUpdateSnapshotsEncryptionSettings0ES1.category('config')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var setparametersCreateOrUpdateSnapshotsEncryptionSettings0ES1 = parametersCreateOrUpdateSnapshotsEncryptionSettings0ES1.category('encryption-settings')
  .description($('Commands to configure encryption-settings of managed-snapshot in config file.'));
  setparametersCreateOrUpdateSnapshotsEncryptionSettings0ES1.command('set')
  .description($('Set encryption-settings in config string or files, e.g. \r\n         {\r\n           ...\r\n           "encryptionSettings" : {\r\n             "enabled":null,\r\n             "diskEncryptionKey":{\r\n               "sourceVault":{\r\n                 "id":""\r\n               },\r\n               "secretUrl":""\r\n             },\r\n             "keyEncryptionKey":{\r\n               "sourceVault":{\r\n                 "id":""\r\n               },\r\n               "keyUrl":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--enabled <enabled>', $('Set the enabled value.'))
  .option('--disk-encryption-key <diskEncryptionKey>', $('Set the disk-encryption-key value.'))
  .option('--key-encryption-key <keyEncryptionKey>', $('Set the key-encryption-key value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/encryptionSettings';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'enabled';
    if (options.enabled) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.enabled);
      cli.output.verbose('================================================');
      if (options.parse && options.enabled) {
        options.enabled = JSON.parse(options.enabled);
      }
      options.enabled = JSON.parse(options.enabled);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enabled}]);
    }
    paramPath = options.path + '/' + 'diskEncryptionKey';
    if (options.diskEncryptionKey) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.diskEncryptionKey);
      cli.output.verbose('================================================');
      if (options.parse && options.diskEncryptionKey) {
        options.diskEncryptionKey = JSON.parse(options.diskEncryptionKey);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskEncryptionKey}]);
    }
    paramPath = options.path + '/' + 'keyEncryptionKey';
    if (options.keyEncryptionKey) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.keyEncryptionKey);
      cli.output.verbose('================================================');
      if (options.parse && options.keyEncryptionKey) {
        options.keyEncryptionKey = JSON.parse(options.keyEncryptionKey);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyEncryptionKey}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete encryption-settings
  var catparametersCreateOrUpdateSnapshotsEncryptionSettings1ES1 = cli.category('managed-snapshot');
  var parametersCreateOrUpdateSnapshotsEncryptionSettings1ES1 = catparametersCreateOrUpdateSnapshotsEncryptionSettings1ES1.category('config')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var deleteparametersCreateOrUpdateSnapshotsEncryptionSettings1ES1 = parametersCreateOrUpdateSnapshotsEncryptionSettings1ES1.category('encryption-settings')
  .description($('Commands to configure encryption-settings of managed-snapshot in config file.'));
  deleteparametersCreateOrUpdateSnapshotsEncryptionSettings1ES1.command('delete')
  .description($('Remove encryption-settings in config string or files, e.g. \r\n         {\r\n           ...\r\n           "encryptionSettings" : {\r\n             "enabled":null,\r\n             "diskEncryptionKey":{\r\n               "sourceVault":{\r\n                 "id":""\r\n               },\r\n               "secretUrl":""\r\n             },\r\n             "keyEncryptionKey":{\r\n               "sourceVault":{\r\n                 "id":""\r\n               },\r\n               "keyUrl":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--enabled', $('Remove the enabled value.'))
  .option('--disk-encryption-key', $('Remove the disk-encryption-key value.'))
  .option('--key-encryption-key', $('Remove the key-encryption-key value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/encryptionSettings';
    var anySubItem = false || options.enabled || options.diskEncryptionKey || options.keyEncryptionKey;
    if (anySubItem) {
      var subItemPath = null;
      if (options.enabled) {
        subItemPath = options.path + '/enabled';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.diskEncryptionKey) {
        subItemPath = options.path + '/diskEncryptionKey';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.keyEncryptionKey) {
        subItemPath = options.path + '/keyEncryptionKey';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set disk-encryption-key
  var catparametersCreateOrUpdateSnapshotsDiskEncryptionKey0ESdEK1 = cli.category('managed-snapshot');
  var parametersCreateOrUpdateSnapshotsDiskEncryptionKey0ESdEK1 = catparametersCreateOrUpdateSnapshotsDiskEncryptionKey0ESdEK1.category('config')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var setparametersCreateOrUpdateSnapshotsDiskEncryptionKey0ESdEK1 = parametersCreateOrUpdateSnapshotsDiskEncryptionKey0ESdEK1.category('disk-encryption-key')
  .description($('Commands to configure disk-encryption-key of managed-snapshot in config file.'));
  setparametersCreateOrUpdateSnapshotsDiskEncryptionKey0ESdEK1.command('set')
  .description($('Set disk-encryption-key in config string or files, e.g. \r\n         {\r\n           ...\r\n           "diskEncryptionKey" : {\r\n             "sourceVault":{\r\n               "id":""\r\n             },\r\n             "secretUrl":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--source-vault <sourceVault>', $('Set the source-vault value.'))
  .option('--secret-url <secretUrl>', $('Set the secret-url value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/encryptionSettings/diskEncryptionKey';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'sourceVault';
    if (options.sourceVault) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sourceVault);
      cli.output.verbose('================================================');
      if (options.parse && options.sourceVault) {
        options.sourceVault = JSON.parse(options.sourceVault);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceVault}]);
    }
    paramPath = options.path + '/' + 'secretUrl';
    if (options.secretUrl) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.secretUrl);
      cli.output.verbose('================================================');
      if (options.parse && options.secretUrl) {
        options.secretUrl = JSON.parse(options.secretUrl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.secretUrl}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete disk-encryption-key
  var catparametersCreateOrUpdateSnapshotsDiskEncryptionKey1ESdEK1 = cli.category('managed-snapshot');
  var parametersCreateOrUpdateSnapshotsDiskEncryptionKey1ESdEK1 = catparametersCreateOrUpdateSnapshotsDiskEncryptionKey1ESdEK1.category('config')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var deleteparametersCreateOrUpdateSnapshotsDiskEncryptionKey1ESdEK1 = parametersCreateOrUpdateSnapshotsDiskEncryptionKey1ESdEK1.category('disk-encryption-key')
  .description($('Commands to configure disk-encryption-key of managed-snapshot in config file.'));
  deleteparametersCreateOrUpdateSnapshotsDiskEncryptionKey1ESdEK1.command('delete')
  .description($('Remove disk-encryption-key in config string or files, e.g. \r\n         {\r\n           ...\r\n           "diskEncryptionKey" : {\r\n             "sourceVault":{\r\n               "id":""\r\n             },\r\n             "secretUrl":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--source-vault', $('Remove the source-vault value.'))
  .option('--secret-url', $('Remove the secret-url value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/encryptionSettings/diskEncryptionKey';
    var anySubItem = false || options.sourceVault || options.secretUrl;
    if (anySubItem) {
      var subItemPath = null;
      if (options.sourceVault) {
        subItemPath = options.path + '/sourceVault';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.secretUrl) {
        subItemPath = options.path + '/secretUrl';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set source-vault
  var catparametersCreateOrUpdateSnapshotsSourceVault0ESdEKsV1 = cli.category('managed-snapshot');
  var parametersCreateOrUpdateSnapshotsSourceVault0ESdEKsV1 = catparametersCreateOrUpdateSnapshotsSourceVault0ESdEKsV1.category('config')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var setparametersCreateOrUpdateSnapshotsSourceVault0ESdEKsV1 = parametersCreateOrUpdateSnapshotsSourceVault0ESdEKsV1.category('source-vault')
  .description($('Commands to configure source-vault of managed-snapshot in config file.'));
  setparametersCreateOrUpdateSnapshotsSourceVault0ESdEKsV1.command('set')
  .description($('Set source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           "sourceVault" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/encryptionSettings/diskEncryptionKey/sourceVault';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete source-vault
  var catparametersCreateOrUpdateSnapshotsSourceVault1ESdEKsV1 = cli.category('managed-snapshot');
  var parametersCreateOrUpdateSnapshotsSourceVault1ESdEKsV1 = catparametersCreateOrUpdateSnapshotsSourceVault1ESdEKsV1.category('config')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var deleteparametersCreateOrUpdateSnapshotsSourceVault1ESdEKsV1 = parametersCreateOrUpdateSnapshotsSourceVault1ESdEKsV1.category('source-vault')
  .description($('Commands to configure source-vault of managed-snapshot in config file.'));
  deleteparametersCreateOrUpdateSnapshotsSourceVault1ESdEKsV1.command('delete')
  .description($('Remove source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           "sourceVault" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/encryptionSettings/diskEncryptionKey/sourceVault';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set key-encryption-key
  var catparametersCreateOrUpdateSnapshotsKeyEncryptionKey0ESkEK1 = cli.category('managed-snapshot');
  var parametersCreateOrUpdateSnapshotsKeyEncryptionKey0ESkEK1 = catparametersCreateOrUpdateSnapshotsKeyEncryptionKey0ESkEK1.category('config')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var setparametersCreateOrUpdateSnapshotsKeyEncryptionKey0ESkEK1 = parametersCreateOrUpdateSnapshotsKeyEncryptionKey0ESkEK1.category('key-encryption-key')
  .description($('Commands to configure key-encryption-key of managed-snapshot in config file.'));
  setparametersCreateOrUpdateSnapshotsKeyEncryptionKey0ESkEK1.command('set')
  .description($('Set key-encryption-key in config string or files, e.g. \r\n         {\r\n           ...\r\n           "keyEncryptionKey" : {\r\n             "sourceVault":{\r\n               "id":""\r\n             },\r\n             "keyUrl":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--source-vault <sourceVault>', $('Set the source-vault value.'))
  .option('--key-url <keyUrl>', $('Set the key-url value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/encryptionSettings/keyEncryptionKey';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'sourceVault';
    if (options.sourceVault) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sourceVault);
      cli.output.verbose('================================================');
      if (options.parse && options.sourceVault) {
        options.sourceVault = JSON.parse(options.sourceVault);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceVault}]);
    }
    paramPath = options.path + '/' + 'keyUrl';
    if (options.keyUrl) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.keyUrl);
      cli.output.verbose('================================================');
      if (options.parse && options.keyUrl) {
        options.keyUrl = JSON.parse(options.keyUrl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyUrl}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete key-encryption-key
  var catparametersCreateOrUpdateSnapshotsKeyEncryptionKey1ESkEK1 = cli.category('managed-snapshot');
  var parametersCreateOrUpdateSnapshotsKeyEncryptionKey1ESkEK1 = catparametersCreateOrUpdateSnapshotsKeyEncryptionKey1ESkEK1.category('config')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var deleteparametersCreateOrUpdateSnapshotsKeyEncryptionKey1ESkEK1 = parametersCreateOrUpdateSnapshotsKeyEncryptionKey1ESkEK1.category('key-encryption-key')
  .description($('Commands to configure key-encryption-key of managed-snapshot in config file.'));
  deleteparametersCreateOrUpdateSnapshotsKeyEncryptionKey1ESkEK1.command('delete')
  .description($('Remove key-encryption-key in config string or files, e.g. \r\n         {\r\n           ...\r\n           "keyEncryptionKey" : {\r\n             "sourceVault":{\r\n               "id":""\r\n             },\r\n             "keyUrl":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--source-vault', $('Remove the source-vault value.'))
  .option('--key-url', $('Remove the key-url value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/encryptionSettings/keyEncryptionKey';
    var anySubItem = false || options.sourceVault || options.keyUrl;
    if (anySubItem) {
      var subItemPath = null;
      if (options.sourceVault) {
        subItemPath = options.path + '/sourceVault';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.keyUrl) {
        subItemPath = options.path + '/keyUrl';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set key-encryption-key-source-vault
  var catparametersCreateOrUpdateSnapshotsSourceVault0ESkEKsV2 = cli.category('managed-snapshot');
  var parametersCreateOrUpdateSnapshotsSourceVault0ESkEKsV2 = catparametersCreateOrUpdateSnapshotsSourceVault0ESkEKsV2.category('config')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var setparametersCreateOrUpdateSnapshotsSourceVault0ESkEKsV2 = parametersCreateOrUpdateSnapshotsSourceVault0ESkEKsV2.category('key-encryption-key-source-vault')
  .description($('Commands to configure key-encryption-key-source-vault of managed-snapshot in config file.'));
  setparametersCreateOrUpdateSnapshotsSourceVault0ESkEKsV2.command('set')
  .description($('Set key-encryption-key-source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           "sourceVault" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/encryptionSettings/keyEncryptionKey/sourceVault';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete key-encryption-key-source-vault
  var catparametersCreateOrUpdateSnapshotsSourceVault1ESkEKsV2 = cli.category('managed-snapshot');
  var parametersCreateOrUpdateSnapshotsSourceVault1ESkEKsV2 = catparametersCreateOrUpdateSnapshotsSourceVault1ESkEKsV2.category('config')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var deleteparametersCreateOrUpdateSnapshotsSourceVault1ESkEKsV2 = parametersCreateOrUpdateSnapshotsSourceVault1ESkEKsV2.category('key-encryption-key-source-vault')
  .description($('Commands to configure key-encryption-key-source-vault of managed-snapshot in config file.'));
  deleteparametersCreateOrUpdateSnapshotsSourceVault1ESkEKsV2.command('delete')
  .description($('Remove key-encryption-key-source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           "sourceVault" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/encryptionSettings/keyEncryptionKey/sourceVault';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  Snapshots Delete
  --resource-group
  --name
*/
  var snapshotsDelete = cli.category('managed-snapshot')
  .description($('Commands to manage your snapshots.  '));
  snapshotsDelete.command('delete [resource-group] [name]')
  .description($('Deletes a snapshot.'))
  .usage('[options] <resource-group> <name>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.snapshots.deleteMethod(resourceGroup, name, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  Snapshots Get
  --resource-group
  --name
*/
  var snapshotsGet = cli.category('managed-snapshot')
  .description($('Commands to manage your snapshots.  '));
  snapshotsGet.command('show [resource-group] [name]')
  .description($('Gets information about a snapshot.'))
  .usage('[options] <resource-group> <name>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.snapshots.get(resourceGroup, name, _);
    if (cli.output.format().json) {
      cli.output.json(result);
    }
    else {
      display(cli, result);
    }
  });
/*
  Snapshots GrantAccess
  --resource-group
  --name
  --grant-access-data
=============================================
{
  "access":"",
  "durationInSeconds":""
}
*/
  var snapshotsGrantAccess = cli.category('managed-snapshot')
  .description($('Commands to manage your snapshots.  '));
  snapshotsGrantAccess.command('grant-access [resource-group] [name] [grant-access-data]')
  .description($('Grants access to a snapshot.'))
  .usage('[options] <resource-group> <name> <grant-access-data>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('--grant-access-data <grant-access-data>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, grantAccessData, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    cli.output.verbose('grantAccessData = ' + grantAccessData);
    var grantAccessDataObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      grantAccessDataObj = JSON.parse(fileContent);
    }
    else {
      grantAccessDataObj = JSON.parse(grantAccessData);
    }
    cli.output.verbose('grantAccessDataObj = ' + JSON.stringify(grantAccessDataObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.snapshots.grantAccess(resourceGroup, name, grantAccessDataObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var snapshotsGrantAccessgrantAccessParameters2 = snapshotsGrantAccess.category('grant-access-parameters')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  snapshotsGrantAccessgrantAccessParameters2.command('create')
  .description($('Generate snapshotsGrantAccess parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"access\":\"\",\"durationInSeconds\":\"\"}', _);
    var filePath = 'snapshotsGrantAccess_grantAccess.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"access\":\"\",\r\n\"durationInSeconds\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  snapshotsGrantAccessgrantAccessParameters2.command('patch')
  .description($('Command to patch snapshotsGrantAccess parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var grantAccessDataObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(grantAccessDataObj));
    if (options.operation == 'add') {
      jsonpatch.apply(grantAccessDataObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(grantAccessDataObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(grantAccessDataObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(grantAccessDataObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(grantAccessDataObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //grant-access-parameters set grant-access-data
  var catparametersGrantAccessSnapshotsGrantAccessData01 = cli.category('managed-snapshot');
  var parametersGrantAccessSnapshotsGrantAccessData01 = catparametersGrantAccessSnapshotsGrantAccessData01.category('grant-access-parameters')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var setparametersGrantAccessSnapshotsGrantAccessData01 = parametersGrantAccessSnapshotsGrantAccessData01.category('grant-access-data')
  .description($('Commands to configure grant-access-data of managed-snapshot in grant-access-parameters file.'));
  setparametersGrantAccessSnapshotsGrantAccessData01.command('set')
  .description($('Set grant-access-data in grant-access-parameters string or files, e.g. \r\n{\r\n  "access":"",\r\n  "durationInSeconds":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--access <access>', $('Set the access value.'))
  .option('--duration-in-seconds <durationInSeconds>', $('Set the duration-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'access';
    if (options.access) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.access);
      cli.output.verbose('================================================');
      if (options.parse && options.access) {
        options.access = JSON.parse(options.access);
      }
      options.access = JSON.parse(options.access);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.access}]);
    }
    paramPath = options.path + '/' + 'durationInSeconds';
    if (options.durationInSeconds) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.durationInSeconds);
      cli.output.verbose('================================================');
      if (options.parse && options.durationInSeconds) {
        options.durationInSeconds = JSON.parse(options.durationInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.durationInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //grant-access-parameters delete grant-access-data
  var catparametersGrantAccessSnapshotsGrantAccessData11 = cli.category('managed-snapshot');
  var parametersGrantAccessSnapshotsGrantAccessData11 = catparametersGrantAccessSnapshotsGrantAccessData11.category('grant-access-parameters')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var deleteparametersGrantAccessSnapshotsGrantAccessData11 = parametersGrantAccessSnapshotsGrantAccessData11.category('grant-access-data')
  .description($('Commands to configure grant-access-data of managed-snapshot in grant-access-parameters file.'));
  deleteparametersGrantAccessSnapshotsGrantAccessData11.command('delete')
  .description($('Remove grant-access-data in grant-access-parameters string or files, e.g. \r\n{\r\n  "access":"",\r\n  "durationInSeconds":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--access', $('Remove the access value.'))
  .option('--duration-in-seconds', $('Remove the duration-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.access || options.durationInSeconds;
    if (anySubItem) {
      var subItemPath = null;
      if (options.access) {
        subItemPath = options.path + '/access';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.durationInSeconds) {
        subItemPath = options.path + '/durationInSeconds';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  Snapshots ListByResourceGroup
  --resource-group
*/
  var snapshotsListByResourceGroup = cli.category('managed-snapshot')
  .description($('Commands to manage your snapshots.  '));
  snapshotsListByResourceGroup.command('list [resource-group]')
  .description($('Lists snapshots under a resource group.'))
  .usage('[options] <resource-group>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, options, _) {
    cli.output.verbose('resourceGroup = ' + resourceGroup);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = null;
    if (utils.stringIsNullOrEmpty(resourceGroup)) {
      result = computeManagementClient.snapshots.list(_);
    }
    else {
      result = computeManagementClient.snapshots.listByResourceGroup(resourceGroup, _);
    }
    var nextPageLink = result.nextLink;
    while (nextPageLink) {
      var pageResult = computeManagementClient.snapshots.listByResourceGroupNext(nextPageLink, _);
      pageResult.forEach(function(item) {
        result.push(item);
      });
      nextPageLink = pageResult.nextLink;
    }

    if (cli.output.format().json) {
      cli.output.json(result);
    }
    else {
      cli.output.table(result, function (row, item) {
        var rgName = item.id ? utils.parseResourceReferenceUri(item.id).resourceGroupName : null;
        row.cell($('ResourceGroupName'), rgName);
        row.cell($('Name'), item.name);
        row.cell($('ProvisioningState'), item.provisioningState);
        row.cell($('Location'), item.location);
      });
    }
  });
/*
  Snapshots RevokeAccess
  --resource-group
  --name
*/
  var snapshotsRevokeAccess = cli.category('managed-snapshot')
  .description($('Commands to manage your snapshots.  '));
  snapshotsRevokeAccess.command('revoke-access [resource-group] [name]')
  .description($('Revokes access to a snapshot.'))
  .usage('[options] <resource-group> <name>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.snapshots.revokeAccess(resourceGroup, name, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  Snapshots Update
  --resource-group
  --name
  --snapshot
=============================================
{
  "osType":null,
  "diskSizeGB":null,
  "encryptionSettings":{
    "enabled":null,
    "diskEncryptionKey":{
      "sourceVault":{
        "id":""
      },
      "secretUrl":""
    },
    "keyEncryptionKey":{
      "sourceVault":{
        "id":""
      },
      "keyUrl":""
    }
  },
  "tags":{
  },
  "sku":{
    "name":null,
    "tier":""
  }
}
*/
  var snapshotsUpdate = cli.category('managed-snapshot')
  .description($('Commands to manage your snapshots.  '));
  snapshotsUpdate.command('update [resource-group] [name] [snapshot]')
  .description($('Updates (patches) a snapshot.'))
  .usage('[options] <resource-group> <name> <snapshot>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('--snapshot <snapshot>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, snapshot, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    cli.output.verbose('snapshot = ' + snapshot);
    var snapshotObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      snapshotObj = JSON.parse(fileContent);
    }
    else {
      snapshotObj = JSON.parse(snapshot);
    }
    cli.output.verbose('snapshotObj = ' + JSON.stringify(snapshotObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.snapshots.update(resourceGroup, name, snapshotObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var snapshotsUpdateupdateParameters2 = snapshotsUpdate.category('update-parameters')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  snapshotsUpdateupdateParameters2.command('create')
  .description($('Generate snapshotsUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"osType\":null,\"diskSizeGB\":null,\"encryptionSettings\":{\"enabled\":null,\"diskEncryptionKey\":{\"sourceVault\":{\"id\":\"\"},\"secretUrl\":\"\"},\"keyEncryptionKey\":{\"sourceVault\":{\"id\":\"\"},\"keyUrl\":\"\"}},\"tags\":{},\"sku\":{\"name\":null,\"tier\":\"\"}}', _);
    var filePath = 'snapshotsUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"osType\":null,\r\n\"diskSizeGB\":null,\r\n\"encryptionSettings\":{\r\n\"enabled\":null,\r\n\"diskEncryptionKey\":{\r\n\"sourceVault\":{\r\n\"id\":\"\"\r\n},\r\n\"secretUrl\":\"\"\r\n},\r\n\"keyEncryptionKey\":{\r\n\"sourceVault\":{\r\n\"id\":\"\"\r\n},\r\n\"keyUrl\":\"\"\r\n}\r\n},\r\n\"tags\":{\r\n},\r\n\"sku\":{\r\n\"name\":null,\r\n\"tier\":\"\"\r\n}\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  snapshotsUpdateupdateParameters2.command('patch')
  .description($('Command to patch snapshotsUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var snapshotObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(snapshotObj));
    if (options.operation == 'add') {
      jsonpatch.apply(snapshotObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(snapshotObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(snapshotObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(snapshotObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(snapshotObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set snapshot-update
  var catparametersUpdateSnapshotsSnapshotUpdate01 = cli.category('managed-snapshot');
  var parametersUpdateSnapshotsSnapshotUpdate01 = catparametersUpdateSnapshotsSnapshotUpdate01.category('update-parameters')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var setparametersUpdateSnapshotsSnapshotUpdate01 = parametersUpdateSnapshotsSnapshotUpdate01.category('snapshot-update')
  .description($('Commands to configure snapshot-update of managed-snapshot in update-parameters file.'));
  setparametersUpdateSnapshotsSnapshotUpdate01.command('set')
  .description($('Set snapshot-update in update-parameters string or files, e.g. \r\n{\r\n  "osType":null,\r\n  "diskSizeGB":null,\r\n  "encryptionSettings":{\r\n    "enabled":null,\r\n    "diskEncryptionKey":{\r\n      "sourceVault":{\r\n        "id":""\r\n      },\r\n      "secretUrl":""\r\n    },\r\n    "keyEncryptionKey":{\r\n      "sourceVault":{\r\n        "id":""\r\n      },\r\n      "keyUrl":""\r\n    }\r\n  },\r\n  "tags":{\r\n  },\r\n  "sku":{\r\n    "name":null,\r\n    "tier":""\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--os-type <osType>', $('Set the os-type value.'))
  .option('--disk-size-g-b <diskSizeGB>', $('Set the disk-size-g-b value.'))
  .option('--encryption-settings <encryptionSettings>', $('Set the encryption-settings value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'osType';
    if (options.osType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.osType);
      cli.output.verbose('================================================');
      if (options.parse && options.osType) {
        options.osType = JSON.parse(options.osType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.osType}]);
    }
    paramPath = options.path + '/' + 'diskSizeGB';
    if (options.diskSizeGB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.diskSizeGB);
      cli.output.verbose('================================================');
      if (options.parse && options.diskSizeGB) {
        options.diskSizeGB = JSON.parse(options.diskSizeGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskSizeGB}]);
    }
    paramPath = options.path + '/' + 'encryptionSettings';
    if (options.encryptionSettings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.encryptionSettings);
      cli.output.verbose('================================================');
      if (options.parse && options.encryptionSettings) {
        options.encryptionSettings = JSON.parse(options.encryptionSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.encryptionSettings}]);
    }
    paramPath = options.path + '/' + 'tags';
    if (options.tags) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.tags);
      cli.output.verbose('================================================');
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    paramPath = options.path + '/' + 'sku';
    if (options.sku) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sku);
      cli.output.verbose('================================================');
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete snapshot-update
  var catparametersUpdateSnapshotsSnapshotUpdate11 = cli.category('managed-snapshot');
  var parametersUpdateSnapshotsSnapshotUpdate11 = catparametersUpdateSnapshotsSnapshotUpdate11.category('update-parameters')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var deleteparametersUpdateSnapshotsSnapshotUpdate11 = parametersUpdateSnapshotsSnapshotUpdate11.category('snapshot-update')
  .description($('Commands to configure snapshot-update of managed-snapshot in update-parameters file.'));
  deleteparametersUpdateSnapshotsSnapshotUpdate11.command('delete')
  .description($('Remove snapshot-update in update-parameters string or files, e.g. \r\n{\r\n  "osType":null,\r\n  "diskSizeGB":null,\r\n  "encryptionSettings":{\r\n    "enabled":null,\r\n    "diskEncryptionKey":{\r\n      "sourceVault":{\r\n        "id":""\r\n      },\r\n      "secretUrl":""\r\n    },\r\n    "keyEncryptionKey":{\r\n      "sourceVault":{\r\n        "id":""\r\n      },\r\n      "keyUrl":""\r\n    }\r\n  },\r\n  "tags":{\r\n  },\r\n  "sku":{\r\n    "name":null,\r\n    "tier":""\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--os-type', $('Remove the os-type value.'))
  .option('--disk-size-g-b', $('Remove the disk-size-g-b value.'))
  .option('--encryption-settings', $('Remove the encryption-settings value.'))
  .option('--tags', $('Remove the tags value.'))
  .option('--sku', $('Remove the sku value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.osType || options.diskSizeGB || options.encryptionSettings || options.tags || options.sku;
    if (anySubItem) {
      var subItemPath = null;
      if (options.osType) {
        subItemPath = options.path + '/osType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.diskSizeGB) {
        subItemPath = options.path + '/diskSizeGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.encryptionSettings) {
        subItemPath = options.path + '/encryptionSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sku) {
        subItemPath = options.path + '/sku';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set encryption-settings
  var catparametersUpdateSnapshotsEncryptionSettings0ES1 = cli.category('managed-snapshot');
  var parametersUpdateSnapshotsEncryptionSettings0ES1 = catparametersUpdateSnapshotsEncryptionSettings0ES1.category('update-parameters')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var setparametersUpdateSnapshotsEncryptionSettings0ES1 = parametersUpdateSnapshotsEncryptionSettings0ES1.category('encryption-settings')
  .description($('Commands to configure encryption-settings of managed-snapshot in update-parameters file.'));
  setparametersUpdateSnapshotsEncryptionSettings0ES1.command('set')
  .description($('Set encryption-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "encryptionSettings" : {\r\n             "enabled":null,\r\n             "diskEncryptionKey":{\r\n               "sourceVault":{\r\n                 "id":""\r\n               },\r\n               "secretUrl":""\r\n             },\r\n             "keyEncryptionKey":{\r\n               "sourceVault":{\r\n                 "id":""\r\n               },\r\n               "keyUrl":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--enabled <enabled>', $('Set the enabled value.'))
  .option('--disk-encryption-key <diskEncryptionKey>', $('Set the disk-encryption-key value.'))
  .option('--key-encryption-key <keyEncryptionKey>', $('Set the key-encryption-key value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/encryptionSettings';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'enabled';
    if (options.enabled) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.enabled);
      cli.output.verbose('================================================');
      if (options.parse && options.enabled) {
        options.enabled = JSON.parse(options.enabled);
      }
      options.enabled = JSON.parse(options.enabled);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enabled}]);
    }
    paramPath = options.path + '/' + 'diskEncryptionKey';
    if (options.diskEncryptionKey) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.diskEncryptionKey);
      cli.output.verbose('================================================');
      if (options.parse && options.diskEncryptionKey) {
        options.diskEncryptionKey = JSON.parse(options.diskEncryptionKey);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskEncryptionKey}]);
    }
    paramPath = options.path + '/' + 'keyEncryptionKey';
    if (options.keyEncryptionKey) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.keyEncryptionKey);
      cli.output.verbose('================================================');
      if (options.parse && options.keyEncryptionKey) {
        options.keyEncryptionKey = JSON.parse(options.keyEncryptionKey);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyEncryptionKey}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete encryption-settings
  var catparametersUpdateSnapshotsEncryptionSettings1ES1 = cli.category('managed-snapshot');
  var parametersUpdateSnapshotsEncryptionSettings1ES1 = catparametersUpdateSnapshotsEncryptionSettings1ES1.category('update-parameters')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var deleteparametersUpdateSnapshotsEncryptionSettings1ES1 = parametersUpdateSnapshotsEncryptionSettings1ES1.category('encryption-settings')
  .description($('Commands to configure encryption-settings of managed-snapshot in update-parameters file.'));
  deleteparametersUpdateSnapshotsEncryptionSettings1ES1.command('delete')
  .description($('Remove encryption-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "encryptionSettings" : {\r\n             "enabled":null,\r\n             "diskEncryptionKey":{\r\n               "sourceVault":{\r\n                 "id":""\r\n               },\r\n               "secretUrl":""\r\n             },\r\n             "keyEncryptionKey":{\r\n               "sourceVault":{\r\n                 "id":""\r\n               },\r\n               "keyUrl":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--enabled', $('Remove the enabled value.'))
  .option('--disk-encryption-key', $('Remove the disk-encryption-key value.'))
  .option('--key-encryption-key', $('Remove the key-encryption-key value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/encryptionSettings';
    var anySubItem = false || options.enabled || options.diskEncryptionKey || options.keyEncryptionKey;
    if (anySubItem) {
      var subItemPath = null;
      if (options.enabled) {
        subItemPath = options.path + '/enabled';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.diskEncryptionKey) {
        subItemPath = options.path + '/diskEncryptionKey';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.keyEncryptionKey) {
        subItemPath = options.path + '/keyEncryptionKey';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set disk-encryption-key
  var catparametersUpdateSnapshotsDiskEncryptionKey0ESdEK1 = cli.category('managed-snapshot');
  var parametersUpdateSnapshotsDiskEncryptionKey0ESdEK1 = catparametersUpdateSnapshotsDiskEncryptionKey0ESdEK1.category('update-parameters')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var setparametersUpdateSnapshotsDiskEncryptionKey0ESdEK1 = parametersUpdateSnapshotsDiskEncryptionKey0ESdEK1.category('disk-encryption-key')
  .description($('Commands to configure disk-encryption-key of managed-snapshot in update-parameters file.'));
  setparametersUpdateSnapshotsDiskEncryptionKey0ESdEK1.command('set')
  .description($('Set disk-encryption-key in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "diskEncryptionKey" : {\r\n             "sourceVault":{\r\n               "id":""\r\n             },\r\n             "secretUrl":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--source-vault <sourceVault>', $('Set the source-vault value.'))
  .option('--secret-url <secretUrl>', $('Set the secret-url value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/encryptionSettings/diskEncryptionKey';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'sourceVault';
    if (options.sourceVault) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sourceVault);
      cli.output.verbose('================================================');
      if (options.parse && options.sourceVault) {
        options.sourceVault = JSON.parse(options.sourceVault);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceVault}]);
    }
    paramPath = options.path + '/' + 'secretUrl';
    if (options.secretUrl) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.secretUrl);
      cli.output.verbose('================================================');
      if (options.parse && options.secretUrl) {
        options.secretUrl = JSON.parse(options.secretUrl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.secretUrl}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete disk-encryption-key
  var catparametersUpdateSnapshotsDiskEncryptionKey1ESdEK1 = cli.category('managed-snapshot');
  var parametersUpdateSnapshotsDiskEncryptionKey1ESdEK1 = catparametersUpdateSnapshotsDiskEncryptionKey1ESdEK1.category('update-parameters')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var deleteparametersUpdateSnapshotsDiskEncryptionKey1ESdEK1 = parametersUpdateSnapshotsDiskEncryptionKey1ESdEK1.category('disk-encryption-key')
  .description($('Commands to configure disk-encryption-key of managed-snapshot in update-parameters file.'));
  deleteparametersUpdateSnapshotsDiskEncryptionKey1ESdEK1.command('delete')
  .description($('Remove disk-encryption-key in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "diskEncryptionKey" : {\r\n             "sourceVault":{\r\n               "id":""\r\n             },\r\n             "secretUrl":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--source-vault', $('Remove the source-vault value.'))
  .option('--secret-url', $('Remove the secret-url value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/encryptionSettings/diskEncryptionKey';
    var anySubItem = false || options.sourceVault || options.secretUrl;
    if (anySubItem) {
      var subItemPath = null;
      if (options.sourceVault) {
        subItemPath = options.path + '/sourceVault';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.secretUrl) {
        subItemPath = options.path + '/secretUrl';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set source-vault
  var catparametersUpdateSnapshotsSourceVault0ESdEKsV1 = cli.category('managed-snapshot');
  var parametersUpdateSnapshotsSourceVault0ESdEKsV1 = catparametersUpdateSnapshotsSourceVault0ESdEKsV1.category('update-parameters')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var setparametersUpdateSnapshotsSourceVault0ESdEKsV1 = parametersUpdateSnapshotsSourceVault0ESdEKsV1.category('source-vault')
  .description($('Commands to configure source-vault of managed-snapshot in update-parameters file.'));
  setparametersUpdateSnapshotsSourceVault0ESdEKsV1.command('set')
  .description($('Set source-vault in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sourceVault" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/encryptionSettings/diskEncryptionKey/sourceVault';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete source-vault
  var catparametersUpdateSnapshotsSourceVault1ESdEKsV1 = cli.category('managed-snapshot');
  var parametersUpdateSnapshotsSourceVault1ESdEKsV1 = catparametersUpdateSnapshotsSourceVault1ESdEKsV1.category('update-parameters')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var deleteparametersUpdateSnapshotsSourceVault1ESdEKsV1 = parametersUpdateSnapshotsSourceVault1ESdEKsV1.category('source-vault')
  .description($('Commands to configure source-vault of managed-snapshot in update-parameters file.'));
  deleteparametersUpdateSnapshotsSourceVault1ESdEKsV1.command('delete')
  .description($('Remove source-vault in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sourceVault" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/encryptionSettings/diskEncryptionKey/sourceVault';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set key-encryption-key
  var catparametersUpdateSnapshotsKeyEncryptionKey0ESkEK1 = cli.category('managed-snapshot');
  var parametersUpdateSnapshotsKeyEncryptionKey0ESkEK1 = catparametersUpdateSnapshotsKeyEncryptionKey0ESkEK1.category('update-parameters')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var setparametersUpdateSnapshotsKeyEncryptionKey0ESkEK1 = parametersUpdateSnapshotsKeyEncryptionKey0ESkEK1.category('key-encryption-key')
  .description($('Commands to configure key-encryption-key of managed-snapshot in update-parameters file.'));
  setparametersUpdateSnapshotsKeyEncryptionKey0ESkEK1.command('set')
  .description($('Set key-encryption-key in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "keyEncryptionKey" : {\r\n             "sourceVault":{\r\n               "id":""\r\n             },\r\n             "keyUrl":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--source-vault <sourceVault>', $('Set the source-vault value.'))
  .option('--key-url <keyUrl>', $('Set the key-url value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/encryptionSettings/keyEncryptionKey';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'sourceVault';
    if (options.sourceVault) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sourceVault);
      cli.output.verbose('================================================');
      if (options.parse && options.sourceVault) {
        options.sourceVault = JSON.parse(options.sourceVault);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceVault}]);
    }
    paramPath = options.path + '/' + 'keyUrl';
    if (options.keyUrl) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.keyUrl);
      cli.output.verbose('================================================');
      if (options.parse && options.keyUrl) {
        options.keyUrl = JSON.parse(options.keyUrl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyUrl}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete key-encryption-key
  var catparametersUpdateSnapshotsKeyEncryptionKey1ESkEK1 = cli.category('managed-snapshot');
  var parametersUpdateSnapshotsKeyEncryptionKey1ESkEK1 = catparametersUpdateSnapshotsKeyEncryptionKey1ESkEK1.category('update-parameters')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var deleteparametersUpdateSnapshotsKeyEncryptionKey1ESkEK1 = parametersUpdateSnapshotsKeyEncryptionKey1ESkEK1.category('key-encryption-key')
  .description($('Commands to configure key-encryption-key of managed-snapshot in update-parameters file.'));
  deleteparametersUpdateSnapshotsKeyEncryptionKey1ESkEK1.command('delete')
  .description($('Remove key-encryption-key in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "keyEncryptionKey" : {\r\n             "sourceVault":{\r\n               "id":""\r\n             },\r\n             "keyUrl":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--source-vault', $('Remove the source-vault value.'))
  .option('--key-url', $('Remove the key-url value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/encryptionSettings/keyEncryptionKey';
    var anySubItem = false || options.sourceVault || options.keyUrl;
    if (anySubItem) {
      var subItemPath = null;
      if (options.sourceVault) {
        subItemPath = options.path + '/sourceVault';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.keyUrl) {
        subItemPath = options.path + '/keyUrl';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set key-encryption-key-source-vault
  var catparametersUpdateSnapshotsSourceVault0ESkEKsV2 = cli.category('managed-snapshot');
  var parametersUpdateSnapshotsSourceVault0ESkEKsV2 = catparametersUpdateSnapshotsSourceVault0ESkEKsV2.category('update-parameters')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var setparametersUpdateSnapshotsSourceVault0ESkEKsV2 = parametersUpdateSnapshotsSourceVault0ESkEKsV2.category('key-encryption-key-source-vault')
  .description($('Commands to configure key-encryption-key-source-vault of managed-snapshot in update-parameters file.'));
  setparametersUpdateSnapshotsSourceVault0ESkEKsV2.command('set')
  .description($('Set key-encryption-key-source-vault in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sourceVault" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/encryptionSettings/keyEncryptionKey/sourceVault';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete key-encryption-key-source-vault
  var catparametersUpdateSnapshotsSourceVault1ESkEKsV2 = cli.category('managed-snapshot');
  var parametersUpdateSnapshotsSourceVault1ESkEKsV2 = catparametersUpdateSnapshotsSourceVault1ESkEKsV2.category('update-parameters')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var deleteparametersUpdateSnapshotsSourceVault1ESkEKsV2 = parametersUpdateSnapshotsSourceVault1ESkEKsV2.category('key-encryption-key-source-vault')
  .description($('Commands to configure key-encryption-key-source-vault of managed-snapshot in update-parameters file.'));
  deleteparametersUpdateSnapshotsSourceVault1ESkEKsV2.command('delete')
  .description($('Remove key-encryption-key-source-vault in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sourceVault" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/encryptionSettings/keyEncryptionKey/sourceVault';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set sku
  var catparametersUpdateSnapshotsSku0S1 = cli.category('managed-snapshot');
  var parametersUpdateSnapshotsSku0S1 = catparametersUpdateSnapshotsSku0S1.category('update-parameters')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var setparametersUpdateSnapshotsSku0S1 = parametersUpdateSnapshotsSku0S1.category('sku')
  .description($('Commands to configure sku of managed-snapshot in update-parameters file.'));
  setparametersUpdateSnapshotsSku0S1.command('set')
  .description($('Set sku in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":null,\r\n             "tier":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--name <name>', $('Set the name value.'))
  .option('--tier <tier>', $('Set the tier value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/sku';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'tier';
    if (options.tier) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.tier);
      cli.output.verbose('================================================');
      if (options.parse && options.tier) {
        options.tier = JSON.parse(options.tier);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tier}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete sku
  var catparametersUpdateSnapshotsSku1S1 = cli.category('managed-snapshot');
  var parametersUpdateSnapshotsSku1S1 = catparametersUpdateSnapshotsSku1S1.category('update-parameters')
  .description($('Commands to manage configuration of snapshots in the parameter file.'));
  var deleteparametersUpdateSnapshotsSku1S1 = parametersUpdateSnapshotsSku1S1.category('sku')
  .description($('Commands to configure sku of managed-snapshot in update-parameters file.'));
  deleteparametersUpdateSnapshotsSku1S1.command('delete')
  .description($('Remove sku in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":null,\r\n             "tier":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--name', $('Remove the name value.'))
  .option('--tier', $('Remove the tier value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/sku';
    var anySubItem = false || options.name || options.tier;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tier) {
        subItemPath = options.path + '/tier';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });



};
