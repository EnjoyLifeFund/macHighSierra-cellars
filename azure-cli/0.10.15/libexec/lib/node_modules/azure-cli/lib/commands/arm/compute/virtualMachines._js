/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

/*

Generated Command List:

azure vm convert-to-managed-disks 
--resource-group $p0
--vm-name $p1

azure vm config virtual-machine set
--parameter-file $f
--parse
--plan $plan
--hardware-profile $hardwareProfile
--storage-profile $storageProfile
--os-profile $osProfile
--network-profile $networkProfile
--diagnostics-profile $diagnosticsProfile
--availability-set $availabilitySet
--provisioning-state $provisioningState
--instance-view $instanceView
--license-type $licenseType
--vm-id $vmId
--resources $resources
--identity $identity
--id $id
--name $name
--type $type
--location $location
--tags $tags

azure vm config virtual-machine delete
--parameter-file $f
--plan
--hardware-profile
--storage-profile
--os-profile
--network-profile
--diagnostics-profile
--availability-set
--provisioning-state
--instance-view
--license-type
--vm-id
--resources
--identity
--id
--name
--type
--location
--tags

azure vm config plan set
--parameter-file $f
--parse
--name $name
--publisher $publisher
--product $product
--promotion-code $promotionCode

azure vm config plan delete
--parameter-file $f
--name
--publisher
--product
--promotion-code

azure vm config hardware-profile set
--parameter-file $f
--parse
--vm-size $vmSize

azure vm config hardware-profile delete
--parameter-file $f
--vm-size

azure vm config storage-profile set
--parameter-file $f
--parse
--image-reference $imageReference
--os-disk $osDisk
--data-disks $dataDisks

azure vm config storage-profile delete
--parameter-file $f
--image-reference
--os-disk
--data-disks

azure vm config image-reference set
--parameter-file $f
--parse
--publisher $publisher
--offer $offer
--sku $sku
--version $version
--id $id

azure vm config image-reference delete
--parameter-file $f
--publisher
--offer
--sku
--version
--id

azure vm config os-disk set
--parameter-file $f
--parse
--os-type $osType
--encryption-settings $encryptionSettings
--name $name
--vhd $vhd
--image $image
--caching $caching
--create-option $createOption
--disk-size-g-b $diskSizeGB
--managed-disk $managedDisk

azure vm config os-disk delete
--parameter-file $f
--os-type
--encryption-settings
--name
--vhd
--image
--caching
--create-option
--disk-size-g-b
--managed-disk

azure vm config encryption-settings set
--parameter-file $f
--parse
--disk-encryption-key $diskEncryptionKey
--key-encryption-key $keyEncryptionKey
--enabled $enabled

azure vm config encryption-settings delete
--parameter-file $f
--disk-encryption-key
--key-encryption-key
--enabled

azure vm config disk-encryption-key set
--parameter-file $f
--parse
--secret-url $secretUrl
--source-vault $sourceVault

azure vm config disk-encryption-key delete
--parameter-file $f
--secret-url
--source-vault

azure vm config source-vault set
--parameter-file $f
--parse
--id $id

azure vm config source-vault delete
--parameter-file $f
--id

azure vm config key-encryption-key set
--parameter-file $f
--parse
--key-url $keyUrl
--source-vault $sourceVault

azure vm config key-encryption-key delete
--parameter-file $f
--key-url
--source-vault

azure vm config key-encryption-key-source-vault set
--parameter-file $f
--parse
--id $id

azure vm config key-encryption-key-source-vault delete
--parameter-file $f
--id

azure vm config vhd set
--parameter-file $f
--parse
--uri $uri

azure vm config vhd delete
--parameter-file $f
--uri

azure vm config image set
--parameter-file $f
--parse
--uri $uri

azure vm config image delete
--parameter-file $f
--uri

azure vm config managed-disk set
--parameter-file $f
--parse
--storage-account-type $storageAccountType
--id $id

azure vm config managed-disk delete
--parameter-file $f
--storage-account-type
--id

azure vm config data-disks set
--parameter-file $f
--index $i
--value $v
--parse
--lun $lun
--name $name
--vhd $vhd
--image $image
--caching $caching
--create-option $createOption
--disk-size-g-b $diskSizeGB
--managed-disk $managedDisk

azure vm config data-disks delete
--parameter-file $f
--index $pindex
--lun
--name
--vhd
--image
--caching
--create-option
--disk-size-g-b
--managed-disk

azure vm config data-disks-vhd set
--parameter-file $f
--data-disks-index $i
--parse
--uri $uri

azure vm config data-disks-vhd delete
--parameter-file $f
--data-disks-index $pdata-disks-index
--uri

azure vm config data-disks-image set
--parameter-file $f
--data-disks-index $i
--parse
--uri $uri

azure vm config data-disks-image delete
--parameter-file $f
--data-disks-index $pdata-disks-index
--uri

azure vm config data-disks-managed-disk set
--parameter-file $f
--data-disks-index $i
--parse
--storage-account-type $storageAccountType
--id $id

azure vm config data-disks-managed-disk delete
--parameter-file $f
--data-disks-index $pdata-disks-index
--storage-account-type
--id

azure vm config os-profile set
--parameter-file $f
--parse
--computer-name $computerName
--admin-username $adminUsername
--admin-password $adminPassword
--custom-data $customData
--windows-configuration $windowsConfiguration
--linux-configuration $linuxConfiguration
--secrets $secrets

azure vm config os-profile delete
--parameter-file $f
--computer-name
--admin-username
--admin-password
--custom-data
--windows-configuration
--linux-configuration
--secrets

azure vm config windows-configuration set
--parameter-file $f
--parse
--provision-vm-agent $provisionVMAgent
--enable-automatic-updates $enableAutomaticUpdates
--time-zone $timeZone
--additional-unattend-content $additionalUnattendContent
--win-rm $winRM

azure vm config windows-configuration delete
--parameter-file $f
--provision-vm-agent
--enable-automatic-updates
--time-zone
--additional-unattend-content
--win-rm

azure vm config additional-unattend-content set
--parameter-file $f
--index $i
--value $v
--parse
--pass-name $passName
--component-name $componentName
--setting-name $settingName
--content $content

azure vm config additional-unattend-content delete
--parameter-file $f
--index $pindex
--pass-name
--component-name
--setting-name
--content

azure vm config win-rm set
--parameter-file $f
--parse
--listeners $listeners

azure vm config win-rm delete
--parameter-file $f
--listeners

azure vm config listeners set
--parameter-file $f
--index $i
--value $v
--parse
--protocol $protocol
--certificate-url $certificateUrl

azure vm config listeners delete
--parameter-file $f
--index $pindex
--protocol
--certificate-url

azure vm config linux-configuration set
--parameter-file $f
--parse
--disable-password-authentication $disablePasswordAuthentication
--ssh $ssh

azure vm config linux-configuration delete
--parameter-file $f
--disable-password-authentication
--ssh

azure vm config ssh set
--parameter-file $f
--parse
--public-keys $publicKeys

azure vm config ssh delete
--parameter-file $f
--public-keys

azure vm config public-keys set
--parameter-file $f
--index $i
--value $v
--parse
--path $path
--key-data $keyData

azure vm config public-keys delete
--parameter-file $f
--index $pindex
--path
--key-data

azure vm config secrets set
--parameter-file $f
--index $i
--value $v
--parse
--source-vault $sourceVault
--vault-certificates $vaultCertificates

azure vm config secrets delete
--parameter-file $f
--index $pindex
--source-vault
--vault-certificates

azure vm config secrets-source-vault set
--parameter-file $f
--secrets-index $i
--parse
--id $id

azure vm config secrets-source-vault delete
--parameter-file $f
--secrets-index $psecrets-index
--id

azure vm config vault-certificates set
--parameter-file $f
--index $i
--secrets-index $i
--value $v
--parse
--certificate-url $certificateUrl
--certificate-store $certificateStore

azure vm config vault-certificates delete
--parameter-file $f
--index $pindex
--secrets-index $psecrets-index
--certificate-url
--certificate-store

azure vm config network-profile set
--parameter-file $f
--parse
--network-interfaces $networkInterfaces

azure vm config network-profile delete
--parameter-file $f
--network-interfaces

azure vm config network-interfaces set
--parameter-file $f
--index $i
--value $v
--parse
--primary $primary
--id $id

azure vm config network-interfaces delete
--parameter-file $f
--index $pindex
--primary
--id

azure vm config diagnostics-profile set
--parameter-file $f
--parse
--boot-diagnostics $bootDiagnostics

azure vm config diagnostics-profile delete
--parameter-file $f
--boot-diagnostics

azure vm config boot-diagnostics set
--parameter-file $f
--parse
--enabled $enabled
--storage-uri $storageUri

azure vm config boot-diagnostics delete
--parameter-file $f
--enabled
--storage-uri

azure vm config availability-set set
--parameter-file $f
--parse
--id $id

azure vm config availability-set delete
--parameter-file $f
--id

azure vm config instance-view set
--parameter-file $f
--parse
--platform-update-domain $platformUpdateDomain
--platform-fault-domain $platformFaultDomain
--rdp-thumb-print $rdpThumbPrint
--vm-agent $vmAgent
--maintenance-redeploy-status $maintenanceRedeployStatus
--disks $disks
--extensions $extensions
--boot-diagnostics $bootDiagnostics
--statuses $statuses

azure vm config instance-view delete
--parameter-file $f
--platform-update-domain
--platform-fault-domain
--rdp-thumb-print
--vm-agent
--maintenance-redeploy-status
--disks
--extensions
--boot-diagnostics
--statuses

azure vm config vm-agent set
--parameter-file $f
--parse
--vm-agent-version $vmAgentVersion
--extension-handlers $extensionHandlers
--statuses $statuses

azure vm config vm-agent delete
--parameter-file $f
--vm-agent-version
--extension-handlers
--statuses

azure vm config extension-handlers set
--parameter-file $f
--index $i
--value $v
--parse
--type $type
--type-handler-version $typeHandlerVersion
--status $status

azure vm config extension-handlers delete
--parameter-file $f
--index $pindex
--type
--type-handler-version
--status

azure vm config status set
--parameter-file $f
--extension-handlers-index $i
--parse
--code $code
--level $level
--display-status $displayStatus
--message $message
--time $time

azure vm config status delete
--parameter-file $f
--extension-handlers-index $pextension-handlers-index
--code
--level
--display-status
--message
--time

azure vm config statuses set
--parameter-file $f
--index $i
--value $v
--parse
--code $code
--level $level
--display-status $displayStatus
--message $message
--time $time

azure vm config statuses delete
--parameter-file $f
--index $pindex
--code
--level
--display-status
--message
--time

azure vm config maintenance-redeploy-status set
--parameter-file $f
--parse
--is-customer-initiated-maintenance-allowed $isCustomerInitiatedMaintenanceAllowed
--pre-maintenance-window-start-time $preMaintenanceWindowStartTime
--pre-maintenance-window-end-time $preMaintenanceWindowEndTime
--maintenance-window-start-time $maintenanceWindowStartTime
--maintenance-window-end-time $maintenanceWindowEndTime
--last-operation-result-code $lastOperationResultCode
--last-operation-message $lastOperationMessage

azure vm config maintenance-redeploy-status delete
--parameter-file $f
--is-customer-initiated-maintenance-allowed
--pre-maintenance-window-start-time
--pre-maintenance-window-end-time
--maintenance-window-start-time
--maintenance-window-end-time
--last-operation-result-code
--last-operation-message

azure vm config disks set
--parameter-file $f
--index $i
--value $v
--parse
--name $name
--statuses $statuses

azure vm config disks delete
--parameter-file $f
--index $pindex
--name
--statuses

azure vm config disks-statuses set
--parameter-file $f
--index $i
--disks-index $i
--value $v
--parse
--code $code
--level $level
--display-status $displayStatus
--message $message
--time $time

azure vm config disks-statuses delete
--parameter-file $f
--index $pindex
--disks-index $pdisks-index
--code
--level
--display-status
--message
--time

azure vm config extensions set
--parameter-file $f
--index $i
--value $v
--parse
--name $name
--type $type
--type-handler-version $typeHandlerVersion
--substatuses $substatuses
--statuses $statuses

azure vm config extensions delete
--parameter-file $f
--index $pindex
--name
--type
--type-handler-version
--substatuses
--statuses

azure vm config substatuses set
--parameter-file $f
--index $i
--extensions-index $i
--value $v
--parse
--code $code
--level $level
--display-status $displayStatus
--message $message
--time $time

azure vm config substatuses delete
--parameter-file $f
--index $pindex
--extensions-index $pextensions-index
--code
--level
--display-status
--message
--time

azure vm config extensions-statuses set
--parameter-file $f
--index $i
--extensions-index $i
--value $v
--parse
--code $code
--level $level
--display-status $displayStatus
--message $message
--time $time

azure vm config extensions-statuses delete
--parameter-file $f
--index $pindex
--extensions-index $pextensions-index
--code
--level
--display-status
--message
--time

azure vm config instance-view-boot-diagnostics set
--parameter-file $f
--parse
--console-screenshot-blob-uri $consoleScreenshotBlobUri
--serial-console-log-blob-uri $serialConsoleLogBlobUri

azure vm config instance-view-boot-diagnostics delete
--parameter-file $f
--console-screenshot-blob-uri
--serial-console-log-blob-uri

azure vm config instance-view-statuses set
--parameter-file $f
--index $i
--value $v
--parse
--code $code
--level $level
--display-status $displayStatus
--message $message
--time $time

azure vm config instance-view-statuses delete
--parameter-file $f
--index $pindex
--code
--level
--display-status
--message
--time

azure vm config resources set
--parameter-file $f
--index $i
--value $v
--parse
--force-update-tag $forceUpdateTag
--publisher $publisher
--virtual-machine-extension-type $virtualMachineExtensionType
--type-handler-version $typeHandlerVersion
--auto-upgrade-minor-version $autoUpgradeMinorVersion
--settings $settings
--protected-settings $protectedSettings
--provisioning-state $provisioningState
--instance-view $instanceView
--id $id
--name $name
--type $type
--location $location
--tags $tags

azure vm config resources delete
--parameter-file $f
--index $pindex
--force-update-tag
--publisher
--virtual-machine-extension-type
--type-handler-version
--auto-upgrade-minor-version
--settings
--protected-settings
--provisioning-state
--instance-view
--id
--name
--type
--location
--tags

azure vm config resources-instance-view set
--parameter-file $f
--resources-index $i
--parse
--name $name
--type $type
--type-handler-version $typeHandlerVersion
--substatuses $substatuses
--statuses $statuses

azure vm config resources-instance-view delete
--parameter-file $f
--resources-index $presources-index
--name
--type
--type-handler-version
--substatuses
--statuses

azure vm config instance-view-substatuses set
--parameter-file $f
--index $i
--resources-index $i
--value $v
--parse
--code $code
--level $level
--display-status $displayStatus
--message $message
--time $time

azure vm config instance-view-substatuses delete
--parameter-file $f
--index $pindex
--resources-index $presources-index
--code
--level
--display-status
--message
--time

azure vm config instance-view-statuses set
--parameter-file $f
--index $i
--resources-index $i
--value $v
--parse
--code $code
--level $level
--display-status $displayStatus
--message $message
--time $time

azure vm config instance-view-statuses delete
--parameter-file $f
--index $pindex
--resources-index $presources-index
--code
--level
--display-status
--message
--time

azure vm config identity set
--parameter-file $f
--parse
--principal-id $principalId
--tenant-id $tenantId
--type $type

azure vm config identity delete
--parameter-file $f
--principal-id
--tenant-id
--type

azure vm create-or-update 
--resource-group $p0
--vm-name $p1
--parameters $p2
--parameter-file $f

azure vm config generate 
--parameter-file $f

azure vm config patch 
--parameter-file $f

azure vm perform-maintenance 
--resource-group $p0
--vm-name $p1

azure vm redeploy 
--resource-group $p0
--vm-name $p1

azure vm run-command-parameters run-command-input set
--parameter-file $f
--parse
--command-id $commandId
--parameters $parameters

azure vm run-command-parameters run-command-input delete
--parameter-file $f
--command-id
--parameters

azure vm run-command-parameters parameters set
--parameter-file $f
--index $i
--value $v
--parse
--name $name
--value $value

azure vm run-command-parameters parameters delete
--parameter-file $f
--index $pindex
--name
--value

azure vm run-command 
--resource-group $p0
--vm-name $p1
--parameters $p2
--parameter-file $f

azure vm run-command-parameters generate 
--parameter-file $f

azure vm run-command-parameters patch 
--parameter-file $f


*/

'use strict';
var fs = require('fs');
var jsonpatch = require('fast-json-patch');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;
function beautify(jsonText) {
  var obj = JSON.parse(jsonText);
  return JSON.stringify(obj, null, 2);
}

exports.init = function (cli) {



/*
  VirtualMachines ConvertToManagedDisks
  --resource-group
  --vm-name
*/
  var virtualMachinesConvertToManagedDisks = cli.category('vm')
  .description($('Commands to manage your virtual machines.  '));
  virtualMachinesConvertToManagedDisks.command('convert-to-managed-disks [resource-group] [vm-name]')
  .description($('Converts virtual machine disks from blob-based to managed disks. Virtual machine must be stop-deallocated before invoking this operation.'))
  .usage('[options] <resource-group> <vm-name>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --vm-name <vm-name>', $('vm-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, vMName, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!vMName) {
      vMName = cli.interaction.promptIfNotGiven($('vm-name : '), vMName, _);
    }

    cli.output.verbose('vMName = ' + vMName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachines.convertToManagedDisks(resourceGroup, vMName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachines CreateOrUpdate
  --resource-group
  --vm-name
  --parameters
=============================================
{
  "plan":{
    "name":"",
    "publisher":"",
    "product":"",
    "promotionCode":""
  },
  "hardwareProfile":{
    "vmSize":""
  },
  "storageProfile":{
    "imageReference":{
      "publisher":"",
      "offer":"",
      "sku":"",
      "version":"",
      "id":""
    },
    "osDisk":{
      "osType":null,
      "encryptionSettings":{
        "diskEncryptionKey":{
          "secretUrl":"",
          "sourceVault":{
            "id":""
          }
        },
        "keyEncryptionKey":{
          "keyUrl":"",
          "sourceVault":{
            "id":""
          }
        },
        "enabled":null
      },
      "name":"",
      "vhd":{
        "uri":""
      },
      "image":{
        "uri":""
      },
      "caching":null,
      "createOption":"",
      "diskSizeGB":null,
      "managedDisk":{
        "storageAccountType":null,
        "id":""
      }
    },
    "dataDisks":[
      {
        "lun":"",
        "name":"",
        "vhd":{
          "uri":""
        },
        "image":{
          "uri":""
        },
        "caching":null,
        "createOption":"",
        "diskSizeGB":null,
        "managedDisk":{
          "storageAccountType":null,
          "id":""
        }
      }
    ]
  },
  "osProfile":{
    "computerName":"",
    "adminUsername":"",
    "adminPassword":"",
    "customData":"",
    "windowsConfiguration":{
      "provisionVMAgent":null,
      "enableAutomaticUpdates":null,
      "timeZone":"",
      "additionalUnattendContent":[
        {
          "passName":null,
          "componentName":null,
          "settingName":null,
          "content":""
        }
      ],
      "winRM":{
        "listeners":[
          {
            "protocol":null,
            "certificateUrl":""
          }
        ]
      }
    },
    "linuxConfiguration":{
      "disablePasswordAuthentication":null,
      "ssh":{
        "publicKeys":[
          {
            "path":"",
            "keyData":""
          }
        ]
      }
    },
    "secrets":[
      {
        "sourceVault":{
          "id":""
        },
        "vaultCertificates":[
          {
            "certificateUrl":"",
            "certificateStore":""
          }
        ]
      }
    ]
  },
  "networkProfile":{
    "networkInterfaces":[
      {
        "primary":null,
        "id":""
      }
    ]
  },
  "diagnosticsProfile":{
    "bootDiagnostics":{
      "enabled":null,
      "storageUri":""
    }
  },
  "availabilitySet":{
    "id":""
  },
  "provisioningState":"",
  "instanceView":{
    "platformUpdateDomain":null,
    "platformFaultDomain":null,
    "rdpThumbPrint":"",
    "vmAgent":{
      "vmAgentVersion":"",
      "extensionHandlers":[
        {
          "type":"",
          "typeHandlerVersion":"",
          "status":{
            "code":"",
            "level":null,
            "displayStatus":"",
            "message":"",
            "time":null
          }
        }
      ],
      "statuses":[
        {
          "code":"",
          "level":null,
          "displayStatus":"",
          "message":"",
          "time":null
        }
      ]
    },
    "maintenanceRedeployStatus":{
      "isCustomerInitiatedMaintenanceAllowed":null,
      "preMaintenanceWindowStartTime":null,
      "preMaintenanceWindowEndTime":null,
      "maintenanceWindowStartTime":null,
      "maintenanceWindowEndTime":null,
      "lastOperationResultCode":null,
      "lastOperationMessage":""
    },
    "disks":[
      {
        "name":"",
        "statuses":[
          {
            "code":"",
            "level":null,
            "displayStatus":"",
            "message":"",
            "time":null
          }
        ]
      }
    ],
    "extensions":[
      {
        "name":"",
        "type":"",
        "typeHandlerVersion":"",
        "substatuses":[
          {
            "code":"",
            "level":null,
            "displayStatus":"",
            "message":"",
            "time":null
          }
        ],
        "statuses":[
          {
            "code":"",
            "level":null,
            "displayStatus":"",
            "message":"",
            "time":null
          }
        ]
      }
    ],
    "bootDiagnostics":{
      "consoleScreenshotBlobUri":"",
      "serialConsoleLogBlobUri":""
    },
    "statuses":[
      {
        "code":"",
        "level":null,
        "displayStatus":"",
        "message":"",
        "time":null
      }
    ]
  },
  "licenseType":"",
  "vmId":"",
  "resources":[
    {
      "forceUpdateTag":"",
      "publisher":"",
      "virtualMachineExtensionType":"",
      "typeHandlerVersion":"",
      "autoUpgradeMinorVersion":null,
      "settings":{
      },
      "protectedSettings":{
      },
      "provisioningState":"",
      "instanceView":{
        "name":"",
        "type":"",
        "typeHandlerVersion":"",
        "substatuses":[
          {
            "code":"",
            "level":null,
            "displayStatus":"",
            "message":"",
            "time":null
          }
        ],
        "statuses":[
          {
            "code":"",
            "level":null,
            "displayStatus":"",
            "message":"",
            "time":null
          }
        ]
      },
      "id":null,
      "name":null,
      "type":null,
      "location":"",
      "tags":{
      }
    }
  ],
  "identity":{
    "principalId":"",
    "tenantId":"",
    "type":null
  },
  "id":null,
  "name":null,
  "type":null,
  "location":"",
  "tags":{
  }
}
*/
  var virtualMachinesCreateOrUpdate = cli.category('vm')
  .description($('Commands to manage your virtual machines.  '));
  virtualMachinesCreateOrUpdate.command('create-or-update [resource-group] [vm-name] [parameters]')
  .description($('The operation to create or update a virtual machine.'))
  .usage('[options] <resource-group> <vm-name> <parameters>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --vm-name <vm-name>', $('vm-name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, vMName, parameters, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!vMName) {
      vMName = cli.interaction.promptIfNotGiven($('vm-name : '), vMName, _);
    }

    cli.output.verbose('vMName = ' + vMName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachines.createOrUpdate(resourceGroup, vMName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachinesCreateOrUpdatecreateOrUpdateParameters2 = virtualMachinesCreateOrUpdate.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  virtualMachinesCreateOrUpdatecreateOrUpdateParameters2.command('create')
  .description($('Generate virtualMachinesCreateOrUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"plan\":{\"name\":\"\",\"publisher\":\"\",\"product\":\"\",\"promotionCode\":\"\"},\"hardwareProfile\":{\"vmSize\":\"\"},\"storageProfile\":{\"imageReference\":{\"publisher\":\"\",\"offer\":\"\",\"sku\":\"\",\"version\":\"\",\"id\":\"\"},\"osDisk\":{\"osType\":null,\"encryptionSettings\":{\"diskEncryptionKey\":{\"secretUrl\":\"\",\"sourceVault\":{\"id\":\"\"}},\"keyEncryptionKey\":{\"keyUrl\":\"\",\"sourceVault\":{\"id\":\"\"}},\"enabled\":null},\"name\":\"\",\"vhd\":{\"uri\":\"\"},\"image\":{\"uri\":\"\"},\"caching\":null,\"createOption\":\"\",\"diskSizeGB\":null,\"managedDisk\":{\"storageAccountType\":null,\"id\":\"\"}},\"dataDisks\":[{\"lun\":\"\",\"name\":\"\",\"vhd\":{\"uri\":\"\"},\"image\":{\"uri\":\"\"},\"caching\":null,\"createOption\":\"\",\"diskSizeGB\":null,\"managedDisk\":{\"storageAccountType\":null,\"id\":\"\"}}]},\"osProfile\":{\"computerName\":\"\",\"adminUsername\":\"\",\"adminPassword\":\"\",\"customData\":\"\",\"windowsConfiguration\":{\"provisionVMAgent\":null,\"enableAutomaticUpdates\":null,\"timeZone\":\"\",\"additionalUnattendContent\":[{\"passName\":null,\"componentName\":null,\"settingName\":null,\"content\":\"\"}],\"winRM\":{\"listeners\":[{\"protocol\":null,\"certificateUrl\":\"\"}]}},\"linuxConfiguration\":{\"disablePasswordAuthentication\":null,\"ssh\":{\"publicKeys\":[{\"path\":\"\",\"keyData\":\"\"}]}},\"secrets\":[{\"sourceVault\":{\"id\":\"\"},\"vaultCertificates\":[{\"certificateUrl\":\"\",\"certificateStore\":\"\"}]}]},\"networkProfile\":{\"networkInterfaces\":[{\"primary\":null,\"id\":\"\"}]},\"diagnosticsProfile\":{\"bootDiagnostics\":{\"enabled\":null,\"storageUri\":\"\"}},\"availabilitySet\":{\"id\":\"\"},\"provisioningState\":\"\",\"instanceView\":{\"platformUpdateDomain\":null,\"platformFaultDomain\":null,\"rdpThumbPrint\":\"\",\"vmAgent\":{\"vmAgentVersion\":\"\",\"extensionHandlers\":[{\"type\":\"\",\"typeHandlerVersion\":\"\",\"status\":{\"code\":\"\",\"level\":null,\"displayStatus\":\"\",\"message\":\"\",\"time\":null}}],\"statuses\":[{\"code\":\"\",\"level\":null,\"displayStatus\":\"\",\"message\":\"\",\"time\":null}]},\"maintenanceRedeployStatus\":{\"isCustomerInitiatedMaintenanceAllowed\":null,\"preMaintenanceWindowStartTime\":null,\"preMaintenanceWindowEndTime\":null,\"maintenanceWindowStartTime\":null,\"maintenanceWindowEndTime\":null,\"lastOperationResultCode\":null,\"lastOperationMessage\":\"\"},\"disks\":[{\"name\":\"\",\"statuses\":[{\"code\":\"\",\"level\":null,\"displayStatus\":\"\",\"message\":\"\",\"time\":null}]}],\"extensions\":[{\"name\":\"\",\"type\":\"\",\"typeHandlerVersion\":\"\",\"substatuses\":[{\"code\":\"\",\"level\":null,\"displayStatus\":\"\",\"message\":\"\",\"time\":null}],\"statuses\":[{\"code\":\"\",\"level\":null,\"displayStatus\":\"\",\"message\":\"\",\"time\":null}]}],\"bootDiagnostics\":{\"consoleScreenshotBlobUri\":\"\",\"serialConsoleLogBlobUri\":\"\"},\"statuses\":[{\"code\":\"\",\"level\":null,\"displayStatus\":\"\",\"message\":\"\",\"time\":null}]},\"licenseType\":\"\",\"vmId\":\"\",\"resources\":[{\"forceUpdateTag\":\"\",\"publisher\":\"\",\"virtualMachineExtensionType\":\"\",\"typeHandlerVersion\":\"\",\"autoUpgradeMinorVersion\":null,\"settings\":{},\"protectedSettings\":{},\"provisioningState\":\"\",\"instanceView\":{\"name\":\"\",\"type\":\"\",\"typeHandlerVersion\":\"\",\"substatuses\":[{\"code\":\"\",\"level\":null,\"displayStatus\":\"\",\"message\":\"\",\"time\":null}],\"statuses\":[{\"code\":\"\",\"level\":null,\"displayStatus\":\"\",\"message\":\"\",\"time\":null}]},\"id\":null,\"name\":null,\"type\":null,\"location\":\"\",\"tags\":{}}],\"identity\":{\"principalId\":\"\",\"tenantId\":\"\",\"type\":null},\"id\":null,\"name\":null,\"type\":null,\"location\":\"\",\"tags\":{}}', _);
    var filePath = 'virtualMachinesCreateOrUpdate_createOrUpdate.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"plan\":{\r\n\"name\":\"\",\r\n\"publisher\":\"\",\r\n\"product\":\"\",\r\n\"promotionCode\":\"\"\r\n},\r\n\"hardwareProfile\":{\r\n\"vmSize\":\"\"\r\n},\r\n\"storageProfile\":{\r\n\"imageReference\":{\r\n\"publisher\":\"\",\r\n\"offer\":\"\",\r\n\"sku\":\"\",\r\n\"version\":\"\",\r\n\"id\":\"\"\r\n},\r\n\"osDisk\":{\r\n\"osType\":null,\r\n\"encryptionSettings\":{\r\n\"diskEncryptionKey\":{\r\n\"secretUrl\":\"\",\r\n\"sourceVault\":{\r\n\"id\":\"\"\r\n}\r\n},\r\n\"keyEncryptionKey\":{\r\n\"keyUrl\":\"\",\r\n\"sourceVault\":{\r\n\"id\":\"\"\r\n}\r\n},\r\n\"enabled\":null\r\n},\r\n\"name\":\"\",\r\n\"vhd\":{\r\n\"uri\":\"\"\r\n},\r\n\"image\":{\r\n\"uri\":\"\"\r\n},\r\n\"caching\":null,\r\n\"createOption\":\"\",\r\n\"diskSizeGB\":null,\r\n\"managedDisk\":{\r\n\"storageAccountType\":null,\r\n\"id\":\"\"\r\n}\r\n},\r\n\"dataDisks\":[\r\n{\r\n\"lun\":\"\",\r\n\"name\":\"\",\r\n\"vhd\":{\r\n\"uri\":\"\"\r\n},\r\n\"image\":{\r\n\"uri\":\"\"\r\n},\r\n\"caching\":null,\r\n\"createOption\":\"\",\r\n\"diskSizeGB\":null,\r\n\"managedDisk\":{\r\n\"storageAccountType\":null,\r\n\"id\":\"\"\r\n}\r\n}\r\n]\r\n},\r\n\"osProfile\":{\r\n\"computerName\":\"\",\r\n\"adminUsername\":\"\",\r\n\"adminPassword\":\"\",\r\n\"customData\":\"\",\r\n\"windowsConfiguration\":{\r\n\"provisionVMAgent\":null,\r\n\"enableAutomaticUpdates\":null,\r\n\"timeZone\":\"\",\r\n\"additionalUnattendContent\":[\r\n{\r\n\"passName\":null,\r\n\"componentName\":null,\r\n\"settingName\":null,\r\n\"content\":\"\"\r\n}\r\n],\r\n\"winRM\":{\r\n\"listeners\":[\r\n{\r\n\"protocol\":null,\r\n\"certificateUrl\":\"\"\r\n}\r\n]\r\n}\r\n},\r\n\"linuxConfiguration\":{\r\n\"disablePasswordAuthentication\":null,\r\n\"ssh\":{\r\n\"publicKeys\":[\r\n{\r\n\"path\":\"\",\r\n\"keyData\":\"\"\r\n}\r\n]\r\n}\r\n},\r\n\"secrets\":[\r\n{\r\n\"sourceVault\":{\r\n\"id\":\"\"\r\n},\r\n\"vaultCertificates\":[\r\n{\r\n\"certificateUrl\":\"\",\r\n\"certificateStore\":\"\"\r\n}\r\n]\r\n}\r\n]\r\n},\r\n\"networkProfile\":{\r\n\"networkInterfaces\":[\r\n{\r\n\"primary\":null,\r\n\"id\":\"\"\r\n}\r\n]\r\n},\r\n\"diagnosticsProfile\":{\r\n\"bootDiagnostics\":{\r\n\"enabled\":null,\r\n\"storageUri\":\"\"\r\n}\r\n},\r\n\"availabilitySet\":{\r\n\"id\":\"\"\r\n},\r\n\"provisioningState\":\"\",\r\n\"instanceView\":{\r\n\"platformUpdateDomain\":null,\r\n\"platformFaultDomain\":null,\r\n\"rdpThumbPrint\":\"\",\r\n\"vmAgent\":{\r\n\"vmAgentVersion\":\"\",\r\n\"extensionHandlers\":[\r\n{\r\n\"type\":\"\",\r\n\"typeHandlerVersion\":\"\",\r\n\"status\":{\r\n\"code\":\"\",\r\n\"level\":null,\r\n\"displayStatus\":\"\",\r\n\"message\":\"\",\r\n\"time\":null\r\n}\r\n}\r\n],\r\n\"statuses\":[\r\n{\r\n\"code\":\"\",\r\n\"level\":null,\r\n\"displayStatus\":\"\",\r\n\"message\":\"\",\r\n\"time\":null\r\n}\r\n]\r\n},\r\n\"maintenanceRedeployStatus\":{\r\n\"isCustomerInitiatedMaintenanceAllowed\":null,\r\n\"preMaintenanceWindowStartTime\":null,\r\n\"preMaintenanceWindowEndTime\":null,\r\n\"maintenanceWindowStartTime\":null,\r\n\"maintenanceWindowEndTime\":null,\r\n\"lastOperationResultCode\":null,\r\n\"lastOperationMessage\":\"\"\r\n},\r\n\"disks\":[\r\n{\r\n\"name\":\"\",\r\n\"statuses\":[\r\n{\r\n\"code\":\"\",\r\n\"level\":null,\r\n\"displayStatus\":\"\",\r\n\"message\":\"\",\r\n\"time\":null\r\n}\r\n]\r\n}\r\n],\r\n\"extensions\":[\r\n{\r\n\"name\":\"\",\r\n\"type\":\"\",\r\n\"typeHandlerVersion\":\"\",\r\n\"substatuses\":[\r\n{\r\n\"code\":\"\",\r\n\"level\":null,\r\n\"displayStatus\":\"\",\r\n\"message\":\"\",\r\n\"time\":null\r\n}\r\n],\r\n\"statuses\":[\r\n{\r\n\"code\":\"\",\r\n\"level\":null,\r\n\"displayStatus\":\"\",\r\n\"message\":\"\",\r\n\"time\":null\r\n}\r\n]\r\n}\r\n],\r\n\"bootDiagnostics\":{\r\n\"consoleScreenshotBlobUri\":\"\",\r\n\"serialConsoleLogBlobUri\":\"\"\r\n},\r\n\"statuses\":[\r\n{\r\n\"code\":\"\",\r\n\"level\":null,\r\n\"displayStatus\":\"\",\r\n\"message\":\"\",\r\n\"time\":null\r\n}\r\n]\r\n},\r\n\"licenseType\":\"\",\r\n\"vmId\":\"\",\r\n\"resources\":[\r\n{\r\n\"forceUpdateTag\":\"\",\r\n\"publisher\":\"\",\r\n\"virtualMachineExtensionType\":\"\",\r\n\"typeHandlerVersion\":\"\",\r\n\"autoUpgradeMinorVersion\":null,\r\n\"settings\":{\r\n},\r\n\"protectedSettings\":{\r\n},\r\n\"provisioningState\":\"\",\r\n\"instanceView\":{\r\n\"name\":\"\",\r\n\"type\":\"\",\r\n\"typeHandlerVersion\":\"\",\r\n\"substatuses\":[\r\n{\r\n\"code\":\"\",\r\n\"level\":null,\r\n\"displayStatus\":\"\",\r\n\"message\":\"\",\r\n\"time\":null\r\n}\r\n],\r\n\"statuses\":[\r\n{\r\n\"code\":\"\",\r\n\"level\":null,\r\n\"displayStatus\":\"\",\r\n\"message\":\"\",\r\n\"time\":null\r\n}\r\n]\r\n},\r\n\"id\":null,\r\n\"name\":null,\r\n\"type\":null,\r\n\"location\":\"\",\r\n\"tags\":{\r\n}\r\n}\r\n],\r\n\"identity\":{\r\n\"principalId\":\"\",\r\n\"tenantId\":\"\",\r\n\"type\":null\r\n},\r\n\"id\":null,\r\n\"name\":null,\r\n\"type\":null,\r\n\"location\":\"\",\r\n\"tags\":{\r\n}\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachinesCreateOrUpdatecreateOrUpdateParameters2.command('patch')
  .description($('Command to patch virtualMachinesCreateOrUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config set virtual-machine
  var catparametersCreateOrUpdateVirtualMachinesVirtualMachine01 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesVirtualMachine01 = catparametersCreateOrUpdateVirtualMachinesVirtualMachine01.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesVirtualMachine01 = parametersCreateOrUpdateVirtualMachinesVirtualMachine01.category('virtual-machine')
  .description($('Commands to configure virtual-machine of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesVirtualMachine01.command('set')
  .description($('Set virtual-machine in config string or files, e.g. \r\n{\r\n  "plan":{\r\n    "name":"",\r\n    "publisher":"",\r\n    "product":"",\r\n    "promotionCode":""\r\n  },\r\n  "hardwareProfile":{\r\n    "vmSize":""\r\n  },\r\n  "storageProfile":{\r\n    "imageReference":{\r\n      "publisher":"",\r\n      "offer":"",\r\n      "sku":"",\r\n      "version":"",\r\n      "id":""\r\n    },\r\n    "osDisk":{\r\n      "osType":null,\r\n      "encryptionSettings":{\r\n        "diskEncryptionKey":{\r\n          "secretUrl":"",\r\n          "sourceVault":{\r\n            "id":""\r\n          }\r\n        },\r\n        "keyEncryptionKey":{\r\n          "keyUrl":"",\r\n          "sourceVault":{\r\n            "id":""\r\n          }\r\n        },\r\n        "enabled":null\r\n      },\r\n      "name":"",\r\n      "vhd":{\r\n        "uri":""\r\n      },\r\n      "image":{\r\n        "uri":""\r\n      },\r\n      "caching":null,\r\n      "createOption":"",\r\n      "diskSizeGB":null,\r\n      "managedDisk":{\r\n        "storageAccountType":null,\r\n        "id":""\r\n      }\r\n    },\r\n    "dataDisks":[\r\n      {\r\n        "lun":"",\r\n        "name":"",\r\n        "vhd":{\r\n          "uri":""\r\n        },\r\n        "image":{\r\n          "uri":""\r\n        },\r\n        "caching":null,\r\n        "createOption":"",\r\n        "diskSizeGB":null,\r\n        "managedDisk":{\r\n          "storageAccountType":null,\r\n          "id":""\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  "osProfile":{\r\n    "computerName":"",\r\n    "adminUsername":"",\r\n    "adminPassword":"",\r\n    "customData":"",\r\n    "windowsConfiguration":{\r\n      "provisionVMAgent":null,\r\n      "enableAutomaticUpdates":null,\r\n      "timeZone":"",\r\n      "additionalUnattendContent":[\r\n        {\r\n          "passName":null,\r\n          "componentName":null,\r\n          "settingName":null,\r\n          "content":""\r\n        }\r\n      ],\r\n      "winRM":{\r\n        "listeners":[\r\n          {\r\n            "protocol":null,\r\n            "certificateUrl":""\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    "linuxConfiguration":{\r\n      "disablePasswordAuthentication":null,\r\n      "ssh":{\r\n        "publicKeys":[\r\n          {\r\n            "path":"",\r\n            "keyData":""\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    "secrets":[\r\n      {\r\n        "sourceVault":{\r\n          "id":""\r\n        },\r\n        "vaultCertificates":[\r\n          {\r\n            "certificateUrl":"",\r\n            "certificateStore":""\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  "networkProfile":{\r\n    "networkInterfaces":[\r\n      {\r\n        "primary":null,\r\n        "id":""\r\n      }\r\n    ]\r\n  },\r\n  "diagnosticsProfile":{\r\n    "bootDiagnostics":{\r\n      "enabled":null,\r\n      "storageUri":""\r\n    }\r\n  },\r\n  "availabilitySet":{\r\n    "id":""\r\n  },\r\n  "provisioningState":"",\r\n  "instanceView":{\r\n    "platformUpdateDomain":null,\r\n    "platformFaultDomain":null,\r\n    "rdpThumbPrint":"",\r\n    "vmAgent":{\r\n      "vmAgentVersion":"",\r\n      "extensionHandlers":[\r\n        {\r\n          "type":"",\r\n          "typeHandlerVersion":"",\r\n          "status":{\r\n            "code":"",\r\n            "level":null,\r\n            "displayStatus":"",\r\n            "message":"",\r\n            "time":null\r\n          }\r\n        }\r\n      ],\r\n      "statuses":[\r\n        {\r\n          "code":"",\r\n          "level":null,\r\n          "displayStatus":"",\r\n          "message":"",\r\n          "time":null\r\n        }\r\n      ]\r\n    },\r\n    "maintenanceRedeployStatus":{\r\n      "isCustomerInitiatedMaintenanceAllowed":null,\r\n      "preMaintenanceWindowStartTime":null,\r\n      "preMaintenanceWindowEndTime":null,\r\n      "maintenanceWindowStartTime":null,\r\n      "maintenanceWindowEndTime":null,\r\n      "lastOperationResultCode":null,\r\n      "lastOperationMessage":""\r\n    },\r\n    "disks":[\r\n      {\r\n        "name":"",\r\n        "statuses":[\r\n          {\r\n            "code":"",\r\n            "level":null,\r\n            "displayStatus":"",\r\n            "message":"",\r\n            "time":null\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    "extensions":[\r\n      {\r\n        "name":"",\r\n        "type":"",\r\n        "typeHandlerVersion":"",\r\n        "substatuses":[\r\n          {\r\n            "code":"",\r\n            "level":null,\r\n            "displayStatus":"",\r\n            "message":"",\r\n            "time":null\r\n          }\r\n        ],\r\n        "statuses":[\r\n          {\r\n            "code":"",\r\n            "level":null,\r\n            "displayStatus":"",\r\n            "message":"",\r\n            "time":null\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    "bootDiagnostics":{\r\n      "consoleScreenshotBlobUri":"",\r\n      "serialConsoleLogBlobUri":""\r\n    },\r\n    "statuses":[\r\n      {\r\n        "code":"",\r\n        "level":null,\r\n        "displayStatus":"",\r\n        "message":"",\r\n        "time":null\r\n      }\r\n    ]\r\n  },\r\n  "licenseType":"",\r\n  "vmId":"",\r\n  "resources":[\r\n    {\r\n      "forceUpdateTag":"",\r\n      "publisher":"",\r\n      "virtualMachineExtensionType":"",\r\n      "typeHandlerVersion":"",\r\n      "autoUpgradeMinorVersion":null,\r\n      "settings":{\r\n      },\r\n      "protectedSettings":{\r\n      },\r\n      "provisioningState":"",\r\n      "instanceView":{\r\n        "name":"",\r\n        "type":"",\r\n        "typeHandlerVersion":"",\r\n        "substatuses":[\r\n          {\r\n            "code":"",\r\n            "level":null,\r\n            "displayStatus":"",\r\n            "message":"",\r\n            "time":null\r\n          }\r\n        ],\r\n        "statuses":[\r\n          {\r\n            "code":"",\r\n            "level":null,\r\n            "displayStatus":"",\r\n            "message":"",\r\n            "time":null\r\n          }\r\n        ]\r\n      },\r\n      "id":null,\r\n      "name":null,\r\n      "type":null,\r\n      "location":"",\r\n      "tags":{\r\n      }\r\n    }\r\n  ],\r\n  "identity":{\r\n    "principalId":"",\r\n    "tenantId":"",\r\n    "type":null\r\n  },\r\n  "id":null,\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--plan <plan>', $('Set the plan value.'))
  .option('--hardware-profile <hardwareProfile>', $('Set the hardware-profile value.'))
  .option('--storage-profile <storageProfile>', $('Set the storage-profile value.'))
  .option('--os-profile <osProfile>', $('Set the os-profile value.'))
  .option('--network-profile <networkProfile>', $('Set the network-profile value.'))
  .option('--diagnostics-profile <diagnosticsProfile>', $('Set the diagnostics-profile value.'))
  .option('--availability-set <availabilitySet>', $('Set the availability-set value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--instance-view <instanceView>', $('Set the instance-view value.'))
  .option('--license-type <licenseType>', $('Set the license-type value.'))
  .option('--vm-id <vmId>', $('Set the vm-id value.'))
  .option('--resources <resources>', $('Set the resources value.'))
  .option('--identity <identity>', $('Set the identity value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'plan';
    if (options.plan) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.plan);
      cli.output.verbose('================================================');
      if (options.parse && options.plan) {
        options.plan = JSON.parse(options.plan);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.plan}]);
    }
    paramPath = options.path + '/' + 'hardwareProfile';
    if (options.hardwareProfile) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.hardwareProfile);
      cli.output.verbose('================================================');
      if (options.parse && options.hardwareProfile) {
        options.hardwareProfile = JSON.parse(options.hardwareProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hardwareProfile}]);
    }
    paramPath = options.path + '/' + 'storageProfile';
    if (options.storageProfile) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storageProfile);
      cli.output.verbose('================================================');
      if (options.parse && options.storageProfile) {
        options.storageProfile = JSON.parse(options.storageProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storageProfile}]);
    }
    paramPath = options.path + '/' + 'osProfile';
    if (options.osProfile) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.osProfile);
      cli.output.verbose('================================================');
      if (options.parse && options.osProfile) {
        options.osProfile = JSON.parse(options.osProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.osProfile}]);
    }
    paramPath = options.path + '/' + 'networkProfile';
    if (options.networkProfile) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.networkProfile);
      cli.output.verbose('================================================');
      if (options.parse && options.networkProfile) {
        options.networkProfile = JSON.parse(options.networkProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkProfile}]);
    }
    paramPath = options.path + '/' + 'diagnosticsProfile';
    if (options.diagnosticsProfile) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.diagnosticsProfile);
      cli.output.verbose('================================================');
      if (options.parse && options.diagnosticsProfile) {
        options.diagnosticsProfile = JSON.parse(options.diagnosticsProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diagnosticsProfile}]);
    }
    paramPath = options.path + '/' + 'availabilitySet';
    if (options.availabilitySet) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.availabilitySet);
      cli.output.verbose('================================================');
      if (options.parse && options.availabilitySet) {
        options.availabilitySet = JSON.parse(options.availabilitySet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.availabilitySet}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    if (options.provisioningState) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.provisioningState);
      cli.output.verbose('================================================');
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'instanceView';
    if (options.instanceView) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.instanceView);
      cli.output.verbose('================================================');
      if (options.parse && options.instanceView) {
        options.instanceView = JSON.parse(options.instanceView);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.instanceView}]);
    }
    paramPath = options.path + '/' + 'licenseType';
    if (options.licenseType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.licenseType);
      cli.output.verbose('================================================');
      if (options.parse && options.licenseType) {
        options.licenseType = JSON.parse(options.licenseType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.licenseType}]);
    }
    paramPath = options.path + '/' + 'vmId';
    if (options.vmId) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.vmId);
      cli.output.verbose('================================================');
      if (options.parse && options.vmId) {
        options.vmId = JSON.parse(options.vmId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmId}]);
    }
    paramPath = options.path + '/' + 'resources';
    if (options.resources) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.resources);
      cli.output.verbose('================================================');
      if (options.parse && options.resources) {
        options.resources = JSON.parse(options.resources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resources}]);
    }
    paramPath = options.path + '/' + 'identity';
    if (options.identity) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.identity);
      cli.output.verbose('================================================');
      if (options.parse && options.identity) {
        options.identity = JSON.parse(options.identity);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.identity}]);
    }
    paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    if (options.type) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.type);
      cli.output.verbose('================================================');
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    if (options.location) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.location);
      cli.output.verbose('================================================');
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    if (options.tags) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.tags);
      cli.output.verbose('================================================');
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete virtual-machine
  var catparametersCreateOrUpdateVirtualMachinesVirtualMachine11 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesVirtualMachine11 = catparametersCreateOrUpdateVirtualMachinesVirtualMachine11.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesVirtualMachine11 = parametersCreateOrUpdateVirtualMachinesVirtualMachine11.category('virtual-machine')
  .description($('Commands to configure virtual-machine of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesVirtualMachine11.command('delete')
  .description($('Remove virtual-machine in config string or files, e.g. \r\n{\r\n  "plan":{\r\n    "name":"",\r\n    "publisher":"",\r\n    "product":"",\r\n    "promotionCode":""\r\n  },\r\n  "hardwareProfile":{\r\n    "vmSize":""\r\n  },\r\n  "storageProfile":{\r\n    "imageReference":{\r\n      "publisher":"",\r\n      "offer":"",\r\n      "sku":"",\r\n      "version":"",\r\n      "id":""\r\n    },\r\n    "osDisk":{\r\n      "osType":null,\r\n      "encryptionSettings":{\r\n        "diskEncryptionKey":{\r\n          "secretUrl":"",\r\n          "sourceVault":{\r\n            "id":""\r\n          }\r\n        },\r\n        "keyEncryptionKey":{\r\n          "keyUrl":"",\r\n          "sourceVault":{\r\n            "id":""\r\n          }\r\n        },\r\n        "enabled":null\r\n      },\r\n      "name":"",\r\n      "vhd":{\r\n        "uri":""\r\n      },\r\n      "image":{\r\n        "uri":""\r\n      },\r\n      "caching":null,\r\n      "createOption":"",\r\n      "diskSizeGB":null,\r\n      "managedDisk":{\r\n        "storageAccountType":null,\r\n        "id":""\r\n      }\r\n    },\r\n    "dataDisks":[\r\n      {\r\n        "lun":"",\r\n        "name":"",\r\n        "vhd":{\r\n          "uri":""\r\n        },\r\n        "image":{\r\n          "uri":""\r\n        },\r\n        "caching":null,\r\n        "createOption":"",\r\n        "diskSizeGB":null,\r\n        "managedDisk":{\r\n          "storageAccountType":null,\r\n          "id":""\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  "osProfile":{\r\n    "computerName":"",\r\n    "adminUsername":"",\r\n    "adminPassword":"",\r\n    "customData":"",\r\n    "windowsConfiguration":{\r\n      "provisionVMAgent":null,\r\n      "enableAutomaticUpdates":null,\r\n      "timeZone":"",\r\n      "additionalUnattendContent":[\r\n        {\r\n          "passName":null,\r\n          "componentName":null,\r\n          "settingName":null,\r\n          "content":""\r\n        }\r\n      ],\r\n      "winRM":{\r\n        "listeners":[\r\n          {\r\n            "protocol":null,\r\n            "certificateUrl":""\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    "linuxConfiguration":{\r\n      "disablePasswordAuthentication":null,\r\n      "ssh":{\r\n        "publicKeys":[\r\n          {\r\n            "path":"",\r\n            "keyData":""\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    "secrets":[\r\n      {\r\n        "sourceVault":{\r\n          "id":""\r\n        },\r\n        "vaultCertificates":[\r\n          {\r\n            "certificateUrl":"",\r\n            "certificateStore":""\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  "networkProfile":{\r\n    "networkInterfaces":[\r\n      {\r\n        "primary":null,\r\n        "id":""\r\n      }\r\n    ]\r\n  },\r\n  "diagnosticsProfile":{\r\n    "bootDiagnostics":{\r\n      "enabled":null,\r\n      "storageUri":""\r\n    }\r\n  },\r\n  "availabilitySet":{\r\n    "id":""\r\n  },\r\n  "provisioningState":"",\r\n  "instanceView":{\r\n    "platformUpdateDomain":null,\r\n    "platformFaultDomain":null,\r\n    "rdpThumbPrint":"",\r\n    "vmAgent":{\r\n      "vmAgentVersion":"",\r\n      "extensionHandlers":[\r\n        {\r\n          "type":"",\r\n          "typeHandlerVersion":"",\r\n          "status":{\r\n            "code":"",\r\n            "level":null,\r\n            "displayStatus":"",\r\n            "message":"",\r\n            "time":null\r\n          }\r\n        }\r\n      ],\r\n      "statuses":[\r\n        {\r\n          "code":"",\r\n          "level":null,\r\n          "displayStatus":"",\r\n          "message":"",\r\n          "time":null\r\n        }\r\n      ]\r\n    },\r\n    "maintenanceRedeployStatus":{\r\n      "isCustomerInitiatedMaintenanceAllowed":null,\r\n      "preMaintenanceWindowStartTime":null,\r\n      "preMaintenanceWindowEndTime":null,\r\n      "maintenanceWindowStartTime":null,\r\n      "maintenanceWindowEndTime":null,\r\n      "lastOperationResultCode":null,\r\n      "lastOperationMessage":""\r\n    },\r\n    "disks":[\r\n      {\r\n        "name":"",\r\n        "statuses":[\r\n          {\r\n            "code":"",\r\n            "level":null,\r\n            "displayStatus":"",\r\n            "message":"",\r\n            "time":null\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    "extensions":[\r\n      {\r\n        "name":"",\r\n        "type":"",\r\n        "typeHandlerVersion":"",\r\n        "substatuses":[\r\n          {\r\n            "code":"",\r\n            "level":null,\r\n            "displayStatus":"",\r\n            "message":"",\r\n            "time":null\r\n          }\r\n        ],\r\n        "statuses":[\r\n          {\r\n            "code":"",\r\n            "level":null,\r\n            "displayStatus":"",\r\n            "message":"",\r\n            "time":null\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    "bootDiagnostics":{\r\n      "consoleScreenshotBlobUri":"",\r\n      "serialConsoleLogBlobUri":""\r\n    },\r\n    "statuses":[\r\n      {\r\n        "code":"",\r\n        "level":null,\r\n        "displayStatus":"",\r\n        "message":"",\r\n        "time":null\r\n      }\r\n    ]\r\n  },\r\n  "licenseType":"",\r\n  "vmId":"",\r\n  "resources":[\r\n    {\r\n      "forceUpdateTag":"",\r\n      "publisher":"",\r\n      "virtualMachineExtensionType":"",\r\n      "typeHandlerVersion":"",\r\n      "autoUpgradeMinorVersion":null,\r\n      "settings":{\r\n      },\r\n      "protectedSettings":{\r\n      },\r\n      "provisioningState":"",\r\n      "instanceView":{\r\n        "name":"",\r\n        "type":"",\r\n        "typeHandlerVersion":"",\r\n        "substatuses":[\r\n          {\r\n            "code":"",\r\n            "level":null,\r\n            "displayStatus":"",\r\n            "message":"",\r\n            "time":null\r\n          }\r\n        ],\r\n        "statuses":[\r\n          {\r\n            "code":"",\r\n            "level":null,\r\n            "displayStatus":"",\r\n            "message":"",\r\n            "time":null\r\n          }\r\n        ]\r\n      },\r\n      "id":null,\r\n      "name":null,\r\n      "type":null,\r\n      "location":"",\r\n      "tags":{\r\n      }\r\n    }\r\n  ],\r\n  "identity":{\r\n    "principalId":"",\r\n    "tenantId":"",\r\n    "type":null\r\n  },\r\n  "id":null,\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--plan', $('Remove the plan value.'))
  .option('--hardware-profile', $('Remove the hardware-profile value.'))
  .option('--storage-profile', $('Remove the storage-profile value.'))
  .option('--os-profile', $('Remove the os-profile value.'))
  .option('--network-profile', $('Remove the network-profile value.'))
  .option('--diagnostics-profile', $('Remove the diagnostics-profile value.'))
  .option('--availability-set', $('Remove the availability-set value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--instance-view', $('Remove the instance-view value.'))
  .option('--license-type', $('Remove the license-type value.'))
  .option('--vm-id', $('Remove the vm-id value.'))
  .option('--resources', $('Remove the resources value.'))
  .option('--identity', $('Remove the identity value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.plan || options.hardwareProfile || options.storageProfile || options.osProfile || options.networkProfile || options.diagnosticsProfile || options.availabilitySet || options.provisioningState || options.instanceView || options.licenseType || options.vmId || options.resources || options.identity || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.plan) {
        subItemPath = options.path + '/plan';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.hardwareProfile) {
        subItemPath = options.path + '/hardwareProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storageProfile) {
        subItemPath = options.path + '/storageProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.osProfile) {
        subItemPath = options.path + '/osProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkProfile) {
        subItemPath = options.path + '/networkProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.diagnosticsProfile) {
        subItemPath = options.path + '/diagnosticsProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.availabilitySet) {
        subItemPath = options.path + '/availabilitySet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.instanceView) {
        subItemPath = options.path + '/instanceView';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.licenseType) {
        subItemPath = options.path + '/licenseType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vmId) {
        subItemPath = options.path + '/vmId';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resources) {
        subItemPath = options.path + '/resources';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.identity) {
        subItemPath = options.path + '/identity';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set plan
  var catparametersCreateOrUpdateVirtualMachinesPlan0P1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesPlan0P1 = catparametersCreateOrUpdateVirtualMachinesPlan0P1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesPlan0P1 = parametersCreateOrUpdateVirtualMachinesPlan0P1.category('plan')
  .description($('Commands to configure plan of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesPlan0P1.command('set')
  .description($('Set plan in config string or files, e.g. \r\n         {\r\n           ...\r\n           "plan" : {\r\n             "name":"",\r\n             "publisher":"",\r\n             "product":"",\r\n             "promotionCode":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--name <name>', $('Set the name value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .option('--product <product>', $('Set the product value.'))
  .option('--promotion-code <promotionCode>', $('Set the promotion-code value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/plan';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'publisher';
    if (options.publisher) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publisher);
      cli.output.verbose('================================================');
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = options.path + '/' + 'product';
    if (options.product) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.product);
      cli.output.verbose('================================================');
      if (options.parse && options.product) {
        options.product = JSON.parse(options.product);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.product}]);
    }
    paramPath = options.path + '/' + 'promotionCode';
    if (options.promotionCode) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.promotionCode);
      cli.output.verbose('================================================');
      if (options.parse && options.promotionCode) {
        options.promotionCode = JSON.parse(options.promotionCode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.promotionCode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete plan
  var catparametersCreateOrUpdateVirtualMachinesPlan1P1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesPlan1P1 = catparametersCreateOrUpdateVirtualMachinesPlan1P1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesPlan1P1 = parametersCreateOrUpdateVirtualMachinesPlan1P1.category('plan')
  .description($('Commands to configure plan of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesPlan1P1.command('delete')
  .description($('Remove plan in config string or files, e.g. \r\n         {\r\n           ...\r\n           "plan" : {\r\n             "name":"",\r\n             "publisher":"",\r\n             "product":"",\r\n             "promotionCode":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--name', $('Remove the name value.'))
  .option('--publisher', $('Remove the publisher value.'))
  .option('--product', $('Remove the product value.'))
  .option('--promotion-code', $('Remove the promotion-code value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/plan';
    var anySubItem = false || options.name || options.publisher || options.product || options.promotionCode;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisher) {
        subItemPath = options.path + '/publisher';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.product) {
        subItemPath = options.path + '/product';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.promotionCode) {
        subItemPath = options.path + '/promotionCode';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set hardware-profile
  var catparametersCreateOrUpdateVirtualMachinesHardwareProfile0HP1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesHardwareProfile0HP1 = catparametersCreateOrUpdateVirtualMachinesHardwareProfile0HP1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesHardwareProfile0HP1 = parametersCreateOrUpdateVirtualMachinesHardwareProfile0HP1.category('hardware-profile')
  .description($('Commands to configure hardware-profile of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesHardwareProfile0HP1.command('set')
  .description($('Set hardware-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "hardwareProfile" : {\r\n             "vmSize":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--vm-size <vmSize>', $('Set the vm-size value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/hardwareProfile';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'vmSize';
    if (options.vmSize) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.vmSize);
      cli.output.verbose('================================================');
      if (options.parse && options.vmSize) {
        options.vmSize = JSON.parse(options.vmSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmSize}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete hardware-profile
  var catparametersCreateOrUpdateVirtualMachinesHardwareProfile1HP1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesHardwareProfile1HP1 = catparametersCreateOrUpdateVirtualMachinesHardwareProfile1HP1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesHardwareProfile1HP1 = parametersCreateOrUpdateVirtualMachinesHardwareProfile1HP1.category('hardware-profile')
  .description($('Commands to configure hardware-profile of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesHardwareProfile1HP1.command('delete')
  .description($('Remove hardware-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "hardwareProfile" : {\r\n             "vmSize":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--vm-size', $('Remove the vm-size value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/hardwareProfile';
    var anySubItem = false || options.vmSize;
    if (anySubItem) {
      var subItemPath = null;
      if (options.vmSize) {
        subItemPath = options.path + '/vmSize';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set storage-profile
  var catparametersCreateOrUpdateVirtualMachinesStorageProfile0SP1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesStorageProfile0SP1 = catparametersCreateOrUpdateVirtualMachinesStorageProfile0SP1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesStorageProfile0SP1 = parametersCreateOrUpdateVirtualMachinesStorageProfile0SP1.category('storage-profile')
  .description($('Commands to configure storage-profile of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesStorageProfile0SP1.command('set')
  .description($('Set storage-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "storageProfile" : {\r\n             "imageReference":{\r\n               "publisher":"",\r\n               "offer":"",\r\n               "sku":"",\r\n               "version":"",\r\n               "id":""\r\n             },\r\n             "osDisk":{\r\n               "osType":null,\r\n               "encryptionSettings":{\r\n                 "diskEncryptionKey":{\r\n                   "secretUrl":"",\r\n                   "sourceVault":{\r\n                     "id":""\r\n                   }\r\n                 },\r\n                 "keyEncryptionKey":{\r\n                   "keyUrl":"",\r\n                   "sourceVault":{\r\n                     "id":""\r\n                   }\r\n                 },\r\n                 "enabled":null\r\n               },\r\n               "name":"",\r\n               "vhd":{\r\n                 "uri":""\r\n               },\r\n               "image":{\r\n                 "uri":""\r\n               },\r\n               "caching":null,\r\n               "createOption":"",\r\n               "diskSizeGB":null,\r\n               "managedDisk":{\r\n                 "storageAccountType":null,\r\n                 "id":""\r\n               }\r\n             },\r\n             "dataDisks":[\r\n               {\r\n                 "lun":"",\r\n                 "name":"",\r\n                 "vhd":{\r\n                   "uri":""\r\n                 },\r\n                 "image":{\r\n                   "uri":""\r\n                 },\r\n                 "caching":null,\r\n                 "createOption":"",\r\n                 "diskSizeGB":null,\r\n                 "managedDisk":{\r\n                   "storageAccountType":null,\r\n                   "id":""\r\n                 }\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--image-reference <imageReference>', $('Set the image-reference value.'))
  .option('--os-disk <osDisk>', $('Set the os-disk value.'))
  .option('--data-disks <dataDisks>', $('Set the data-disks value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/storageProfile';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'imageReference';
    if (options.imageReference) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.imageReference);
      cli.output.verbose('================================================');
      if (options.parse && options.imageReference) {
        options.imageReference = JSON.parse(options.imageReference);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageReference}]);
    }
    paramPath = options.path + '/' + 'osDisk';
    if (options.osDisk) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.osDisk);
      cli.output.verbose('================================================');
      if (options.parse && options.osDisk) {
        options.osDisk = JSON.parse(options.osDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.osDisk}]);
    }
    paramPath = options.path + '/' + 'dataDisks';
    if (options.dataDisks) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.dataDisks);
      cli.output.verbose('================================================');
      if (options.parse && options.dataDisks) {
        options.dataDisks = JSON.parse(options.dataDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDisks}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete storage-profile
  var catparametersCreateOrUpdateVirtualMachinesStorageProfile1SP1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesStorageProfile1SP1 = catparametersCreateOrUpdateVirtualMachinesStorageProfile1SP1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesStorageProfile1SP1 = parametersCreateOrUpdateVirtualMachinesStorageProfile1SP1.category('storage-profile')
  .description($('Commands to configure storage-profile of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesStorageProfile1SP1.command('delete')
  .description($('Remove storage-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "storageProfile" : {\r\n             "imageReference":{\r\n               "publisher":"",\r\n               "offer":"",\r\n               "sku":"",\r\n               "version":"",\r\n               "id":""\r\n             },\r\n             "osDisk":{\r\n               "osType":null,\r\n               "encryptionSettings":{\r\n                 "diskEncryptionKey":{\r\n                   "secretUrl":"",\r\n                   "sourceVault":{\r\n                     "id":""\r\n                   }\r\n                 },\r\n                 "keyEncryptionKey":{\r\n                   "keyUrl":"",\r\n                   "sourceVault":{\r\n                     "id":""\r\n                   }\r\n                 },\r\n                 "enabled":null\r\n               },\r\n               "name":"",\r\n               "vhd":{\r\n                 "uri":""\r\n               },\r\n               "image":{\r\n                 "uri":""\r\n               },\r\n               "caching":null,\r\n               "createOption":"",\r\n               "diskSizeGB":null,\r\n               "managedDisk":{\r\n                 "storageAccountType":null,\r\n                 "id":""\r\n               }\r\n             },\r\n             "dataDisks":[\r\n               {\r\n                 "lun":"",\r\n                 "name":"",\r\n                 "vhd":{\r\n                   "uri":""\r\n                 },\r\n                 "image":{\r\n                   "uri":""\r\n                 },\r\n                 "caching":null,\r\n                 "createOption":"",\r\n                 "diskSizeGB":null,\r\n                 "managedDisk":{\r\n                   "storageAccountType":null,\r\n                   "id":""\r\n                 }\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--image-reference', $('Remove the image-reference value.'))
  .option('--os-disk', $('Remove the os-disk value.'))
  .option('--data-disks', $('Remove the data-disks value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/storageProfile';
    var anySubItem = false || options.imageReference || options.osDisk || options.dataDisks;
    if (anySubItem) {
      var subItemPath = null;
      if (options.imageReference) {
        subItemPath = options.path + '/imageReference';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.osDisk) {
        subItemPath = options.path + '/osDisk';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.dataDisks) {
        subItemPath = options.path + '/dataDisks';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set image-reference
  var catparametersCreateOrUpdateVirtualMachinesImageReference0SPiR1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesImageReference0SPiR1 = catparametersCreateOrUpdateVirtualMachinesImageReference0SPiR1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesImageReference0SPiR1 = parametersCreateOrUpdateVirtualMachinesImageReference0SPiR1.category('image-reference')
  .description($('Commands to configure image-reference of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesImageReference0SPiR1.command('set')
  .description($('Set image-reference in config string or files, e.g. \r\n         {\r\n           ...\r\n           "imageReference" : {\r\n             "publisher":"",\r\n             "offer":"",\r\n             "sku":"",\r\n             "version":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .option('--offer <offer>', $('Set the offer value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--version <version>', $('Set the version value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/storageProfile/imageReference';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'publisher';
    if (options.publisher) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publisher);
      cli.output.verbose('================================================');
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = options.path + '/' + 'offer';
    if (options.offer) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.offer);
      cli.output.verbose('================================================');
      if (options.parse && options.offer) {
        options.offer = JSON.parse(options.offer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.offer}]);
    }
    paramPath = options.path + '/' + 'sku';
    if (options.sku) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sku);
      cli.output.verbose('================================================');
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'version';
    if (options.version) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.version);
      cli.output.verbose('================================================');
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete image-reference
  var catparametersCreateOrUpdateVirtualMachinesImageReference1SPiR1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesImageReference1SPiR1 = catparametersCreateOrUpdateVirtualMachinesImageReference1SPiR1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesImageReference1SPiR1 = parametersCreateOrUpdateVirtualMachinesImageReference1SPiR1.category('image-reference')
  .description($('Commands to configure image-reference of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesImageReference1SPiR1.command('delete')
  .description($('Remove image-reference in config string or files, e.g. \r\n         {\r\n           ...\r\n           "imageReference" : {\r\n             "publisher":"",\r\n             "offer":"",\r\n             "sku":"",\r\n             "version":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--publisher', $('Remove the publisher value.'))
  .option('--offer', $('Remove the offer value.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--version', $('Remove the version value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/storageProfile/imageReference';
    var anySubItem = false || options.publisher || options.offer || options.sku || options.version || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.publisher) {
        subItemPath = options.path + '/publisher';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.offer) {
        subItemPath = options.path + '/offer';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sku) {
        subItemPath = options.path + '/sku';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        subItemPath = options.path + '/version';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set os-disk
  var catparametersCreateOrUpdateVirtualMachinesOsDisk0SPoD1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesOsDisk0SPoD1 = catparametersCreateOrUpdateVirtualMachinesOsDisk0SPoD1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesOsDisk0SPoD1 = parametersCreateOrUpdateVirtualMachinesOsDisk0SPoD1.category('os-disk')
  .description($('Commands to configure os-disk of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesOsDisk0SPoD1.command('set')
  .description($('Set os-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           "osDisk" : {\r\n             "osType":null,\r\n             "encryptionSettings":{\r\n               "diskEncryptionKey":{\r\n                 "secretUrl":"",\r\n                 "sourceVault":{\r\n                   "id":""\r\n                 }\r\n               },\r\n               "keyEncryptionKey":{\r\n                 "keyUrl":"",\r\n                 "sourceVault":{\r\n                   "id":""\r\n                 }\r\n               },\r\n               "enabled":null\r\n             },\r\n             "name":"",\r\n             "vhd":{\r\n               "uri":""\r\n             },\r\n             "image":{\r\n               "uri":""\r\n             },\r\n             "caching":null,\r\n             "createOption":"",\r\n             "diskSizeGB":null,\r\n             "managedDisk":{\r\n               "storageAccountType":null,\r\n               "id":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--os-type <osType>', $('Set the os-type value.'))
  .option('--encryption-settings <encryptionSettings>', $('Set the encryption-settings value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--vhd <vhd>', $('Set the vhd value.'))
  .option('--image <image>', $('Set the image value.'))
  .option('--caching <caching>', $('Set the caching value.'))
  .option('--create-option <createOption>', $('Set the create-option value.'))
  .option('--disk-size-g-b <diskSizeGB>', $('Set the disk-size-g-b value.'))
  .option('--managed-disk <managedDisk>', $('Set the managed-disk value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/storageProfile/osDisk';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'osType';
    if (options.osType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.osType);
      cli.output.verbose('================================================');
      if (options.parse && options.osType) {
        options.osType = JSON.parse(options.osType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.osType}]);
    }
    paramPath = options.path + '/' + 'encryptionSettings';
    if (options.encryptionSettings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.encryptionSettings);
      cli.output.verbose('================================================');
      if (options.parse && options.encryptionSettings) {
        options.encryptionSettings = JSON.parse(options.encryptionSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.encryptionSettings}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'vhd';
    if (options.vhd) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.vhd);
      cli.output.verbose('================================================');
      if (options.parse && options.vhd) {
        options.vhd = JSON.parse(options.vhd);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vhd}]);
    }
    paramPath = options.path + '/' + 'image';
    if (options.image) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.image);
      cli.output.verbose('================================================');
      if (options.parse && options.image) {
        options.image = JSON.parse(options.image);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.image}]);
    }
    paramPath = options.path + '/' + 'caching';
    if (options.caching) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.caching);
      cli.output.verbose('================================================');
      if (options.parse && options.caching) {
        options.caching = JSON.parse(options.caching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.caching}]);
    }
    paramPath = options.path + '/' + 'createOption';
    if (options.createOption) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.createOption);
      cli.output.verbose('================================================');
      if (options.parse && options.createOption) {
        options.createOption = JSON.parse(options.createOption);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.createOption}]);
    }
    paramPath = options.path + '/' + 'diskSizeGB';
    if (options.diskSizeGB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.diskSizeGB);
      cli.output.verbose('================================================');
      if (options.parse && options.diskSizeGB) {
        options.diskSizeGB = JSON.parse(options.diskSizeGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskSizeGB}]);
    }
    paramPath = options.path + '/' + 'managedDisk';
    if (options.managedDisk) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.managedDisk);
      cli.output.verbose('================================================');
      if (options.parse && options.managedDisk) {
        options.managedDisk = JSON.parse(options.managedDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.managedDisk}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete os-disk
  var catparametersCreateOrUpdateVirtualMachinesOsDisk1SPoD1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesOsDisk1SPoD1 = catparametersCreateOrUpdateVirtualMachinesOsDisk1SPoD1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesOsDisk1SPoD1 = parametersCreateOrUpdateVirtualMachinesOsDisk1SPoD1.category('os-disk')
  .description($('Commands to configure os-disk of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesOsDisk1SPoD1.command('delete')
  .description($('Remove os-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           "osDisk" : {\r\n             "osType":null,\r\n             "encryptionSettings":{\r\n               "diskEncryptionKey":{\r\n                 "secretUrl":"",\r\n                 "sourceVault":{\r\n                   "id":""\r\n                 }\r\n               },\r\n               "keyEncryptionKey":{\r\n                 "keyUrl":"",\r\n                 "sourceVault":{\r\n                   "id":""\r\n                 }\r\n               },\r\n               "enabled":null\r\n             },\r\n             "name":"",\r\n             "vhd":{\r\n               "uri":""\r\n             },\r\n             "image":{\r\n               "uri":""\r\n             },\r\n             "caching":null,\r\n             "createOption":"",\r\n             "diskSizeGB":null,\r\n             "managedDisk":{\r\n               "storageAccountType":null,\r\n               "id":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--os-type', $('Remove the os-type value.'))
  .option('--encryption-settings', $('Remove the encryption-settings value.'))
  .option('--name', $('Remove the name value.'))
  .option('--vhd', $('Remove the vhd value.'))
  .option('--image', $('Remove the image value.'))
  .option('--caching', $('Remove the caching value.'))
  .option('--create-option', $('Remove the create-option value.'))
  .option('--disk-size-g-b', $('Remove the disk-size-g-b value.'))
  .option('--managed-disk', $('Remove the managed-disk value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/storageProfile/osDisk';
    var anySubItem = false || options.osType || options.encryptionSettings || options.name || options.vhd || options.image || options.caching || options.createOption || options.diskSizeGB || options.managedDisk;
    if (anySubItem) {
      var subItemPath = null;
      if (options.osType) {
        subItemPath = options.path + '/osType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.encryptionSettings) {
        subItemPath = options.path + '/encryptionSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vhd) {
        subItemPath = options.path + '/vhd';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.image) {
        subItemPath = options.path + '/image';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.caching) {
        subItemPath = options.path + '/caching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.createOption) {
        subItemPath = options.path + '/createOption';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.diskSizeGB) {
        subItemPath = options.path + '/diskSizeGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.managedDisk) {
        subItemPath = options.path + '/managedDisk';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set encryption-settings
  var catparametersCreateOrUpdateVirtualMachinesEncryptionSettings0SPoDeS1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesEncryptionSettings0SPoDeS1 = catparametersCreateOrUpdateVirtualMachinesEncryptionSettings0SPoDeS1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesEncryptionSettings0SPoDeS1 = parametersCreateOrUpdateVirtualMachinesEncryptionSettings0SPoDeS1.category('encryption-settings')
  .description($('Commands to configure encryption-settings of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesEncryptionSettings0SPoDeS1.command('set')
  .description($('Set encryption-settings in config string or files, e.g. \r\n         {\r\n           ...\r\n           "encryptionSettings" : {\r\n             "diskEncryptionKey":{\r\n               "secretUrl":"",\r\n               "sourceVault":{\r\n                 "id":""\r\n               }\r\n             },\r\n             "keyEncryptionKey":{\r\n               "keyUrl":"",\r\n               "sourceVault":{\r\n                 "id":""\r\n               }\r\n             },\r\n             "enabled":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--disk-encryption-key <diskEncryptionKey>', $('Set the disk-encryption-key value.'))
  .option('--key-encryption-key <keyEncryptionKey>', $('Set the key-encryption-key value.'))
  .option('--enabled <enabled>', $('Set the enabled value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/storageProfile/osDisk/encryptionSettings';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'diskEncryptionKey';
    if (options.diskEncryptionKey) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.diskEncryptionKey);
      cli.output.verbose('================================================');
      if (options.parse && options.diskEncryptionKey) {
        options.diskEncryptionKey = JSON.parse(options.diskEncryptionKey);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskEncryptionKey}]);
    }
    paramPath = options.path + '/' + 'keyEncryptionKey';
    if (options.keyEncryptionKey) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.keyEncryptionKey);
      cli.output.verbose('================================================');
      if (options.parse && options.keyEncryptionKey) {
        options.keyEncryptionKey = JSON.parse(options.keyEncryptionKey);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyEncryptionKey}]);
    }
    paramPath = options.path + '/' + 'enabled';
    if (options.enabled) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.enabled);
      cli.output.verbose('================================================');
      if (options.parse && options.enabled) {
        options.enabled = JSON.parse(options.enabled);
      }
      options.enabled = JSON.parse(options.enabled);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enabled}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete encryption-settings
  var catparametersCreateOrUpdateVirtualMachinesEncryptionSettings1SPoDeS1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesEncryptionSettings1SPoDeS1 = catparametersCreateOrUpdateVirtualMachinesEncryptionSettings1SPoDeS1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesEncryptionSettings1SPoDeS1 = parametersCreateOrUpdateVirtualMachinesEncryptionSettings1SPoDeS1.category('encryption-settings')
  .description($('Commands to configure encryption-settings of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesEncryptionSettings1SPoDeS1.command('delete')
  .description($('Remove encryption-settings in config string or files, e.g. \r\n         {\r\n           ...\r\n           "encryptionSettings" : {\r\n             "diskEncryptionKey":{\r\n               "secretUrl":"",\r\n               "sourceVault":{\r\n                 "id":""\r\n               }\r\n             },\r\n             "keyEncryptionKey":{\r\n               "keyUrl":"",\r\n               "sourceVault":{\r\n                 "id":""\r\n               }\r\n             },\r\n             "enabled":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--disk-encryption-key', $('Remove the disk-encryption-key value.'))
  .option('--key-encryption-key', $('Remove the key-encryption-key value.'))
  .option('--enabled', $('Remove the enabled value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/storageProfile/osDisk/encryptionSettings';
    var anySubItem = false || options.diskEncryptionKey || options.keyEncryptionKey || options.enabled;
    if (anySubItem) {
      var subItemPath = null;
      if (options.diskEncryptionKey) {
        subItemPath = options.path + '/diskEncryptionKey';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.keyEncryptionKey) {
        subItemPath = options.path + '/keyEncryptionKey';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enabled) {
        subItemPath = options.path + '/enabled';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set disk-encryption-key
  var catparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey0SPoDeSdEK1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesDiskEncryptionKey0SPoDeSdEK1 = catparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey0SPoDeSdEK1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey0SPoDeSdEK1 = parametersCreateOrUpdateVirtualMachinesDiskEncryptionKey0SPoDeSdEK1.category('disk-encryption-key')
  .description($('Commands to configure disk-encryption-key of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey0SPoDeSdEK1.command('set')
  .description($('Set disk-encryption-key in config string or files, e.g. \r\n         {\r\n           ...\r\n           "diskEncryptionKey" : {\r\n             "secretUrl":"",\r\n             "sourceVault":{\r\n               "id":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--secret-url <secretUrl>', $('Set the secret-url value.'))
  .option('--source-vault <sourceVault>', $('Set the source-vault value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/storageProfile/osDisk/encryptionSettings/diskEncryptionKey';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'secretUrl';
    if (options.secretUrl) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.secretUrl);
      cli.output.verbose('================================================');
      if (options.parse && options.secretUrl) {
        options.secretUrl = JSON.parse(options.secretUrl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.secretUrl}]);
    }
    paramPath = options.path + '/' + 'sourceVault';
    if (options.sourceVault) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sourceVault);
      cli.output.verbose('================================================');
      if (options.parse && options.sourceVault) {
        options.sourceVault = JSON.parse(options.sourceVault);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceVault}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete disk-encryption-key
  var catparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey1SPoDeSdEK1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesDiskEncryptionKey1SPoDeSdEK1 = catparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey1SPoDeSdEK1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey1SPoDeSdEK1 = parametersCreateOrUpdateVirtualMachinesDiskEncryptionKey1SPoDeSdEK1.category('disk-encryption-key')
  .description($('Commands to configure disk-encryption-key of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey1SPoDeSdEK1.command('delete')
  .description($('Remove disk-encryption-key in config string or files, e.g. \r\n         {\r\n           ...\r\n           "diskEncryptionKey" : {\r\n             "secretUrl":"",\r\n             "sourceVault":{\r\n               "id":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--secret-url', $('Remove the secret-url value.'))
  .option('--source-vault', $('Remove the source-vault value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/storageProfile/osDisk/encryptionSettings/diskEncryptionKey';
    var anySubItem = false || options.secretUrl || options.sourceVault;
    if (anySubItem) {
      var subItemPath = null;
      if (options.secretUrl) {
        subItemPath = options.path + '/secretUrl';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceVault) {
        subItemPath = options.path + '/sourceVault';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set source-vault
  var catparametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSdEKsV1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSdEKsV1 = catparametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSdEKsV1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSdEKsV1 = parametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSdEKsV1.category('source-vault')
  .description($('Commands to configure source-vault of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSdEKsV1.command('set')
  .description($('Set source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           "sourceVault" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/storageProfile/osDisk/encryptionSettings/diskEncryptionKey/sourceVault';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete source-vault
  var catparametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSdEKsV1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSdEKsV1 = catparametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSdEKsV1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSdEKsV1 = parametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSdEKsV1.category('source-vault')
  .description($('Commands to configure source-vault of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSdEKsV1.command('delete')
  .description($('Remove source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           "sourceVault" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/storageProfile/osDisk/encryptionSettings/diskEncryptionKey/sourceVault';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set key-encryption-key
  var catparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey0SPoDeSkEK1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesKeyEncryptionKey0SPoDeSkEK1 = catparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey0SPoDeSkEK1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey0SPoDeSkEK1 = parametersCreateOrUpdateVirtualMachinesKeyEncryptionKey0SPoDeSkEK1.category('key-encryption-key')
  .description($('Commands to configure key-encryption-key of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey0SPoDeSkEK1.command('set')
  .description($('Set key-encryption-key in config string or files, e.g. \r\n         {\r\n           ...\r\n           "keyEncryptionKey" : {\r\n             "keyUrl":"",\r\n             "sourceVault":{\r\n               "id":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--key-url <keyUrl>', $('Set the key-url value.'))
  .option('--source-vault <sourceVault>', $('Set the source-vault value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/storageProfile/osDisk/encryptionSettings/keyEncryptionKey';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'keyUrl';
    if (options.keyUrl) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.keyUrl);
      cli.output.verbose('================================================');
      if (options.parse && options.keyUrl) {
        options.keyUrl = JSON.parse(options.keyUrl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyUrl}]);
    }
    paramPath = options.path + '/' + 'sourceVault';
    if (options.sourceVault) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sourceVault);
      cli.output.verbose('================================================');
      if (options.parse && options.sourceVault) {
        options.sourceVault = JSON.parse(options.sourceVault);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceVault}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete key-encryption-key
  var catparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey1SPoDeSkEK1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesKeyEncryptionKey1SPoDeSkEK1 = catparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey1SPoDeSkEK1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey1SPoDeSkEK1 = parametersCreateOrUpdateVirtualMachinesKeyEncryptionKey1SPoDeSkEK1.category('key-encryption-key')
  .description($('Commands to configure key-encryption-key of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey1SPoDeSkEK1.command('delete')
  .description($('Remove key-encryption-key in config string or files, e.g. \r\n         {\r\n           ...\r\n           "keyEncryptionKey" : {\r\n             "keyUrl":"",\r\n             "sourceVault":{\r\n               "id":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key-url', $('Remove the key-url value.'))
  .option('--source-vault', $('Remove the source-vault value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/storageProfile/osDisk/encryptionSettings/keyEncryptionKey';
    var anySubItem = false || options.keyUrl || options.sourceVault;
    if (anySubItem) {
      var subItemPath = null;
      if (options.keyUrl) {
        subItemPath = options.path + '/keyUrl';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceVault) {
        subItemPath = options.path + '/sourceVault';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set key-encryption-key-source-vault
  var catparametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSkEKsV1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSkEKsV1 = catparametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSkEKsV1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSkEKsV1 = parametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSkEKsV1.category('key-encryption-key-source-vault')
  .description($('Commands to configure key-encryption-key-source-vault of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSkEKsV1.command('set')
  .description($('Set key-encryption-key-source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           "sourceVault" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/storageProfile/osDisk/encryptionSettings/keyEncryptionKey/sourceVault';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete key-encryption-key-source-vault
  var catparametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSkEKsV1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSkEKsV1 = catparametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSkEKsV1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSkEKsV1 = parametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSkEKsV1.category('key-encryption-key-source-vault')
  .description($('Commands to configure key-encryption-key-source-vault of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSkEKsV1.command('delete')
  .description($('Remove key-encryption-key-source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           "sourceVault" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/storageProfile/osDisk/encryptionSettings/keyEncryptionKey/sourceVault';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set vhd
  var catparametersCreateOrUpdateVirtualMachinesVhd0SPoDv1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesVhd0SPoDv1 = catparametersCreateOrUpdateVirtualMachinesVhd0SPoDv1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesVhd0SPoDv1 = parametersCreateOrUpdateVirtualMachinesVhd0SPoDv1.category('vhd')
  .description($('Commands to configure vhd of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesVhd0SPoDv1.command('set')
  .description($('Set vhd in config string or files, e.g. \r\n         {\r\n           ...\r\n           "vhd" : {\r\n             "uri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--uri <uri>', $('Set the uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/storageProfile/osDisk/vhd';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'uri';
    if (options.uri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.uri);
      cli.output.verbose('================================================');
      if (options.parse && options.uri) {
        options.uri = JSON.parse(options.uri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.uri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete vhd
  var catparametersCreateOrUpdateVirtualMachinesVhd1SPoDv1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesVhd1SPoDv1 = catparametersCreateOrUpdateVirtualMachinesVhd1SPoDv1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesVhd1SPoDv1 = parametersCreateOrUpdateVirtualMachinesVhd1SPoDv1.category('vhd')
  .description($('Commands to configure vhd of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesVhd1SPoDv1.command('delete')
  .description($('Remove vhd in config string or files, e.g. \r\n         {\r\n           ...\r\n           "vhd" : {\r\n             "uri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--uri', $('Remove the uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/storageProfile/osDisk/vhd';
    var anySubItem = false || options.uri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.uri) {
        subItemPath = options.path + '/uri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set image
  var catparametersCreateOrUpdateVirtualMachinesImage0SPoDi2 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesImage0SPoDi2 = catparametersCreateOrUpdateVirtualMachinesImage0SPoDi2.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesImage0SPoDi2 = parametersCreateOrUpdateVirtualMachinesImage0SPoDi2.category('image')
  .description($('Commands to configure image of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesImage0SPoDi2.command('set')
  .description($('Set image in config string or files, e.g. \r\n         {\r\n           ...\r\n           "image" : {\r\n             "uri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--uri <uri>', $('Set the uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/storageProfile/osDisk/image';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'uri';
    if (options.uri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.uri);
      cli.output.verbose('================================================');
      if (options.parse && options.uri) {
        options.uri = JSON.parse(options.uri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.uri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete image
  var catparametersCreateOrUpdateVirtualMachinesImage1SPoDi2 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesImage1SPoDi2 = catparametersCreateOrUpdateVirtualMachinesImage1SPoDi2.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesImage1SPoDi2 = parametersCreateOrUpdateVirtualMachinesImage1SPoDi2.category('image')
  .description($('Commands to configure image of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesImage1SPoDi2.command('delete')
  .description($('Remove image in config string or files, e.g. \r\n         {\r\n           ...\r\n           "image" : {\r\n             "uri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--uri', $('Remove the uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/storageProfile/osDisk/image';
    var anySubItem = false || options.uri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.uri) {
        subItemPath = options.path + '/uri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set managed-disk
  var catparametersCreateOrUpdateVirtualMachinesManagedDisk0SPoDmD1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesManagedDisk0SPoDmD1 = catparametersCreateOrUpdateVirtualMachinesManagedDisk0SPoDmD1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesManagedDisk0SPoDmD1 = parametersCreateOrUpdateVirtualMachinesManagedDisk0SPoDmD1.category('managed-disk')
  .description($('Commands to configure managed-disk of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesManagedDisk0SPoDmD1.command('set')
  .description($('Set managed-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           "managedDisk" : {\r\n             "storageAccountType":null,\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--storage-account-type <storageAccountType>', $('Set the storage-account-type value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/storageProfile/osDisk/managedDisk';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'storageAccountType';
    if (options.storageAccountType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storageAccountType);
      cli.output.verbose('================================================');
      if (options.parse && options.storageAccountType) {
        options.storageAccountType = JSON.parse(options.storageAccountType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storageAccountType}]);
    }
    paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete managed-disk
  var catparametersCreateOrUpdateVirtualMachinesManagedDisk1SPoDmD1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesManagedDisk1SPoDmD1 = catparametersCreateOrUpdateVirtualMachinesManagedDisk1SPoDmD1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesManagedDisk1SPoDmD1 = parametersCreateOrUpdateVirtualMachinesManagedDisk1SPoDmD1.category('managed-disk')
  .description($('Commands to configure managed-disk of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesManagedDisk1SPoDmD1.command('delete')
  .description($('Remove managed-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           "managedDisk" : {\r\n             "storageAccountType":null,\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--storage-account-type', $('Remove the storage-account-type value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/storageProfile/osDisk/managedDisk';
    var anySubItem = false || options.storageAccountType || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.storageAccountType) {
        subItemPath = options.path + '/storageAccountType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set data-disks
  var catparametersCreateOrUpdateVirtualMachinesDataDisks0SPdD1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesDataDisks0SPdD1 = catparametersCreateOrUpdateVirtualMachinesDataDisks0SPdD1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesDataDisks0SPdD1 = parametersCreateOrUpdateVirtualMachinesDataDisks0SPdD1.category('data-disks')
  .description($('Commands to configure data-disks of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesDataDisks0SPdD1.command('set')
  .description($('Set data-disks in config string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDisks" : {\r\n             "lun":"",\r\n             "name":"",\r\n             "vhd":{\r\n               "uri":""\r\n             },\r\n             "image":{\r\n               "uri":""\r\n             },\r\n             "caching":null,\r\n             "createOption":"",\r\n             "diskSizeGB":null,\r\n             "managedDisk":{\r\n               "storageAccountType":null,\r\n               "id":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--lun <lun>', $('Set the lun value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--vhd <vhd>', $('Set the vhd value.'))
  .option('--image <image>', $('Set the image value.'))
  .option('--caching <caching>', $('Set the caching value.'))
  .option('--create-option <createOption>', $('Set the create-option value.'))
  .option('--disk-size-g-b <diskSizeGB>', $('Set the disk-size-g-b value.'))
  .option('--managed-disk <managedDisk>', $('Set the managed-disk value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/storageProfile/dataDisks' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'lun';
    if (options.lun) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.lun);
      cli.output.verbose('================================================');
      if (options.parse && options.lun) {
        options.lun = JSON.parse(options.lun);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.lun}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'vhd';
    if (options.vhd) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.vhd);
      cli.output.verbose('================================================');
      if (options.parse && options.vhd) {
        options.vhd = JSON.parse(options.vhd);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vhd}]);
    }
    paramPath = options.path + '/' + 'image';
    if (options.image) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.image);
      cli.output.verbose('================================================');
      if (options.parse && options.image) {
        options.image = JSON.parse(options.image);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.image}]);
    }
    paramPath = options.path + '/' + 'caching';
    if (options.caching) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.caching);
      cli.output.verbose('================================================');
      if (options.parse && options.caching) {
        options.caching = JSON.parse(options.caching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.caching}]);
    }
    paramPath = options.path + '/' + 'createOption';
    if (options.createOption) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.createOption);
      cli.output.verbose('================================================');
      if (options.parse && options.createOption) {
        options.createOption = JSON.parse(options.createOption);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.createOption}]);
    }
    paramPath = options.path + '/' + 'diskSizeGB';
    if (options.diskSizeGB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.diskSizeGB);
      cli.output.verbose('================================================');
      if (options.parse && options.diskSizeGB) {
        options.diskSizeGB = JSON.parse(options.diskSizeGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskSizeGB}]);
    }
    paramPath = options.path + '/' + 'managedDisk';
    if (options.managedDisk) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.managedDisk);
      cli.output.verbose('================================================');
      if (options.parse && options.managedDisk) {
        options.managedDisk = JSON.parse(options.managedDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.managedDisk}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete data-disks
  var catparametersCreateOrUpdateVirtualMachinesDataDisks1SPdD1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesDataDisks1SPdD1 = catparametersCreateOrUpdateVirtualMachinesDataDisks1SPdD1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesDataDisks1SPdD1 = parametersCreateOrUpdateVirtualMachinesDataDisks1SPdD1.category('data-disks')
  .description($('Commands to configure data-disks of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesDataDisks1SPdD1.command('delete')
  .description($('Remove data-disks in config string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDisks" : {\r\n             "lun":"",\r\n             "name":"",\r\n             "vhd":{\r\n               "uri":""\r\n             },\r\n             "image":{\r\n               "uri":""\r\n             },\r\n             "caching":null,\r\n             "createOption":"",\r\n             "diskSizeGB":null,\r\n             "managedDisk":{\r\n               "storageAccountType":null,\r\n               "id":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--lun', $('Remove the lun value.'))
  .option('--name', $('Remove the name value.'))
  .option('--vhd', $('Remove the vhd value.'))
  .option('--image', $('Remove the image value.'))
  .option('--caching', $('Remove the caching value.'))
  .option('--create-option', $('Remove the create-option value.'))
  .option('--disk-size-g-b', $('Remove the disk-size-g-b value.'))
  .option('--managed-disk', $('Remove the managed-disk value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/storageProfile/dataDisks' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.lun || options.name || options.vhd || options.image || options.caching || options.createOption || options.diskSizeGB || options.managedDisk;
    if (anySubItem) {
      var subItemPath = null;
      if (options.lun) {
        subItemPath = options.path + '/lun';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vhd) {
        subItemPath = options.path + '/vhd';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.image) {
        subItemPath = options.path + '/image';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.caching) {
        subItemPath = options.path + '/caching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.createOption) {
        subItemPath = options.path + '/createOption';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.diskSizeGB) {
        subItemPath = options.path + '/diskSizeGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.managedDisk) {
        subItemPath = options.path + '/managedDisk';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set data-disks-vhd
  var catparametersCreateOrUpdateVirtualMachinesVhd0SPdDDIv3 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesVhd0SPdDDIv3 = catparametersCreateOrUpdateVirtualMachinesVhd0SPdDDIv3.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesVhd0SPdDDIv3 = parametersCreateOrUpdateVirtualMachinesVhd0SPdDDIv3.category('data-disks-vhd')
  .description($('Commands to configure data-disks-vhd of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesVhd0SPdDDIv3.command('set')
  .description($('Set data-disks-vhd in config string or files, e.g. \r\n         {\r\n           ...\r\n           "vhd" : {\r\n             "uri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--data-disks-index <data-disks-index>', $('Indexer: data-disks-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--uri <uri>', $('Set the uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/storageProfile/dataDisks/' + options.dataDisksIndex + '/vhd';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'uri';
    if (options.uri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.uri);
      cli.output.verbose('================================================');
      if (options.parse && options.uri) {
        options.uri = JSON.parse(options.uri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.uri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete data-disks-vhd
  var catparametersCreateOrUpdateVirtualMachinesVhd1SPdDDIv3 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesVhd1SPdDDIv3 = catparametersCreateOrUpdateVirtualMachinesVhd1SPdDDIv3.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesVhd1SPdDDIv3 = parametersCreateOrUpdateVirtualMachinesVhd1SPdDDIv3.category('data-disks-vhd')
  .description($('Commands to configure data-disks-vhd of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesVhd1SPdDDIv3.command('delete')
  .description($('Remove data-disks-vhd in config string or files, e.g. \r\n         {\r\n           ...\r\n           "vhd" : {\r\n             "uri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--data-disks-index <data-disks-index>', $('Indexer: data-disks-index.'))
  .option('--uri', $('Remove the uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/storageProfile/dataDisks/' + options.dataDisksIndex + '/vhd';
    var anySubItem = false || options.uri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.uri) {
        subItemPath = options.path + '/uri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set data-disks-image
  var catparametersCreateOrUpdateVirtualMachinesImage0SPdDDIi4 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesImage0SPdDDIi4 = catparametersCreateOrUpdateVirtualMachinesImage0SPdDDIi4.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesImage0SPdDDIi4 = parametersCreateOrUpdateVirtualMachinesImage0SPdDDIi4.category('data-disks-image')
  .description($('Commands to configure data-disks-image of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesImage0SPdDDIi4.command('set')
  .description($('Set data-disks-image in config string or files, e.g. \r\n         {\r\n           ...\r\n           "image" : {\r\n             "uri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--data-disks-index <data-disks-index>', $('Indexer: data-disks-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--uri <uri>', $('Set the uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/storageProfile/dataDisks/' + options.dataDisksIndex + '/image';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'uri';
    if (options.uri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.uri);
      cli.output.verbose('================================================');
      if (options.parse && options.uri) {
        options.uri = JSON.parse(options.uri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.uri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete data-disks-image
  var catparametersCreateOrUpdateVirtualMachinesImage1SPdDDIi4 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesImage1SPdDDIi4 = catparametersCreateOrUpdateVirtualMachinesImage1SPdDDIi4.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesImage1SPdDDIi4 = parametersCreateOrUpdateVirtualMachinesImage1SPdDDIi4.category('data-disks-image')
  .description($('Commands to configure data-disks-image of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesImage1SPdDDIi4.command('delete')
  .description($('Remove data-disks-image in config string or files, e.g. \r\n         {\r\n           ...\r\n           "image" : {\r\n             "uri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--data-disks-index <data-disks-index>', $('Indexer: data-disks-index.'))
  .option('--uri', $('Remove the uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/storageProfile/dataDisks/' + options.dataDisksIndex + '/image';
    var anySubItem = false || options.uri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.uri) {
        subItemPath = options.path + '/uri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set data-disks-managed-disk
  var catparametersCreateOrUpdateVirtualMachinesManagedDisk0SPdDDImD2 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesManagedDisk0SPdDDImD2 = catparametersCreateOrUpdateVirtualMachinesManagedDisk0SPdDDImD2.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesManagedDisk0SPdDDImD2 = parametersCreateOrUpdateVirtualMachinesManagedDisk0SPdDDImD2.category('data-disks-managed-disk')
  .description($('Commands to configure data-disks-managed-disk of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesManagedDisk0SPdDDImD2.command('set')
  .description($('Set data-disks-managed-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           "managedDisk" : {\r\n             "storageAccountType":null,\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--data-disks-index <data-disks-index>', $('Indexer: data-disks-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--storage-account-type <storageAccountType>', $('Set the storage-account-type value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/storageProfile/dataDisks/' + options.dataDisksIndex + '/managedDisk';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'storageAccountType';
    if (options.storageAccountType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storageAccountType);
      cli.output.verbose('================================================');
      if (options.parse && options.storageAccountType) {
        options.storageAccountType = JSON.parse(options.storageAccountType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storageAccountType}]);
    }
    paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete data-disks-managed-disk
  var catparametersCreateOrUpdateVirtualMachinesManagedDisk1SPdDDImD2 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesManagedDisk1SPdDDImD2 = catparametersCreateOrUpdateVirtualMachinesManagedDisk1SPdDDImD2.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesManagedDisk1SPdDDImD2 = parametersCreateOrUpdateVirtualMachinesManagedDisk1SPdDDImD2.category('data-disks-managed-disk')
  .description($('Commands to configure data-disks-managed-disk of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesManagedDisk1SPdDDImD2.command('delete')
  .description($('Remove data-disks-managed-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           "managedDisk" : {\r\n             "storageAccountType":null,\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--data-disks-index <data-disks-index>', $('Indexer: data-disks-index.'))
  .option('--storage-account-type', $('Remove the storage-account-type value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/storageProfile/dataDisks/' + options.dataDisksIndex + '/managedDisk';
    var anySubItem = false || options.storageAccountType || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.storageAccountType) {
        subItemPath = options.path + '/storageAccountType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set os-profile
  var catparametersCreateOrUpdateVirtualMachinesOsProfile0OP1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesOsProfile0OP1 = catparametersCreateOrUpdateVirtualMachinesOsProfile0OP1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesOsProfile0OP1 = parametersCreateOrUpdateVirtualMachinesOsProfile0OP1.category('os-profile')
  .description($('Commands to configure os-profile of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesOsProfile0OP1.command('set')
  .description($('Set os-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "osProfile" : {\r\n             "computerName":"",\r\n             "adminUsername":"",\r\n             "adminPassword":"",\r\n             "customData":"",\r\n             "windowsConfiguration":{\r\n               "provisionVMAgent":null,\r\n               "enableAutomaticUpdates":null,\r\n               "timeZone":"",\r\n               "additionalUnattendContent":[\r\n                 {\r\n                   "passName":null,\r\n                   "componentName":null,\r\n                   "settingName":null,\r\n                   "content":""\r\n                 }\r\n               ],\r\n               "winRM":{\r\n                 "listeners":[\r\n                   {\r\n                     "protocol":null,\r\n                     "certificateUrl":""\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             "linuxConfiguration":{\r\n               "disablePasswordAuthentication":null,\r\n               "ssh":{\r\n                 "publicKeys":[\r\n                   {\r\n                     "path":"",\r\n                     "keyData":""\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             "secrets":[\r\n               {\r\n                 "sourceVault":{\r\n                   "id":""\r\n                 },\r\n                 "vaultCertificates":[\r\n                   {\r\n                     "certificateUrl":"",\r\n                     "certificateStore":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--computer-name <computerName>', $('Set the computer-name value.'))
  .option('--admin-username <adminUsername>', $('Set the admin-username value.'))
  .option('--admin-password <adminPassword>', $('Set the admin-password value.'))
  .option('--custom-data <customData>', $('Set the custom-data value.'))
  .option('--windows-configuration <windowsConfiguration>', $('Set the windows-configuration value.'))
  .option('--linux-configuration <linuxConfiguration>', $('Set the linux-configuration value.'))
  .option('--secrets <secrets>', $('Set the secrets value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/osProfile';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'computerName';
    if (options.computerName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.computerName);
      cli.output.verbose('================================================');
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = options.path + '/' + 'adminUsername';
    if (options.adminUsername) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.adminUsername);
      cli.output.verbose('================================================');
      if (options.parse && options.adminUsername) {
        options.adminUsername = JSON.parse(options.adminUsername);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUsername}]);
    }
    paramPath = options.path + '/' + 'adminPassword';
    if (options.adminPassword) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.adminPassword);
      cli.output.verbose('================================================');
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = options.path + '/' + 'customData';
    if (options.customData) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.customData);
      cli.output.verbose('================================================');
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = options.path + '/' + 'windowsConfiguration';
    if (options.windowsConfiguration) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.windowsConfiguration);
      cli.output.verbose('================================================');
      if (options.parse && options.windowsConfiguration) {
        options.windowsConfiguration = JSON.parse(options.windowsConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsConfiguration}]);
    }
    paramPath = options.path + '/' + 'linuxConfiguration';
    if (options.linuxConfiguration) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.linuxConfiguration);
      cli.output.verbose('================================================');
      if (options.parse && options.linuxConfiguration) {
        options.linuxConfiguration = JSON.parse(options.linuxConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.linuxConfiguration}]);
    }
    paramPath = options.path + '/' + 'secrets';
    if (options.secrets) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.secrets);
      cli.output.verbose('================================================');
      if (options.parse && options.secrets) {
        options.secrets = JSON.parse(options.secrets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.secrets}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete os-profile
  var catparametersCreateOrUpdateVirtualMachinesOsProfile1OP1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesOsProfile1OP1 = catparametersCreateOrUpdateVirtualMachinesOsProfile1OP1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesOsProfile1OP1 = parametersCreateOrUpdateVirtualMachinesOsProfile1OP1.category('os-profile')
  .description($('Commands to configure os-profile of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesOsProfile1OP1.command('delete')
  .description($('Remove os-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "osProfile" : {\r\n             "computerName":"",\r\n             "adminUsername":"",\r\n             "adminPassword":"",\r\n             "customData":"",\r\n             "windowsConfiguration":{\r\n               "provisionVMAgent":null,\r\n               "enableAutomaticUpdates":null,\r\n               "timeZone":"",\r\n               "additionalUnattendContent":[\r\n                 {\r\n                   "passName":null,\r\n                   "componentName":null,\r\n                   "settingName":null,\r\n                   "content":""\r\n                 }\r\n               ],\r\n               "winRM":{\r\n                 "listeners":[\r\n                   {\r\n                     "protocol":null,\r\n                     "certificateUrl":""\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             "linuxConfiguration":{\r\n               "disablePasswordAuthentication":null,\r\n               "ssh":{\r\n                 "publicKeys":[\r\n                   {\r\n                     "path":"",\r\n                     "keyData":""\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             "secrets":[\r\n               {\r\n                 "sourceVault":{\r\n                   "id":""\r\n                 },\r\n                 "vaultCertificates":[\r\n                   {\r\n                     "certificateUrl":"",\r\n                     "certificateStore":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--computer-name', $('Remove the computer-name value.'))
  .option('--admin-username', $('Remove the admin-username value.'))
  .option('--admin-password', $('Remove the admin-password value.'))
  .option('--custom-data', $('Remove the custom-data value.'))
  .option('--windows-configuration', $('Remove the windows-configuration value.'))
  .option('--linux-configuration', $('Remove the linux-configuration value.'))
  .option('--secrets', $('Remove the secrets value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/osProfile';
    var anySubItem = false || options.computerName || options.adminUsername || options.adminPassword || options.customData || options.windowsConfiguration || options.linuxConfiguration || options.secrets;
    if (anySubItem) {
      var subItemPath = null;
      if (options.computerName) {
        subItemPath = options.path + '/computerName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminUsername) {
        subItemPath = options.path + '/adminUsername';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminPassword) {
        subItemPath = options.path + '/adminPassword';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.customData) {
        subItemPath = options.path + '/customData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.windowsConfiguration) {
        subItemPath = options.path + '/windowsConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.linuxConfiguration) {
        subItemPath = options.path + '/linuxConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.secrets) {
        subItemPath = options.path + '/secrets';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set windows-configuration
  var catparametersCreateOrUpdateVirtualMachinesWindowsConfiguration0OPwC1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesWindowsConfiguration0OPwC1 = catparametersCreateOrUpdateVirtualMachinesWindowsConfiguration0OPwC1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesWindowsConfiguration0OPwC1 = parametersCreateOrUpdateVirtualMachinesWindowsConfiguration0OPwC1.category('windows-configuration')
  .description($('Commands to configure windows-configuration of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesWindowsConfiguration0OPwC1.command('set')
  .description($('Set windows-configuration in config string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsConfiguration" : {\r\n             "provisionVMAgent":null,\r\n             "enableAutomaticUpdates":null,\r\n             "timeZone":"",\r\n             "additionalUnattendContent":[\r\n               {\r\n                 "passName":null,\r\n                 "componentName":null,\r\n                 "settingName":null,\r\n                 "content":""\r\n               }\r\n             ],\r\n             "winRM":{\r\n               "listeners":[\r\n                 {\r\n                   "protocol":null,\r\n                   "certificateUrl":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--provision-vm-agent <provisionVMAgent>', $('Set the provision-vm-agent value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Set the enable-automatic-updates value.'))
  .option('--time-zone <timeZone>', $('Set the time-zone value.'))
  .option('--additional-unattend-content <additionalUnattendContent>', $('Set the additional-unattend-content value.'))
  .option('--win-rm <winRM>', $('Set the win-rm value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/osProfile/windowsConfiguration';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'provisionVMAgent';
    if (options.provisionVMAgent) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.provisionVMAgent);
      cli.output.verbose('================================================');
      if (options.parse && options.provisionVMAgent) {
        options.provisionVMAgent = JSON.parse(options.provisionVMAgent);
      }
      options.provisionVMAgent = JSON.parse(options.provisionVMAgent);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionVMAgent}]);
    }
    paramPath = options.path + '/' + 'enableAutomaticUpdates';
    if (options.enableAutomaticUpdates) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.enableAutomaticUpdates);
      cli.output.verbose('================================================');
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = options.path + '/' + 'timeZone';
    if (options.timeZone) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.timeZone);
      cli.output.verbose('================================================');
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = options.path + '/' + 'additionalUnattendContent';
    if (options.additionalUnattendContent) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.additionalUnattendContent);
      cli.output.verbose('================================================');
      if (options.parse && options.additionalUnattendContent) {
        options.additionalUnattendContent = JSON.parse(options.additionalUnattendContent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.additionalUnattendContent}]);
    }
    paramPath = options.path + '/' + 'winRM';
    if (options.winRM) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.winRM);
      cli.output.verbose('================================================');
      if (options.parse && options.winRM) {
        options.winRM = JSON.parse(options.winRM);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.winRM}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete windows-configuration
  var catparametersCreateOrUpdateVirtualMachinesWindowsConfiguration1OPwC1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesWindowsConfiguration1OPwC1 = catparametersCreateOrUpdateVirtualMachinesWindowsConfiguration1OPwC1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesWindowsConfiguration1OPwC1 = parametersCreateOrUpdateVirtualMachinesWindowsConfiguration1OPwC1.category('windows-configuration')
  .description($('Commands to configure windows-configuration of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesWindowsConfiguration1OPwC1.command('delete')
  .description($('Remove windows-configuration in config string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsConfiguration" : {\r\n             "provisionVMAgent":null,\r\n             "enableAutomaticUpdates":null,\r\n             "timeZone":"",\r\n             "additionalUnattendContent":[\r\n               {\r\n                 "passName":null,\r\n                 "componentName":null,\r\n                 "settingName":null,\r\n                 "content":""\r\n               }\r\n             ],\r\n             "winRM":{\r\n               "listeners":[\r\n                 {\r\n                   "protocol":null,\r\n                   "certificateUrl":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--provision-vm-agent', $('Remove the provision-vm-agent value.'))
  .option('--enable-automatic-updates', $('Remove the enable-automatic-updates value.'))
  .option('--time-zone', $('Remove the time-zone value.'))
  .option('--additional-unattend-content', $('Remove the additional-unattend-content value.'))
  .option('--win-rm', $('Remove the win-rm value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/osProfile/windowsConfiguration';
    var anySubItem = false || options.provisionVMAgent || options.enableAutomaticUpdates || options.timeZone || options.additionalUnattendContent || options.winRM;
    if (anySubItem) {
      var subItemPath = null;
      if (options.provisionVMAgent) {
        subItemPath = options.path + '/provisionVMAgent';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableAutomaticUpdates) {
        subItemPath = options.path + '/enableAutomaticUpdates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeZone) {
        subItemPath = options.path + '/timeZone';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.additionalUnattendContent) {
        subItemPath = options.path + '/additionalUnattendContent';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.winRM) {
        subItemPath = options.path + '/winRM';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set additional-unattend-content
  var catparametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent0OPwCaUC1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent0OPwCaUC1 = catparametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent0OPwCaUC1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent0OPwCaUC1 = parametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent0OPwCaUC1.category('additional-unattend-content')
  .description($('Commands to configure additional-unattend-content of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent0OPwCaUC1.command('set')
  .description($('Set additional-unattend-content in config string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "passName":null,\r\n             "componentName":null,\r\n             "settingName":null,\r\n             "content":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--pass-name <passName>', $('Set the pass-name value.'))
  .option('--component-name <componentName>', $('Set the component-name value.'))
  .option('--setting-name <settingName>', $('Set the setting-name value.'))
  .option('--content <content>', $('Set the content value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/osProfile/windowsConfiguration/additionalUnattendContent' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'passName';
    if (options.passName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.passName);
      cli.output.verbose('================================================');
      if (options.parse && options.passName) {
        options.passName = JSON.parse(options.passName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.passName}]);
    }
    paramPath = options.path + '/' + 'componentName';
    if (options.componentName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.componentName);
      cli.output.verbose('================================================');
      if (options.parse && options.componentName) {
        options.componentName = JSON.parse(options.componentName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.componentName}]);
    }
    paramPath = options.path + '/' + 'settingName';
    if (options.settingName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.settingName);
      cli.output.verbose('================================================');
      if (options.parse && options.settingName) {
        options.settingName = JSON.parse(options.settingName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settingName}]);
    }
    paramPath = options.path + '/' + 'content';
    if (options.content) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.content);
      cli.output.verbose('================================================');
      if (options.parse && options.content) {
        options.content = JSON.parse(options.content);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.content}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete additional-unattend-content
  var catparametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent1OPwCaUC1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent1OPwCaUC1 = catparametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent1OPwCaUC1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent1OPwCaUC1 = parametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent1OPwCaUC1.category('additional-unattend-content')
  .description($('Commands to configure additional-unattend-content of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent1OPwCaUC1.command('delete')
  .description($('Remove additional-unattend-content in config string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "passName":null,\r\n             "componentName":null,\r\n             "settingName":null,\r\n             "content":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--pass-name', $('Remove the pass-name value.'))
  .option('--component-name', $('Remove the component-name value.'))
  .option('--setting-name', $('Remove the setting-name value.'))
  .option('--content', $('Remove the content value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/osProfile/windowsConfiguration/additionalUnattendContent' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.passName || options.componentName || options.settingName || options.content;
    if (anySubItem) {
      var subItemPath = null;
      if (options.passName) {
        subItemPath = options.path + '/passName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.componentName) {
        subItemPath = options.path + '/componentName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.settingName) {
        subItemPath = options.path + '/settingName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.content) {
        subItemPath = options.path + '/content';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set win-rm
  var catparametersCreateOrUpdateVirtualMachinesWinRM0OPwCwRM1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesWinRM0OPwCwRM1 = catparametersCreateOrUpdateVirtualMachinesWinRM0OPwCwRM1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesWinRM0OPwCwRM1 = parametersCreateOrUpdateVirtualMachinesWinRM0OPwCwRM1.category('win-rm')
  .description($('Commands to configure win-rm of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesWinRM0OPwCwRM1.command('set')
  .description($('Set win-rm in config string or files, e.g. \r\n         {\r\n           ...\r\n           "winRM" : {\r\n             "listeners":[\r\n               {\r\n                 "protocol":null,\r\n                 "certificateUrl":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--listeners <listeners>', $('Set the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/osProfile/windowsConfiguration/winRM';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'listeners';
    if (options.listeners) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.listeners);
      cli.output.verbose('================================================');
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete win-rm
  var catparametersCreateOrUpdateVirtualMachinesWinRM1OPwCwRM1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesWinRM1OPwCwRM1 = catparametersCreateOrUpdateVirtualMachinesWinRM1OPwCwRM1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesWinRM1OPwCwRM1 = parametersCreateOrUpdateVirtualMachinesWinRM1OPwCwRM1.category('win-rm')
  .description($('Commands to configure win-rm of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesWinRM1OPwCwRM1.command('delete')
  .description($('Remove win-rm in config string or files, e.g. \r\n         {\r\n           ...\r\n           "winRM" : {\r\n             "listeners":[\r\n               {\r\n                 "protocol":null,\r\n                 "certificateUrl":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--listeners', $('Remove the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/osProfile/windowsConfiguration/winRM';
    var anySubItem = false || options.listeners;
    if (anySubItem) {
      var subItemPath = null;
      if (options.listeners) {
        subItemPath = options.path + '/listeners';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set listeners
  var catparametersCreateOrUpdateVirtualMachinesListeners0OPwCwRMl1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesListeners0OPwCwRMl1 = catparametersCreateOrUpdateVirtualMachinesListeners0OPwCwRMl1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesListeners0OPwCwRMl1 = parametersCreateOrUpdateVirtualMachinesListeners0OPwCwRMl1.category('listeners')
  .description($('Commands to configure listeners of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesListeners0OPwCwRMl1.command('set')
  .description($('Set listeners in config string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "protocol":null,\r\n             "certificateUrl":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--certificate-url <certificateUrl>', $('Set the certificate-url value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/osProfile/windowsConfiguration/winRM/listeners' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'protocol';
    if (options.protocol) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.protocol);
      cli.output.verbose('================================================');
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'certificateUrl';
    if (options.certificateUrl) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.certificateUrl);
      cli.output.verbose('================================================');
      if (options.parse && options.certificateUrl) {
        options.certificateUrl = JSON.parse(options.certificateUrl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateUrl}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete listeners
  var catparametersCreateOrUpdateVirtualMachinesListeners1OPwCwRMl1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesListeners1OPwCwRMl1 = catparametersCreateOrUpdateVirtualMachinesListeners1OPwCwRMl1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesListeners1OPwCwRMl1 = parametersCreateOrUpdateVirtualMachinesListeners1OPwCwRMl1.category('listeners')
  .description($('Commands to configure listeners of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesListeners1OPwCwRMl1.command('delete')
  .description($('Remove listeners in config string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "protocol":null,\r\n             "certificateUrl":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--certificate-url', $('Remove the certificate-url value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/osProfile/windowsConfiguration/winRM/listeners' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.protocol || options.certificateUrl;
    if (anySubItem) {
      var subItemPath = null;
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.certificateUrl) {
        subItemPath = options.path + '/certificateUrl';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set linux-configuration
  var catparametersCreateOrUpdateVirtualMachinesLinuxConfiguration0OPlC1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesLinuxConfiguration0OPlC1 = catparametersCreateOrUpdateVirtualMachinesLinuxConfiguration0OPlC1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesLinuxConfiguration0OPlC1 = parametersCreateOrUpdateVirtualMachinesLinuxConfiguration0OPlC1.category('linux-configuration')
  .description($('Commands to configure linux-configuration of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesLinuxConfiguration0OPlC1.command('set')
  .description($('Set linux-configuration in config string or files, e.g. \r\n         {\r\n           ...\r\n           "linuxConfiguration" : {\r\n             "disablePasswordAuthentication":null,\r\n             "ssh":{\r\n               "publicKeys":[\r\n                 {\r\n                   "path":"",\r\n                   "keyData":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--disable-password-authentication <disablePasswordAuthentication>', $('Set the disable-password-authentication value.'))
  .option('--ssh <ssh>', $('Set the ssh value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/osProfile/linuxConfiguration';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'disablePasswordAuthentication';
    if (options.disablePasswordAuthentication) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.disablePasswordAuthentication);
      cli.output.verbose('================================================');
      if (options.parse && options.disablePasswordAuthentication) {
        options.disablePasswordAuthentication = JSON.parse(options.disablePasswordAuthentication);
      }
      options.disablePasswordAuthentication = JSON.parse(options.disablePasswordAuthentication);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disablePasswordAuthentication}]);
    }
    paramPath = options.path + '/' + 'ssh';
    if (options.ssh) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.ssh);
      cli.output.verbose('================================================');
      if (options.parse && options.ssh) {
        options.ssh = JSON.parse(options.ssh);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ssh}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete linux-configuration
  var catparametersCreateOrUpdateVirtualMachinesLinuxConfiguration1OPlC1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesLinuxConfiguration1OPlC1 = catparametersCreateOrUpdateVirtualMachinesLinuxConfiguration1OPlC1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesLinuxConfiguration1OPlC1 = parametersCreateOrUpdateVirtualMachinesLinuxConfiguration1OPlC1.category('linux-configuration')
  .description($('Commands to configure linux-configuration of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesLinuxConfiguration1OPlC1.command('delete')
  .description($('Remove linux-configuration in config string or files, e.g. \r\n         {\r\n           ...\r\n           "linuxConfiguration" : {\r\n             "disablePasswordAuthentication":null,\r\n             "ssh":{\r\n               "publicKeys":[\r\n                 {\r\n                   "path":"",\r\n                   "keyData":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--disable-password-authentication', $('Remove the disable-password-authentication value.'))
  .option('--ssh', $('Remove the ssh value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/osProfile/linuxConfiguration';
    var anySubItem = false || options.disablePasswordAuthentication || options.ssh;
    if (anySubItem) {
      var subItemPath = null;
      if (options.disablePasswordAuthentication) {
        subItemPath = options.path + '/disablePasswordAuthentication';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ssh) {
        subItemPath = options.path + '/ssh';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set ssh
  var catparametersCreateOrUpdateVirtualMachinesSsh0OPlCs1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesSsh0OPlCs1 = catparametersCreateOrUpdateVirtualMachinesSsh0OPlCs1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesSsh0OPlCs1 = parametersCreateOrUpdateVirtualMachinesSsh0OPlCs1.category('ssh')
  .description($('Commands to configure ssh of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesSsh0OPlCs1.command('set')
  .description($('Set ssh in config string or files, e.g. \r\n         {\r\n           ...\r\n           "ssh" : {\r\n             "publicKeys":[\r\n               {\r\n                 "path":"",\r\n                 "keyData":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--public-keys <publicKeys>', $('Set the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/osProfile/linuxConfiguration/ssh';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'publicKeys';
    if (options.publicKeys) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publicKeys);
      cli.output.verbose('================================================');
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete ssh
  var catparametersCreateOrUpdateVirtualMachinesSsh1OPlCs1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesSsh1OPlCs1 = catparametersCreateOrUpdateVirtualMachinesSsh1OPlCs1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesSsh1OPlCs1 = parametersCreateOrUpdateVirtualMachinesSsh1OPlCs1.category('ssh')
  .description($('Commands to configure ssh of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesSsh1OPlCs1.command('delete')
  .description($('Remove ssh in config string or files, e.g. \r\n         {\r\n           ...\r\n           "ssh" : {\r\n             "publicKeys":[\r\n               {\r\n                 "path":"",\r\n                 "keyData":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--public-keys', $('Remove the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/osProfile/linuxConfiguration/ssh';
    var anySubItem = false || options.publicKeys;
    if (anySubItem) {
      var subItemPath = null;
      if (options.publicKeys) {
        subItemPath = options.path + '/publicKeys';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set public-keys
  var catparametersCreateOrUpdateVirtualMachinesPublicKeys0OPlCspK1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesPublicKeys0OPlCspK1 = catparametersCreateOrUpdateVirtualMachinesPublicKeys0OPlCspK1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesPublicKeys0OPlCspK1 = parametersCreateOrUpdateVirtualMachinesPublicKeys0OPlCspK1.category('public-keys')
  .description($('Commands to configure public-keys of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesPublicKeys0OPlCspK1.command('set')
  .description($('Set public-keys in config string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "path":"",\r\n             "keyData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--path <path>', $('Set the path value.'))
  .option('--key-data <keyData>', $('Set the key-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/osProfile/linuxConfiguration/ssh/publicKeys' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'path';
    if (options.path) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.path);
      cli.output.verbose('================================================');
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'keyData';
    if (options.keyData) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.keyData);
      cli.output.verbose('================================================');
      if (options.parse && options.keyData) {
        options.keyData = JSON.parse(options.keyData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete public-keys
  var catparametersCreateOrUpdateVirtualMachinesPublicKeys1OPlCspK1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesPublicKeys1OPlCspK1 = catparametersCreateOrUpdateVirtualMachinesPublicKeys1OPlCspK1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesPublicKeys1OPlCspK1 = parametersCreateOrUpdateVirtualMachinesPublicKeys1OPlCspK1.category('public-keys')
  .description($('Commands to configure public-keys of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesPublicKeys1OPlCspK1.command('delete')
  .description($('Remove public-keys in config string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "path":"",\r\n             "keyData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--path', $('Remove the path value.'))
  .option('--key-data', $('Remove the key-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/osProfile/linuxConfiguration/ssh/publicKeys' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.path || options.keyData;
    if (anySubItem) {
      var subItemPath = null;
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.keyData) {
        subItemPath = options.path + '/keyData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set secrets
  var catparametersCreateOrUpdateVirtualMachinesSecrets0OPs1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesSecrets0OPs1 = catparametersCreateOrUpdateVirtualMachinesSecrets0OPs1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesSecrets0OPs1 = parametersCreateOrUpdateVirtualMachinesSecrets0OPs1.category('secrets')
  .description($('Commands to configure secrets of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesSecrets0OPs1.command('set')
  .description($('Set secrets in config string or files, e.g. \r\n         {\r\n           ...\r\n           "secrets" : {\r\n             "sourceVault":{\r\n               "id":""\r\n             },\r\n             "vaultCertificates":[\r\n               {\r\n                 "certificateUrl":"",\r\n                 "certificateStore":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--source-vault <sourceVault>', $('Set the source-vault value.'))
  .option('--vault-certificates <vaultCertificates>', $('Set the vault-certificates value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/osProfile/secrets' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'sourceVault';
    if (options.sourceVault) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sourceVault);
      cli.output.verbose('================================================');
      if (options.parse && options.sourceVault) {
        options.sourceVault = JSON.parse(options.sourceVault);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceVault}]);
    }
    paramPath = options.path + '/' + 'vaultCertificates';
    if (options.vaultCertificates) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.vaultCertificates);
      cli.output.verbose('================================================');
      if (options.parse && options.vaultCertificates) {
        options.vaultCertificates = JSON.parse(options.vaultCertificates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vaultCertificates}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete secrets
  var catparametersCreateOrUpdateVirtualMachinesSecrets1OPs1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesSecrets1OPs1 = catparametersCreateOrUpdateVirtualMachinesSecrets1OPs1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesSecrets1OPs1 = parametersCreateOrUpdateVirtualMachinesSecrets1OPs1.category('secrets')
  .description($('Commands to configure secrets of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesSecrets1OPs1.command('delete')
  .description($('Remove secrets in config string or files, e.g. \r\n         {\r\n           ...\r\n           "secrets" : {\r\n             "sourceVault":{\r\n               "id":""\r\n             },\r\n             "vaultCertificates":[\r\n               {\r\n                 "certificateUrl":"",\r\n                 "certificateStore":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--source-vault', $('Remove the source-vault value.'))
  .option('--vault-certificates', $('Remove the vault-certificates value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/osProfile/secrets' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.sourceVault || options.vaultCertificates;
    if (anySubItem) {
      var subItemPath = null;
      if (options.sourceVault) {
        subItemPath = options.path + '/sourceVault';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vaultCertificates) {
        subItemPath = options.path + '/vaultCertificates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set secrets-source-vault
  var catparametersCreateOrUpdateVirtualMachinesSourceVault0OPsIsV1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesSourceVault0OPsIsV1 = catparametersCreateOrUpdateVirtualMachinesSourceVault0OPsIsV1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesSourceVault0OPsIsV1 = parametersCreateOrUpdateVirtualMachinesSourceVault0OPsIsV1.category('secrets-source-vault')
  .description($('Commands to configure secrets-source-vault of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesSourceVault0OPsIsV1.command('set')
  .description($('Set secrets-source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           "sourceVault" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--secrets-index <secrets-index>', $('Indexer: secrets-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/osProfile/secrets/' + options.secretsIndex + '/sourceVault';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete secrets-source-vault
  var catparametersCreateOrUpdateVirtualMachinesSourceVault1OPsIsV1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesSourceVault1OPsIsV1 = catparametersCreateOrUpdateVirtualMachinesSourceVault1OPsIsV1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesSourceVault1OPsIsV1 = parametersCreateOrUpdateVirtualMachinesSourceVault1OPsIsV1.category('secrets-source-vault')
  .description($('Commands to configure secrets-source-vault of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesSourceVault1OPsIsV1.command('delete')
  .description($('Remove secrets-source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           "sourceVault" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--secrets-index <secrets-index>', $('Indexer: secrets-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/osProfile/secrets/' + options.secretsIndex + '/sourceVault';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set vault-certificates
  var catparametersCreateOrUpdateVirtualMachinesVaultCertificates0OPsIvC1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesVaultCertificates0OPsIvC1 = catparametersCreateOrUpdateVirtualMachinesVaultCertificates0OPsIvC1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesVaultCertificates0OPsIvC1 = parametersCreateOrUpdateVirtualMachinesVaultCertificates0OPsIvC1.category('vault-certificates')
  .description($('Commands to configure vault-certificates of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesVaultCertificates0OPsIvC1.command('set')
  .description($('Set vault-certificates in config string or files, e.g. \r\n         {\r\n           ...\r\n           "vaultCertificates" : {\r\n             "certificateUrl":"",\r\n             "certificateStore":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--secrets-index <secrets-index>', $('Indexer: secrets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--certificate-url <certificateUrl>', $('Set the certificate-url value.'))
  .option('--certificate-store <certificateStore>', $('Set the certificate-store value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/osProfile/secrets/' + options.secretsIndex + '/vaultCertificates' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'certificateUrl';
    if (options.certificateUrl) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.certificateUrl);
      cli.output.verbose('================================================');
      if (options.parse && options.certificateUrl) {
        options.certificateUrl = JSON.parse(options.certificateUrl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateUrl}]);
    }
    paramPath = options.path + '/' + 'certificateStore';
    if (options.certificateStore) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.certificateStore);
      cli.output.verbose('================================================');
      if (options.parse && options.certificateStore) {
        options.certificateStore = JSON.parse(options.certificateStore);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateStore}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete vault-certificates
  var catparametersCreateOrUpdateVirtualMachinesVaultCertificates1OPsIvC1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesVaultCertificates1OPsIvC1 = catparametersCreateOrUpdateVirtualMachinesVaultCertificates1OPsIvC1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesVaultCertificates1OPsIvC1 = parametersCreateOrUpdateVirtualMachinesVaultCertificates1OPsIvC1.category('vault-certificates')
  .description($('Commands to configure vault-certificates of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesVaultCertificates1OPsIvC1.command('delete')
  .description($('Remove vault-certificates in config string or files, e.g. \r\n         {\r\n           ...\r\n           "vaultCertificates" : {\r\n             "certificateUrl":"",\r\n             "certificateStore":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--secrets-index <secrets-index>', $('Indexer: secrets-index.'))
  .option('--certificate-url', $('Remove the certificate-url value.'))
  .option('--certificate-store', $('Remove the certificate-store value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/osProfile/secrets/' + options.secretsIndex + '/vaultCertificates' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.certificateUrl || options.certificateStore;
    if (anySubItem) {
      var subItemPath = null;
      if (options.certificateUrl) {
        subItemPath = options.path + '/certificateUrl';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.certificateStore) {
        subItemPath = options.path + '/certificateStore';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set network-profile
  var catparametersCreateOrUpdateVirtualMachinesNetworkProfile0NP1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesNetworkProfile0NP1 = catparametersCreateOrUpdateVirtualMachinesNetworkProfile0NP1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesNetworkProfile0NP1 = parametersCreateOrUpdateVirtualMachinesNetworkProfile0NP1.category('network-profile')
  .description($('Commands to configure network-profile of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesNetworkProfile0NP1.command('set')
  .description($('Set network-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "networkProfile" : {\r\n             "networkInterfaces":[\r\n               {\r\n                 "primary":null,\r\n                 "id":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--network-interfaces <networkInterfaces>', $('Set the network-interfaces value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/networkProfile';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'networkInterfaces';
    if (options.networkInterfaces) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.networkInterfaces);
      cli.output.verbose('================================================');
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete network-profile
  var catparametersCreateOrUpdateVirtualMachinesNetworkProfile1NP1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesNetworkProfile1NP1 = catparametersCreateOrUpdateVirtualMachinesNetworkProfile1NP1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesNetworkProfile1NP1 = parametersCreateOrUpdateVirtualMachinesNetworkProfile1NP1.category('network-profile')
  .description($('Commands to configure network-profile of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesNetworkProfile1NP1.command('delete')
  .description($('Remove network-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "networkProfile" : {\r\n             "networkInterfaces":[\r\n               {\r\n                 "primary":null,\r\n                 "id":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--network-interfaces', $('Remove the network-interfaces value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/networkProfile';
    var anySubItem = false || options.networkInterfaces;
    if (anySubItem) {
      var subItemPath = null;
      if (options.networkInterfaces) {
        subItemPath = options.path + '/networkInterfaces';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set network-interfaces
  var catparametersCreateOrUpdateVirtualMachinesNetworkInterfaces0NPnI1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesNetworkInterfaces0NPnI1 = catparametersCreateOrUpdateVirtualMachinesNetworkInterfaces0NPnI1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesNetworkInterfaces0NPnI1 = parametersCreateOrUpdateVirtualMachinesNetworkInterfaces0NPnI1.category('network-interfaces')
  .description($('Commands to configure network-interfaces of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesNetworkInterfaces0NPnI1.command('set')
  .description($('Set network-interfaces in config string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "primary":null,\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--primary <primary>', $('Set the primary value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/networkProfile/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'primary';
    if (options.primary) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.primary);
      cli.output.verbose('================================================');
      if (options.parse && options.primary) {
        options.primary = JSON.parse(options.primary);
      }
      options.primary = JSON.parse(options.primary);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.primary}]);
    }
    paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete network-interfaces
  var catparametersCreateOrUpdateVirtualMachinesNetworkInterfaces1NPnI1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesNetworkInterfaces1NPnI1 = catparametersCreateOrUpdateVirtualMachinesNetworkInterfaces1NPnI1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesNetworkInterfaces1NPnI1 = parametersCreateOrUpdateVirtualMachinesNetworkInterfaces1NPnI1.category('network-interfaces')
  .description($('Commands to configure network-interfaces of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesNetworkInterfaces1NPnI1.command('delete')
  .description($('Remove network-interfaces in config string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "primary":null,\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--primary', $('Remove the primary value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/networkProfile/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.primary || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.primary) {
        subItemPath = options.path + '/primary';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set diagnostics-profile
  var catparametersCreateOrUpdateVirtualMachinesDiagnosticsProfile0DP1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesDiagnosticsProfile0DP1 = catparametersCreateOrUpdateVirtualMachinesDiagnosticsProfile0DP1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesDiagnosticsProfile0DP1 = parametersCreateOrUpdateVirtualMachinesDiagnosticsProfile0DP1.category('diagnostics-profile')
  .description($('Commands to configure diagnostics-profile of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesDiagnosticsProfile0DP1.command('set')
  .description($('Set diagnostics-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "diagnosticsProfile" : {\r\n             "bootDiagnostics":{\r\n               "enabled":null,\r\n               "storageUri":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--boot-diagnostics <bootDiagnostics>', $('Set the boot-diagnostics value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/diagnosticsProfile';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'bootDiagnostics';
    if (options.bootDiagnostics) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.bootDiagnostics);
      cli.output.verbose('================================================');
      if (options.parse && options.bootDiagnostics) {
        options.bootDiagnostics = JSON.parse(options.bootDiagnostics);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.bootDiagnostics}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete diagnostics-profile
  var catparametersCreateOrUpdateVirtualMachinesDiagnosticsProfile1DP1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesDiagnosticsProfile1DP1 = catparametersCreateOrUpdateVirtualMachinesDiagnosticsProfile1DP1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesDiagnosticsProfile1DP1 = parametersCreateOrUpdateVirtualMachinesDiagnosticsProfile1DP1.category('diagnostics-profile')
  .description($('Commands to configure diagnostics-profile of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesDiagnosticsProfile1DP1.command('delete')
  .description($('Remove diagnostics-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "diagnosticsProfile" : {\r\n             "bootDiagnostics":{\r\n               "enabled":null,\r\n               "storageUri":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--boot-diagnostics', $('Remove the boot-diagnostics value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/diagnosticsProfile';
    var anySubItem = false || options.bootDiagnostics;
    if (anySubItem) {
      var subItemPath = null;
      if (options.bootDiagnostics) {
        subItemPath = options.path + '/bootDiagnostics';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set boot-diagnostics
  var catparametersCreateOrUpdateVirtualMachinesBootDiagnostics0DPbD1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesBootDiagnostics0DPbD1 = catparametersCreateOrUpdateVirtualMachinesBootDiagnostics0DPbD1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesBootDiagnostics0DPbD1 = parametersCreateOrUpdateVirtualMachinesBootDiagnostics0DPbD1.category('boot-diagnostics')
  .description($('Commands to configure boot-diagnostics of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesBootDiagnostics0DPbD1.command('set')
  .description($('Set boot-diagnostics in config string or files, e.g. \r\n         {\r\n           ...\r\n           "bootDiagnostics" : {\r\n             "enabled":null,\r\n             "storageUri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--enabled <enabled>', $('Set the enabled value.'))
  .option('--storage-uri <storageUri>', $('Set the storage-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/diagnosticsProfile/bootDiagnostics';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'enabled';
    if (options.enabled) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.enabled);
      cli.output.verbose('================================================');
      if (options.parse && options.enabled) {
        options.enabled = JSON.parse(options.enabled);
      }
      options.enabled = JSON.parse(options.enabled);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enabled}]);
    }
    paramPath = options.path + '/' + 'storageUri';
    if (options.storageUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storageUri);
      cli.output.verbose('================================================');
      if (options.parse && options.storageUri) {
        options.storageUri = JSON.parse(options.storageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storageUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete boot-diagnostics
  var catparametersCreateOrUpdateVirtualMachinesBootDiagnostics1DPbD1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesBootDiagnostics1DPbD1 = catparametersCreateOrUpdateVirtualMachinesBootDiagnostics1DPbD1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesBootDiagnostics1DPbD1 = parametersCreateOrUpdateVirtualMachinesBootDiagnostics1DPbD1.category('boot-diagnostics')
  .description($('Commands to configure boot-diagnostics of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesBootDiagnostics1DPbD1.command('delete')
  .description($('Remove boot-diagnostics in config string or files, e.g. \r\n         {\r\n           ...\r\n           "bootDiagnostics" : {\r\n             "enabled":null,\r\n             "storageUri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--enabled', $('Remove the enabled value.'))
  .option('--storage-uri', $('Remove the storage-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/diagnosticsProfile/bootDiagnostics';
    var anySubItem = false || options.enabled || options.storageUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.enabled) {
        subItemPath = options.path + '/enabled';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storageUri) {
        subItemPath = options.path + '/storageUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set availability-set
  var catparametersCreateOrUpdateVirtualMachinesAvailabilitySet0AS1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesAvailabilitySet0AS1 = catparametersCreateOrUpdateVirtualMachinesAvailabilitySet0AS1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesAvailabilitySet0AS1 = parametersCreateOrUpdateVirtualMachinesAvailabilitySet0AS1.category('availability-set')
  .description($('Commands to configure availability-set of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesAvailabilitySet0AS1.command('set')
  .description($('Set availability-set in config string or files, e.g. \r\n         {\r\n           ...\r\n           "availabilitySet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/availabilitySet';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete availability-set
  var catparametersCreateOrUpdateVirtualMachinesAvailabilitySet1AS1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesAvailabilitySet1AS1 = catparametersCreateOrUpdateVirtualMachinesAvailabilitySet1AS1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesAvailabilitySet1AS1 = parametersCreateOrUpdateVirtualMachinesAvailabilitySet1AS1.category('availability-set')
  .description($('Commands to configure availability-set of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesAvailabilitySet1AS1.command('delete')
  .description($('Remove availability-set in config string or files, e.g. \r\n         {\r\n           ...\r\n           "availabilitySet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/availabilitySet';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set instance-view
  var catparametersCreateOrUpdateVirtualMachinesInstanceView0IV1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesInstanceView0IV1 = catparametersCreateOrUpdateVirtualMachinesInstanceView0IV1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesInstanceView0IV1 = parametersCreateOrUpdateVirtualMachinesInstanceView0IV1.category('instance-view')
  .description($('Commands to configure instance-view of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesInstanceView0IV1.command('set')
  .description($('Set instance-view in config string or files, e.g. \r\n         {\r\n           ...\r\n           "instanceView" : {\r\n             "platformUpdateDomain":null,\r\n             "platformFaultDomain":null,\r\n             "rdpThumbPrint":"",\r\n             "vmAgent":{\r\n               "vmAgentVersion":"",\r\n               "extensionHandlers":[\r\n                 {\r\n                   "type":"",\r\n                   "typeHandlerVersion":"",\r\n                   "status":{\r\n                     "code":"",\r\n                     "level":null,\r\n                     "displayStatus":"",\r\n                     "message":"",\r\n                     "time":null\r\n                   }\r\n                 }\r\n               ],\r\n               "statuses":[\r\n                 {\r\n                   "code":"",\r\n                   "level":null,\r\n                   "displayStatus":"",\r\n                   "message":"",\r\n                   "time":null\r\n                 }\r\n               ]\r\n             },\r\n             "maintenanceRedeployStatus":{\r\n               "isCustomerInitiatedMaintenanceAllowed":null,\r\n               "preMaintenanceWindowStartTime":null,\r\n               "preMaintenanceWindowEndTime":null,\r\n               "maintenanceWindowStartTime":null,\r\n               "maintenanceWindowEndTime":null,\r\n               "lastOperationResultCode":null,\r\n               "lastOperationMessage":""\r\n             },\r\n             "disks":[\r\n               {\r\n                 "name":"",\r\n                 "statuses":[\r\n                   {\r\n                     "code":"",\r\n                     "level":null,\r\n                     "displayStatus":"",\r\n                     "message":"",\r\n                     "time":null\r\n                   }\r\n                 ]\r\n               }\r\n             ],\r\n             "extensions":[\r\n               {\r\n                 "name":"",\r\n                 "type":"",\r\n                 "typeHandlerVersion":"",\r\n                 "substatuses":[\r\n                   {\r\n                     "code":"",\r\n                     "level":null,\r\n                     "displayStatus":"",\r\n                     "message":"",\r\n                     "time":null\r\n                   }\r\n                 ],\r\n                 "statuses":[\r\n                   {\r\n                     "code":"",\r\n                     "level":null,\r\n                     "displayStatus":"",\r\n                     "message":"",\r\n                     "time":null\r\n                   }\r\n                 ]\r\n               }\r\n             ],\r\n             "bootDiagnostics":{\r\n               "consoleScreenshotBlobUri":"",\r\n               "serialConsoleLogBlobUri":""\r\n             },\r\n             "statuses":[\r\n               {\r\n                 "code":"",\r\n                 "level":null,\r\n                 "displayStatus":"",\r\n                 "message":"",\r\n                 "time":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--platform-update-domain <platformUpdateDomain>', $('Set the platform-update-domain value.'))
  .option('--platform-fault-domain <platformFaultDomain>', $('Set the platform-fault-domain value.'))
  .option('--rdp-thumb-print <rdpThumbPrint>', $('Set the rdp-thumb-print value.'))
  .option('--vm-agent <vmAgent>', $('Set the vm-agent value.'))
  .option('--maintenance-redeploy-status <maintenanceRedeployStatus>', $('Set the maintenance-redeploy-status value.'))
  .option('--disks <disks>', $('Set the disks value.'))
  .option('--extensions <extensions>', $('Set the extensions value.'))
  .option('--boot-diagnostics <bootDiagnostics>', $('Set the boot-diagnostics value.'))
  .option('--statuses <statuses>', $('Set the statuses value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/instanceView';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'platformUpdateDomain';
    if (options.platformUpdateDomain) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.platformUpdateDomain);
      cli.output.verbose('================================================');
      if (options.parse && options.platformUpdateDomain) {
        options.platformUpdateDomain = JSON.parse(options.platformUpdateDomain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.platformUpdateDomain}]);
    }
    paramPath = options.path + '/' + 'platformFaultDomain';
    if (options.platformFaultDomain) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.platformFaultDomain);
      cli.output.verbose('================================================');
      if (options.parse && options.platformFaultDomain) {
        options.platformFaultDomain = JSON.parse(options.platformFaultDomain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.platformFaultDomain}]);
    }
    paramPath = options.path + '/' + 'rdpThumbPrint';
    if (options.rdpThumbPrint) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.rdpThumbPrint);
      cli.output.verbose('================================================');
      if (options.parse && options.rdpThumbPrint) {
        options.rdpThumbPrint = JSON.parse(options.rdpThumbPrint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rdpThumbPrint}]);
    }
    paramPath = options.path + '/' + 'vmAgent';
    if (options.vmAgent) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.vmAgent);
      cli.output.verbose('================================================');
      if (options.parse && options.vmAgent) {
        options.vmAgent = JSON.parse(options.vmAgent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmAgent}]);
    }
    paramPath = options.path + '/' + 'maintenanceRedeployStatus';
    if (options.maintenanceRedeployStatus) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.maintenanceRedeployStatus);
      cli.output.verbose('================================================');
      if (options.parse && options.maintenanceRedeployStatus) {
        options.maintenanceRedeployStatus = JSON.parse(options.maintenanceRedeployStatus);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.maintenanceRedeployStatus}]);
    }
    paramPath = options.path + '/' + 'disks';
    if (options.disks) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.disks);
      cli.output.verbose('================================================');
      if (options.parse && options.disks) {
        options.disks = JSON.parse(options.disks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disks}]);
    }
    paramPath = options.path + '/' + 'extensions';
    if (options.extensions) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.extensions);
      cli.output.verbose('================================================');
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = options.path + '/' + 'bootDiagnostics';
    if (options.bootDiagnostics) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.bootDiagnostics);
      cli.output.verbose('================================================');
      if (options.parse && options.bootDiagnostics) {
        options.bootDiagnostics = JSON.parse(options.bootDiagnostics);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.bootDiagnostics}]);
    }
    paramPath = options.path + '/' + 'statuses';
    if (options.statuses) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.statuses);
      cli.output.verbose('================================================');
      if (options.parse && options.statuses) {
        options.statuses = JSON.parse(options.statuses);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.statuses}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete instance-view
  var catparametersCreateOrUpdateVirtualMachinesInstanceView1IV1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesInstanceView1IV1 = catparametersCreateOrUpdateVirtualMachinesInstanceView1IV1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesInstanceView1IV1 = parametersCreateOrUpdateVirtualMachinesInstanceView1IV1.category('instance-view')
  .description($('Commands to configure instance-view of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesInstanceView1IV1.command('delete')
  .description($('Remove instance-view in config string or files, e.g. \r\n         {\r\n           ...\r\n           "instanceView" : {\r\n             "platformUpdateDomain":null,\r\n             "platformFaultDomain":null,\r\n             "rdpThumbPrint":"",\r\n             "vmAgent":{\r\n               "vmAgentVersion":"",\r\n               "extensionHandlers":[\r\n                 {\r\n                   "type":"",\r\n                   "typeHandlerVersion":"",\r\n                   "status":{\r\n                     "code":"",\r\n                     "level":null,\r\n                     "displayStatus":"",\r\n                     "message":"",\r\n                     "time":null\r\n                   }\r\n                 }\r\n               ],\r\n               "statuses":[\r\n                 {\r\n                   "code":"",\r\n                   "level":null,\r\n                   "displayStatus":"",\r\n                   "message":"",\r\n                   "time":null\r\n                 }\r\n               ]\r\n             },\r\n             "maintenanceRedeployStatus":{\r\n               "isCustomerInitiatedMaintenanceAllowed":null,\r\n               "preMaintenanceWindowStartTime":null,\r\n               "preMaintenanceWindowEndTime":null,\r\n               "maintenanceWindowStartTime":null,\r\n               "maintenanceWindowEndTime":null,\r\n               "lastOperationResultCode":null,\r\n               "lastOperationMessage":""\r\n             },\r\n             "disks":[\r\n               {\r\n                 "name":"",\r\n                 "statuses":[\r\n                   {\r\n                     "code":"",\r\n                     "level":null,\r\n                     "displayStatus":"",\r\n                     "message":"",\r\n                     "time":null\r\n                   }\r\n                 ]\r\n               }\r\n             ],\r\n             "extensions":[\r\n               {\r\n                 "name":"",\r\n                 "type":"",\r\n                 "typeHandlerVersion":"",\r\n                 "substatuses":[\r\n                   {\r\n                     "code":"",\r\n                     "level":null,\r\n                     "displayStatus":"",\r\n                     "message":"",\r\n                     "time":null\r\n                   }\r\n                 ],\r\n                 "statuses":[\r\n                   {\r\n                     "code":"",\r\n                     "level":null,\r\n                     "displayStatus":"",\r\n                     "message":"",\r\n                     "time":null\r\n                   }\r\n                 ]\r\n               }\r\n             ],\r\n             "bootDiagnostics":{\r\n               "consoleScreenshotBlobUri":"",\r\n               "serialConsoleLogBlobUri":""\r\n             },\r\n             "statuses":[\r\n               {\r\n                 "code":"",\r\n                 "level":null,\r\n                 "displayStatus":"",\r\n                 "message":"",\r\n                 "time":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--platform-update-domain', $('Remove the platform-update-domain value.'))
  .option('--platform-fault-domain', $('Remove the platform-fault-domain value.'))
  .option('--rdp-thumb-print', $('Remove the rdp-thumb-print value.'))
  .option('--vm-agent', $('Remove the vm-agent value.'))
  .option('--maintenance-redeploy-status', $('Remove the maintenance-redeploy-status value.'))
  .option('--disks', $('Remove the disks value.'))
  .option('--extensions', $('Remove the extensions value.'))
  .option('--boot-diagnostics', $('Remove the boot-diagnostics value.'))
  .option('--statuses', $('Remove the statuses value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/instanceView';
    var anySubItem = false || options.platformUpdateDomain || options.platformFaultDomain || options.rdpThumbPrint || options.vmAgent || options.maintenanceRedeployStatus || options.disks || options.extensions || options.bootDiagnostics || options.statuses;
    if (anySubItem) {
      var subItemPath = null;
      if (options.platformUpdateDomain) {
        subItemPath = options.path + '/platformUpdateDomain';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.platformFaultDomain) {
        subItemPath = options.path + '/platformFaultDomain';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.rdpThumbPrint) {
        subItemPath = options.path + '/rdpThumbPrint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vmAgent) {
        subItemPath = options.path + '/vmAgent';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.maintenanceRedeployStatus) {
        subItemPath = options.path + '/maintenanceRedeployStatus';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.disks) {
        subItemPath = options.path + '/disks';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extensions) {
        subItemPath = options.path + '/extensions';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.bootDiagnostics) {
        subItemPath = options.path + '/bootDiagnostics';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.statuses) {
        subItemPath = options.path + '/statuses';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set vm-agent
  var catparametersCreateOrUpdateVirtualMachinesVmAgent0IVvA1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesVmAgent0IVvA1 = catparametersCreateOrUpdateVirtualMachinesVmAgent0IVvA1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesVmAgent0IVvA1 = parametersCreateOrUpdateVirtualMachinesVmAgent0IVvA1.category('vm-agent')
  .description($('Commands to configure vm-agent of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesVmAgent0IVvA1.command('set')
  .description($('Set vm-agent in config string or files, e.g. \r\n         {\r\n           ...\r\n           "vmAgent" : {\r\n             "vmAgentVersion":"",\r\n             "extensionHandlers":[\r\n               {\r\n                 "type":"",\r\n                 "typeHandlerVersion":"",\r\n                 "status":{\r\n                   "code":"",\r\n                   "level":null,\r\n                   "displayStatus":"",\r\n                   "message":"",\r\n                   "time":null\r\n                 }\r\n               }\r\n             ],\r\n             "statuses":[\r\n               {\r\n                 "code":"",\r\n                 "level":null,\r\n                 "displayStatus":"",\r\n                 "message":"",\r\n                 "time":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--vm-agent-version <vmAgentVersion>', $('Set the vm-agent-version value.'))
  .option('--extension-handlers <extensionHandlers>', $('Set the extension-handlers value.'))
  .option('--statuses <statuses>', $('Set the statuses value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/instanceView/vmAgent';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'vmAgentVersion';
    if (options.vmAgentVersion) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.vmAgentVersion);
      cli.output.verbose('================================================');
      if (options.parse && options.vmAgentVersion) {
        options.vmAgentVersion = JSON.parse(options.vmAgentVersion);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmAgentVersion}]);
    }
    paramPath = options.path + '/' + 'extensionHandlers';
    if (options.extensionHandlers) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.extensionHandlers);
      cli.output.verbose('================================================');
      if (options.parse && options.extensionHandlers) {
        options.extensionHandlers = JSON.parse(options.extensionHandlers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionHandlers}]);
    }
    paramPath = options.path + '/' + 'statuses';
    if (options.statuses) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.statuses);
      cli.output.verbose('================================================');
      if (options.parse && options.statuses) {
        options.statuses = JSON.parse(options.statuses);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.statuses}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete vm-agent
  var catparametersCreateOrUpdateVirtualMachinesVmAgent1IVvA1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesVmAgent1IVvA1 = catparametersCreateOrUpdateVirtualMachinesVmAgent1IVvA1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesVmAgent1IVvA1 = parametersCreateOrUpdateVirtualMachinesVmAgent1IVvA1.category('vm-agent')
  .description($('Commands to configure vm-agent of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesVmAgent1IVvA1.command('delete')
  .description($('Remove vm-agent in config string or files, e.g. \r\n         {\r\n           ...\r\n           "vmAgent" : {\r\n             "vmAgentVersion":"",\r\n             "extensionHandlers":[\r\n               {\r\n                 "type":"",\r\n                 "typeHandlerVersion":"",\r\n                 "status":{\r\n                   "code":"",\r\n                   "level":null,\r\n                   "displayStatus":"",\r\n                   "message":"",\r\n                   "time":null\r\n                 }\r\n               }\r\n             ],\r\n             "statuses":[\r\n               {\r\n                 "code":"",\r\n                 "level":null,\r\n                 "displayStatus":"",\r\n                 "message":"",\r\n                 "time":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--vm-agent-version', $('Remove the vm-agent-version value.'))
  .option('--extension-handlers', $('Remove the extension-handlers value.'))
  .option('--statuses', $('Remove the statuses value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/instanceView/vmAgent';
    var anySubItem = false || options.vmAgentVersion || options.extensionHandlers || options.statuses;
    if (anySubItem) {
      var subItemPath = null;
      if (options.vmAgentVersion) {
        subItemPath = options.path + '/vmAgentVersion';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extensionHandlers) {
        subItemPath = options.path + '/extensionHandlers';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.statuses) {
        subItemPath = options.path + '/statuses';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set extension-handlers
  var catparametersCreateOrUpdateVirtualMachinesExtensionHandlers0IVvAeH1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesExtensionHandlers0IVvAeH1 = catparametersCreateOrUpdateVirtualMachinesExtensionHandlers0IVvAeH1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesExtensionHandlers0IVvAeH1 = parametersCreateOrUpdateVirtualMachinesExtensionHandlers0IVvAeH1.category('extension-handlers')
  .description($('Commands to configure extension-handlers of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesExtensionHandlers0IVvAeH1.command('set')
  .description($('Set extension-handlers in config string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionHandlers" : {\r\n             "type":"",\r\n             "typeHandlerVersion":"",\r\n             "status":{\r\n               "code":"",\r\n               "level":null,\r\n               "displayStatus":"",\r\n               "message":"",\r\n               "time":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--type <type>', $('Set the type value.'))
  .option('--type-handler-version <typeHandlerVersion>', $('Set the type-handler-version value.'))
  .option('--status <status>', $('Set the status value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/instanceView/vmAgent/extensionHandlers' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'type';
    if (options.type) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.type);
      cli.output.verbose('================================================');
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'typeHandlerVersion';
    if (options.typeHandlerVersion) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.typeHandlerVersion);
      cli.output.verbose('================================================');
      if (options.parse && options.typeHandlerVersion) {
        options.typeHandlerVersion = JSON.parse(options.typeHandlerVersion);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.typeHandlerVersion}]);
    }
    paramPath = options.path + '/' + 'status';
    if (options.status) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.status);
      cli.output.verbose('================================================');
      if (options.parse && options.status) {
        options.status = JSON.parse(options.status);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.status}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete extension-handlers
  var catparametersCreateOrUpdateVirtualMachinesExtensionHandlers1IVvAeH1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesExtensionHandlers1IVvAeH1 = catparametersCreateOrUpdateVirtualMachinesExtensionHandlers1IVvAeH1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesExtensionHandlers1IVvAeH1 = parametersCreateOrUpdateVirtualMachinesExtensionHandlers1IVvAeH1.category('extension-handlers')
  .description($('Commands to configure extension-handlers of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesExtensionHandlers1IVvAeH1.command('delete')
  .description($('Remove extension-handlers in config string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionHandlers" : {\r\n             "type":"",\r\n             "typeHandlerVersion":"",\r\n             "status":{\r\n               "code":"",\r\n               "level":null,\r\n               "displayStatus":"",\r\n               "message":"",\r\n               "time":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--type', $('Remove the type value.'))
  .option('--type-handler-version', $('Remove the type-handler-version value.'))
  .option('--status', $('Remove the status value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/instanceView/vmAgent/extensionHandlers' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.type || options.typeHandlerVersion || options.status;
    if (anySubItem) {
      var subItemPath = null;
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.typeHandlerVersion) {
        subItemPath = options.path + '/typeHandlerVersion';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.status) {
        subItemPath = options.path + '/status';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set status
  var catparametersCreateOrUpdateVirtualMachinesStatus0IVvAeHHIs1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesStatus0IVvAeHHIs1 = catparametersCreateOrUpdateVirtualMachinesStatus0IVvAeHHIs1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesStatus0IVvAeHHIs1 = parametersCreateOrUpdateVirtualMachinesStatus0IVvAeHHIs1.category('status')
  .description($('Commands to configure status of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesStatus0IVvAeHHIs1.command('set')
  .description($('Set status in config string or files, e.g. \r\n         {\r\n           ...\r\n           "status" : {\r\n             "code":"",\r\n             "level":null,\r\n             "displayStatus":"",\r\n             "message":"",\r\n             "time":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--extension-handlers-index <extension-handlers-index>', $('Indexer: extension-handlers-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--code <code>', $('Set the code value.'))
  .option('--level <level>', $('Set the level value.'))
  .option('--display-status <displayStatus>', $('Set the display-status value.'))
  .option('--message <message>', $('Set the message value.'))
  .option('--time <time>', $('Set the time value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/instanceView/vmAgent/extensionHandlers/' + options.extensionHandlersIndex + '/status';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'code';
    if (options.code) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.code);
      cli.output.verbose('================================================');
      if (options.parse && options.code) {
        options.code = JSON.parse(options.code);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.code}]);
    }
    paramPath = options.path + '/' + 'level';
    if (options.level) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.level);
      cli.output.verbose('================================================');
      if (options.parse && options.level) {
        options.level = JSON.parse(options.level);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.level}]);
    }
    paramPath = options.path + '/' + 'displayStatus';
    if (options.displayStatus) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.displayStatus);
      cli.output.verbose('================================================');
      if (options.parse && options.displayStatus) {
        options.displayStatus = JSON.parse(options.displayStatus);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.displayStatus}]);
    }
    paramPath = options.path + '/' + 'message';
    if (options.message) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.message);
      cli.output.verbose('================================================');
      if (options.parse && options.message) {
        options.message = JSON.parse(options.message);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.message}]);
    }
    paramPath = options.path + '/' + 'time';
    if (options.time) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.time);
      cli.output.verbose('================================================');
      if (options.parse && options.time) {
        options.time = JSON.parse(options.time);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.time}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete status
  var catparametersCreateOrUpdateVirtualMachinesStatus1IVvAeHHIs1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesStatus1IVvAeHHIs1 = catparametersCreateOrUpdateVirtualMachinesStatus1IVvAeHHIs1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesStatus1IVvAeHHIs1 = parametersCreateOrUpdateVirtualMachinesStatus1IVvAeHHIs1.category('status')
  .description($('Commands to configure status of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesStatus1IVvAeHHIs1.command('delete')
  .description($('Remove status in config string or files, e.g. \r\n         {\r\n           ...\r\n           "status" : {\r\n             "code":"",\r\n             "level":null,\r\n             "displayStatus":"",\r\n             "message":"",\r\n             "time":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--extension-handlers-index <extension-handlers-index>', $('Indexer: extension-handlers-index.'))
  .option('--code', $('Remove the code value.'))
  .option('--level', $('Remove the level value.'))
  .option('--display-status', $('Remove the display-status value.'))
  .option('--message', $('Remove the message value.'))
  .option('--time', $('Remove the time value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/instanceView/vmAgent/extensionHandlers/' + options.extensionHandlersIndex + '/status';
    var anySubItem = false || options.code || options.level || options.displayStatus || options.message || options.time;
    if (anySubItem) {
      var subItemPath = null;
      if (options.code) {
        subItemPath = options.path + '/code';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.level) {
        subItemPath = options.path + '/level';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.displayStatus) {
        subItemPath = options.path + '/displayStatus';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.message) {
        subItemPath = options.path + '/message';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.time) {
        subItemPath = options.path + '/time';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set statuses
  var catparametersCreateOrUpdateVirtualMachinesStatuses0IVvAs2 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesStatuses0IVvAs2 = catparametersCreateOrUpdateVirtualMachinesStatuses0IVvAs2.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesStatuses0IVvAs2 = parametersCreateOrUpdateVirtualMachinesStatuses0IVvAs2.category('statuses')
  .description($('Commands to configure statuses of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesStatuses0IVvAs2.command('set')
  .description($('Set statuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           "statuses" : {\r\n             "code":"",\r\n             "level":null,\r\n             "displayStatus":"",\r\n             "message":"",\r\n             "time":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--code <code>', $('Set the code value.'))
  .option('--level <level>', $('Set the level value.'))
  .option('--display-status <displayStatus>', $('Set the display-status value.'))
  .option('--message <message>', $('Set the message value.'))
  .option('--time <time>', $('Set the time value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/instanceView/vmAgent/statuses' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'code';
    if (options.code) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.code);
      cli.output.verbose('================================================');
      if (options.parse && options.code) {
        options.code = JSON.parse(options.code);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.code}]);
    }
    paramPath = options.path + '/' + 'level';
    if (options.level) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.level);
      cli.output.verbose('================================================');
      if (options.parse && options.level) {
        options.level = JSON.parse(options.level);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.level}]);
    }
    paramPath = options.path + '/' + 'displayStatus';
    if (options.displayStatus) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.displayStatus);
      cli.output.verbose('================================================');
      if (options.parse && options.displayStatus) {
        options.displayStatus = JSON.parse(options.displayStatus);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.displayStatus}]);
    }
    paramPath = options.path + '/' + 'message';
    if (options.message) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.message);
      cli.output.verbose('================================================');
      if (options.parse && options.message) {
        options.message = JSON.parse(options.message);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.message}]);
    }
    paramPath = options.path + '/' + 'time';
    if (options.time) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.time);
      cli.output.verbose('================================================');
      if (options.parse && options.time) {
        options.time = JSON.parse(options.time);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.time}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete statuses
  var catparametersCreateOrUpdateVirtualMachinesStatuses1IVvAs2 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesStatuses1IVvAs2 = catparametersCreateOrUpdateVirtualMachinesStatuses1IVvAs2.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesStatuses1IVvAs2 = parametersCreateOrUpdateVirtualMachinesStatuses1IVvAs2.category('statuses')
  .description($('Commands to configure statuses of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesStatuses1IVvAs2.command('delete')
  .description($('Remove statuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           "statuses" : {\r\n             "code":"",\r\n             "level":null,\r\n             "displayStatus":"",\r\n             "message":"",\r\n             "time":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--code', $('Remove the code value.'))
  .option('--level', $('Remove the level value.'))
  .option('--display-status', $('Remove the display-status value.'))
  .option('--message', $('Remove the message value.'))
  .option('--time', $('Remove the time value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/instanceView/vmAgent/statuses' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.code || options.level || options.displayStatus || options.message || options.time;
    if (anySubItem) {
      var subItemPath = null;
      if (options.code) {
        subItemPath = options.path + '/code';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.level) {
        subItemPath = options.path + '/level';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.displayStatus) {
        subItemPath = options.path + '/displayStatus';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.message) {
        subItemPath = options.path + '/message';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.time) {
        subItemPath = options.path + '/time';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set maintenance-redeploy-status
  var catparametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus0IVmRS1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus0IVmRS1 = catparametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus0IVmRS1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus0IVmRS1 = parametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus0IVmRS1.category('maintenance-redeploy-status')
  .description($('Commands to configure maintenance-redeploy-status of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus0IVmRS1.command('set')
  .description($('Set maintenance-redeploy-status in config string or files, e.g. \r\n         {\r\n           ...\r\n           "maintenanceRedeployStatus" : {\r\n             "isCustomerInitiatedMaintenanceAllowed":null,\r\n             "preMaintenanceWindowStartTime":null,\r\n             "preMaintenanceWindowEndTime":null,\r\n             "maintenanceWindowStartTime":null,\r\n             "maintenanceWindowEndTime":null,\r\n             "lastOperationResultCode":null,\r\n             "lastOperationMessage":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--is-customer-initiated-maintenance-allowed <isCustomerInitiatedMaintenanceAllowed>', $('Set the is-customer-initiated-maintenance-allowed value.'))
  .option('--pre-maintenance-window-start-time <preMaintenanceWindowStartTime>', $('Set the pre-maintenance-window-start-time value.'))
  .option('--pre-maintenance-window-end-time <preMaintenanceWindowEndTime>', $('Set the pre-maintenance-window-end-time value.'))
  .option('--maintenance-window-start-time <maintenanceWindowStartTime>', $('Set the maintenance-window-start-time value.'))
  .option('--maintenance-window-end-time <maintenanceWindowEndTime>', $('Set the maintenance-window-end-time value.'))
  .option('--last-operation-result-code <lastOperationResultCode>', $('Set the last-operation-result-code value.'))
  .option('--last-operation-message <lastOperationMessage>', $('Set the last-operation-message value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/instanceView/maintenanceRedeployStatus';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'isCustomerInitiatedMaintenanceAllowed';
    if (options.isCustomerInitiatedMaintenanceAllowed) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.isCustomerInitiatedMaintenanceAllowed);
      cli.output.verbose('================================================');
      if (options.parse && options.isCustomerInitiatedMaintenanceAllowed) {
        options.isCustomerInitiatedMaintenanceAllowed = JSON.parse(options.isCustomerInitiatedMaintenanceAllowed);
      }
      options.isCustomerInitiatedMaintenanceAllowed = JSON.parse(options.isCustomerInitiatedMaintenanceAllowed);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isCustomerInitiatedMaintenanceAllowed}]);
    }
    paramPath = options.path + '/' + 'preMaintenanceWindowStartTime';
    if (options.preMaintenanceWindowStartTime) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.preMaintenanceWindowStartTime);
      cli.output.verbose('================================================');
      if (options.parse && options.preMaintenanceWindowStartTime) {
        options.preMaintenanceWindowStartTime = JSON.parse(options.preMaintenanceWindowStartTime);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.preMaintenanceWindowStartTime}]);
    }
    paramPath = options.path + '/' + 'preMaintenanceWindowEndTime';
    if (options.preMaintenanceWindowEndTime) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.preMaintenanceWindowEndTime);
      cli.output.verbose('================================================');
      if (options.parse && options.preMaintenanceWindowEndTime) {
        options.preMaintenanceWindowEndTime = JSON.parse(options.preMaintenanceWindowEndTime);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.preMaintenanceWindowEndTime}]);
    }
    paramPath = options.path + '/' + 'maintenanceWindowStartTime';
    if (options.maintenanceWindowStartTime) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.maintenanceWindowStartTime);
      cli.output.verbose('================================================');
      if (options.parse && options.maintenanceWindowStartTime) {
        options.maintenanceWindowStartTime = JSON.parse(options.maintenanceWindowStartTime);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.maintenanceWindowStartTime}]);
    }
    paramPath = options.path + '/' + 'maintenanceWindowEndTime';
    if (options.maintenanceWindowEndTime) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.maintenanceWindowEndTime);
      cli.output.verbose('================================================');
      if (options.parse && options.maintenanceWindowEndTime) {
        options.maintenanceWindowEndTime = JSON.parse(options.maintenanceWindowEndTime);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.maintenanceWindowEndTime}]);
    }
    paramPath = options.path + '/' + 'lastOperationResultCode';
    if (options.lastOperationResultCode) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.lastOperationResultCode);
      cli.output.verbose('================================================');
      if (options.parse && options.lastOperationResultCode) {
        options.lastOperationResultCode = JSON.parse(options.lastOperationResultCode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.lastOperationResultCode}]);
    }
    paramPath = options.path + '/' + 'lastOperationMessage';
    if (options.lastOperationMessage) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.lastOperationMessage);
      cli.output.verbose('================================================');
      if (options.parse && options.lastOperationMessage) {
        options.lastOperationMessage = JSON.parse(options.lastOperationMessage);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.lastOperationMessage}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete maintenance-redeploy-status
  var catparametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus1IVmRS1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus1IVmRS1 = catparametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus1IVmRS1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus1IVmRS1 = parametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus1IVmRS1.category('maintenance-redeploy-status')
  .description($('Commands to configure maintenance-redeploy-status of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus1IVmRS1.command('delete')
  .description($('Remove maintenance-redeploy-status in config string or files, e.g. \r\n         {\r\n           ...\r\n           "maintenanceRedeployStatus" : {\r\n             "isCustomerInitiatedMaintenanceAllowed":null,\r\n             "preMaintenanceWindowStartTime":null,\r\n             "preMaintenanceWindowEndTime":null,\r\n             "maintenanceWindowStartTime":null,\r\n             "maintenanceWindowEndTime":null,\r\n             "lastOperationResultCode":null,\r\n             "lastOperationMessage":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--is-customer-initiated-maintenance-allowed', $('Remove the is-customer-initiated-maintenance-allowed value.'))
  .option('--pre-maintenance-window-start-time', $('Remove the pre-maintenance-window-start-time value.'))
  .option('--pre-maintenance-window-end-time', $('Remove the pre-maintenance-window-end-time value.'))
  .option('--maintenance-window-start-time', $('Remove the maintenance-window-start-time value.'))
  .option('--maintenance-window-end-time', $('Remove the maintenance-window-end-time value.'))
  .option('--last-operation-result-code', $('Remove the last-operation-result-code value.'))
  .option('--last-operation-message', $('Remove the last-operation-message value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/instanceView/maintenanceRedeployStatus';
    var anySubItem = false || options.isCustomerInitiatedMaintenanceAllowed || options.preMaintenanceWindowStartTime || options.preMaintenanceWindowEndTime || options.maintenanceWindowStartTime || options.maintenanceWindowEndTime || options.lastOperationResultCode || options.lastOperationMessage;
    if (anySubItem) {
      var subItemPath = null;
      if (options.isCustomerInitiatedMaintenanceAllowed) {
        subItemPath = options.path + '/isCustomerInitiatedMaintenanceAllowed';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.preMaintenanceWindowStartTime) {
        subItemPath = options.path + '/preMaintenanceWindowStartTime';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.preMaintenanceWindowEndTime) {
        subItemPath = options.path + '/preMaintenanceWindowEndTime';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.maintenanceWindowStartTime) {
        subItemPath = options.path + '/maintenanceWindowStartTime';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.maintenanceWindowEndTime) {
        subItemPath = options.path + '/maintenanceWindowEndTime';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.lastOperationResultCode) {
        subItemPath = options.path + '/lastOperationResultCode';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.lastOperationMessage) {
        subItemPath = options.path + '/lastOperationMessage';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set disks
  var catparametersCreateOrUpdateVirtualMachinesDisks0IVd1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesDisks0IVd1 = catparametersCreateOrUpdateVirtualMachinesDisks0IVd1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesDisks0IVd1 = parametersCreateOrUpdateVirtualMachinesDisks0IVd1.category('disks')
  .description($('Commands to configure disks of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesDisks0IVd1.command('set')
  .description($('Set disks in config string or files, e.g. \r\n         {\r\n           ...\r\n           "disks" : {\r\n             "name":"",\r\n             "statuses":[\r\n               {\r\n                 "code":"",\r\n                 "level":null,\r\n                 "displayStatus":"",\r\n                 "message":"",\r\n                 "time":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--name <name>', $('Set the name value.'))
  .option('--statuses <statuses>', $('Set the statuses value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/instanceView/disks' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'statuses';
    if (options.statuses) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.statuses);
      cli.output.verbose('================================================');
      if (options.parse && options.statuses) {
        options.statuses = JSON.parse(options.statuses);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.statuses}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete disks
  var catparametersCreateOrUpdateVirtualMachinesDisks1IVd1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesDisks1IVd1 = catparametersCreateOrUpdateVirtualMachinesDisks1IVd1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesDisks1IVd1 = parametersCreateOrUpdateVirtualMachinesDisks1IVd1.category('disks')
  .description($('Commands to configure disks of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesDisks1IVd1.command('delete')
  .description($('Remove disks in config string or files, e.g. \r\n         {\r\n           ...\r\n           "disks" : {\r\n             "name":"",\r\n             "statuses":[\r\n               {\r\n                 "code":"",\r\n                 "level":null,\r\n                 "displayStatus":"",\r\n                 "message":"",\r\n                 "time":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--statuses', $('Remove the statuses value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/instanceView/disks' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.statuses;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.statuses) {
        subItemPath = options.path + '/statuses';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set disks-statuses
  var catparametersCreateOrUpdateVirtualMachinesStatuses0IVdIs3 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesStatuses0IVdIs3 = catparametersCreateOrUpdateVirtualMachinesStatuses0IVdIs3.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesStatuses0IVdIs3 = parametersCreateOrUpdateVirtualMachinesStatuses0IVdIs3.category('disks-statuses')
  .description($('Commands to configure disks-statuses of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesStatuses0IVdIs3.command('set')
  .description($('Set disks-statuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           "statuses" : {\r\n             "code":"",\r\n             "level":null,\r\n             "displayStatus":"",\r\n             "message":"",\r\n             "time":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--disks-index <disks-index>', $('Indexer: disks-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--code <code>', $('Set the code value.'))
  .option('--level <level>', $('Set the level value.'))
  .option('--display-status <displayStatus>', $('Set the display-status value.'))
  .option('--message <message>', $('Set the message value.'))
  .option('--time <time>', $('Set the time value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/instanceView/disks/' + options.disksIndex + '/statuses' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'code';
    if (options.code) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.code);
      cli.output.verbose('================================================');
      if (options.parse && options.code) {
        options.code = JSON.parse(options.code);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.code}]);
    }
    paramPath = options.path + '/' + 'level';
    if (options.level) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.level);
      cli.output.verbose('================================================');
      if (options.parse && options.level) {
        options.level = JSON.parse(options.level);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.level}]);
    }
    paramPath = options.path + '/' + 'displayStatus';
    if (options.displayStatus) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.displayStatus);
      cli.output.verbose('================================================');
      if (options.parse && options.displayStatus) {
        options.displayStatus = JSON.parse(options.displayStatus);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.displayStatus}]);
    }
    paramPath = options.path + '/' + 'message';
    if (options.message) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.message);
      cli.output.verbose('================================================');
      if (options.parse && options.message) {
        options.message = JSON.parse(options.message);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.message}]);
    }
    paramPath = options.path + '/' + 'time';
    if (options.time) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.time);
      cli.output.verbose('================================================');
      if (options.parse && options.time) {
        options.time = JSON.parse(options.time);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.time}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete disks-statuses
  var catparametersCreateOrUpdateVirtualMachinesStatuses1IVdIs3 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesStatuses1IVdIs3 = catparametersCreateOrUpdateVirtualMachinesStatuses1IVdIs3.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesStatuses1IVdIs3 = parametersCreateOrUpdateVirtualMachinesStatuses1IVdIs3.category('disks-statuses')
  .description($('Commands to configure disks-statuses of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesStatuses1IVdIs3.command('delete')
  .description($('Remove disks-statuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           "statuses" : {\r\n             "code":"",\r\n             "level":null,\r\n             "displayStatus":"",\r\n             "message":"",\r\n             "time":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--disks-index <disks-index>', $('Indexer: disks-index.'))
  .option('--code', $('Remove the code value.'))
  .option('--level', $('Remove the level value.'))
  .option('--display-status', $('Remove the display-status value.'))
  .option('--message', $('Remove the message value.'))
  .option('--time', $('Remove the time value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/instanceView/disks/' + options.disksIndex + '/statuses' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.code || options.level || options.displayStatus || options.message || options.time;
    if (anySubItem) {
      var subItemPath = null;
      if (options.code) {
        subItemPath = options.path + '/code';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.level) {
        subItemPath = options.path + '/level';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.displayStatus) {
        subItemPath = options.path + '/displayStatus';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.message) {
        subItemPath = options.path + '/message';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.time) {
        subItemPath = options.path + '/time';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set extensions
  var catparametersCreateOrUpdateVirtualMachinesExtensions0IVe1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesExtensions0IVe1 = catparametersCreateOrUpdateVirtualMachinesExtensions0IVe1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesExtensions0IVe1 = parametersCreateOrUpdateVirtualMachinesExtensions0IVe1.category('extensions')
  .description($('Commands to configure extensions of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesExtensions0IVe1.command('set')
  .description($('Set extensions in config string or files, e.g. \r\n         {\r\n           ...\r\n           "extensions" : {\r\n             "name":"",\r\n             "type":"",\r\n             "typeHandlerVersion":"",\r\n             "substatuses":[\r\n               {\r\n                 "code":"",\r\n                 "level":null,\r\n                 "displayStatus":"",\r\n                 "message":"",\r\n                 "time":null\r\n               }\r\n             ],\r\n             "statuses":[\r\n               {\r\n                 "code":"",\r\n                 "level":null,\r\n                 "displayStatus":"",\r\n                 "message":"",\r\n                 "time":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--type-handler-version <typeHandlerVersion>', $('Set the type-handler-version value.'))
  .option('--substatuses <substatuses>', $('Set the substatuses value.'))
  .option('--statuses <statuses>', $('Set the statuses value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/instanceView/extensions' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    if (options.type) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.type);
      cli.output.verbose('================================================');
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'typeHandlerVersion';
    if (options.typeHandlerVersion) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.typeHandlerVersion);
      cli.output.verbose('================================================');
      if (options.parse && options.typeHandlerVersion) {
        options.typeHandlerVersion = JSON.parse(options.typeHandlerVersion);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.typeHandlerVersion}]);
    }
    paramPath = options.path + '/' + 'substatuses';
    if (options.substatuses) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.substatuses);
      cli.output.verbose('================================================');
      if (options.parse && options.substatuses) {
        options.substatuses = JSON.parse(options.substatuses);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.substatuses}]);
    }
    paramPath = options.path + '/' + 'statuses';
    if (options.statuses) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.statuses);
      cli.output.verbose('================================================');
      if (options.parse && options.statuses) {
        options.statuses = JSON.parse(options.statuses);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.statuses}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete extensions
  var catparametersCreateOrUpdateVirtualMachinesExtensions1IVe1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesExtensions1IVe1 = catparametersCreateOrUpdateVirtualMachinesExtensions1IVe1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesExtensions1IVe1 = parametersCreateOrUpdateVirtualMachinesExtensions1IVe1.category('extensions')
  .description($('Commands to configure extensions of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesExtensions1IVe1.command('delete')
  .description($('Remove extensions in config string or files, e.g. \r\n         {\r\n           ...\r\n           "extensions" : {\r\n             "name":"",\r\n             "type":"",\r\n             "typeHandlerVersion":"",\r\n             "substatuses":[\r\n               {\r\n                 "code":"",\r\n                 "level":null,\r\n                 "displayStatus":"",\r\n                 "message":"",\r\n                 "time":null\r\n               }\r\n             ],\r\n             "statuses":[\r\n               {\r\n                 "code":"",\r\n                 "level":null,\r\n                 "displayStatus":"",\r\n                 "message":"",\r\n                 "time":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--type-handler-version', $('Remove the type-handler-version value.'))
  .option('--substatuses', $('Remove the substatuses value.'))
  .option('--statuses', $('Remove the statuses value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/instanceView/extensions' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.type || options.typeHandlerVersion || options.substatuses || options.statuses;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.typeHandlerVersion) {
        subItemPath = options.path + '/typeHandlerVersion';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.substatuses) {
        subItemPath = options.path + '/substatuses';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.statuses) {
        subItemPath = options.path + '/statuses';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set substatuses
  var catparametersCreateOrUpdateVirtualMachinesSubstatuses0IVeIs4 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesSubstatuses0IVeIs4 = catparametersCreateOrUpdateVirtualMachinesSubstatuses0IVeIs4.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesSubstatuses0IVeIs4 = parametersCreateOrUpdateVirtualMachinesSubstatuses0IVeIs4.category('substatuses')
  .description($('Commands to configure substatuses of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesSubstatuses0IVeIs4.command('set')
  .description($('Set substatuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           "substatuses" : {\r\n             "code":"",\r\n             "level":null,\r\n             "displayStatus":"",\r\n             "message":"",\r\n             "time":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions-index <extensions-index>', $('Indexer: extensions-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--code <code>', $('Set the code value.'))
  .option('--level <level>', $('Set the level value.'))
  .option('--display-status <displayStatus>', $('Set the display-status value.'))
  .option('--message <message>', $('Set the message value.'))
  .option('--time <time>', $('Set the time value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/instanceView/extensions/' + options.extensionsIndex + '/substatuses' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'code';
    if (options.code) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.code);
      cli.output.verbose('================================================');
      if (options.parse && options.code) {
        options.code = JSON.parse(options.code);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.code}]);
    }
    paramPath = options.path + '/' + 'level';
    if (options.level) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.level);
      cli.output.verbose('================================================');
      if (options.parse && options.level) {
        options.level = JSON.parse(options.level);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.level}]);
    }
    paramPath = options.path + '/' + 'displayStatus';
    if (options.displayStatus) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.displayStatus);
      cli.output.verbose('================================================');
      if (options.parse && options.displayStatus) {
        options.displayStatus = JSON.parse(options.displayStatus);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.displayStatus}]);
    }
    paramPath = options.path + '/' + 'message';
    if (options.message) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.message);
      cli.output.verbose('================================================');
      if (options.parse && options.message) {
        options.message = JSON.parse(options.message);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.message}]);
    }
    paramPath = options.path + '/' + 'time';
    if (options.time) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.time);
      cli.output.verbose('================================================');
      if (options.parse && options.time) {
        options.time = JSON.parse(options.time);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.time}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete substatuses
  var catparametersCreateOrUpdateVirtualMachinesSubstatuses1IVeIs4 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesSubstatuses1IVeIs4 = catparametersCreateOrUpdateVirtualMachinesSubstatuses1IVeIs4.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesSubstatuses1IVeIs4 = parametersCreateOrUpdateVirtualMachinesSubstatuses1IVeIs4.category('substatuses')
  .description($('Commands to configure substatuses of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesSubstatuses1IVeIs4.command('delete')
  .description($('Remove substatuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           "substatuses" : {\r\n             "code":"",\r\n             "level":null,\r\n             "displayStatus":"",\r\n             "message":"",\r\n             "time":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions-index <extensions-index>', $('Indexer: extensions-index.'))
  .option('--code', $('Remove the code value.'))
  .option('--level', $('Remove the level value.'))
  .option('--display-status', $('Remove the display-status value.'))
  .option('--message', $('Remove the message value.'))
  .option('--time', $('Remove the time value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/instanceView/extensions/' + options.extensionsIndex + '/substatuses' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.code || options.level || options.displayStatus || options.message || options.time;
    if (anySubItem) {
      var subItemPath = null;
      if (options.code) {
        subItemPath = options.path + '/code';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.level) {
        subItemPath = options.path + '/level';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.displayStatus) {
        subItemPath = options.path + '/displayStatus';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.message) {
        subItemPath = options.path + '/message';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.time) {
        subItemPath = options.path + '/time';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set extensions-statuses
  var catparametersCreateOrUpdateVirtualMachinesStatuses0IVeIs5 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesStatuses0IVeIs5 = catparametersCreateOrUpdateVirtualMachinesStatuses0IVeIs5.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesStatuses0IVeIs5 = parametersCreateOrUpdateVirtualMachinesStatuses0IVeIs5.category('extensions-statuses')
  .description($('Commands to configure extensions-statuses of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesStatuses0IVeIs5.command('set')
  .description($('Set extensions-statuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           "statuses" : {\r\n             "code":"",\r\n             "level":null,\r\n             "displayStatus":"",\r\n             "message":"",\r\n             "time":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions-index <extensions-index>', $('Indexer: extensions-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--code <code>', $('Set the code value.'))
  .option('--level <level>', $('Set the level value.'))
  .option('--display-status <displayStatus>', $('Set the display-status value.'))
  .option('--message <message>', $('Set the message value.'))
  .option('--time <time>', $('Set the time value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/instanceView/extensions/' + options.extensionsIndex + '/statuses' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'code';
    if (options.code) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.code);
      cli.output.verbose('================================================');
      if (options.parse && options.code) {
        options.code = JSON.parse(options.code);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.code}]);
    }
    paramPath = options.path + '/' + 'level';
    if (options.level) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.level);
      cli.output.verbose('================================================');
      if (options.parse && options.level) {
        options.level = JSON.parse(options.level);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.level}]);
    }
    paramPath = options.path + '/' + 'displayStatus';
    if (options.displayStatus) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.displayStatus);
      cli.output.verbose('================================================');
      if (options.parse && options.displayStatus) {
        options.displayStatus = JSON.parse(options.displayStatus);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.displayStatus}]);
    }
    paramPath = options.path + '/' + 'message';
    if (options.message) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.message);
      cli.output.verbose('================================================');
      if (options.parse && options.message) {
        options.message = JSON.parse(options.message);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.message}]);
    }
    paramPath = options.path + '/' + 'time';
    if (options.time) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.time);
      cli.output.verbose('================================================');
      if (options.parse && options.time) {
        options.time = JSON.parse(options.time);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.time}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete extensions-statuses
  var catparametersCreateOrUpdateVirtualMachinesStatuses1IVeIs5 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesStatuses1IVeIs5 = catparametersCreateOrUpdateVirtualMachinesStatuses1IVeIs5.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesStatuses1IVeIs5 = parametersCreateOrUpdateVirtualMachinesStatuses1IVeIs5.category('extensions-statuses')
  .description($('Commands to configure extensions-statuses of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesStatuses1IVeIs5.command('delete')
  .description($('Remove extensions-statuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           "statuses" : {\r\n             "code":"",\r\n             "level":null,\r\n             "displayStatus":"",\r\n             "message":"",\r\n             "time":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions-index <extensions-index>', $('Indexer: extensions-index.'))
  .option('--code', $('Remove the code value.'))
  .option('--level', $('Remove the level value.'))
  .option('--display-status', $('Remove the display-status value.'))
  .option('--message', $('Remove the message value.'))
  .option('--time', $('Remove the time value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/instanceView/extensions/' + options.extensionsIndex + '/statuses' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.code || options.level || options.displayStatus || options.message || options.time;
    if (anySubItem) {
      var subItemPath = null;
      if (options.code) {
        subItemPath = options.path + '/code';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.level) {
        subItemPath = options.path + '/level';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.displayStatus) {
        subItemPath = options.path + '/displayStatus';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.message) {
        subItemPath = options.path + '/message';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.time) {
        subItemPath = options.path + '/time';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set instance-view-boot-diagnostics
  var catparametersCreateOrUpdateVirtualMachinesBootDiagnostics0IVbD1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesBootDiagnostics0IVbD1 = catparametersCreateOrUpdateVirtualMachinesBootDiagnostics0IVbD1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesBootDiagnostics0IVbD1 = parametersCreateOrUpdateVirtualMachinesBootDiagnostics0IVbD1.category('instance-view-boot-diagnostics')
  .description($('Commands to configure instance-view-boot-diagnostics of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesBootDiagnostics0IVbD1.command('set')
  .description($('Set instance-view-boot-diagnostics in config string or files, e.g. \r\n         {\r\n           ...\r\n           "bootDiagnostics" : {\r\n             "consoleScreenshotBlobUri":"",\r\n             "serialConsoleLogBlobUri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--console-screenshot-blob-uri <consoleScreenshotBlobUri>', $('Set the console-screenshot-blob-uri value.'))
  .option('--serial-console-log-blob-uri <serialConsoleLogBlobUri>', $('Set the serial-console-log-blob-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/instanceView/bootDiagnostics';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'consoleScreenshotBlobUri';
    if (options.consoleScreenshotBlobUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.consoleScreenshotBlobUri);
      cli.output.verbose('================================================');
      if (options.parse && options.consoleScreenshotBlobUri) {
        options.consoleScreenshotBlobUri = JSON.parse(options.consoleScreenshotBlobUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.consoleScreenshotBlobUri}]);
    }
    paramPath = options.path + '/' + 'serialConsoleLogBlobUri';
    if (options.serialConsoleLogBlobUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.serialConsoleLogBlobUri);
      cli.output.verbose('================================================');
      if (options.parse && options.serialConsoleLogBlobUri) {
        options.serialConsoleLogBlobUri = JSON.parse(options.serialConsoleLogBlobUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serialConsoleLogBlobUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete instance-view-boot-diagnostics
  var catparametersCreateOrUpdateVirtualMachinesBootDiagnostics1IVbD1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesBootDiagnostics1IVbD1 = catparametersCreateOrUpdateVirtualMachinesBootDiagnostics1IVbD1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesBootDiagnostics1IVbD1 = parametersCreateOrUpdateVirtualMachinesBootDiagnostics1IVbD1.category('instance-view-boot-diagnostics')
  .description($('Commands to configure instance-view-boot-diagnostics of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesBootDiagnostics1IVbD1.command('delete')
  .description($('Remove instance-view-boot-diagnostics in config string or files, e.g. \r\n         {\r\n           ...\r\n           "bootDiagnostics" : {\r\n             "consoleScreenshotBlobUri":"",\r\n             "serialConsoleLogBlobUri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--console-screenshot-blob-uri', $('Remove the console-screenshot-blob-uri value.'))
  .option('--serial-console-log-blob-uri', $('Remove the serial-console-log-blob-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/instanceView/bootDiagnostics';
    var anySubItem = false || options.consoleScreenshotBlobUri || options.serialConsoleLogBlobUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.consoleScreenshotBlobUri) {
        subItemPath = options.path + '/consoleScreenshotBlobUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.serialConsoleLogBlobUri) {
        subItemPath = options.path + '/serialConsoleLogBlobUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set instance-view-statuses
  var catparametersCreateOrUpdateVirtualMachinesStatuses0IVs6 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesStatuses0IVs6 = catparametersCreateOrUpdateVirtualMachinesStatuses0IVs6.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesStatuses0IVs6 = parametersCreateOrUpdateVirtualMachinesStatuses0IVs6.category('instance-view-statuses')
  .description($('Commands to configure instance-view-statuses of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesStatuses0IVs6.command('set')
  .description($('Set instance-view-statuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           "statuses" : {\r\n             "code":"",\r\n             "level":null,\r\n             "displayStatus":"",\r\n             "message":"",\r\n             "time":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--code <code>', $('Set the code value.'))
  .option('--level <level>', $('Set the level value.'))
  .option('--display-status <displayStatus>', $('Set the display-status value.'))
  .option('--message <message>', $('Set the message value.'))
  .option('--time <time>', $('Set the time value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/instanceView/statuses' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'code';
    if (options.code) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.code);
      cli.output.verbose('================================================');
      if (options.parse && options.code) {
        options.code = JSON.parse(options.code);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.code}]);
    }
    paramPath = options.path + '/' + 'level';
    if (options.level) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.level);
      cli.output.verbose('================================================');
      if (options.parse && options.level) {
        options.level = JSON.parse(options.level);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.level}]);
    }
    paramPath = options.path + '/' + 'displayStatus';
    if (options.displayStatus) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.displayStatus);
      cli.output.verbose('================================================');
      if (options.parse && options.displayStatus) {
        options.displayStatus = JSON.parse(options.displayStatus);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.displayStatus}]);
    }
    paramPath = options.path + '/' + 'message';
    if (options.message) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.message);
      cli.output.verbose('================================================');
      if (options.parse && options.message) {
        options.message = JSON.parse(options.message);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.message}]);
    }
    paramPath = options.path + '/' + 'time';
    if (options.time) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.time);
      cli.output.verbose('================================================');
      if (options.parse && options.time) {
        options.time = JSON.parse(options.time);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.time}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete instance-view-statuses
  var catparametersCreateOrUpdateVirtualMachinesStatuses1IVs6 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesStatuses1IVs6 = catparametersCreateOrUpdateVirtualMachinesStatuses1IVs6.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesStatuses1IVs6 = parametersCreateOrUpdateVirtualMachinesStatuses1IVs6.category('instance-view-statuses')
  .description($('Commands to configure instance-view-statuses of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesStatuses1IVs6.command('delete')
  .description($('Remove instance-view-statuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           "statuses" : {\r\n             "code":"",\r\n             "level":null,\r\n             "displayStatus":"",\r\n             "message":"",\r\n             "time":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--code', $('Remove the code value.'))
  .option('--level', $('Remove the level value.'))
  .option('--display-status', $('Remove the display-status value.'))
  .option('--message', $('Remove the message value.'))
  .option('--time', $('Remove the time value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/instanceView/statuses' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.code || options.level || options.displayStatus || options.message || options.time;
    if (anySubItem) {
      var subItemPath = null;
      if (options.code) {
        subItemPath = options.path + '/code';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.level) {
        subItemPath = options.path + '/level';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.displayStatus) {
        subItemPath = options.path + '/displayStatus';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.message) {
        subItemPath = options.path + '/message';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.time) {
        subItemPath = options.path + '/time';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set resources
  var catparametersCreateOrUpdateVirtualMachinesResources0R1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesResources0R1 = catparametersCreateOrUpdateVirtualMachinesResources0R1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesResources0R1 = parametersCreateOrUpdateVirtualMachinesResources0R1.category('resources')
  .description($('Commands to configure resources of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesResources0R1.command('set')
  .description($('Set resources in config string or files, e.g. \r\n         {\r\n           ...\r\n           "resources" : {\r\n             "forceUpdateTag":"",\r\n             "publisher":"",\r\n             "virtualMachineExtensionType":"",\r\n             "typeHandlerVersion":"",\r\n             "autoUpgradeMinorVersion":null,\r\n             "settings":{\r\n             },\r\n             "protectedSettings":{\r\n             },\r\n             "provisioningState":"",\r\n             "instanceView":{\r\n               "name":"",\r\n               "type":"",\r\n               "typeHandlerVersion":"",\r\n               "substatuses":[\r\n                 {\r\n                   "code":"",\r\n                   "level":null,\r\n                   "displayStatus":"",\r\n                   "message":"",\r\n                   "time":null\r\n                 }\r\n               ],\r\n               "statuses":[\r\n                 {\r\n                   "code":"",\r\n                   "level":null,\r\n                   "displayStatus":"",\r\n                   "message":"",\r\n                   "time":null\r\n                 }\r\n               ]\r\n             },\r\n             "id":null,\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--force-update-tag <forceUpdateTag>', $('Set the force-update-tag value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .option('--virtual-machine-extension-type <virtualMachineExtensionType>', $('Set the virtual-machine-extension-type value.'))
  .option('--type-handler-version <typeHandlerVersion>', $('Set the type-handler-version value.'))
  .option('--auto-upgrade-minor-version <autoUpgradeMinorVersion>', $('Set the auto-upgrade-minor-version value.'))
  .option('--settings <settings>', $('Set the settings value.'))
  .option('--protected-settings <protectedSettings>', $('Set the protected-settings value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--instance-view <instanceView>', $('Set the instance-view value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/resources' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'forceUpdateTag';
    if (options.forceUpdateTag) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.forceUpdateTag);
      cli.output.verbose('================================================');
      if (options.parse && options.forceUpdateTag) {
        options.forceUpdateTag = JSON.parse(options.forceUpdateTag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.forceUpdateTag}]);
    }
    paramPath = options.path + '/' + 'publisher';
    if (options.publisher) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publisher);
      cli.output.verbose('================================================');
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = options.path + '/' + 'virtualMachineExtensionType';
    if (options.virtualMachineExtensionType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.virtualMachineExtensionType);
      cli.output.verbose('================================================');
      if (options.parse && options.virtualMachineExtensionType) {
        options.virtualMachineExtensionType = JSON.parse(options.virtualMachineExtensionType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualMachineExtensionType}]);
    }
    paramPath = options.path + '/' + 'typeHandlerVersion';
    if (options.typeHandlerVersion) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.typeHandlerVersion);
      cli.output.verbose('================================================');
      if (options.parse && options.typeHandlerVersion) {
        options.typeHandlerVersion = JSON.parse(options.typeHandlerVersion);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.typeHandlerVersion}]);
    }
    paramPath = options.path + '/' + 'autoUpgradeMinorVersion';
    if (options.autoUpgradeMinorVersion) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.autoUpgradeMinorVersion);
      cli.output.verbose('================================================');
      if (options.parse && options.autoUpgradeMinorVersion) {
        options.autoUpgradeMinorVersion = JSON.parse(options.autoUpgradeMinorVersion);
      }
      options.autoUpgradeMinorVersion = JSON.parse(options.autoUpgradeMinorVersion);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.autoUpgradeMinorVersion}]);
    }
    paramPath = options.path + '/' + 'settings';
    if (options.settings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.settings);
      cli.output.verbose('================================================');
      if (options.parse && options.settings) {
        options.settings = JSON.parse(options.settings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settings}]);
    }
    paramPath = options.path + '/' + 'protectedSettings';
    if (options.protectedSettings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.protectedSettings);
      cli.output.verbose('================================================');
      if (options.parse && options.protectedSettings) {
        options.protectedSettings = JSON.parse(options.protectedSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protectedSettings}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    if (options.provisioningState) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.provisioningState);
      cli.output.verbose('================================================');
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'instanceView';
    if (options.instanceView) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.instanceView);
      cli.output.verbose('================================================');
      if (options.parse && options.instanceView) {
        options.instanceView = JSON.parse(options.instanceView);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.instanceView}]);
    }
    paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    if (options.type) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.type);
      cli.output.verbose('================================================');
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    if (options.location) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.location);
      cli.output.verbose('================================================');
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    if (options.tags) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.tags);
      cli.output.verbose('================================================');
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete resources
  var catparametersCreateOrUpdateVirtualMachinesResources1R1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesResources1R1 = catparametersCreateOrUpdateVirtualMachinesResources1R1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesResources1R1 = parametersCreateOrUpdateVirtualMachinesResources1R1.category('resources')
  .description($('Commands to configure resources of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesResources1R1.command('delete')
  .description($('Remove resources in config string or files, e.g. \r\n         {\r\n           ...\r\n           "resources" : {\r\n             "forceUpdateTag":"",\r\n             "publisher":"",\r\n             "virtualMachineExtensionType":"",\r\n             "typeHandlerVersion":"",\r\n             "autoUpgradeMinorVersion":null,\r\n             "settings":{\r\n             },\r\n             "protectedSettings":{\r\n             },\r\n             "provisioningState":"",\r\n             "instanceView":{\r\n               "name":"",\r\n               "type":"",\r\n               "typeHandlerVersion":"",\r\n               "substatuses":[\r\n                 {\r\n                   "code":"",\r\n                   "level":null,\r\n                   "displayStatus":"",\r\n                   "message":"",\r\n                   "time":null\r\n                 }\r\n               ],\r\n               "statuses":[\r\n                 {\r\n                   "code":"",\r\n                   "level":null,\r\n                   "displayStatus":"",\r\n                   "message":"",\r\n                   "time":null\r\n                 }\r\n               ]\r\n             },\r\n             "id":null,\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--force-update-tag', $('Remove the force-update-tag value.'))
  .option('--publisher', $('Remove the publisher value.'))
  .option('--virtual-machine-extension-type', $('Remove the virtual-machine-extension-type value.'))
  .option('--type-handler-version', $('Remove the type-handler-version value.'))
  .option('--auto-upgrade-minor-version', $('Remove the auto-upgrade-minor-version value.'))
  .option('--settings', $('Remove the settings value.'))
  .option('--protected-settings', $('Remove the protected-settings value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--instance-view', $('Remove the instance-view value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/resources' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.forceUpdateTag || options.publisher || options.virtualMachineExtensionType || options.typeHandlerVersion || options.autoUpgradeMinorVersion || options.settings || options.protectedSettings || options.provisioningState || options.instanceView || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.forceUpdateTag) {
        subItemPath = options.path + '/forceUpdateTag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisher) {
        subItemPath = options.path + '/publisher';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualMachineExtensionType) {
        subItemPath = options.path + '/virtualMachineExtensionType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.typeHandlerVersion) {
        subItemPath = options.path + '/typeHandlerVersion';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.autoUpgradeMinorVersion) {
        subItemPath = options.path + '/autoUpgradeMinorVersion';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.settings) {
        subItemPath = options.path + '/settings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protectedSettings) {
        subItemPath = options.path + '/protectedSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.instanceView) {
        subItemPath = options.path + '/instanceView';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set resources-instance-view
  var catparametersCreateOrUpdateVirtualMachinesInstanceView0RIiV2 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesInstanceView0RIiV2 = catparametersCreateOrUpdateVirtualMachinesInstanceView0RIiV2.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesInstanceView0RIiV2 = parametersCreateOrUpdateVirtualMachinesInstanceView0RIiV2.category('resources-instance-view')
  .description($('Commands to configure resources-instance-view of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesInstanceView0RIiV2.command('set')
  .description($('Set resources-instance-view in config string or files, e.g. \r\n         {\r\n           ...\r\n           "instanceView" : {\r\n             "name":"",\r\n             "type":"",\r\n             "typeHandlerVersion":"",\r\n             "substatuses":[\r\n               {\r\n                 "code":"",\r\n                 "level":null,\r\n                 "displayStatus":"",\r\n                 "message":"",\r\n                 "time":null\r\n               }\r\n             ],\r\n             "statuses":[\r\n               {\r\n                 "code":"",\r\n                 "level":null,\r\n                 "displayStatus":"",\r\n                 "message":"",\r\n                 "time":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--resources-index <resources-index>', $('Indexer: resources-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--type-handler-version <typeHandlerVersion>', $('Set the type-handler-version value.'))
  .option('--substatuses <substatuses>', $('Set the substatuses value.'))
  .option('--statuses <statuses>', $('Set the statuses value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/resources/' + options.resourcesIndex + '/instanceView';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    if (options.type) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.type);
      cli.output.verbose('================================================');
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'typeHandlerVersion';
    if (options.typeHandlerVersion) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.typeHandlerVersion);
      cli.output.verbose('================================================');
      if (options.parse && options.typeHandlerVersion) {
        options.typeHandlerVersion = JSON.parse(options.typeHandlerVersion);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.typeHandlerVersion}]);
    }
    paramPath = options.path + '/' + 'substatuses';
    if (options.substatuses) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.substatuses);
      cli.output.verbose('================================================');
      if (options.parse && options.substatuses) {
        options.substatuses = JSON.parse(options.substatuses);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.substatuses}]);
    }
    paramPath = options.path + '/' + 'statuses';
    if (options.statuses) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.statuses);
      cli.output.verbose('================================================');
      if (options.parse && options.statuses) {
        options.statuses = JSON.parse(options.statuses);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.statuses}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete resources-instance-view
  var catparametersCreateOrUpdateVirtualMachinesInstanceView1RIiV2 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesInstanceView1RIiV2 = catparametersCreateOrUpdateVirtualMachinesInstanceView1RIiV2.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesInstanceView1RIiV2 = parametersCreateOrUpdateVirtualMachinesInstanceView1RIiV2.category('resources-instance-view')
  .description($('Commands to configure resources-instance-view of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesInstanceView1RIiV2.command('delete')
  .description($('Remove resources-instance-view in config string or files, e.g. \r\n         {\r\n           ...\r\n           "instanceView" : {\r\n             "name":"",\r\n             "type":"",\r\n             "typeHandlerVersion":"",\r\n             "substatuses":[\r\n               {\r\n                 "code":"",\r\n                 "level":null,\r\n                 "displayStatus":"",\r\n                 "message":"",\r\n                 "time":null\r\n               }\r\n             ],\r\n             "statuses":[\r\n               {\r\n                 "code":"",\r\n                 "level":null,\r\n                 "displayStatus":"",\r\n                 "message":"",\r\n                 "time":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--resources-index <resources-index>', $('Indexer: resources-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--type-handler-version', $('Remove the type-handler-version value.'))
  .option('--substatuses', $('Remove the substatuses value.'))
  .option('--statuses', $('Remove the statuses value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/resources/' + options.resourcesIndex + '/instanceView';
    var anySubItem = false || options.name || options.type || options.typeHandlerVersion || options.substatuses || options.statuses;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.typeHandlerVersion) {
        subItemPath = options.path + '/typeHandlerVersion';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.substatuses) {
        subItemPath = options.path + '/substatuses';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.statuses) {
        subItemPath = options.path + '/statuses';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set instance-view-substatuses
  var catparametersCreateOrUpdateVirtualMachinesSubstatuses0RIiVs7 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesSubstatuses0RIiVs7 = catparametersCreateOrUpdateVirtualMachinesSubstatuses0RIiVs7.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesSubstatuses0RIiVs7 = parametersCreateOrUpdateVirtualMachinesSubstatuses0RIiVs7.category('instance-view-substatuses')
  .description($('Commands to configure instance-view-substatuses of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesSubstatuses0RIiVs7.command('set')
  .description($('Set instance-view-substatuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           "substatuses" : {\r\n             "code":"",\r\n             "level":null,\r\n             "displayStatus":"",\r\n             "message":"",\r\n             "time":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resources-index <resources-index>', $('Indexer: resources-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--code <code>', $('Set the code value.'))
  .option('--level <level>', $('Set the level value.'))
  .option('--display-status <displayStatus>', $('Set the display-status value.'))
  .option('--message <message>', $('Set the message value.'))
  .option('--time <time>', $('Set the time value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/resources/' + options.resourcesIndex + '/instanceView/substatuses' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'code';
    if (options.code) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.code);
      cli.output.verbose('================================================');
      if (options.parse && options.code) {
        options.code = JSON.parse(options.code);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.code}]);
    }
    paramPath = options.path + '/' + 'level';
    if (options.level) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.level);
      cli.output.verbose('================================================');
      if (options.parse && options.level) {
        options.level = JSON.parse(options.level);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.level}]);
    }
    paramPath = options.path + '/' + 'displayStatus';
    if (options.displayStatus) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.displayStatus);
      cli.output.verbose('================================================');
      if (options.parse && options.displayStatus) {
        options.displayStatus = JSON.parse(options.displayStatus);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.displayStatus}]);
    }
    paramPath = options.path + '/' + 'message';
    if (options.message) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.message);
      cli.output.verbose('================================================');
      if (options.parse && options.message) {
        options.message = JSON.parse(options.message);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.message}]);
    }
    paramPath = options.path + '/' + 'time';
    if (options.time) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.time);
      cli.output.verbose('================================================');
      if (options.parse && options.time) {
        options.time = JSON.parse(options.time);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.time}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete instance-view-substatuses
  var catparametersCreateOrUpdateVirtualMachinesSubstatuses1RIiVs7 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesSubstatuses1RIiVs7 = catparametersCreateOrUpdateVirtualMachinesSubstatuses1RIiVs7.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesSubstatuses1RIiVs7 = parametersCreateOrUpdateVirtualMachinesSubstatuses1RIiVs7.category('instance-view-substatuses')
  .description($('Commands to configure instance-view-substatuses of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesSubstatuses1RIiVs7.command('delete')
  .description($('Remove instance-view-substatuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           "substatuses" : {\r\n             "code":"",\r\n             "level":null,\r\n             "displayStatus":"",\r\n             "message":"",\r\n             "time":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resources-index <resources-index>', $('Indexer: resources-index.'))
  .option('--code', $('Remove the code value.'))
  .option('--level', $('Remove the level value.'))
  .option('--display-status', $('Remove the display-status value.'))
  .option('--message', $('Remove the message value.'))
  .option('--time', $('Remove the time value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/resources/' + options.resourcesIndex + '/instanceView/substatuses' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.code || options.level || options.displayStatus || options.message || options.time;
    if (anySubItem) {
      var subItemPath = null;
      if (options.code) {
        subItemPath = options.path + '/code';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.level) {
        subItemPath = options.path + '/level';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.displayStatus) {
        subItemPath = options.path + '/displayStatus';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.message) {
        subItemPath = options.path + '/message';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.time) {
        subItemPath = options.path + '/time';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set instance-view-statuses
  var catparametersCreateOrUpdateVirtualMachinesStatuses0RIiVs8 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesStatuses0RIiVs8 = catparametersCreateOrUpdateVirtualMachinesStatuses0RIiVs8.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesStatuses0RIiVs8 = parametersCreateOrUpdateVirtualMachinesStatuses0RIiVs8.category('instance-view-statuses')
  .description($('Commands to configure instance-view-statuses of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesStatuses0RIiVs8.command('set')
  .description($('Set instance-view-statuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           "statuses" : {\r\n             "code":"",\r\n             "level":null,\r\n             "displayStatus":"",\r\n             "message":"",\r\n             "time":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resources-index <resources-index>', $('Indexer: resources-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--code <code>', $('Set the code value.'))
  .option('--level <level>', $('Set the level value.'))
  .option('--display-status <displayStatus>', $('Set the display-status value.'))
  .option('--message <message>', $('Set the message value.'))
  .option('--time <time>', $('Set the time value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/resources/' + options.resourcesIndex + '/instanceView/statuses' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'code';
    if (options.code) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.code);
      cli.output.verbose('================================================');
      if (options.parse && options.code) {
        options.code = JSON.parse(options.code);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.code}]);
    }
    paramPath = options.path + '/' + 'level';
    if (options.level) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.level);
      cli.output.verbose('================================================');
      if (options.parse && options.level) {
        options.level = JSON.parse(options.level);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.level}]);
    }
    paramPath = options.path + '/' + 'displayStatus';
    if (options.displayStatus) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.displayStatus);
      cli.output.verbose('================================================');
      if (options.parse && options.displayStatus) {
        options.displayStatus = JSON.parse(options.displayStatus);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.displayStatus}]);
    }
    paramPath = options.path + '/' + 'message';
    if (options.message) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.message);
      cli.output.verbose('================================================');
      if (options.parse && options.message) {
        options.message = JSON.parse(options.message);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.message}]);
    }
    paramPath = options.path + '/' + 'time';
    if (options.time) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.time);
      cli.output.verbose('================================================');
      if (options.parse && options.time) {
        options.time = JSON.parse(options.time);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.time}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete instance-view-statuses
  var catparametersCreateOrUpdateVirtualMachinesStatuses1RIiVs8 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesStatuses1RIiVs8 = catparametersCreateOrUpdateVirtualMachinesStatuses1RIiVs8.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesStatuses1RIiVs8 = parametersCreateOrUpdateVirtualMachinesStatuses1RIiVs8.category('instance-view-statuses')
  .description($('Commands to configure instance-view-statuses of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesStatuses1RIiVs8.command('delete')
  .description($('Remove instance-view-statuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           "statuses" : {\r\n             "code":"",\r\n             "level":null,\r\n             "displayStatus":"",\r\n             "message":"",\r\n             "time":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resources-index <resources-index>', $('Indexer: resources-index.'))
  .option('--code', $('Remove the code value.'))
  .option('--level', $('Remove the level value.'))
  .option('--display-status', $('Remove the display-status value.'))
  .option('--message', $('Remove the message value.'))
  .option('--time', $('Remove the time value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/resources/' + options.resourcesIndex + '/instanceView/statuses' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.code || options.level || options.displayStatus || options.message || options.time;
    if (anySubItem) {
      var subItemPath = null;
      if (options.code) {
        subItemPath = options.path + '/code';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.level) {
        subItemPath = options.path + '/level';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.displayStatus) {
        subItemPath = options.path + '/displayStatus';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.message) {
        subItemPath = options.path + '/message';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.time) {
        subItemPath = options.path + '/time';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set identity
  var catparametersCreateOrUpdateVirtualMachinesIdentity0I1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesIdentity0I1 = catparametersCreateOrUpdateVirtualMachinesIdentity0I1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachinesIdentity0I1 = parametersCreateOrUpdateVirtualMachinesIdentity0I1.category('identity')
  .description($('Commands to configure identity of vm in config file.'));
  setparametersCreateOrUpdateVirtualMachinesIdentity0I1.command('set')
  .description($('Set identity in config string or files, e.g. \r\n         {\r\n           ...\r\n           "identity" : {\r\n             "principalId":"",\r\n             "tenantId":"",\r\n             "type":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--principal-id <principalId>', $('Set the principal-id value.'))
  .option('--tenant-id <tenantId>', $('Set the tenant-id value.'))
  .option('--type <type>', $('Set the type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/identity';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'principalId';
    if (options.principalId) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.principalId);
      cli.output.verbose('================================================');
      if (options.parse && options.principalId) {
        options.principalId = JSON.parse(options.principalId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.principalId}]);
    }
    paramPath = options.path + '/' + 'tenantId';
    if (options.tenantId) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.tenantId);
      cli.output.verbose('================================================');
      if (options.parse && options.tenantId) {
        options.tenantId = JSON.parse(options.tenantId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tenantId}]);
    }
    paramPath = options.path + '/' + 'type';
    if (options.type) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.type);
      cli.output.verbose('================================================');
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete identity
  var catparametersCreateOrUpdateVirtualMachinesIdentity1I1 = cli.category('vm');
  var parametersCreateOrUpdateVirtualMachinesIdentity1I1 = catparametersCreateOrUpdateVirtualMachinesIdentity1I1.category('config')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachinesIdentity1I1 = parametersCreateOrUpdateVirtualMachinesIdentity1I1.category('identity')
  .description($('Commands to configure identity of vm in config file.'));
  deleteparametersCreateOrUpdateVirtualMachinesIdentity1I1.command('delete')
  .description($('Remove identity in config string or files, e.g. \r\n         {\r\n           ...\r\n           "identity" : {\r\n             "principalId":"",\r\n             "tenantId":"",\r\n             "type":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--principal-id', $('Remove the principal-id value.'))
  .option('--tenant-id', $('Remove the tenant-id value.'))
  .option('--type', $('Remove the type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/identity';
    var anySubItem = false || options.principalId || options.tenantId || options.type;
    if (anySubItem) {
      var subItemPath = null;
      if (options.principalId) {
        subItemPath = options.path + '/principalId';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tenantId) {
        subItemPath = options.path + '/tenantId';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  VirtualMachines PerformMaintenance
  --resource-group
  --vm-name
*/
  var virtualMachinesPerformMaintenance = cli.category('vm')
  .description($('Commands to manage your virtual machines.  '));
  virtualMachinesPerformMaintenance.command('perform-maintenance [resource-group] [vm-name]')
  .description($('The operation to perform maintenance on a virtual machine.'))
  .usage('[options] <resource-group> <vm-name>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --vm-name <vm-name>', $('vm-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, vMName, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!vMName) {
      vMName = cli.interaction.promptIfNotGiven($('vm-name : '), vMName, _);
    }

    cli.output.verbose('vMName = ' + vMName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachines.performMaintenance(resourceGroup, vMName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachines Redeploy
  --resource-group
  --vm-name
*/
  var virtualMachinesRedeploy = cli.category('vm')
  .description($('Commands to manage your virtual machines.  '));
  virtualMachinesRedeploy.command('redeploy [resource-group] [vm-name]')
  .description($('The operation to redeploy a virtual machine.'))
  .usage('[options] <resource-group> <vm-name>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --vm-name <vm-name>', $('vm-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, vMName, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!vMName) {
      vMName = cli.interaction.promptIfNotGiven($('vm-name : '), vMName, _);
    }

    cli.output.verbose('vMName = ' + vMName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachines.redeploy(resourceGroup, vMName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachines RunCommand
  --resource-group
  --vm-name
  --parameters
=============================================
{
  "commandId":"",
  "parameters":[
    {
      "name":"",
      "value":""
    }
  ]
}
*/
  var virtualMachinesRunCommand = cli.category('vm')
  .description($('Commands to manage your virtual machines.  '));
  virtualMachinesRunCommand.command('run-command [resource-group] [vm-name] [parameters]')
  .description($('Run command on the VM.'))
  .usage('[options] <resource-group> <vm-name> <parameters>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --vm-name <vm-name>', $('vm-name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, vMName, parameters, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!vMName) {
      vMName = cli.interaction.promptIfNotGiven($('vm-name : '), vMName, _);
    }

    cli.output.verbose('vMName = ' + vMName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachines.runCommand(resourceGroup, vMName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachinesRunCommandrunCommandParameters2 = virtualMachinesRunCommand.category('run-command-parameters')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  virtualMachinesRunCommandrunCommandParameters2.command('create')
  .description($('Generate virtualMachinesRunCommand parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"commandId\":\"\",\"parameters\":[{\"name\":\"\",\"value\":\"\"}]}', _);
    var filePath = 'virtualMachinesRunCommand_runCommand.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"commandId\":\"\",\r\n\"parameters\":[\r\n{\r\n\"name\":\"\",\r\n\"value\":\"\"\r\n}\r\n]\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachinesRunCommandrunCommandParameters2.command('patch')
  .description($('Command to patch virtualMachinesRunCommand parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //run-command-parameters set run-command-input
  var catparametersRunCommandVirtualMachinesRunCommandInput01 = cli.category('vm');
  var parametersRunCommandVirtualMachinesRunCommandInput01 = catparametersRunCommandVirtualMachinesRunCommandInput01.category('run-command-parameters')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersRunCommandVirtualMachinesRunCommandInput01 = parametersRunCommandVirtualMachinesRunCommandInput01.category('run-command-input')
  .description($('Commands to configure run-command-input of vm in run-command-parameters file.'));
  setparametersRunCommandVirtualMachinesRunCommandInput01.command('set')
  .description($('Set run-command-input in run-command-parameters string or files, e.g. \r\n{\r\n  "commandId":"",\r\n  "parameters":[\r\n    {\r\n      "name":"",\r\n      "value":""\r\n    }\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--command-id <commandId>', $('Set the command-id value.'))
  .option('--parameters <parameters>', $('Set the parameters value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'commandId';
    if (options.commandId) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.commandId);
      cli.output.verbose('================================================');
      if (options.parse && options.commandId) {
        options.commandId = JSON.parse(options.commandId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.commandId}]);
    }
    paramPath = options.path + '/' + 'parameters';
    if (options.parameters) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.parameters);
      cli.output.verbose('================================================');
      if (options.parse && options.parameters) {
        options.parameters = JSON.parse(options.parameters);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.parameters}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //run-command-parameters delete run-command-input
  var catparametersRunCommandVirtualMachinesRunCommandInput11 = cli.category('vm');
  var parametersRunCommandVirtualMachinesRunCommandInput11 = catparametersRunCommandVirtualMachinesRunCommandInput11.category('run-command-parameters')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersRunCommandVirtualMachinesRunCommandInput11 = parametersRunCommandVirtualMachinesRunCommandInput11.category('run-command-input')
  .description($('Commands to configure run-command-input of vm in run-command-parameters file.'));
  deleteparametersRunCommandVirtualMachinesRunCommandInput11.command('delete')
  .description($('Remove run-command-input in run-command-parameters string or files, e.g. \r\n{\r\n  "commandId":"",\r\n  "parameters":[\r\n    {\r\n      "name":"",\r\n      "value":""\r\n    }\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--command-id', $('Remove the command-id value.'))
  .option('--parameters', $('Remove the parameters value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.commandId || options.parameters;
    if (anySubItem) {
      var subItemPath = null;
      if (options.commandId) {
        subItemPath = options.path + '/commandId';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.parameters) {
        subItemPath = options.path + '/parameters';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //run-command-parameters set parameters
  var catparametersRunCommandVirtualMachinesParameters0P1 = cli.category('vm');
  var parametersRunCommandVirtualMachinesParameters0P1 = catparametersRunCommandVirtualMachinesParameters0P1.category('run-command-parameters')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var setparametersRunCommandVirtualMachinesParameters0P1 = parametersRunCommandVirtualMachinesParameters0P1.category('parameters')
  .description($('Commands to configure parameters of vm in run-command-parameters file.'));
  setparametersRunCommandVirtualMachinesParameters0P1.command('set')
  .description($('Set parameters in run-command-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "parameters" : {\r\n             "name":"",\r\n             "value":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--name <name>', $('Set the name value.'))
  .option('--value <value>', $('Set the value value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/parameters' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'value';
    if (options.value) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.value);
      cli.output.verbose('================================================');
      if (options.parse && options.value) {
        options.value = JSON.parse(options.value);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //run-command-parameters delete parameters
  var catparametersRunCommandVirtualMachinesParameters1P1 = cli.category('vm');
  var parametersRunCommandVirtualMachinesParameters1P1 = catparametersRunCommandVirtualMachinesParameters1P1.category('run-command-parameters')
  .description($('Commands to manage configuration of virtual-machines in the parameter file.'));
  var deleteparametersRunCommandVirtualMachinesParameters1P1 = parametersRunCommandVirtualMachinesParameters1P1.category('parameters')
  .description($('Commands to configure parameters of vm in run-command-parameters file.'));
  deleteparametersRunCommandVirtualMachinesParameters1P1.command('delete')
  .description($('Remove parameters in run-command-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "parameters" : {\r\n             "name":"",\r\n             "value":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--value', $('Remove the value value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/parameters' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.value;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.value) {
        subItemPath = options.path + '/value';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });



};
