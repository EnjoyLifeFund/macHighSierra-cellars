/**
* Copyright (c) Microsoft.  All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var util = require('util');
var profile = require('../../../util/profile');
var utils = require('../../../util/utils');
var iotHubUtils = require('./iothubUtils');
var resourceUtils = require('../resource/resourceUtils');
var tagUtils = require('../tag/tagUtils');
var moment = require('moment');
var $ = utils.getLocaleString;

var SKU = ['F1', 'S1', 'S2', 'S3'];
var OPERATIONSMONITORINGCATEGORIES = ['Connections', 'DeviceTelemetry', 'C2DCommands', 'DeviceIdentityOperations', 'FileUploadOperations'];
var OPERATIONSMONITORINGDIAGLEVELS = ['None', 'Error', 'Information'];


exports.init = function (cli) {
  var log = cli.output;
  var iotHub = cli.category('iothub')
    .description($('Commands to manage your Azure IoT hubs'));

  /**
   * Create a new IoT hub
   */
  iotHub.command('create [resource-group] [name] [location] [sku-name] [units]')
    .description($('Create a new IoT hub'))
    .usage('<resource-group> <name> <location> <sku-name> <units> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group.'))
    .option('-n --name <name>', $('The name of the new IoT hub.'))
    .option('-l --location <location>', $('The location (azure region/datacenter) where the IoT hub will be provisioned.'))
    .option('-k --sku-name <skuName>', util.format($('The name of the sku, one of: [%s] etc. For the latest full list refer to the pricing page for IoT Hub.'), SKU.join(', ')))
    .option('-u --units <units>', $('The number of provisioned units. Range : F1 [1-1] : S1, S2 [1-200] : S3 [1-10].'))
    .option('-e --enable-dm [enableDm]', $('The flag which indicates whether the Device Management feature is enabled for this IoT hub. One of true, false. Default : false'))
    .option('-p --d2c-partitions [d2cPartitions]', $('The number of partitions for your device-to-cloud events. Range : F1 [2-2] Rest of the Skus [2-128]. Default : 2'))
    .option('-r --d2c-retention-time-in-days [d2cRetentionTimeInDays]', $('The number of days for which the device-to-cloud events will be maintained. Range : [1-7]. Default : 1.'))
    .option('-d --c2d-max-delivery-count [c2dMaxDeliveryCount]', $('The number of times the IoT hub will attempt to deliver a cloud-to-device message to a device. Range : [1-100]. Default : 10.'))
    .option('-c --c2d-ttl [c2dTtl]', $('The amount of time for which a cloud to device mesage is available for the device to consume before it is expired by IoT hub. Range : [1-48 hours]. Default : 1 hour.'))
    .option('-f --feedback-lock-duration [feedbackLockDuration]', $('The lock duration for the feedback messages. Range : [5 seconds - 5 minutes]. Default : 1 minute.'))
    .option('-F --feedback-ttl [feedbackTtl]', $('The amount of time a feedback mesage is available for the device to consume before it is expired by IotHub. Range : [1-48 hours]. Default : 1 hour.'))
    .option('-m --feedback-max-delivery-count [feedbackMaxDeliveryCount]', $('The number of times the IoT hub will attempt to deliver a cloud-device feedback message to a device. Range : [1-100]. Default : 1.'))
    .option('-x --enable-fileupload-notifications [enableFileuploadNotifications]', $('The flag that specifies if the file upload notifications should be turned on, One of true, false. Default : false.'))
    .option('-S --fileupload-storage-connectionstring [fileuploadStorageConnectionstring]', $('The storage connection string where the files are to be uploaded. Default : null.'))
    .option('-C --fileupload-container-name [fileuploadContainerName]', $('The storage container name where the files are to be uploaded. Default : null.'))
    .option('-T --fileupload-sas-uri-ttl [fileuploadSasUriTtl]', $('The amount of time for which the SAS Uri generated by IoT hub is valid before it expires. Range : [1-24 hours]. Default : 1 hour.'))
    .option('-N --fileupload-notification-ttl [fileuploadNotificationTtl]', $('The amount of time for which a file upload notification is available for the service to consume before it is expired by IoT hub. Range : [1-48 hours]. Default : 1 hour.'))
    .option('-D --fileupload-notification-max-delivery-count [fileuploadNotificationMaxDeliveryCount]', $('The number of times the IoT hub will attempt to deliver a file notification message. Range [1-100]. Default : 10.'))
    .option('-t --tags [tags]', $('The tags to set to the resource group. Can be multiple' +
      'In the format of \'name=value\'. name is required and value is optional' +
      'For example, -t \'tag1=value1;tag2\'.'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, location, skuName, units, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      if (!location) {
        return cli.missingArgument('location');
      }

      if (!skuName) {
        return cli.missingArgument('sku-name');
      }

      if (!units) {
        return cli.missingArgument('units');
      }

      var features = 'None';
      if (options.enableDm == 'true') {
        features = 'DeviceManagement';
      }

      if (!options.d2cPartitions) {
        options.d2cPartitions = iotHubUtils.iotHubDefaults.d2cPartitionCount;
      }

      if (!options.d2cRetentionTimeInDays) {
        options.d2cRetentionTimeInDays = iotHubUtils.iotHubDefaults.d2cRetentionTimeInDays;
      }

      if (!options.c2dMaxDeliveryCount) {
        options.c2dMaxDeliveryCount = iotHubUtils.iotHubDefaults.c2dMaxDeliveryCount;
      }

      if (!options.c2dTtl) {
        options.c2dTtl = iotHubUtils.iotHubDefaults.c2dTtl;
      }

      if (!options.feedbackLockDuration) {
        options.feedbackLockDuration = iotHubUtils.iotHubDefaults.feedbackLockDuration;
      }

      if (!options.feedbackTtl) {
        options.feedbackTtl = iotHubUtils.iotHubDefaults.feedbackTtl;
      }

      if (!options.feedbackMaxDeliveryCount) {
        options.feedbackMaxDeliveryCount = iotHubUtils.iotHubDefaults.feedbackMaxDeliveryCount;
      }

      if (options.enableFileuploadNotifications == 'true') {
        if (!options.fileuploadStorageConnectionstring) {
          return cli.missingArgument('fileuploadStorageConnectionstring');
        }
      }

      if (!options.fileuploadSasUriTtl) {
        options.fileuploadSasUriTtl = iotHubUtils.iotHubDefaults.fileuploadSasUriTtl;
      }

      if (!options.fileuploadNotificationTtl) {
        options.fileuploadNotificationTtl = iotHubUtils.iotHubDefaults.fileuploadNotificationTtl;
      }

      if (!options.fileuploadNotificationMaxDeliveryCount) {
        options.fileuploadNotificationMaxDeliveryCount = iotHubUtils.iotHubDefaults.fileuploadNotificationMaxDeliveryCount;
      }

      var defaultStorageEndpoints = null;

      if (options.fileuploadStorageConnectionstring) {
        if (!options.fileuploadContainerName) {
          return cli.missingArgument('fileuploadContainerName');
        }

        defaultStorageEndpoints = {
          '$default': {
            connectionString: options.fileuploadStorageConnectionstring,
            containerName: options.fileuploadContainerName,
            sasTtlAsIso8601: moment.duration(options.fileuploadSasUriTtl)
          }
        };
      }

      var tagsToSet = null;

      if (options.tags) {
        tagsToSet = iotHubUtils.parseTagsArgument('tags', options.tags);
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);

      ////////////////////////////////////////
      // Setting the properties.            //
      ////////////////////////////////////////

      var iotHubCreateParams = {
        name: name,
        location: location,
        subscriptionid: options.subscription,
        resourcegroup: resourceGroup,
        tags: tagsToSet,
        sku: {
          name: skuName,
          capacity: Number(units)
        },
        properties: {
          enableFileuploadNotifications: options.enableFileuploadNotifications,
          features: features,
          eventHubEndpoints: {
            'events': {
              retentionTimeInDays: Number(options.d2cRetentionTimeInDays),
              partitionCount: Number(options.d2cPartitions)
            },
            'operationsMonitoringEvents': {
              retentionTimeInDays: Number(options.d2cRetentionTimeInDays),
              partitionCount: Number(options.d2cPartitions)
            }
          },
          cloudToDevice: {
            maxDeliveryCount: Number(options.c2dMaxDeliveryCount),
            defaultTtlAsIso8601: moment.duration(options.c2dTtl),
            feedback: {
              maxDeliveryCount: Number(options.feedbackMaxDeliveryCount),
              ttlAsIso8601: moment.duration(options.feedbackTtl),
              lockDurationAsIso8601: moment.duration(options.feedbackLockDuration)
            }
          },
          messagingEndPoints: {
            'fileNotifications': {
              maxDeliveryCount: Number(options.fileuploadNotificationMaxDeliveryCount),
              ttlAsIso8601: moment.duration(options.fileuploadNotificationTtl),
              lockDurationAsIso8601: moment.duration(iotHubUtils.iotHubDefaults.defaultLockDuration)
            }
          }
        }
      };

      if (options.fileuploadStorageConnectionstring) {
        iotHubCreateParams.properties.storageEndpoints = defaultStorageEndpoints;
      }

      ////////////////////////////////////////
      // Issue the create.                  //
      ////////////////////////////////////////

      var progress = cli.interaction.progress(util.format($('Creating IoT hub %s'), name));
      var result;
      try {
        result = client.iotHubResource.createOrUpdate(resourceGroup, name, iotHubCreateParams, _);
      } finally {
        progress.end();
      }

      if (result) {
        showResource(result);
      }
    });

  /**
   * List IoT hubs
   */
  iotHub.command('list [resource-group]')
    .description($('Get all IoT hubs in a subcription or a resource group'))
    .usage('<resource-group> [options]')
    .option('-g --resource-group [resourceGroup]', $('The name of the resource group'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, options, _) {

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Listing IoT hubs'));
      var iotHubs;

      if (resourceGroup) {
        try {
          iotHubs = client.iotHubResource.listByResourceGroup(resourceGroup, _);
        } finally {
          progress.end();
        }
      } else {
        try {
          iotHubs = client.iotHubResource.listBySubscription(_);
        } finally {
          progress.end();
        }
      }

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////

      cli.interaction.formatOutput(iotHubs, function (iotHubs) {
        if (iotHubs.length === 0) {
          log.info($('No IoT hubs found.'));
          return;
        }

        log.table(iotHubs, function (row, iotHub) {
          row.cell($('Name'), iotHub.name);
          row.cell($('Group'), iotHub.resourcegroup);
          row.cell($('Location'), iotHub.location);
          row.cell($('Sku'), iotHub.sku.name);
          row.cell($('Units'), iotHub.sku.capacity);
        });
      });
    });

  /**
   * Get an IoT hub
   */
  iotHub.command('show [resource-group] [name]')
    .description($('Get an IoT hub'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group.'))
    .option('-n --name <name>', $('The name of the IoT hub.'))
    .option('-s --subscription [subscription]', $('The subscription identifier.'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting IoT hub'));
      var result;

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////

      try {
        result = client.iotHubResource.get(resourceGroup, name, _);
      } finally {
        progress.end();
      }

      if (result) {
        showResource(result);
      }
    });

  /**
   * Get the IoT hub Quota Metrics 
   */
  iotHub.command('show-quota-metrics [resource-group] [name]')
    .description($('Get the IoT hub Quota Metrics'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group.'))
    .option('-n --name <name>', $('The name of the IoT hub.'))
    .option('-s --subscription [subscription]', $('The subscription identifier.'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting IoT hub Quota Metrics'));
      var quotaMetrics;

      try {
        quotaMetrics = client.iotHubResource.getQuotaMetrics(resourceGroup, name, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(quotaMetrics, function (quotaMetrics) {
        if (quotaMetrics.length === 0) {
          log.info($('No quota metrics found.'));
          return;
        }

        ////////////////////////////////////////
        // Output the result.                 //
        ////////////////////////////////////////

        log.table(quotaMetrics, function (row, metric) {
          row.cell($('Quota Metric Name'), metric.name);

          if (metric.name == 'TotalDeviceCount') {
            row.cell($('MaxValue'), 'Unlimited');
          } else {
            row.cell($('MaxValue'), metric.maxValue);
          }

          row.cell($('Current Value'), metric.currentValue);
        });
      });
    });

  /**
   * Get the IoT hub Registry Statistics
   */
  iotHub.command('show-registry-stats [resource-group] [name]')
    .description($('Get the IoT hub Registry Statistics'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting IoT hub Registry Statistics'));
      var stats;

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////
      try {
        stats = client.iotHubResource.getStats(resourceGroup, name, _);
      } finally {
        progress.end();
      }

      if (stats) {
        cli.output.json(stats);
      }
    });

  /**
   * Delete an IoT hub
   */
  iotHub.command('delete [resource-group] [name]')
    .description($('Delete an IoT hub'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub to be deleted'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);

      var progress = cli.interaction.progress(util.format($('Deleting IoT hub %s'), name));

      var result;
      try {
        result = client.iotHubResource.deleteMethod(resourceGroup, name, _);
      } finally {
        progress.end();
      }
    });

  var iotHubIpFilterRules = cli.category('iothub').category('ipfilter-rules')
    .description($('Commands to manage the IP filter rules of an IoT hub'));

  /**
   * List the IoT hub IP Filter Rules
   */
  iotHubIpFilterRules.command('list [resource-group] [name]')
    .description($('List the IoT hub IP filter rules'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .fileRelatedOption('-f --output-file [output-file]', $('the path to the JSON-formatted output IP filter rules file in the file system'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }
      
      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting the IP filter rules.'));
      var iothubDescription;

      ////////////////////////////////////////
      // Load existing iothub description.  //
      ////////////////////////////////////////
      try {
        iothubDescription = client.iotHubResource.get(resourceGroup, name, _);
      } finally {
        progress.end();
      }

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////
     
      if (iothubDescription) { 
        if (options.outputFile) {
          try {
            var fs = require('fs');
            fs.writeFileSync(options.outputFile, JSON.stringify(iothubDescription.properties.ipFilterRules, null, 2));
          } catch (e) {
		    log.error('Could not write to file ' + options.outputFile + ' Error Details :');
			throw e;
		  }
        }

        cli.interaction.formatOutput(iothubDescription.properties.ipFilterRules, function (ipFilterRules) {
            log.table(ipFilterRules, function (row, rule) {
                row.cell($('FilterName'), rule.filterName);
                row.cell($('Action'), rule.action);
                row.cell($('IpMask'), rule.ipMask);
            });
        });
      }
    });

  /**
   * Set the IoT hub IP Filter Rules
   */
  iotHubIpFilterRules.command('set [resource-group] [name] [inputFile]')
    .description($('set the IoT hub IP filter rules'))
    .usage('<resourceGroup> <name> <inputFile> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .fileRelatedOption('-f --input-file <inputFile>', $('the path to the JSON-formatted input IP filter rules file in the file system'))
    .execute(function (resourceGroup, name, inputFile, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      if (!inputFile) {
        return cli.missingArgument('inputFile');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting the IP filter rules.'));
      var iothubDescription;

      ////////////////////////////////////////
      // Load existing iothub description.  //
      ////////////////////////////////////////
      try {
        iothubDescription = client.iotHubResource.get(resourceGroup, name, _);
      } finally {
        progress.end();
      }

      ////////////////////////////////////////
      // Setting the properties.            //
      ////////////////////////////////////////

      if (iothubDescription) {
	    try {
          var fs = require('fs');
          var jsonFile = fs.readFileSync(inputFile);
          iothubDescription.properties.ipFilterRules= JSON.parse(utils.stripBOM(jsonFile));
		} catch (e) {
		  log.error('Could not read from file ' + options.outputFile + ' Error Details :');
		  throw e;
		}
      }
      
      ////////////////////////////////////////
      // Issue the update.                  //
      ////////////////////////////////////////

      progress = cli.interaction.progress(util.format($('Updating IoT hub %s'), name));
      var result;
      try {
        result = client.iotHubResource.createOrUpdate(resourceGroup, name, iothubDescription, _);
      } finally {
        progress.end();
      }

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////

      if (result) {
        showResource(result);
      }
    });

  var iotHubd2cproperties = cli.category('iothub').category('device-to-cloud-properties')
    .description($('Commands to manage the Device to Cloud Properties of an IoT hub'));

  /**
   * Update Device to Cloud Properties on the IoT hub
   */
  iotHubd2cproperties.command('set [resource-group] [name]')
    .description($('Set the Device to Cloud properties of an IoT hub'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-r --d2c-retention-time-in-days [d2cRetentionTimeInDays]', $('The number of days for which the device-to-cloud events will be maintained, between 1 and 7'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);

      ////////////////////////////////////////
      // Load existing iothub description.  //
      ////////////////////////////////////////

      var iotHubDescription = client.iotHubResource.get(resourceGroup, name, _);

      if (!iotHubDescription) {
        throw notFoundError(resourceGroup, name);
      }

      ////////////////////////////////////////
      // Setting the properties.            //
      ////////////////////////////////////////

      if (options.d2cRetentionTimeInDays) {
        iotHubDescription.properties.eventHubEndpoints['events'].retentionTimeInDays = Number(options.d2cRetentionTimeInDays);
        iotHubDescription.properties.eventHubEndpoints['operationsMonitoringEvents'].retentionTimeInDays = Number(options.d2cRetentionTimeInDays);
      }

      ////////////////////////////////////////
      // Issue the update.                  //
      ////////////////////////////////////////

      var progress = cli.interaction.progress(util.format($('Updating IoT hub %s'), name));
      var result;
      try {
        result = client.iotHubResource.createOrUpdate(resourceGroup, name, iotHubDescription, _);
      } finally {
        progress.end();
      }

      if (result) {
        showResource(result);
      }
    });

  var iotHubc2dproperties = cli.category('iothub').category('cloud-to-device-properties')
    .description($('Commands to manage the Cloud to Device Properties of an IoT hub'));

  /**
   * Update Cloud to Device Properties on the IotHub
   */
  iotHubc2dproperties.command('set [resource-group] [name]')
    .description($('Set the Cloud to Device properties of an IoT hub'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-d --c2d-max-delivery-count [c2dMaxDeliveryCount]', $('The number of times the IoT hub will attempt to deliver a cloud-to-device message to a device, between 1 and 100'))
    .option('-c --c2d-ttl [c2dTtl]', $('The amount of time for which a mesage is available for the device to consume before it is expired by IoT hub, between 1 and 48 hours'))
    .option('-f --feedback-lock-duration [feedbackLockDuration]', $('The lock duration of the feedback messages, between 5 seconds and 5 minutes'))
    .option('-F --feedback-ttl [feedbackTtl]', $('The amount of time a feedback mesage is available for the device to consume before it is expired by IoT hub, between 1 and 48 hours'))
    .option('-m --feedback-max-delivery-count [feedbackMaxDeliveryCount]', $('The number of times the IoT hub will attempt to deliver a cloud-device feedback message to a device, between 1 and 100'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);

      ////////////////////////////////////////
      // Load existing iothub description.  //
      ////////////////////////////////////////

      var iotHubDescription = client.iotHubResource.get(resourceGroup, name, _);

      if (!iotHubDescription) {
        throw notFoundError(resourceGroup, name);
      }

      ////////////////////////////////////////
      // Setting the properties.            //
      ////////////////////////////////////////

      if (options.c2dMaxDeliveryCount) {
        iotHubDescription.properties.cloudToDevice.maxDeliveryCount = Number(options.c2dMaxDeliveryCount);
      }

      if (options.c2dTtl) {
        iotHubDescription.properties.cloudToDevice.defaultTtlAsIso8601 = moment.duration(options.c2dTtl);
      }

      if (options.feedbackLockDuration) {
        iotHubDescription.properties.cloudToDevice.feedback.lockDurationAsIso8601 = moment.duration(options.feedbackLockDuration);
      }

      if (options.feedbackTtl) {
        iotHubDescription.properties.cloudToDevice.feedback.ttlAsIso8601 = moment.duration(options.feedbackTtl);
      }

      if (options.feedbackMaxDeliveryCount) {
        iotHubDescription.properties.cloudToDevice.feedback.maxDeliveryCount = Number(options.feedbackMaxDeliveryCount);
      }

      ////////////////////////////////////////
      // Issue the update.                  //
      ////////////////////////////////////////

      var progress = cli.interaction.progress(util.format($('Updating IoT hub %s'), name));
      var result;
      try {
        result = client.iotHubResource.createOrUpdate(resourceGroup, name, iotHubDescription, _);
      } finally {
        progress.end();
      }

      if (result) {
        showResource(result);
      }
    });

  var iotHubfuproperties = cli.category('iothub').category('file-upload-properties')
    .description($('Commands to manage the File Upload Properties of an IoT hub'));

  /**
   * Update File upload Properties on the IoT hub
   */
  iotHubfuproperties.command('set [resource-group] [name]')
    .description($('Set the File upload Properties of an IoT hub'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-x --enable-fileupload-notifications [enableFileuploadNotifications]', $('The flag that specifies if the file upload notifications should be turned on, one of true, false'))
    .option('-S --fileupload-storage-connectionstring [fileuploadStorageConnectionstring]', $('The storage connection string where the files are to be uploaded'))
    .option('-C --fileupload-container-name [fileuploadContainerName]', $('The storage container name where the files are to be uploaded'))
    .option('-T --fileupload-sas-uri-ttl [fileuploadSasUriTtl]', $('The amount of time for which the SAS Uri generated by IoT hub is valid before it expires, between 1 and 24 hours'))
    .option('-N --fileupload-notification-ttl [fileuploadNotificationTtl]', $('The amount of time for which a file upload notification is available for the service to consume before it is expired by IoT hub, between 1 and 48 hours'))
    .option('-D --fileupload-notification-max-delivery-count [fileuploadNotificationMaxDeliveryCount]', $('The number of times the IoT hub will attempt to deliver a file notification message, between 1 and 100'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);

      ////////////////////////////////////////
      // Load existing iothub description.  //
      ////////////////////////////////////////

      var iotHubDescription = client.iotHubResource.get(resourceGroup, name, _);

      if (!iotHubDescription) {
        throw notFoundError(resourceGroup, name);
      }

      ////////////////////////////////////////
      // Setting the properties.            //
      ////////////////////////////////////////

      if (options.enableFileuploadNotifications) {
        if (options.enableFileuploadNotifications == 'true') {
          iotHubDescription.properties.enableFileuploadNotifications = true;
        } else if (options.enableFileuploadNotifications == 'false') {
          iotHubDescription.properties.enableFileuploadNotifications = false;
        } else {
          return cli.unknownOption(options.enableFileuploadNotifications + ' for enableFileuploadNotifications. Should be true or false.');
        }
      }

      if (options.fileuploadContainerName) {
        if (!options.fileuploadStorageConnectionstring) {
          return cli.missingArgument('fileuploadStorageConnectionstring');
        }
      }

      if (options.fileuploadStorageConnectionstring) {
        if (!options.fileuploadContainerName) {
          return cli.missingArgument('fileuploadContainerName');
        }

        iotHubDescription.properties.storageEndpoints['$default'].connectionString = options.fileuploadStorageConnectionstring;
        iotHubDescription.properties.storageEndpoints['$default'].containerName = options.fileuploadContainerName;
      }

      if (options.fileuploadSasUriTtl) {
        iotHubDescription.properties.storageEndpoints['$default'].sasTtlAsIso8601 = moment.duration(options.fileuploadSasUriTtl);
      }

      if (options.fileuploadNotificationTtl || options.fileuploadNotificationMaxDeliveryCount) {
        if (iotHubDescription.properties.enableFileuploadNotifications === true) {
          if (iotHubDescription.properties.messagingEndpoints === null) {
            if (!options.fileuploadNotificationTtl) {
              options.fileuploadNotificationTtl = iotHubUtils.iotHubDefaults.fileuploadNotificationTtl;
            }

            if (!options.fileuploadNotificationMaxDeliveryCount) {
              options.fileuploadNotificationMaxDeliveryCount = iotHubUtils.iotHubDefaults.fileuploadNotificationMaxDeliveryCount;
            }
          } else {
            if (!options.fileuploadNotificationTtl) {
              options.fileuploadNotificationTtl = iotHubDescription.properties.messagingEndpoints['fileNotifications'].ttlAsIso8601;
            }

            if (!options.fileuploadNotificationMaxDeliveryCount) {
              options.fileuploadNotificationMaxDeliveryCount = iotHubDescription.properties.messagingEndpoints['fileNotifications'].maxDeliveryCount;
            }
          }

          var messagingEndpoints = {
            'fileNotifications': {
              maxDeliveryCount: Number(options.fileuploadNotificationMaxDeliveryCount),
              ttlAsIso8601: moment.duration(options.fileuploadNotificationTtl),
              lockDurationAsIso8601: moment.duration(iotHubUtils.iotHubDefaults.defaultLockDuration)
            }
          };

          iotHubDescription.properties.messagingEndpoints = messagingEndpoints;
        }
      }

      ////////////////////////////////////////
      // Issue the update.                  //
      ////////////////////////////////////////

      var progress = cli.interaction.progress(util.format($('Updating IoT hub %s'), name));
      var result;
      try {
        result = client.iotHubResource.createOrUpdate(resourceGroup, name, iotHubDescription, _);
      } finally {
        progress.end();
      }

      if (result) {
        showResource(result);
      }
    });

  var iotHubtags = cli.category('iothub').category('tags')
    .description($('Commands to manage the tags of an Iot hub'));

  /**
   * Update tags on the IoT hub
   */
  iotHubtags.command('set [resource-group] [name]')
    .description($('Set tags on the IoT hub'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-t --tags [tags]', $('The tags to set to the resource group. The tags specified here will replace the existing ones and not append to them. Can be multiple' +
      'In the format of \'name=value\'. Name is required and value is optional' +
      'For example, -t \'tag1=value1;tag2\'.'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);

      ////////////////////////////////////////
      // Load existing iothub description.  //
      ////////////////////////////////////////

      var iotHubDescription = client.iotHubResource.get(resourceGroup, name, _);

      if (!iotHubDescription) {
        throw notFoundError(resourceGroup, name);
      }

      ////////////////////////////////////////
      // Setting the properties.            //
      ////////////////////////////////////////

      if (options.tags) {
        iotHubDescription.tags = iotHubUtils.parseTagsArgument('tags', options.tags);
      }

      ////////////////////////////////////////
      // Issue the update.                  //
      ////////////////////////////////////////

      var progress = cli.interaction.progress(util.format($('Updating IoT hub %s'), name));
      var result;
      try {
        result = client.iotHubResource.createOrUpdate(resourceGroup, name, iotHubDescription, _);
      }
      finally {
        progress.end();
      }

      if (result) {
        showResource(result);
      }
    });

  var iotHubsku = cli.category('iothub').category('sku')
    .description($('Commands to manage the sku related information of an IoT hub'));

  /**
   * List the Valid IoT hub Skus
   */
  iotHubsku.command('list [resource-group] [name]')
    .description($('List the Valid IoT hub Skus'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting the valid skus.'));
      var skus;

      try {
        skus = client.iotHubResource.getValidSkus(resourceGroup, name, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(skus, function (skus) {
        if (skus.length === 0) {
          log.info($('No valid skus found.'));
          return;
        }

        ////////////////////////////////////////
        // Output the result.                 //
        ////////////////////////////////////////

        log.table(skus, function (row, skuDesc) {
          row.cell($('Sku Name'), skuDesc.sku.name);
          row.cell($('MinUnits'), skuDesc.capacity.minimum);
          row.cell($('MaxUnits'), skuDesc.capacity.maximum);
        });
      });
    });

  /**
   * Get sku info for an IoT hub
   */
  iotHubsku.command('show [resource-group] [name]')
    .description($('Get sku info for an IoT hub'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);

      ////////////////////////////////////////
      // Load existing iothub description.  //
      ////////////////////////////////////////

      var iotHubDescription = client.iotHubResource.get(resourceGroup, name, _);

      if (!iotHubDescription) {
        throw notFoundError(resourceGroup, name);
      }

      ////////////////////////////////////////
      // Output the sku info.               //
      ////////////////////////////////////////

      log.info($('Sku   : ' + iotHubDescription.sku.name));
      log.info($('Units : ' + iotHubDescription.sku.capacity));

    });

  /**
   * Update sku on the IotHub
   */
  iotHubsku.command('set [resource-group] [name]')
    .description($('Set sku for an IoT hub'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-k --sku-name <skuName>', util.format($('The name of the sku, one of: [%s]'), SKU.join(', ')))
    .option('-u --units <units>', $('The number of provisioned units'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      if (!options.skuName) {
        return cli.missingArgument('skuName');
      }

      if (!options.units) {
        return cli.missingArgument('units');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);

      ////////////////////////////////////////
      // Load existing iothub description.  //
      ////////////////////////////////////////

      var iotHubDescription = client.iotHubResource.get(resourceGroup, name, _);

      if (!iotHubDescription) {
        throw notFoundError(resourceGroup, name);
      }

      ////////////////////////////////////////
      // Setting the properties.            //
      ////////////////////////////////////////

      iotHubDescription.sku.name = options.skuName;
      iotHubDescription.sku.capacity = Number(options.units);

      ////////////////////////////////////////
      // Issue the update.                  //
      ////////////////////////////////////////

      var progress = cli.interaction.progress(util.format($('Updating IoT hub %s'), name));
      var result;
      try {
        result = client.iotHubResource.createOrUpdate(resourceGroup, name, iotHubDescription, _);
      }
      finally {
        progress.end();
      }

      if (result) {
        showResource(result);
      }
    });

  var iotHubehcg = cli.category('iothub').category('ehconsumergroup')
    .description($('Commands to manage the event hub consumer groups of an IoT hub'));

  /**
   * List the Event Hub consumer groups of an IoT hub 
   */
  iotHubehcg.command('list [resource-group] [name]')
    .description($('List the event hub consumer groups of an IoT hub'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-e --eh-endpoint-type <ehEndpointType>', $('The type of the event hub endpoint. One of events, operationsMonitoringEvents'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      if (!options.ehEndpointType) {
        return cli.missingArgument('eh-endpoint-type');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting the event hub consumer groups.'));
      var ehConsumerGroups;

      try {
        ehConsumerGroups = client.iotHubResource.listEventHubConsumerGroups(resourceGroup, name, options.ehEndpointType, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(ehConsumerGroups, function (ehConsumerGroups) {
        if (ehConsumerGroups.length === 0) {
          log.info($('No event hub consumer groups found.'));
          return;
        }

        ////////////////////////////////////////
        // Output the result.                 //
        ////////////////////////////////////////

        log.table(ehConsumerGroups, function (row, ehConsumerGroup) {
          row.cell($('EH Consumer Group Name'), ehConsumerGroup);
        });
      });
    });

  /**
   * Add an Event Hub consumer groups for an IoT hub 
   */
  iotHubehcg.command('create [resource-group] [name]')
    .description($('Add an Event Hub consumer groups for an IoT hub'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-e --eh-endpoint-type <ehEndpointType>', $('The type of the event hub endpoint. One of events, operationsMonitoringEvents'))
    .option('-c --eh-consumer-group <ehConsumerGroup>', $('The name of the event hub consumer group'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      if (!options.ehEndpointType) {
        return cli.missingArgument('eh-endpoint-type');
      }

      if (!options.ehConsumerGroup) {
        return cli.missingArgument('ehConsumerGroup');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Creating an event hub consumer group.'));
      var ehConsumerGroups;

      try {
        ehConsumerGroups = client.iotHubResource.createEventHubConsumerGroup(resourceGroup, name, options.ehEndpointType, options.ehConsumerGroup, _);
      } finally {
        progress.end();
      }
    });


  /**
   * Delete an Event Hub consumer group for an IoT hub 
   */
  iotHubehcg.command('delete [resource-group] [name]')
    .description($('Delete an Event Hub consumer group for an IoT hub'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-e --eh-endpoint-type <ehEndpointType>', $('The type of the event hub endpoint. One of events, operationsMonitoringEvents'))
    .option('-c --eh-consumer-group <ehConsumerGroup>', $('The name of the event hub consumer group'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      if (!options.ehEndpointType) {
        return cli.missingArgument('--eh-endpoint-type');
      }

      if (!options.ehConsumerGroup) {
        return cli.missingArgument('ehConsumerGroup');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Deleting an event hub consumer group.'));
      var ehConsumerGroups;

      try {
        ehConsumerGroups = client.iotHubResource.deleteEventHubConsumerGroup(resourceGroup, name, options.ehEndpointType, options.ehConsumerGroup, _);
      } finally {
        progress.end();
      }
    });

  var iotHubkeys = cli.category('iothub').category('key')
    .description($('Commands to manage the keys of an IoT hub'));

  /**
   * List all keys for an IoT hub 
   */
  iotHubkeys.command('list [resource-group] [name]')
    .description($('List all keys of an IoT hub'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting the keys.'));
      var keys;

      try {
        keys = client.iotHubResource.listKeys(resourceGroup, name, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(keys, function (keys) {
        if (keys.length === 0) {
          log.info($('No keys found.'));
          return;
        }

        ////////////////////////////////////////
        // Output the result.                 //
        ////////////////////////////////////////

        log.table(keys, function (row, key) {
          row.cell($('KeyName'), key.keyName);
          row.cell($('Primary Key'), key.primaryKey);
          row.cell($('Secondary Key'), key.secondaryKey);
          row.cell($('Rights'), key.rights);
        });
      });
    });

  /**
   * Show the properties of one key for an IoT hub 
   */
  iotHubkeys.command('show [resource-group] [name]')
    .description($('Show the properties of one key for an IoT hub'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-k --key-name <keyName>', $('The name of a key in IoT hub'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      if (!options.keyName) {
        return cli.missingArgument('key-name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting the keys.'));
      var key;

      try {
        key = client.iotHubResource.getKeysForKeyName(resourceGroup, name, options.keyName, _);
      } finally {
        progress.end();
      }

      if (key === null) {
        log.info($('Key not found.'));
        return;
      }

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////

      cli.interaction.formatOutput(key, function (key) {
        log.info($('KeyName       : ' + key.keyName));
        log.info($('Primary Key   : ' + key.primaryKey));
        log.info($('Secondary Key : ' + key.secondaryKey));
        log.info($('Rights        : ' + key.rights));
      });
    });

  /**
   * Create keys for an IoT hub 
   */
  iotHubkeys.command('create [resource-group] [name]')
    .description($('Create keys for an IoT hub'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-k --key-name <keyName>', $('The name of a key in IoT hub'))
    .option('-p --primary-key <primaryKey>', $('The primary key value for the specified keyName'))
    .option('-e --secondary-key <secondaryKey>', $('The secondary key value for the specified keyName'))
    .option('-r --rights <rights>', $('The rights for the specified keyName. One ore more of the following to be specified as a comma separated value list' +
      'RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      if (!options.keyName) {
        return cli.missingArgument('key-name');
      }

      if (!options.primaryKey) {
        return cli.missingArgument('primaryKey');
      }

      if (!options.secondaryKey) {
        return cli.missingArgument('secondaryKey');
      }

      if (!options.rights) {
        return cli.missingArgument('rights');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);

      ////////////////////////////////////////
      // Load existing iothub description.  //
      ////////////////////////////////////////

      var iotHubDescription = client.iotHubResource.get(resourceGroup, name, _);

      if (!iotHubDescription) {
        throw notFoundError(resourceGroup, name);
      }

      var progressGetKeys = cli.interaction.progress($('Getting the keys.'));
      var authorizationPolicies;

      try {
        authorizationPolicies = client.iotHubResource.listKeys(resourceGroup, name, _);
      } finally {
        progressGetKeys.end();
      }

      ////////////////////////////////////////
      // Setting the properties.            //
      ////////////////////////////////////////

      var keyProperties = {
        keyName: options.keyName,
        primaryKey: options.primaryKey,
        secondaryKey: options.secondaryKey,
        rights: options.rights
      };

      authorizationPolicies.push(keyProperties);
      iotHubDescription.properties.authorizationPolicies = authorizationPolicies;

      ////////////////////////////////////////
      // Issue the update.                  //
      ////////////////////////////////////////

      var progress = cli.interaction.progress(util.format($('Updating IoT hub %s'), name));
      var result;
      try {
        result = client.iotHubResource.createOrUpdate(resourceGroup, name, iotHubDescription, _);
      } finally {
        progress.end();
      }

      if (result) {
        showResource(result);
      }

    });

  /**
   * Delete keys for an IoT hub 
   */
  iotHubkeys.command('delete [resource-group] [name]')
    .description($('Delete keys for an IoT hub'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-k --key-name <keyName>', $('The name of a key in IoT hub to delete. The first match for a key with this name will be deleted. The same command can be executed again to delete more keys.'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      if (!options.keyName) {
        return cli.missingArgument('key-name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);

      ////////////////////////////////////////
      // Load existing iothub description.  //
      ////////////////////////////////////////

      var iotHubDescription = client.iotHubResource.get(resourceGroup, name, _);

      if (!iotHubDescription) {
        throw notFoundError(resourceGroup, name);
      }

      var progressGetKeys = cli.interaction.progress($('Getting the keys.'));
      var authorizationPolicies;

      try {
        authorizationPolicies = client.iotHubResource.listKeys(resourceGroup, name, _);
      } finally {
        progressGetKeys.end();
      }

      ////////////////////////////////////////////////////////////
      // Verify that the key is not already present.            //
      ////////////////////////////////////////////////////////////

      var index = -1;

      var arrayLength = authorizationPolicies.length;
      for (var i = 0; i < arrayLength; i++) {
        if (authorizationPolicies[i].keyName == options.keyName) {
          index = i;
          break;
        }
      }

      if (index <= -1) {
        throw new Error(util.format($('Key not found: %s'), options.keyName));
      } else {
        authorizationPolicies.splice(index, 1);
      }

      ////////////////////////////////////////
      // Setting the properties.            //
      ////////////////////////////////////////

      iotHubDescription.properties.authorizationPolicies = authorizationPolicies;

      ////////////////////////////////////////
      // Issue the update.                  //
      ////////////////////////////////////////

      var progress = cli.interaction.progress(util.format($('Updating IoT hub %s'), name));
      var result;
      try {
        result = client.iotHubResource.createOrUpdate(resourceGroup, name, iotHubDescription, _);
      } finally {
        progress.end();
      }

      if (result) {
        showResource(result);
      }

    });

  var iotHubOpMon = cli.category('iothub').category('opmon')
    .description($('Commands to manage the operations monitoring related properties of an IoT hub'));

  /**
   * Show the operations monitoring properties for an IoT hub 
   */
  iotHubOpMon.command('show [resource-group] [name]')
    .description($('Show the operations monitoring properties of an IoT hub'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting the operations monitoring properties.'));
      var iothubDescription;

      try {
        iothubDescription = client.iotHubResource.get(resourceGroup, name, _);
      } finally {
        progress.end();
      }

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////

      if (iothubDescription) {
        cli.interaction.formatOutput(iothubDescription.properties.operationsMonitoringProperties, function (iothubOpMonProperties) {
          log.info($('Operations Monitoring properties'));
          log.info(JSON.stringify(iothubOpMonProperties, null, 2));
        });
      }

    });

  /**
   * Update the operations monitoring properties for an IoT hub 
   */
  iotHubOpMon.command('set [resource-group] [name]')
    .description($('Update the operations monitoring properties for an IoT hub'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IotHub'))
    .option('-c --opmon-category <opmonCategory>', $('The name of the operations monitoring category. One of Connections, DeviceTelemetry, C2DCommands, DeviceIdentityOperations, FileUploadOperations'))
    .option('-l --diagnostic-level <diagnosticLevel>', $('The diagnostic level. None, Error, Information.'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      if (!options.opmonCategory) {
        return cli.missingArgument('opmonCategory');
      }

      if (!options.diagnosticLevel) {
        return cli.missingArgument('diagnosticLevel');
      }

      if (options.opmonCategory && OPERATIONSMONITORINGCATEGORIES.indexOf(options.opmonCategory) < 0) {
        throw new Error(util.format($('Invalid value specified for diagnostic category. Please specify one of : %s', OPERATIONSMONITORINGCATEGORIES.join(', '))));
      }

      if (options.diagnosticLevel && OPERATIONSMONITORINGDIAGLEVELS.indexOf(options.diagnosticLevel) < 0) {
        throw new Error(util.format($('Invalid value specified for diagnostic level. Please specify one of : %s', OPERATIONSMONITORINGDIAGLEVELS.join(', '))));
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting the current operations monitoring properties.'));

      ////////////////////////////////////////
      // Load existing iothub description.  //
      ////////////////////////////////////////

      var iotHubDescription = client.iotHubResource.get(resourceGroup, name, _);

      if (!iotHubDescription) {
        throw notFoundError(resourceGroup, name);
      }

      ////////////////////////////////////////
      // Setting the properties.            //
      ////////////////////////////////////////
      iotHubDescription.properties.operationsMonitoringProperties.events[options.opmonCategory] = options.diagnosticLevel;

      ////////////////////////////////////////
      // Issue the update.                  //
      ////////////////////////////////////////

      var result;
      progress = cli.interaction.progress(util.format($('Updating operations monitoring properties of IoT hub %s'), name));

      try {
        result = client.iotHubResource.createOrUpdate(resourceGroup, name, iotHubDescription, _);
      } finally {
        progress.end();
      }

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////

      if (result) {
        cli.interaction.formatOutput(result.properties.operationsMonitoringProperties, function (result) {
          log.info($('Operations Monitoring properties'));
          log.info(JSON.stringify(result, null, 2));
        });
      }

    });

  var iotHubJob = cli.category('iothub').category('job')
    .description($('Commands to manage the jobs of an IoT hub'));

  /**
   * List the jobs for an IoT hub 
   */
  iotHubJob.command('list [resource-group] [name]')
    .description($('List the jobs for an IoT hub'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting the list of jobs.'));
      var jobs;

      try {
        jobs = client.iotHubResource.listJobs(resourceGroup, name, _);
      } finally {
        progress.end();
      }

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////
      cli.interaction.formatOutput(jobs, function (jobs) {
        if (jobs.length === 0) {
          log.info($('No jobs found.'));
          return;
        }

        log.table(jobs, function (row, job) {
          row.cell($('JobId'), job.jobId);
          row.cell($('JobType'), job.type);
          row.cell($('StartTimeUtc'), job.startTimeUtc);
          row.cell($('EndTimeUtc'), job.endTimeUtc);
          row.cell($('Status'), job.status);
          row.cell($('StatusMessage'), job.statusMessage);
          row.cell($('FailureReason'), job.failureReason);
        });
      });
    });

  /**
   * Show the properties of a job for an IoT hub 
   */
  iotHubJob.command('show [resource-group] [name]')
    .description($('Show the properties of a job for an IoT hub'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-j --job-id <jobId>', $('The Job identifier'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      if (!options.jobId) {
        return cli.missingArgument('jobId');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting the job properties.'));
      var job;

      try {
        job = client.iotHubResource.getJob(resourceGroup, name, options.jobId, _);
      } finally {
        progress.end();
      }

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////
      if (job) {
        cli.interaction.formatOutput(job, function (job) {
          console.log('DeviceId : ' + job.deviceId);
          console.log('JobId : ' + job.jobId);
          console.log('JobType : ' + job.type);
          console.log('StartTimeUtc : ' + job.startTimeUtc);
          console.log('EndTimeUtc : ' + job.endTimeUtc);
          console.log('Status : ' + job.status);
          console.log('StatusMessage : ' + job.statusMessage);
          console.log('FailureReason : ' + job.failureReason);
        });
      }
    });

  var iotHubDevice = cli.category('iothub').category('device')
    .description($('Commands to manage the devices of an IoT hub'));

  /**
   * Export the devices of an IoT hub 
   */
  iotHubDevice.command('export [resource-group] [name]')
    .description($('Export the devices of an IoT hub'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-e --export-blob-container-uri <exportBlobContainerUri>', $('The container Uri to export the devices to'))
    .option('-k --exclude-keys [excludeKeys]', $('The flag indicating if the keys should also be exported or not. One of true, false. Default : true'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      if (!options.exportBlobContainerUri) {
        return cli.missingArgument('exportBlobContainerUri');
      }

      var excludeKeys = true;
      if (options.excludeKeys == 'false') {
        excludeKeys = false;
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Exporting the devices.'));
      var job;

      var exportJobParams = {
        exportBlobContainerUri: options.exportBlobContainerUri,
        excludeKeys: excludeKeys
      };

      try {
        job = client.iotHubResource.exportDevices(resourceGroup, name, exportJobParams, _);
      } finally {
        progress.end();
      }

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////
      if (job) {
        cli.interaction.formatOutput(job, function (job) {
          console.log('JobId : ' + job.jobId);
          console.log('JobType : ' + job.type);
          console.log('StartTimeUtc : ' + job.startTimeUtc);
          console.log('EndTimeUtc : ' + job.endTimeUtc);
          console.log('Status : ' + job.status);
          console.log('StatusMessage : ' + job.statusMessage);
          console.log('FailureReason : ' + job.failureReason);
        });
      }
    });

  /**
   * Import the devices of an IoT hub 
   */
  iotHubDevice.command('import [resource-group] [name]')
    .description($('Import the devices of an IoT hub'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-i --input-blob-container-uri <inputBlobContainerUri>', $('The container Uri from where devices will be imported'))
    .option('-o --output-blob-container-uri [outputBlobContainerUri]', $('The output container Uri which will be used to write some information related to the import job'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      if (!options.inputBlobContainerUri) {
        return cli.missingArgument('inputBlobContainerUri');
      }

      if (!options.outputBlobContainerUri) {
        return cli.missingArgument('outputBlobContainerUri');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Importing the devices.'));
      var job;

      var importJobParams = {
        inputBlobContainerUri: options.inputBlobContainerUri,
        outputBlobContainerUri: options.outputBlobContainerUri
      };

      try {
        job = client.iotHubResource.importDevices(resourceGroup, name, importJobParams, _);
      } finally {
        progress.end();
      }

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////
      if (job) {
        cli.interaction.formatOutput(job, function (job) {
          console.log('JobId : ' + job.jobId);
          console.log('JobType : ' + job.type);
          console.log('StartTimeUtc : ' + job.startTimeUtc);
          console.log('EndTimeUtc : ' + job.endTimeUtc);
          console.log('Status : ' + job.status);
          console.log('StatusMessage : ' + job.statusMessage);
          console.log('FailureReason : ' + job.failureReason);
        });
      }
    });

  var iotHubConnectionString = cli.category('iothub').category('connectionstring')
    .description($('Command to get the connection string of an IoT hub'));

  /**
   * Get an Iot Hub Connection String
   */
  iotHubConnectionString.command('show [resource-group] [name]')
    .description($('Get an IoT hub connection string'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group.'))
    .option('-n --name <name>', $('The name of the IoT hub.'))
    .option('-k --key-name <keyName>', $('The name of the key. Default : The first key in the list of keys retrieved for the iothub'))
    .option('-s --subscription [subscription]', $('The subscription identifier.'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }


      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting IoT hub connection string '));
      var result;

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////

      try {
        result = client.iotHubResource.get(resourceGroup, name, _);
      } finally {
        progress.end();
      }


      var authorizationPolicies;

      try {
        authorizationPolicies = client.iotHubResource.listKeys(resourceGroup, name, _);
      } finally {
        progress.end();
      }

      ////////////////////////////////////////////////////////////
      // Verify that the key is not already present.            //
      ////////////////////////////////////////////////////////////

      var index = -1;

      var arrayLength = authorizationPolicies.length;
     
      if (options.keyName) {
        for (var i = 0; i < arrayLength; i++) {
          if (authorizationPolicies[i].keyName == options.keyName) {
            index = i;
            break;
          }
        }
      }
      else {
        index = 0;
      }

      if (index <= -1) {
        if (options.keyName) {
          throw new Error(util.format($('Key not found: %s'), options.keyName));
        }
        else {
          throw new Error('No keys found for iothub');
        }
      } 


      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////
      
      var connectionstrings = {
        primary: 'HostName=' + result.properties.hostName + ';SharedAccessKeyName=' + authorizationPolicies[index].keyName + ';SharedAccessKey=' + authorizationPolicies[index].primaryKey,
        secondary: 'HostName=' + result.properties.hostName + ';SharedAccessKeyName=' + authorizationPolicies[index].keyName + ';SharedAccessKey=' + authorizationPolicies[index].secondaryKey
      };

      cli.interaction.formatOutput(connectionstrings, function (connectionstrings) {
        log.data('Primary ConnectionString : ' + connectionstrings.primary);
        log.data('Secondary ConnectionString : ' + connectionstrings.secondary);
      });

    });

  var iotHubRouting = cli.category('iothub').category('routing')
    .description($('Commands to manage the routing properties of an IoT hub'));

  /**
   * List the IoT hub Routing Properties
   */
  iotHubRouting.command('list [resource-group] [name]')
    .description($('List the IoT hub routing properties'))
    .usage('<resourceGroup> <name> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .fileRelatedOption('-f --output-file [output-file]', $('the path to the JSON-formatted output routing properties file in the file system'))
    .execute(function (resourceGroup, name, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }
      
      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting the routing properties.'));
      var iothubDescription;

      ////////////////////////////////////////
      // Load existing iothub description.  //
      ////////////////////////////////////////
      try {
        iothubDescription = client.iotHubResource.get(resourceGroup, name, _);
      } finally {
        progress.end();
      }

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////
     
      if (iothubDescription) { 
        if (options.outputFile) {
          try {
            var fs = require('fs');
            fs.writeFileSync(options.outputFile, JSON.stringify(iothubDescription.properties.routing, null, 2));
          } catch (e) {
		    log.error('Could not write to file ' + options.outputFile + ' Error Details :');
			throw e;
		  }
        }

        cli.interaction.formatOutput(iothubDescription.properties.routing, function (routing) {
		    // Endpoints
			if (routing.endpoints.serviceBusQueues.length !== 0)
			{
			    log.data('');
				log.table(routing.endpoints.serviceBusQueues, function (row, queue) {
				row.cell($('Queue Name'), queue.name);
				});
			}

			if (routing.endpoints.serviceBusTopics.length !== 0)
			{
			    log.data('');
				log.table(routing.endpoints.serviceBusTopics, function (row, topic) {
					row.cell($('Topic Name'), topic.name);
				});
			}

			if (routing.endpoints.eventHubs.length !== 0)
			{
			    log.data('');
				log.table(routing.endpoints.eventHubs, function (row, eventHub) {
					row.cell($('EventHub Name'), eventHub.name);
				});
			}

			// Routes
			if (routing.routes.length !== 0)
			{			
			    log.data('');
				log.table(routing.routes, function (row, route) {
					row.cell($('Route Name'), route.name);
					row.cell($('Source'), route.source);
					row.cell($('Condition'), route.condition);
					row.cell($('Endpoint'), route.endpointNames);
					row.cell($('IsEnabled'), route.isEnabled);
				});
			}

			// Fallback Route
			log.data('');
			log.data($('FallbackRoute'));
			log.data($('Source:        '), routing.fallbackRoute.source);
			log.data($('Condition:     '), routing.fallbackRoute.condition);
			log.data($('Endpoint:      '), routing.fallbackRoute.endpointNames[0]);
			log.data($('IsEnabled:     '), routing.fallbackRoute.isEnabled);
			log.data('');
        });
      }
    });

  /**
   * Set the IoT hub routing rules
   */
  iotHubRouting.command('set [resource-group] [name] [inputFile]')
    .description($('set the IoT hub routing properties'))
    .usage('<resourceGroup> <name> <inputFile> [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IoT hub'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .fileRelatedOption('-f --input-file <inputFile>', $('the path to the JSON-formatted input routing properties file in the file system'))
    .execute(function (resourceGroup, name, inputFile, options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!resourceGroup) {
        return cli.missingArgument('resource-group');
      }

      if (!name) {
        return cli.missingArgument('name');
      }

      if (!inputFile) {
        return cli.missingArgument('inputFile');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting the routing properties.'));
      var iothubDescription;

      ////////////////////////////////////////
      // Load existing iothub description.  //
      ////////////////////////////////////////
      try {
        iothubDescription = client.iotHubResource.get(resourceGroup, name, _);
      } finally {
        progress.end();
      }

      ////////////////////////////////////////
      // Setting the properties.            //
      ////////////////////////////////////////

      if (iothubDescription) {
	    try {
          var fs = require('fs');
          var jsonFile = fs.readFileSync(inputFile);
          iothubDescription.properties.routing= JSON.parse(utils.stripBOM(jsonFile));
		} catch (e) {
		  log.error('Could not read from file ' + options.outputFile + ' Error Details :');
		  throw e;
		}
      }
      
      ////////////////////////////////////////
      // Issue the update.                  //
      ////////////////////////////////////////

      progress = cli.interaction.progress(util.format($('Updating IoT hub %s'), name));
      var result;
      try {
        result = client.iotHubResource.createOrUpdate(resourceGroup, name, iothubDescription, _);
      } finally {
        progress.end();
      }

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////

      if (result) {
        showResource(result);
      }
    });

  function notFoundError(resourceGroup, name) { 
    var msg;
    if (resourceGroup) {
      msg = util.format($('IoT hub not found on resource group %s: %s'), resourceGroup, name);
    } else {
      msg = util.format($('IoT hub not found: %s'), name);
    }

    throw new Error(msg);
  }

  function showResource(resource, showDetail) {
    cli.interaction.formatOutput(resource, function (resource) {
      var resourceInformation = resourceUtils.getResourceInformation(resource.id);
      log.data($('Id:       '), resource.id);
      log.data($('Name:     '), resourceInformation.resourceName || resource.name);
      log.data($('Type:     '), resourceInformation.resourceType || resource.type);
      log.data($('Location: '), resource.location);
      log.data($('Sku:      '), resource.sku.name);
      log.data($('Units:    '), resource.sku.capacity);
      log.data($('Tags:     '), tagUtils.getTagsInfo(resource.tags));
      log.data('');

      if (showDetail) {
        log.data($('Properties:'));
        cli.interaction.logEachData($('Property'), resource.properties);
      }
    });
  }
};
