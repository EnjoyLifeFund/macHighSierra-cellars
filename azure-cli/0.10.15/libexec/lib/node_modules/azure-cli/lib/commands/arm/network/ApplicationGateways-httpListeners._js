/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var generatorUtils = require('../../../util/generatorUtils');
var resourceUtils = require('../resource/resourceUtils');
var util = require('util');
var validation = require('../../../util/validation');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;

exports.init = function (cli) {
  var network = cli.category('network')
    .description($('Commands to manage network resources'));
  var applicationGateways = network.category('application-gateway')
    .description($('Commands to manage application gateways'));
  var httpListeners = applicationGateways.category('http-listener')
    .description($('Commands to manage http listeners'));

  httpListeners.command('create [resource-group] [gateway-name] [name]')
    .description($('Create a http listeners'))
    .usage('[options] <resource-group> <gateway-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-w, --gateway-name <gateway-name>', $('the gateway name'))
    .option('-n, --name <name>', $('the name of the http listener'))
    .option('-i, --frontend-ip-name [frontend-ip-name]', $('sets frontend ip configuration. This' +
      '\n     option is mutually exclusive with --frontend-ip-id'))
    .option('-d, --frontend-ip-id [frontend-ip-id]', $('sets frontend ip configuration. This' +
      '\n     option is mutually exclusive with --frontend-ip-name'))
    .option('-p, --frontend-port-name [frontend-port-name]', $('sets frontend port. This option is' +
      '\n     mutually exclusive with --frontend-port-id'))
    .option('-e, --frontend-port-id [frontend-port-id]', $('sets frontend port. This option is' +
      '\n     mutually exclusive with --frontend-port-name'))
    .option('-r, --protocol [protocol]', $('protocol'))
    .option('-o, --host-name [host-name]', $('host name of HTTP listener'))
    .option('-c, --ssl-cert [ssl-cert]', $('sets ssl certificate. This option is' +
      '\n     mutually exclusive with --ssl-cert-id'))
    .option('-f, --ssl-cert-id [ssl-cert-id]', $('sets ssl certificate. This option is' +
      '\n     mutually exclusive with --ssl-cert'))
    .option('--nowait', $('do not wait for the operation to complete. Returns as soon as the intial request is received by the server'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, gatewayName, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      gatewayName = cli.interaction.promptIfNotGiven($('gateway name : '), gatewayName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var index = 0;
      var applicationGateway;
      var progress = cli.interaction.progress(util.format($('Looking up the application gateway "%s"'), gatewayName));
      try {
        applicationGateway = networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          applicationGateway = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!applicationGateway) {
        throw new Error(util.format($('application gateway with name "%s" not found in the resource group "%s"'), gatewayName, resourceGroup));
      }

      if(utils.findFirstCaseIgnore(applicationGateway.httpListeners, {name: name})) {
        throw new Error(util.format($('http listeners with name "%s" already exists in the "%s"'), name, gatewayName));
      }

      var parameters = {};
      if(!parameters.httpListeners) {
        parameters.httpListeners = [];
      }
      if(!parameters.httpListeners[index]) {
        parameters.httpListeners[index] = {};
      }
      if(!parameters.httpListeners[index].frontendIPConfiguration) {
        parameters.httpListeners[index].frontendIPConfiguration = {};
      }
      if(options.frontendIpId) {
        if(options.frontendIpName) {
          cli.output.warn($('--frontend-ip-name parameter will be ignored because --frontend-ip-id and --frontend-ip-name are mutually exclusive'));
        }
        parameters.httpListeners[index].frontendIPConfiguration.id = options.frontendIpId;
      } else if(options.frontendIpName) {
        var referredfrontendIPConfiguration = utils.findFirstCaseIgnore(applicationGateway.frontendIPConfigurations, {name: options.frontendIpName});
        if(!referredfrontendIPConfiguration) {
          throw new Error(util.format($('No frontend ip configuration with name "%s" found'), options.frontendIpName));
        }
        var idContainerfrontendIPConfiguration = referredfrontendIPConfiguration;
        parameters.httpListeners[index].frontendIPConfiguration.id = idContainerfrontendIPConfiguration.id;
      }

      if(!parameters.httpListeners[index].frontendPort) {
        parameters.httpListeners[index].frontendPort = {};
      }
      if(options.frontendPortId) {
        if(options.frontendPortName) {
          cli.output.warn($('--frontend-port-name parameter will be ignored because --frontend-port-id and --frontend-port-name are mutually exclusive'));
        }
        parameters.httpListeners[index].frontendPort.id = options.frontendPortId;
      } else if(options.frontendPortName) {
        var referredfrontendPort = utils.findFirstCaseIgnore(applicationGateway.frontendPorts, {name: options.frontendPortName});
        if(!referredfrontendPort) {
          throw new Error(util.format($('No frontend port with name "%s" found'), options.frontendPortName));
        }
        var idContainerfrontendPort = referredfrontendPort;
        parameters.httpListeners[index].frontendPort.id = idContainerfrontendPort.id;
      }

      if(options.protocol) {
        parameters.httpListeners[index].protocol = validation.isIn(options.protocol, ['Http', 'Https'], '--protocol');
      }

      if(options.hostName) {
        parameters.httpListeners[index].hostName = options.hostName;
      }

      if(!parameters.httpListeners[index].sslCertificate) {
        parameters.httpListeners[index].sslCertificate = {};
      }
      if(options.sslCertId) {
        if(options.sslCert) {
          cli.output.warn($('--ssl-cert parameter will be ignored because --ssl-cert-id and --ssl-cert are mutually exclusive'));
        }
        parameters.httpListeners[index].sslCertificate.id = options.sslCertId;
      } else if(options.sslCert) {
        var referredsslCertificate = utils.findFirstCaseIgnore(applicationGateway.sslCertificates, {name: options.sslCert});
        if(!referredsslCertificate) {
          throw new Error(util.format($('No ssl certificate with name "%s" found'), options.sslCert));
        }
        var idContainersslCertificate = referredsslCertificate;
        parameters.httpListeners[index].sslCertificate.id = idContainersslCertificate.id;
      }

      parameters.httpListeners[index].name = name;
      applicationGateway.httpListeners.push(parameters.httpListeners[index]);

      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Creating http listeners in "%s"'), gatewayName));
      try {
        applicationGateway = networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, gatewayName, applicationGateway, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(applicationGateway, generatorUtils.traverse);
    });

  httpListeners.command('set [resource-group] [gateway-name] [name]')
    .description($('Update a http listeners'))
    .usage('[options] <resource-group> <gateway-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-w, --gateway-name <gateway-name>', $('the gateway name'))
    .option('-n, --name <name>', $('the name of the http listener'))
    .option('-i, --frontend-ip-name [frontend-ip-name]', $('sets frontend ip configuration. This' +
      '\n     option is mutually exclusive with --frontend-ip-id'))
    .option('-d, --frontend-ip-id [frontend-ip-id]', $('sets frontend ip configuration. This' +
      '\n     option is mutually exclusive with --frontend-ip-name'))
    .option('-p, --frontend-port-name [frontend-port-name]', $('sets frontend port. This option is' +
      '\n     mutually exclusive with --frontend-port-id'))
    .option('-e, --frontend-port-id [frontend-port-id]', $('sets frontend port. This option is' +
      '\n     mutually exclusive with --frontend-port-name'))
    .option('-r, --protocol [protocol]', $('protocol'))
    .option('-o, --host-name [host-name]', $('host name of HTTP listener'))
    .option('-c, --ssl-cert [ssl-cert]', $('sets ssl certificate. This option is' +
      '\n     mutually exclusive with --ssl-cert-id'))
    .option('-f, --ssl-cert-id [ssl-cert-id]', $('sets ssl certificate. This option is' +
      '\n     mutually exclusive with --ssl-cert'))
    .option('--nowait', $('do not wait for the operation to complete. Returns as soon as the intial request is received by the server'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, gatewayName, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      gatewayName = cli.interaction.promptIfNotGiven($('gateway name : '), gatewayName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var applicationGateway;
      var progress = cli.interaction.progress(util.format($('Looking up the application gateway "%s"'), gatewayName));
      try {
        applicationGateway = networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          applicationGateway = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!applicationGateway) {
        throw new Error(util.format($('application gateway with name "%s" not found in the resource group "%s"'), gatewayName, resourceGroup));
      }

      var httpListener = utils.findFirstCaseIgnore(applicationGateway.httpListeners, {name: name});
      var index = utils.indexOfCaseIgnore(applicationGateway.httpListeners, {name: name});
      if(!httpListener) {
        throw new Error(util.format($('http listeners with name "%s" not found in the "%s"'), name, gatewayName));
      }

      var parameters = applicationGateway;
      if(!parameters.httpListeners) {
        parameters.httpListeners = [];
      }
      if(!parameters.httpListeners[index]) {
        parameters.httpListeners[index] = {};
      }
      if(!parameters.httpListeners[index].frontendIPConfiguration) {
        parameters.httpListeners[index].frontendIPConfiguration = {};
      }
      if(options.frontendIpId) {
        if(options.frontendIpName) {
          cli.output.warn($('--frontend-ip-name parameter will be ignored because --frontend-ip-id and --frontend-ip-name are mutually exclusive'));
        }
        parameters.httpListeners[index].frontendIPConfiguration.id = options.frontendIpId;
      } else if(options.frontendIpName) {
        var referredfrontendIPConfiguration = utils.findFirstCaseIgnore(applicationGateway.frontendIPConfigurations, {name: options.frontendIpName});
        if(!referredfrontendIPConfiguration) {
          throw new Error(util.format($('No frontend ip configuration with name "%s" found'), options.frontendIpName));
        }
        var idContainerfrontendIPConfiguration = referredfrontendIPConfiguration;
        parameters.httpListeners[index].frontendIPConfiguration.id = idContainerfrontendIPConfiguration.id;
      }

      if(!parameters.httpListeners[index].frontendPort) {
        parameters.httpListeners[index].frontendPort = {};
      }
      if(options.frontendPortId) {
        if(options.frontendPortName) {
          cli.output.warn($('--frontend-port-name parameter will be ignored because --frontend-port-id and --frontend-port-name are mutually exclusive'));
        }
        parameters.httpListeners[index].frontendPort.id = options.frontendPortId;
      } else if(options.frontendPortName) {
        var referredfrontendPort = utils.findFirstCaseIgnore(applicationGateway.frontendPorts, {name: options.frontendPortName});
        if(!referredfrontendPort) {
          throw new Error(util.format($('No frontend port with name "%s" found'), options.frontendPortName));
        }
        var idContainerfrontendPort = referredfrontendPort;
        parameters.httpListeners[index].frontendPort.id = idContainerfrontendPort.id;
      }

      if(options.protocol) {
        parameters.httpListeners[index].protocol = validation.isIn(options.protocol, ['Http', 'Https'], '--protocol');
      }

      if(options.hostName) {
        parameters.httpListeners[index].hostName = options.hostName;
      }

      if(!parameters.httpListeners[index].sslCertificate) {
        parameters.httpListeners[index].sslCertificate = {};
      }
      if(options.sslCertId) {
        if(options.sslCert) {
          cli.output.warn($('--ssl-cert parameter will be ignored because --ssl-cert-id and --ssl-cert are mutually exclusive'));
        }
        parameters.httpListeners[index].sslCertificate.id = options.sslCertId;
      } else if(options.sslCert) {
        var referredsslCertificate = utils.findFirstCaseIgnore(applicationGateway.sslCertificates, {name: options.sslCert});
        if(!referredsslCertificate) {
          throw new Error(util.format($('No ssl certificate with name "%s" found'), options.sslCert));
        }
        var idContainersslCertificate = referredsslCertificate;
        parameters.httpListeners[index].sslCertificate.id = idContainersslCertificate.id;
      }

      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Updating http listeners in "%s"'), gatewayName));
      try {
        applicationGateway = networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, gatewayName, applicationGateway, _);
      } finally {
        progress.end();
      }
      cli.interaction.formatOutput(applicationGateway, generatorUtils.traverse);
    });

  httpListeners.command('delete [resource-group] [gateway-name] [name]')
    .description($('Delete a http listeners'))
    .usage('[options] <resource-group> <gateway-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-w, --gateway-name <gateway-name>', $('the gateway name'))
    .option('-n, --name <name>', $('the name of the http listener'))
    .option('--nowait', $('do not wait for the operation to complete. Returns as soon as the intial request is received by the server'))
    .option('-q, --quiet', $('quiet mode, do not ask for delete confirmation'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, gatewayName, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      gatewayName = cli.interaction.promptIfNotGiven($('gateway name : '), gatewayName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var applicationGateway;
      var progress = cli.interaction.progress(util.format($('Looking up the application gateway "%s"'), gatewayName));
      try {
        applicationGateway = networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          applicationGateway = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!applicationGateway) {
        throw new Error(util.format($('application gateway "%s" not found in the resource group "%s"'), gatewayName, resourceGroup));
      }

      var index = utils.indexOfCaseIgnore(applicationGateway.httpListeners, {name: name});
      if (index === -1) {
        throw new Error(util.format($('http listeners "%s" not found in the gatewayName "%s"'), name, applicationGateway.name));
      }

      if (!options.quiet && !cli.interaction.confirm(util.format($('Delete http listeners with name "%s" from "%s"? [y/n] '), name, gatewayName), _)) {
        return;
      }

      applicationGateway.httpListeners.splice(index, 1);
      progress = cli.interaction.progress('Deleting http listeners');
      try {
        applicationGateway = networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, gatewayName, applicationGateway, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(applicationGateway, generatorUtils.traverse);
    });

  httpListeners.command('show [resource-group] [gateway-name] [name]')
    .description($('Show a http listeners'))
    .usage('[options] <resource-group> <gateway-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-w, --gateway-name <gateway-name>', $('the gateway name'))
    .option('-n, --name <name>', $('the name of the http listener'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, gatewayName, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      gatewayName = cli.interaction.promptIfNotGiven($('gateway name : '), gatewayName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var applicationGateway;
      var progress = cli.interaction.progress(util.format($('Looking up the application gateway "%s"'), gatewayName));
      try {
        applicationGateway = networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          applicationGateway = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!applicationGateway) {
        throw new Error(util.format($('application gateway with name "%s" not found in the resource group "%s"'), gatewayName, resourceGroup));
      }

      var httpListener = utils.findFirstCaseIgnore(applicationGateway.httpListeners, {name: name});
      if(!httpListener) {
        cli.output.warn(util.format($('http listeners with name "%s" not found in the gatewayName "%s"'), name, applicationGateway.name));
      }

      cli.interaction.formatOutput(httpListener, generatorUtils.traverse);
    });

  httpListeners.command('list [resource-group] [gateway-name]')
    .description($('List http listeners'))
    .usage('[options] <resource-group> <gateway-name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-w, --gateway-name <gateway-name>', $('the gateway name'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, gatewayName, options, _) {
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var applicationGateway = null;
      var progress = cli.interaction.progress(util.format($('Looking up the application gateway "%s"'), gatewayName));
      try {
        applicationGateway = networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          applicationGateway = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if(!applicationGateway) {
        throw new Error(util.format($('application gateways with name "%s" not found in the resource group "%s"'), gatewayName, resourceGroup));
      }

      var items = applicationGateway.httpListeners;
      cli.interaction.formatOutput(items, function(items) {
        if (items.length === 0) {
          cli.output.warn($('No http listeners found'));
        } else {
          cli.output.table(items, function (row, item) {
            row.cell($('Name'), item.name);
            var resInfo = resourceUtils.getResourceInformation(item.id);
            row.cell($('Resource group'), resInfo.resourceGroup);
            row.cell($('Provisioning state'), item.provisioningState);
          });
        }
      });
    });
};
