/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var constants = require('./constants');
var generatorUtils = require('../../../util/generatorUtils');
var resourceUtils = require('../resource/resourceUtils');
var tagUtils = require('../tag/tagUtils');
var util = require('util');
var validation = require('../../../util/validation');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;

exports.init = function (cli) {
  var network = cli.category('network')
    .description($('Commands to manage network resources'));
  var expressRoutes = network.category('express-route')
    .description($('Commands to manage express routes'));
  var expressRouteCircuits = expressRoutes.category('circuit')
    .description($('Commands to manage circuits'));

  var defaultTier = 'Standard';
  var defaultFamily = 'MeteredData';
  var defaultBandwidthInMbps = '100';

  expressRouteCircuits.command('create [resource-group] [name] [location] [service-provider-name] [peering-location]')
    .description($('Create an express route circuit'))
    .usage('[options] <resource-group> <name> <location> <service-provider-name> <peering-location>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-n, --name <name>', $('the name of the express route circuit'))
    .option('-l, --location <location>', $('the location'))
    .option('-e, --sku-tier [sku-tier]', $('the tier of the SKU. Possible values' +
      '\n     are \'Standard\' and \'Premium\''))
    .option('-f, --sku-family [sku-family]', $('the family of the SKU. Possible values' +
      '\n     are: \'UnlimitedData\' and \'MeteredData\''))
    .option('-p, --service-provider-name <service-provider-name>', $('the serviceProviderName'))
    .option('-i, --peering-location <peering-location>', $('the peering location'))
    .option('-b, --bandwidth-in-mbps [bandwidth-in-mbps]', $('the BandwidthInMbps'))
    .option('-t, --tags [tags]', $(constants.help.tags.create))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, name, location, serviceProviderName, peeringLocation, options, _) {
      var useDefaults = true;
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
      options.location = cli.interaction.promptIfNotGiven($('location : '), location, _);
      options.serviceProviderName = cli.interaction.promptIfNotGiven($('service provider name : '), serviceProviderName, _);
      options.peeringLocation = cli.interaction.promptIfNotGiven($('peering location : '), peeringLocation, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var expressRouteCircuit;
      var progress = cli.interaction.progress(util.format($('Looking up the express route circuit "%s"'), name));
      try {
        expressRouteCircuit = networkManagementClient.expressRouteCircuits.get(resourceGroup, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          expressRouteCircuit = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (expressRouteCircuit) {
        throw new Error(util.format($('express route circuit with name "%s" already exists in the resource group "%s"'), name, resourceGroup));
      }

      var parameters = {};
      if(options.location) {
        parameters.location = options.location;
      }

      if(!parameters.sku) {
        parameters.sku = {};
      }
      if(options.skuTier) {
        parameters.sku.tier = validation.isIn(options.skuTier, ['Standard', 'Premium'], '--sku-tier');
      } else if(useDefaults) {
        parameters.sku.tier = defaultTier;
      }

      if(options.skuFamily) {
        parameters.sku.family = validation.isIn(options.skuFamily, ['UnlimitedData', 'MeteredData'], '--sku-family');
      } else if(useDefaults) {
        parameters.sku.family = defaultFamily;
      }

      if(!parameters.serviceProviderProperties) {
        parameters.serviceProviderProperties = {};
      }
      if(options.serviceProviderName) {
        parameters.serviceProviderProperties.serviceProviderName = options.serviceProviderName;
      }

      if(options.peeringLocation) {
        parameters.serviceProviderProperties.peeringLocation = options.peeringLocation;
      }

      if(options.bandwidthInMbps) {
        parameters.serviceProviderProperties.bandwidthInMbps = parseInt(options.bandwidthInMbps, 10);
      } else if(useDefaults) {
        parameters.serviceProviderProperties.bandwidthInMbps = parseInt(defaultBandwidthInMbps, 10);
      }

      if (parameters.sku.tier && parameters.sku.family) {
        parameters.sku.name = parameters.sku.tier + '_' + parameters.sku.family;
      }
      if(options.tags && utils.argHasValue(options.tags)) {
        tagUtils.appendTags(parameters, options);
      }

      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Creating express route circuit "%s"'), name));
      try {
        expressRouteCircuit = networkManagementClient.expressRouteCircuits.createOrUpdate(resourceGroup, name, parameters, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(expressRouteCircuit, generatorUtils.traverse);
    });

  expressRouteCircuits.command('set [resource-group] [name]')
    .description($('Update an express route circuit'))
    .usage('[options] <resource-group> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-n, --name <name>', $('the name of the express route circuit'))
    .option('-e, --sku-tier [sku-tier]', $('the tier of the SKU. Possible values' +
      '\n     are \'Standard\' and \'Premium\''))
    .option('-f, --sku-family [sku-family]', $('the family of the SKU. Possible values' +
      '\n     are: \'UnlimitedData\' and \'MeteredData\''))
    .option('-b, --bandwidth-in-mbps [bandwidth-in-mbps]', $('the BandwidthInMbps'))
    .option('-t, --tags [tags]', $(constants.help.tags.create))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, name, options, _) {
      var useDefaults = false;
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var expressRouteCircuit;
      var progress = cli.interaction.progress(util.format($('Looking up the express route circuit "%s"'), name));
      try {
        expressRouteCircuit = networkManagementClient.expressRouteCircuits.get(resourceGroup, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          expressRouteCircuit = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!expressRouteCircuit) {
        throw new Error(util.format($('express route circuit with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      var parameters = expressRouteCircuit;
      if(!parameters.sku) {
        parameters.sku = {};
      }
      if(options.skuTier) {
        parameters.sku.tier = validation.isIn(options.skuTier, ['Standard', 'Premium'], '--sku-tier');
      } else if(useDefaults) {
        parameters.sku.tier = defaultTier;
      }

      if(options.skuFamily) {
        parameters.sku.family = validation.isIn(options.skuFamily, ['UnlimitedData', 'MeteredData'], '--sku-family');
      } else if(useDefaults) {
        parameters.sku.family = defaultFamily;
      }

      if(options.bandwidthInMbps) {
        parameters.serviceProviderProperties.bandwidthInMbps = parseInt(options.bandwidthInMbps, 10);
      } else if(useDefaults) {
        parameters.serviceProviderProperties.bandwidthInMbps = parseInt(defaultBandwidthInMbps, 10);
      }

      if(options.tags && utils.argHasValue(options.tags)) {
        tagUtils.appendTags(parameters, options);
      }

      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Updating express route circuit "%s"'), name));
      try {
        expressRouteCircuit = networkManagementClient.expressRouteCircuits.createOrUpdate(resourceGroup, name, parameters, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(expressRouteCircuit, generatorUtils.traverse);
    });

  expressRouteCircuits.command('delete [resource-group] [name]')
    .description($('Delete an express route circuit'))
    .usage('[options] <resource-group> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-n, --name <name>', $('the name of the express route circuit'))
    .option('-q, --quiet', $('quiet mode, do not ask for delete confirmation'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var expressRouteCircuit;
      var progress = cli.interaction.progress(util.format($('Looking up the express route circuit "%s"'), name));
      try {
        expressRouteCircuit = networkManagementClient.expressRouteCircuits.get(resourceGroup, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          expressRouteCircuit = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!expressRouteCircuit) {
        throw new Error(util.format($('express route circuit with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      if (!options.quiet && !cli.interaction.confirm(util.format($('Delete express route circuit "%s"? [y/n] '), name), _)) {
        cli.output.info(util.format($('express route circuit "%s" was not deleted and still exists in the resource group "%s"'), name, resourceGroup));
        return;
      }

      progress = cli.interaction.progress(util.format($('Deleting express route circuit "%s"'), name));
      try {
        expressRouteCircuit = networkManagementClient.expressRouteCircuits.deleteMethod(resourceGroup, name, _);
        cli.output.info(util.format($('express route circuit "%s" was successfully deleted from resource group "%s"'), name, resourceGroup));
      } finally {
        progress.end();
      }
    });

  expressRouteCircuits.command('show [resource-group] [name]')
    .description($('Show an express route circuit'))
    .usage('[options] <resource-group> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-n, --name <name>', $('the name of the express route circuit'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var expressRouteCircuit;
      var progress = cli.interaction.progress(util.format($('Looking up the express route circuit "%s"'), name));
      try {
        expressRouteCircuit = networkManagementClient.expressRouteCircuits.get(resourceGroup, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          expressRouteCircuit = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!expressRouteCircuit) {
        cli.output.warn(util.format($('express route circuit with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      cli.interaction.formatOutput(expressRouteCircuit, generatorUtils.traverse);
    });

  expressRouteCircuits.command('list [resource-group]')
    .description($('List express route circuits'))
    .usage('[options] <resource-group>')
    .option('-g, --resource-group [resource-group]', $('the name of the resource group'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, options, _) {
      options.resourceGroup = resourceGroup;
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var expressRouteCircuit = null;
      var progress;
      try {
        if(typeof networkManagementClient.expressRouteCircuits.listAll != 'function') {
          resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
          progress = cli.interaction.progress($('Getting the express route circuits'));
          expressRouteCircuit = networkManagementClient.expressRouteCircuits.list(resourceGroup,  _);
        } else {
          if(options.resourceGroup) {
            progress = cli.interaction.progress($('Getting the express route circuits'));
            expressRouteCircuit = networkManagementClient.expressRouteCircuits.list(resourceGroup,  _);
          } else {
            progress = cli.interaction.progress($('Getting the express route circuits'));
            expressRouteCircuit = networkManagementClient.expressRouteCircuits.listAll(_);
          }
        }
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(expressRouteCircuit, function(expressRouteCircuit) {
        if (expressRouteCircuit.length === 0) {
          cli.output.warn($('No express route circuits found'));
        } else {
          cli.output.table(expressRouteCircuit, function (row, item) {
            row.cell($('Name'), item.name);
            row.cell($('Location'), item.location || '');
            var resInfo = resourceUtils.getResourceInformation(item.id);
            row.cell($('Resource group'), resInfo.resourceGroup);
            row.cell($('Provisioning state'), item.provisioningState);
          });
        }
      });
    });
};
