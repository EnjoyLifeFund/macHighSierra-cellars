/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var generatorUtils = require('../../../util/generatorUtils');
var resourceUtils = require('../resource/resourceUtils');
var util = require('util');
var validation = require('../../../util/validation');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;

exports.init = function (cli) {
  var network = cli.category('network')
    .description($('Commands to manage network resources'));
  var expressRoutes = network.category('express-route')
    .description($('Commands to manage express routes'));
  var expressRouteCircuitPeerings = expressRoutes.category('peering')
    .description($('Commands to manage express route circuit peerings'));

  var defaultPeeringType = 'AzurePrivatePeering';

  expressRouteCircuitPeerings.command('create [resource-group] [circuit-name] [name] [peer-asn] [primary-address-prefix] [secondary-address-prefix] [vlan-id]')
    .description($('Create an express route circuit peering'))
    .usage('[options] <resource-group> <circuit-name> <name> <peer-asn> <primary-address-prefix> <secondary-address-prefix> <vlan-id>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-c, --circuit-name <circuit-name>', $('the circuit name'))
    .option('-n, --name <name>', $('the name of the express route circuit peering'))
    .option('-y, --type [type]', $('the PeeringType. Possible values are:' +
      '\n     \'AzurePublicPeering\', \'AzurePrivatePeering\', and \'MicrosoftPeering\''))
    .option('-a, --azure-asn [azure-asn]', $('the Azure ASN'))
    .option('-p, --peer-asn <peer-asn>', $('the peer ASN'))
    .option('-r, --primary-address-prefix <primary-address-prefix>', $('the primary address prefix'))
    .option('-o, --secondary-address-prefix <secondary-address-prefix>', $('the secondary address prefix'))
    .option('-d, --primary-azure-port [primary-azure-port]', $('the primary port'))
    .option('-b, --secondary-azure-port [secondary-azure-port]', $('the secondary port'))
    .option('-k, --shared-key [shared-key]', $('the shared key'))
    .option('-i, --vlan-id <vlan-id>', $('the VLAN ID'))
    .option('-f, --ms-advertised-public-prefixes [ms-advertised-public-prefixes]', $('the reference of' +
      '\n     AdvertisedPublicPrefixes'))
    .option('-m, --ms-advertised-public-prefix-state [ms-advertised-public-prefix-state]', $('advertisedPublicPrefixState of the' +
      '\n     Peering resource. Possible values are \'NotConfigured\', \'Configuring\',' +
      '\n     \'Configured\', and \'ValidationNeeded\''))
    .option('-l, --ms-customer-asn [ms-customer-asn]', $('the CustomerASN of the peering'))
    .option('-u, --ms-routing-registry-name [ms-routing-registry-name]', $('the RoutingRegistryName of the' +
      '\n     configuration'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, circuitName, name, peerAsn, primaryAddressPrefix, secondaryAddressPrefix, vlanId, options, _) {
      var useDefaults = true;
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      circuitName = cli.interaction.promptIfNotGiven($('circuit name : '), circuitName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
      options.peerAsn = cli.interaction.promptIfNotGiven($('peer asn : '), peerAsn, _);
      options.primaryAddressPrefix = cli.interaction.promptIfNotGiven($('primary address prefix : '), primaryAddressPrefix, _);
      options.secondaryAddressPrefix = cli.interaction.promptIfNotGiven($('secondary address prefix : '), secondaryAddressPrefix, _);
      options.vlanId = cli.interaction.promptIfNotGiven($('vlan id : '), vlanId, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var expressRouteCircuitPeering;
      var progress = cli.interaction.progress(util.format($('Looking up the express route circuit peering "%s"'), name));
      try {
        expressRouteCircuitPeering = networkManagementClient.expressRouteCircuitPeerings.get(resourceGroup, circuitName, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          expressRouteCircuitPeering = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (expressRouteCircuitPeering) {
        throw new Error(util.format($('express route circuit peering with name "%s" already exists in the resource group "%s"'), name, resourceGroup));
      }

      var parameters = {};
      if(options.type) {
        parameters.peeringType = validation.isIn(options.type, ['AzurePublicPeering', 'AzurePrivatePeering', 'MicrosoftPeering'], '--type');
      } else if(useDefaults) {
        parameters.peeringType = defaultPeeringType;
      }

      if(options.azureAsn) {
        parameters.azureASN = parseInt(options.azureAsn, 10);
      }

      if(options.peerAsn) {
        parameters.peerASN = parseInt(options.peerAsn, 10);
      }

      if(options.primaryAddressPrefix) {
        parameters.primaryPeerAddressPrefix = options.primaryAddressPrefix;
      }

      if(options.secondaryAddressPrefix) {
        parameters.secondaryPeerAddressPrefix = options.secondaryAddressPrefix;
      }

      if(options.primaryAzurePort) {
        parameters.primaryAzurePort = options.primaryAzurePort;
      }

      if(options.secondaryAzurePort) {
        parameters.secondaryAzurePort = options.secondaryAzurePort;
      }

      if(options.sharedKey) {
        parameters.sharedKey = options.sharedKey;
      }

      if(options.vlanId) {
        parameters.vlanId = parseInt(options.vlanId, 10);
      }

      if(!parameters.microsoftPeeringConfig) {
        parameters.microsoftPeeringConfig = {};
      }
      if(options.msAdvertisedPublicPrefixes) {
        parameters.microsoftPeeringConfig.advertisedPublicPrefixes = [];
        parameters.microsoftPeeringConfig.advertisedPublicPrefixes = parameters.microsoftPeeringConfig.advertisedPublicPrefixes.concat(options.msAdvertisedPublicPrefixes.split(','));
      }

      if(options.msAdvertisedPublicPrefixState) {
        parameters.microsoftPeeringConfig.advertisedPublicPrefixesState = validation.isIn(options.msAdvertisedPublicPrefixState, ['NotConfigured', 'Configuring', 'Configured', 'ValidationNeeded'], '--ms-advertised-public-prefix-state');
      }

      if(options.msCustomerAsn) {
        parameters.microsoftPeeringConfig.customerASN = parseInt(options.msCustomerAsn, 10);
      }

      if(options.msRoutingRegistryName) {
        parameters.microsoftPeeringConfig.routingRegistryName = options.msRoutingRegistryName;
      }

      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Creating express route circuit peering "%s"'), name));
      try {
        expressRouteCircuitPeering = networkManagementClient.expressRouteCircuitPeerings.createOrUpdate(resourceGroup, circuitName, name, parameters, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(expressRouteCircuitPeering, generatorUtils.traverse);
    });

  expressRouteCircuitPeerings.command('set [resource-group] [circuit-name] [name]')
    .description($('Update an express route circuit peering'))
    .usage('[options] <resource-group> <circuit-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-c, --circuit-name <circuit-name>', $('the circuit name'))
    .option('-n, --name <name>', $('the name of the express route circuit peering'))
    .option('-a, --azure-asn [azure-asn]', $('the Azure ASN'))
    .option('-p, --peer-asn [peer-asn]', $('the peer ASN'))
    .option('-r, --primary-address-prefix [primary-address-prefix]', $('the primary address prefix'))
    .option('-o, --secondary-address-prefix [secondary-address-prefix]', $('the secondary address prefix'))
    .option('-d, --primary-azure-port [primary-azure-port]', $('the primary port'))
    .option('-b, --secondary-azure-port [secondary-azure-port]', $('the secondary port'))
    .option('-k, --shared-key [shared-key]', $('the shared key'))
    .option('-i, --vlan-id [vlan-id]', $('the VLAN ID'))
    .option('-f, --ms-advertised-public-prefixes [ms-advertised-public-prefixes]', $('the reference of' +
      '\n     AdvertisedPublicPrefixes'))
    .option('-m, --ms-advertised-public-prefix-state [ms-advertised-public-prefix-state]', $('advertisedPublicPrefixState of the' +
      '\n     Peering resource. Possible values are \'NotConfigured\', \'Configuring\',' +
      '\n     \'Configured\', and \'ValidationNeeded\''))
    .option('-l, --ms-customer-asn [ms-customer-asn]', $('the CustomerASN of the peering'))
    .option('-u, --ms-routing-registry-name [ms-routing-registry-name]', $('the RoutingRegistryName of the' +
      '\n     configuration'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, circuitName, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      circuitName = cli.interaction.promptIfNotGiven($('circuit name : '), circuitName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var expressRouteCircuitPeering;
      var progress = cli.interaction.progress(util.format($('Looking up the express route circuit peering "%s"'), name));
      try {
        expressRouteCircuitPeering = networkManagementClient.expressRouteCircuitPeerings.get(resourceGroup, circuitName, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          expressRouteCircuitPeering = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!expressRouteCircuitPeering) {
        throw new Error(util.format($('express route circuit peering with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      var parameters = expressRouteCircuitPeering;
      if(options.azureAsn) {
        parameters.azureASN = parseInt(options.azureAsn, 10);
      }

      if(options.peerAsn) {
        parameters.peerASN = parseInt(options.peerAsn, 10);
      }

      if(options.primaryAddressPrefix) {
        parameters.primaryPeerAddressPrefix = options.primaryAddressPrefix;
      }

      if(options.secondaryAddressPrefix) {
        parameters.secondaryPeerAddressPrefix = options.secondaryAddressPrefix;
      }

      if(options.primaryAzurePort) {
        parameters.primaryAzurePort = options.primaryAzurePort;
      }

      if(options.secondaryAzurePort) {
        parameters.secondaryAzurePort = options.secondaryAzurePort;
      }

      if(options.sharedKey) {
        parameters.sharedKey = options.sharedKey;
      }

      if(options.vlanId) {
        parameters.vlanId = parseInt(options.vlanId, 10);
      }

      if(!parameters.microsoftPeeringConfig) {
        parameters.microsoftPeeringConfig = {};
      }
      if(options.msAdvertisedPublicPrefixes) {
        if(expressRouteCircuitPeering && expressRouteCircuitPeering.microsoftPeeringConfig && expressRouteCircuitPeering.microsoftPeeringConfig.advertisedPublicPrefixes) {
          parameters.microsoftPeeringConfig.advertisedPublicPrefixes = expressRouteCircuitPeering.microsoftPeeringConfig.advertisedPublicPrefixes;
        } else {
          parameters.microsoftPeeringConfig.advertisedPublicPrefixes = [];
        }
        parameters.microsoftPeeringConfig.advertisedPublicPrefixes = parameters.microsoftPeeringConfig.advertisedPublicPrefixes.concat(options.msAdvertisedPublicPrefixes.split(','));
      }

      if(options.msAdvertisedPublicPrefixState) {
        parameters.microsoftPeeringConfig.advertisedPublicPrefixesState = validation.isIn(options.msAdvertisedPublicPrefixState, ['NotConfigured', 'Configuring', 'Configured', 'ValidationNeeded'], '--ms-advertised-public-prefix-state');
      }

      if(options.msCustomerAsn) {
        parameters.microsoftPeeringConfig.customerASN = parseInt(options.msCustomerAsn, 10);
      }

      if(options.msRoutingRegistryName) {
        parameters.microsoftPeeringConfig.routingRegistryName = options.msRoutingRegistryName;
      }

      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Updating express route circuit peering "%s"'), name));
      try {
        expressRouteCircuitPeering = networkManagementClient.expressRouteCircuitPeerings.createOrUpdate(resourceGroup, circuitName, name, parameters, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(expressRouteCircuitPeering, generatorUtils.traverse);
    });

  expressRouteCircuitPeerings.command('delete [resource-group] [circuit-name] [name]')
    .description($('Delete an express route circuit peering'))
    .usage('[options] <resource-group> <circuit-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-c, --circuit-name <circuit-name>', $('the circuit name'))
    .option('-n, --name <name>', $('the name of the express route circuit peering'))
    .option('-q, --quiet', $('quiet mode, do not ask for delete confirmation'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, circuitName, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      circuitName = cli.interaction.promptIfNotGiven($('circuit name : '), circuitName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var expressRouteCircuitPeering;
      var progress = cli.interaction.progress(util.format($('Looking up the express route circuit peering "%s"'), name));
      try {
        expressRouteCircuitPeering = networkManagementClient.expressRouteCircuitPeerings.get(resourceGroup, circuitName, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          expressRouteCircuitPeering = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!expressRouteCircuitPeering) {
        throw new Error(util.format($('express route circuit peering with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      if (!options.quiet && !cli.interaction.confirm(util.format($('Delete express route circuit peering "%s"? [y/n] '), name), _)) {
        cli.output.info(util.format($('express route circuit peering "%s" was not deleted and still exists in the resource group "%s"'), name, resourceGroup));
        return;
      }

      progress = cli.interaction.progress(util.format($('Deleting express route circuit peering "%s"'), name));
      try {
        expressRouteCircuitPeering = networkManagementClient.expressRouteCircuitPeerings.deleteMethod(resourceGroup, circuitName, name, _);
        cli.output.info(util.format($('express route circuit peering "%s" was successfully deleted from resource group "%s"'), name, resourceGroup));
      } finally {
        progress.end();
      }
    });

  expressRouteCircuitPeerings.command('show [resource-group] [circuit-name] [name]')
    .description($('Show an express route circuit peering'))
    .usage('[options] <resource-group> <circuit-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-c, --circuit-name <circuit-name>', $('the circuit name'))
    .option('-n, --name <name>', $('the name of the express route circuit peering'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, circuitName, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      circuitName = cli.interaction.promptIfNotGiven($('circuit name : '), circuitName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var expressRouteCircuitPeering;
      var progress = cli.interaction.progress(util.format($('Looking up the express route circuit peering "%s"'), name));
      try {
        expressRouteCircuitPeering = networkManagementClient.expressRouteCircuitPeerings.get(resourceGroup, circuitName, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          expressRouteCircuitPeering = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!expressRouteCircuitPeering) {
        cli.output.warn(util.format($('express route circuit peering with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      cli.interaction.formatOutput(expressRouteCircuitPeering, generatorUtils.traverse);
    });

  expressRouteCircuitPeerings.command('list [resource-group] [circuit-name]')
    .description($('List express route circuit peerings'))
    .usage('[options] <resource-group> <circuit-name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-c, --circuit-name <circuit-name>', $('the circuit name'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, circuitName, options, _) {
      options.resourceGroup = resourceGroup;
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var expressRouteCircuitPeering = null;
      var progress;
      try {
        if(typeof networkManagementClient.expressRouteCircuitPeerings.listAll != 'function') {
          resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
          circuitName = cli.interaction.promptIfNotGiven($('express route circuit : '), circuitName, _);
          progress = cli.interaction.progress($('Getting the express route circuit peerings'));
          expressRouteCircuitPeering = networkManagementClient.expressRouteCircuitPeerings.list(resourceGroup, circuitName,  _);
        } else {
          if(options.resourceGroup) {
            circuitName = cli.interaction.promptIfNotGiven($('express route circuit : '), circuitName, _);
            progress = cli.interaction.progress($('Getting the express route circuit peerings'));
            expressRouteCircuitPeering = networkManagementClient.expressRouteCircuitPeerings.list(resourceGroup, circuitName,  _);
          } else {
            circuitName = cli.interaction.promptIfNotGiven($('express route circuit : '), circuitName, _);
            progress = cli.interaction.progress($('Getting the express route circuit peerings'));
            expressRouteCircuitPeering = networkManagementClient.expressRouteCircuitPeerings.listAll(circuitName, _);
          }
        }
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(expressRouteCircuitPeering, function(expressRouteCircuitPeering) {
        if (expressRouteCircuitPeering.length === 0) {
          cli.output.warn($('No express route circuit peerings found'));
        } else {
          cli.output.table(expressRouteCircuitPeering, function (row, item) {
            row.cell($('Name'), item.name);
            var resInfo = resourceUtils.getResourceInformation(item.id);
            row.cell($('Resource group'), resInfo.resourceGroup);
            row.cell($('Provisioning state'), item.provisioningState);
          });
        }
      });
    });
};
