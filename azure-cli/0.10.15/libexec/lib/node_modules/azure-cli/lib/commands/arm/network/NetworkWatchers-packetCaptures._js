/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

/*

Generated Command List:


*/

'use strict';
var fs = require('fs');
var generatorUtils = require('../../../util/generatorUtils');
var resourceUtils = require('../resource/resourceUtils');
var util = require('util');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;

exports.init = function (cli) {

    var network = cli.category('network')
      .description($('Commands to manage network resources'));
    var networkWatchers = network.category('watcher')
      .description($('Commands to manage network watchers'));
    var packetCaptures = networkWatchers.category('packet-capture')
      .description($('Commands to manage packet captures'));

  packetCaptures.command('create [resource-group] [watcher-name] [name] [target]')
    .description($('Create a packet capture'))
    .usage('[options] <resource-group> <watcher-name> <name> <target>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-w, --watcher-name <watcher-name>', $('the watcher name'))
    .option('-n, --name <name>', $('the name of the packet capture'))
    .option('-t, --target <target>', $('the ID of the targeted resource, only' +
    '\n     VM is currently supported'))
    .option('-b, --bytes-per-packet [bytes-per-packet]', $('number of bytes captured per packet,' +
    '\n     the remaining bytes are truncated'))
    .option('-y, --bytes-per-session [bytes-per-session]', $('maximum size of the capture output'))
    .option('-l, --time-limit [time-limit]', $('maximum duration of the capture session' +
    '\n     in seconds'))
    .option('-o, --storage-id [storage-id]', $('the ID of the storage account to save' +
    '\n     the packet capture session. Required if no local file path is provided'))
    .option('-p, --storage-path [storage-path]', $('the URI of the storage path to save the' +
    '\n     packet capture. Must be a well-formed URI describing the location to save the' +
    '\n     packet capture'))
    .option('-e, --local-file-path [local-file-path]', $('a valid local path on the targeting VM.' +
    '\n     Must include the name of the capture file (*.cap). For linux virtual machine it' +
    '\n     must start with /var/captures. Required if no storage ID is provided, otherwise' +
    '\n     optional'))
    .option('-r, --filters-file [filters-file]', $('file cointaining JSON formatted Filters'))
    .option('-f, --filters [filters]', $('filter that is applied to packet' +
    '\n     capture request. Multiple filters can be applied. Should be in JSON format.' +
    '\n     Supported properties: protocol, localIPAddress, remoteIPAddress localPort' +
    '\n     remotePort. Argument format:"[{\\"protocol\\":\\"TCP\\"},' +
    '\n     {\\"protocol\\":\\"UDP\\"}]"'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, watcherName, name, target, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      watcherName = cli.interaction.promptIfNotGiven($('watcher name : '), watcherName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
      options.target = cli.interaction.promptIfNotGiven($('target : '), target, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var result;

      var progress = cli.interaction.progress(util.format($('Looking up the packet capture "%s"'), name));
      try {
        result = networkManagementClient.packetCaptures.get(resourceGroup, watcherName, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          result = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }
      if (result) {
        throw new Error(util.format($('packet capture with name "%s" already exists in the resource group "%s"'), name, resourceGroup));
      }

      var parameters = {};
      if(options.target) {
        parameters.target = options.target;
      }
      if(options.bytesPerPacket) {
        parameters.bytesToCapturePerPacket = parseInt(options.bytesPerPacket, 10);
      }
      if(options.bytesPerSession) {
        parameters.totalBytesPerSession = parseInt(options.bytesPerSession, 10);
      }
      if(options.timeLimit) {
        parameters.timeLimitInSeconds = parseInt(options.timeLimit, 10);
      }
      if(!parameters.storageLocation) {
        parameters.storageLocation = {};
      }
      if(options.storageId) {
        parameters.storageLocation.storageId = options.storageId;
      }
      if(options.storagePath) {
        parameters.storageLocation.storagePath = options.storagePath;
      }
      if(options.localFilePath) {
        parameters.storageLocation.filePath = options.localFilePath;
      }
      if(options.filtersFile) {
        try {
          var data = fs.readFileSync(options.filtersFile);
          parameters.filters = JSON.parse(data);
        } catch(err) {
          throw new Error('Error in reading the provided file. Make sure that the file path is correct and it has correct content.\n' +
          util.inspect(err, {depth: null}));
        }
      }
      if(options.filters && !options.filtersFile) {
        try {
          parameters.filters = JSON.parse(options.filters);
        } catch(e) {
          throw new Error(util.format($('Cannot parse --filters argument. It should be a valid JSON. Received input is:\n         %s;\n         Exception details: %s'),
          options.filters, e));
        }
      }


      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Creating packet capture "%s"'), name));
      try {
        result = networkManagementClient.packetCaptures.create(resourceGroup, watcherName, name, parameters, _);
      } finally {
        progress.end();
      }
      cli.interaction.formatOutput(result, generatorUtils.traverse);
    });

  packetCaptures.command('delete [resource-group] [watcher-name] [name]')
    .description($('Delete a packet capture'))
    .usage('[options] <resource-group> <watcher-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-w, --watcher-name <watcher-name>', $('the watcher name'))
    .option('-n, --name <name>', $('the name of the packet capture'))
    .option('-q, --quiet', $('quiet mode, do not ask for delete confirmation'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, watcherName, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      watcherName = cli.interaction.promptIfNotGiven($('watcher name : '), watcherName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);
      var result;

      var progress = cli.interaction.progress(util.format($('Looking up the packet capture "%s"'), name));
      try {
        result = networkManagementClient.packetCaptures.get(resourceGroup, watcherName, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          result = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }
      if (!result) {
        throw new Error(util.format($('packet capture with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }
      if (!options.quiet && !cli.interaction.confirm(util.format($('Delete packet capture "%s"? [y/n] '), name), _)) {
        cli.output.info(util.format($('packet capture "%s" was not deleted and still exists in the resource group "%s"'), name, resourceGroup));
        return;
      }

      progress = cli.interaction.progress(util.format($('Deleting packet capture "%s"'), name));
      try {
        result = networkManagementClient.packetCaptures.deleteMethod(resourceGroup, watcherName, name, _);
        cli.output.info(util.format($('packet capture "%s" was successfully deleted from resource group "%s"'), name, resourceGroup));
      } finally {
        progress.end();
      }
    });

  packetCaptures.command('show [resource-group] [watcher-name] [name]')
    .description($('Show a packet capture'))
    .usage('[options] <resource-group> <watcher-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-w, --watcher-name <watcher-name>', $('the watcher name'))
    .option('-n, --name <name>', $('the name of the packet capture'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, watcherName, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      watcherName = cli.interaction.promptIfNotGiven($('watcher name : '), watcherName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);
      var result;

      var progress = cli.interaction.progress(util.format($('Looking up the packet capture "%s"'), name));
      try {
        result = networkManagementClient.packetCaptures.get(resourceGroup, watcherName, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          result = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }
      if (!result) {
        cli.output.warn(util.format($('packet capture with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }
      cli.interaction.formatOutput(result, generatorUtils.traverse);
    });

  packetCaptures.command('status [resource-group] [watcher-name] [name]')
    .description($('Perform get status operation on a packet capture'))
    .usage('[options] <resource-group> <watcher-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-w, --watcher-name <watcher-name>', $('the watcher name'))
    .option('-n, --name <name>', $('the name of the packet capture'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, watcherName, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      watcherName = cli.interaction.promptIfNotGiven($('watcher name : '), watcherName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var result;

      var progress = cli.interaction.progress(util.format($('Looking up the packet capture "%s"'), name));
      try {
        result = networkManagementClient.packetCaptures.get(resourceGroup, watcherName, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          result = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }
      if (!result) {
        throw new Error(util.format($('a packet capture with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }
      var parameters = {};

      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Performing get status operation on a packet capture "%s"'), name));
      try {
        result = networkManagementClient.packetCaptures.getStatus(resourceGroup, watcherName, name, _);
      } finally {
        progress.end();
      }
      cli.interaction.formatOutput(result, generatorUtils.traverse);
    });

  packetCaptures.command('list [resource-group] [watcher-name]')
    .description($('List packet captures'))
    .usage('[options] <resource-group> <watcher-name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-w, --watcher-name <watcher-name>', $('the watcher name'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, watcherName, options, _) {
      options.resourceGroup = resourceGroup;
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var result = null;

      var progress;
      try {
        if(typeof networkManagementClient.packetCaptures.listAll != 'function') {
          resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
          watcherName = cli.interaction.promptIfNotGiven($('network watcher : '), watcherName, _);
          progress = cli.interaction.progress($('Getting the packet captures'));
          result = networkManagementClient.packetCaptures.list(resourceGroup, watcherName,  _);
        } else {
          if(options.resourceGroup) {
            watcherName = cli.interaction.promptIfNotGiven($('network watcher : '), watcherName, _);
            progress = cli.interaction.progress($('Getting the packet captures'));
            result = networkManagementClient.packetCaptures.list(resourceGroup, watcherName,  _);
          } else {
            watcherName = cli.interaction.promptIfNotGiven($('network watcher : '), watcherName, _);
            progress = cli.interaction.progress($('Getting the packet captures'));
            result = networkManagementClient.packetCaptures.listAll(watcherName, _);
          }
        }
      } finally {
        progress.end();
      }
      cli.interaction.formatOutput(result, function(result) {
        if (result.length === 0) {
          cli.output.warn($('No packet captures found'));
        } else {
         cli.output.table(result, function (row, item) {
            row.cell($('Name'), item.name);
            var resInfo = resourceUtils.getResourceInformation(item.id);
            row.cell($('Resource group'), resInfo.resourceGroup);
            row.cell($('Provisioning state'), item.provisioningState);
          });
        }
      });
    });
  packetCaptures.command('stop [resource-group] [watcher-name] [name]')
    .description($('Perform stop operation on a packet capture'))
    .usage('[options] <resource-group> <watcher-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-w, --watcher-name <watcher-name>', $('the watcher name'))
    .option('-n, --name <name>', $('the name of the packet capture'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, watcherName, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      watcherName = cli.interaction.promptIfNotGiven($('watcher name : '), watcherName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var result;

      var progress = cli.interaction.progress(util.format($('Looking up the packet capture "%s"'), name));
      try {
        result = networkManagementClient.packetCaptures.get(resourceGroup, watcherName, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          result = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }
      if (!result) {
        throw new Error(util.format($('a packet capture with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }
      var parameters = {};

      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Performing stop operation on a packet capture "%s"'), name));
      try {
        result = networkManagementClient.packetCaptures.stop(resourceGroup, watcherName, name, _);
      } finally {
        progress.end();
      }
      cli.interaction.formatOutput(result, generatorUtils.traverse);
    });



};
