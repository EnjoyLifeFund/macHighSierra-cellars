/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var generatorUtils = require('../../../util/generatorUtils');
var util = require('util');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;

exports.init = function (cli) {
  var network = cli.category('network')
    .description($('Commands to manage network resources'));
  var trafficManager = network.category('traffic-manager')
    .description($('Commands to manage Traffic Manager'));
  var endpoints = trafficManager.category('endpoint')
    .description($('Commands to manage endpoints'));

  endpoints.command('create [resource-group] [profile-name] [type] [name]')
    .description($('Create an endpoint'))
    .usage('[options] <resource-group> <profile-name> <type> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-f, --profile-name <profile-name>', $('the profile name'))
    .option('-y, --type <type>', $('the type'))
    .option('-n, --name <name>', $('the name of the endpoint'))
    .option('-i, --target-resource-id [target-resource-id]', $('sets the Azure Resource URI of the of' +
      '\n     the endpoint.  Not applicable to endpoints of type \'ExternalEndpoints\''))
    .option('-t, --target [target]', $('sets the fully-qualified DNS name of' +
      '\n     the endpoint.  Traffic Manager returns this value in DNS responses to direct' +
      '\n     traffic to this endpoint'))
    .option('-u, --status [status]', $('sets the status of the endpoint..  If' +
      '\n     the endpoint is Enabled, it is probed for endpoint health and is included in' +
      '\n     the traffic routing method.  Possible values are \'Enabled\' and \'Disabled\''))
    .option('-w, --weight [weight]', $('sets the weight of this endpoint when' +
      '\n     using the \'Weighted\' traffic routing method. Possible values are from 1 to' +
      '\n     1000'))
    .option('-p, --priority [priority]', $('sets the priority of this endpoint when' +
      '\n     using the \'Priority\' traffic routing method. Possible values are from 1 to' +
      '\n     1000, lower values represent higher priority. This is an optional parameter.' +
      '\n     If specified, it must be specified on all endpoints, and no two endpoints can' +
      '\n     share the same priority value'))
    .option('-l, --location [location]', $('specifies the location of the external' +
      '\n     or nested endpoints when using the \'Performance\' traffic routing method'))
    .option('-c, --min-child-endpoints [min-child-endpoints]', $('sets the minimum number of endpoints' +
      '\n     that must be available in the child profile in order for the parent profile to' +
      '\n     be considered available. Only applicable to endpoint of type' +
      '\n     \'NestedEndpoints\''))
    .option('-m, --geo-mapping [geo-mapping]', $('sets the list of countries/regions' +
      '\n     mapped to this endpoint when using the \'Geographic\' traffic routing method.' +
      '\n     Please consult Traffic Manager Geographic documentation for a full list of' +
      '\n     accepted values'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, profileName, type, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      profileName = cli.interaction.promptIfNotGiven($('profile name : '), profileName, _);
      options.type = cli.interaction.promptIfNotGiven($('type : '), type, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var trafficManagerManagementClient = utils.createTrafficManagerManagementClient(subscription);

      var endpoint;
      var progress = cli.interaction.progress(util.format($('Looking up the endpoint "%s"'), name));
      try {
        endpoint = trafficManagerManagementClient.endpoints.get(resourceGroup, profileName, options.type, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          endpoint = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (endpoint) {
        throw new Error(util.format($('endpoint with name "%s" already exists in the resource group "%s"'), name, resourceGroup));
      }

      var parameters = {};
      if(options.targetResourceId) {
        parameters.targetResourceId = options.targetResourceId;
      }

      if(options.target) {
        parameters.target = options.target;
      }

      if(options.status) {
        parameters.endpointStatus = options.status;
      }

      if(options.weight) {
        parameters.weight = parseInt(options.weight, 10);
      }

      if(options.priority) {
        parameters.priority = parseInt(options.priority, 10);
      }

      if(options.location) {
        parameters.endpointLocation = options.location;
      }

      if(options.minChildEndpoints) {
        parameters.minChildEndpoints = parseInt(options.minChildEndpoints, 10);
      }

      if(options.geoMapping) {
        parameters.geoMapping = options.geoMapping.split(',');
      }

      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Creating endpoint "%s"'), name));
      try {
        endpoint = trafficManagerManagementClient.endpoints.createOrUpdate(resourceGroup, profileName, options.type, name, parameters, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(endpoint, generatorUtils.traverse);
    });

  endpoints.command('set [resource-group] [profile-name] [type] [name]')
    .description($('Update an endpoint'))
    .usage('[options] <resource-group> <profile-name> <type> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-f, --profile-name <profile-name>', $('the profile name'))
    .option('-y, --type <type>', $('the type'))
    .option('-n, --name <name>', $('the name of the endpoint'))
    .option('-i, --target-resource-id [target-resource-id]', $('sets the Azure Resource URI of the of' +
      '\n     the endpoint.  Not applicable to endpoints of type \'ExternalEndpoints\''))
    .option('-t, --target [target]', $('sets the fully-qualified DNS name of' +
      '\n     the endpoint.  Traffic Manager returns this value in DNS responses to direct' +
      '\n     traffic to this endpoint'))
    .option('-u, --status [status]', $('sets the status of the endpoint..  If' +
      '\n     the endpoint is Enabled, it is probed for endpoint health and is included in' +
      '\n     the traffic routing method.  Possible values are \'Enabled\' and \'Disabled\''))
    .option('-w, --weight [weight]', $('sets the weight of this endpoint when' +
      '\n     using the \'Weighted\' traffic routing method. Possible values are from 1 to' +
      '\n     1000'))
    .option('-p, --priority [priority]', $('sets the priority of this endpoint when' +
      '\n     using the \'Priority\' traffic routing method. Possible values are from 1 to' +
      '\n     1000, lower values represent higher priority. This is an optional parameter.' +
      '\n     If specified, it must be specified on all endpoints, and no two endpoints can' +
      '\n     share the same priority value'))
    .option('-l, --location [location]', $('specifies the location of the external' +
      '\n     or nested endpoints when using the \'Performance\' traffic routing method'))
    .option('-c, --min-child-endpoints [min-child-endpoints]', $('sets the minimum number of endpoints' +
      '\n     that must be available in the child profile in order for the parent profile to' +
      '\n     be considered available. Only applicable to endpoint of type' +
      '\n     \'NestedEndpoints\''))
    .option('-m, --geo-mapping [geo-mapping]', $('sets the list of countries/regions' +
      '\n     mapped to this endpoint when using the \'Geographic\' traffic routing method.' +
      '\n     Please consult Traffic Manager Geographic documentation for a full list of' +
      '\n     accepted values'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, profileName, type, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      profileName = cli.interaction.promptIfNotGiven($('profile name : '), profileName, _);
      options.type = cli.interaction.promptIfNotGiven($('type : '), type, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var trafficManagerManagementClient = utils.createTrafficManagerManagementClient(subscription);

      var endpoint;
      var progress = cli.interaction.progress(util.format($('Looking up the endpoint "%s"'), name));
      try {
        endpoint = trafficManagerManagementClient.endpoints.get(resourceGroup, profileName, options.type, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          endpoint = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!endpoint) {
        throw new Error(util.format($('endpoint with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      var parameters = endpoint;
      if(options.targetResourceId) {
        parameters.targetResourceId = options.targetResourceId;
      }

      if(options.target) {
        parameters.target = options.target;
      }

      if(options.status) {
        parameters.endpointStatus = options.status;
      }

      if(options.weight) {
        parameters.weight = parseInt(options.weight, 10);
      }

      if(options.priority) {
        parameters.priority = parseInt(options.priority, 10);
      }

      if(options.location) {
        parameters.endpointLocation = options.location;
      }

      if(options.minChildEndpoints) {
        parameters.minChildEndpoints = parseInt(options.minChildEndpoints, 10);
      }

      if(options.geoMapping) {
        parameters.geoMapping = options.geoMapping.split(',');
      }

      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Updating endpoint "%s"'), name));
      try {
        endpoint = trafficManagerManagementClient.endpoints.createOrUpdate(resourceGroup, profileName, options.type, name, parameters, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(endpoint, generatorUtils.traverse);
    });

  endpoints.command('delete [resource-group] [profile-name] [type] [name]')
    .description($('Delete an endpoint'))
    .usage('[options] <resource-group> <profile-name> <type> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-f, --profile-name <profile-name>', $('the profile name'))
    .option('-y, --type <type>', $('the type'))
    .option('-n, --name <name>', $('the name of the endpoint'))
    .option('-q, --quiet', $('quiet mode, do not ask for delete confirmation'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, profileName, type, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      profileName = cli.interaction.promptIfNotGiven($('profile name : '), profileName, _);
      options.type = cli.interaction.promptIfNotGiven($('type : '), type, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var trafficManagerManagementClient = utils.createTrafficManagerManagementClient(subscription);

      var endpoint;
      var progress = cli.interaction.progress(util.format($('Looking up the endpoint "%s"'), name));
      try {
        endpoint = trafficManagerManagementClient.endpoints.get(resourceGroup, profileName, options.type, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          endpoint = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!endpoint) {
        throw new Error(util.format($('endpoint with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      if (!options.quiet && !cli.interaction.confirm(util.format($('Delete endpoint "%s"? [y/n] '), name), _)) {
        cli.output.info(util.format($('endpoint "%s" was not deleted and still exists in the resource group "%s"'), name, resourceGroup));
        return;
      }

      progress = cli.interaction.progress(util.format($('Deleting endpoint "%s"'), name));
      try {
        endpoint = trafficManagerManagementClient.endpoints.deleteMethod(resourceGroup, profileName, options.type, name, _);
        cli.output.info(util.format($('endpoint "%s" was successfully deleted from resource group "%s"'), name, resourceGroup));
      } finally {
        progress.end();
      }
    });

  endpoints.command('show [resource-group] [profile-name] [type] [name]')
    .description($('Show an endpoint'))
    .usage('[options] <resource-group> <profile-name> <type> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-f, --profile-name <profile-name>', $('the profile name'))
    .option('-y, --type <type>', $('the type'))
    .option('-n, --name <name>', $('the name of the endpoint'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, profileName, type, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      profileName = cli.interaction.promptIfNotGiven($('profile name : '), profileName, _);
      options.type = cli.interaction.promptIfNotGiven($('type : '), type, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var trafficManagerManagementClient = utils.createTrafficManagerManagementClient(subscription);

      var endpoint;
      var progress = cli.interaction.progress(util.format($('Looking up the endpoint "%s"'), name));
      try {
        endpoint = trafficManagerManagementClient.endpoints.get(resourceGroup, profileName, options.type, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          endpoint = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!endpoint) {
        cli.output.warn(util.format($('endpoint with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      cli.interaction.formatOutput(endpoint, generatorUtils.traverse);
    });
};
