/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var generatorUtils = require('../../../util/generatorUtils');
var resourceUtils = require('../resource/resourceUtils');
var util = require('util');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;

exports.init = function (cli) {
  var network = cli.category('network')
    .description($('Commands to manage network resources'));
  var applicationGateways = network.category('application-gateway')
    .description($('Commands to manage application gateways'));

  applicationGateways.command('delete [resource-group] [name]')
    .description($('Delete an application gateway'))
    .usage('[options] <resource-group> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-n, --name <name>', $('the name of the application gateway'))
    .option('--nowait', $('do not wait for the operation to complete. Returns as soon as the intial request is received by the server'))
    .option('-q, --quiet', $('quiet mode, do not ask for delete confirmation'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var applicationGateway;
      var progress = cli.interaction.progress(util.format($('Looking up the application gateway "%s"'), name));
      try {
        applicationGateway = networkManagementClient.applicationGateways.get(resourceGroup, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          applicationGateway = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!applicationGateway) {
        throw new Error(util.format($('application gateway with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      if (!options.quiet && !cli.interaction.confirm(util.format($('Delete application gateway "%s"? [y/n] '), name), _)) {
        cli.output.info(util.format($('application gateway "%s" was not deleted and still exists in the resource group "%s"'), name, resourceGroup));
        return;
      }

      progress = cli.interaction.progress(util.format($('Deleting application gateway "%s"'), name));
      try {
        applicationGateway = networkManagementClient.applicationGateways.deleteMethod(resourceGroup, name, _);
        cli.output.info(util.format($('application gateway "%s" was successfully deleted from resource group "%s"'), name, resourceGroup));
      } finally {
        progress.end();
      }
    });

  applicationGateways.command('show [resource-group] [name]')
    .description($('Show an application gateway'))
    .usage('[options] <resource-group> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-n, --name <name>', $('the name of the application gateway'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var applicationGateway;
      var progress = cli.interaction.progress(util.format($('Looking up the application gateway "%s"'), name));
      try {
        applicationGateway = networkManagementClient.applicationGateways.get(resourceGroup, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          applicationGateway = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!applicationGateway) {
        cli.output.warn(util.format($('application gateway with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      cli.interaction.formatOutput(applicationGateway, generatorUtils.traverse);
    });

  applicationGateways.command('list [resource-group]')
    .description($('List application gateways'))
    .usage('[options] <resource-group>')
    .option('-g, --resource-group [resource-group]', $('the name of the resource group'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, options, _) {
      options.resourceGroup = resourceGroup;
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var applicationGateway = null;
      var progress;
      try {
        if(typeof networkManagementClient.applicationGateways.listAll != 'function') {
          resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
          progress = cli.interaction.progress($('Getting the application gateways'));
          applicationGateway = networkManagementClient.applicationGateways.list(resourceGroup,  _);
        } else {
          if(options.resourceGroup) {
            progress = cli.interaction.progress($('Getting the application gateways'));
            applicationGateway = networkManagementClient.applicationGateways.list(resourceGroup,  _);
          } else {
            progress = cli.interaction.progress($('Getting the application gateways'));
            applicationGateway = networkManagementClient.applicationGateways.listAll(_);
          }
        }
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(applicationGateway, function(applicationGateway) {
        if (applicationGateway.length === 0) {
          cli.output.warn($('No application gateways found'));
        } else {
          cli.output.table(applicationGateway, function (row, item) {
            row.cell($('Name'), item.name);
            row.cell($('Location'), item.location || '');
            var resInfo = resourceUtils.getResourceInformation(item.id);
            row.cell($('Resource group'), resInfo.resourceGroup);
            row.cell($('Provisioning state'), item.provisioningState);
          });
        }
      });
    });

  var backendHealth = applicationGateways.category('backend-health')
    .description($('Commands to manage backend health'));

  backendHealth.command('show [resource-group] [gateway-name]')
    .description($('Perform backend health operation on an application gateway'))
    .usage('[options] <resource-group> <gateway-name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-w, --gateway-name <gateway-name>', $('the gateway name'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, gatewayName, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      gatewayName = cli.interaction.promptIfNotGiven($('gateway name : '), gatewayName, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var applicationGateway;

      var progress = cli.interaction.progress(util.format($('Looking up the application gateway "%s"'), gatewayName));
      try {
        applicationGateway = networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          applicationGateway = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!applicationGateway) {
        throw new Error(util.format($('an application gateway with name "%s" not found in the resource group "%s"'), gatewayName, resourceGroup));
      }
      var parameters = {};
      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Performing backend health operation on an application gateway "%s"'), gatewayName));
      try {
        applicationGateway = networkManagementClient.applicationGateways.backendHealth(resourceGroup, gatewayName, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(applicationGateway, generatorUtils.traverse);
    });

  applicationGateways.command('start [resource-group] [name]')
    .description($('Perform start operation on an application gateway'))
    .usage('[options] <resource-group> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-n, --name <name>', $('the name of the application gateway'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var applicationGateway;

      var progress = cli.interaction.progress(util.format($('Looking up the application gateway "%s"'), name));
      try {
        applicationGateway = networkManagementClient.applicationGateways.get(resourceGroup, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          applicationGateway = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!applicationGateway) {
        throw new Error(util.format($('an application gateway with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }
      var parameters = {};
      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Performing start operation on an application gateway "%s"'), name));
      try {
        applicationGateway = networkManagementClient.applicationGateways.start(resourceGroup, name, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(applicationGateway, generatorUtils.traverse);
    });

  applicationGateways.command('stop [resource-group] [name]')
    .description($('Perform stop operation on an application gateway'))
    .usage('[options] <resource-group> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-n, --name <name>', $('the name of the application gateway'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var applicationGateway;

      var progress = cli.interaction.progress(util.format($('Looking up the application gateway "%s"'), name));
      try {
        applicationGateway = networkManagementClient.applicationGateways.get(resourceGroup, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          applicationGateway = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!applicationGateway) {
        throw new Error(util.format($('an application gateway with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }
      var parameters = {};
      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Performing stop operation on an application gateway "%s"'), name));
      try {
        applicationGateway = networkManagementClient.applicationGateways.stop(resourceGroup, name, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(applicationGateway, generatorUtils.traverse);
    });
};
