/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var constants = require('./constants');
var generatorUtils = require('../../../util/generatorUtils');
var resourceUtils = require('../resource/resourceUtils');
var tagUtils = require('../tag/tagUtils');
var util = require('util');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;

exports.init = function (cli) {
  var network = cli.category('network')
    .description($('Commands to manage network resources'));
  var routeTables = network.category('route-table')
    .description($('Commands to manage route tables'));

  routeTables.command('create [resource-group] [name] [location]')
    .description($('Create a route table'))
    .usage('[options] <resource-group> <name> <location>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-n, --name <name>', $('the name of the route table'))
    .option('-l, --location <location>', $('the location'))
    .option('-t, --tags [tags]', $(constants.help.tags.create))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, name, location, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
      options.location = cli.interaction.promptIfNotGiven($('location : '), location, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var routeTable;
      var progress = cli.interaction.progress(util.format($('Looking up the route table "%s"'), name));
      try {
        routeTable = networkManagementClient.routeTables.get(resourceGroup, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          routeTable = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (routeTable) {
        throw new Error(util.format($('route table with name "%s" already exists in the resource group "%s"'), name, resourceGroup));
      }

      var parameters = {};
      if(options.location) {
        parameters.location = options.location;
      }

      if(options.tags && utils.argHasValue(options.tags)) {
        tagUtils.appendTags(parameters, options);
      }

      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Creating route table "%s"'), name));
      try {
        routeTable = networkManagementClient.routeTables.createOrUpdate(resourceGroup, name, parameters, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(routeTable, generatorUtils.traverse);
    });

  routeTables.command('set [resource-group] [name]')
    .description($('Update a route table'))
    .usage('[options] <resource-group> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-n, --name <name>', $('the name of the route table'))
    .option('-t, --tags [tags]', $(constants.help.tags.create))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var routeTable;
      var progress = cli.interaction.progress(util.format($('Looking up the route table "%s"'), name));
      try {
        routeTable = networkManagementClient.routeTables.get(resourceGroup, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          routeTable = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!routeTable) {
        throw new Error(util.format($('route table with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      var parameters = routeTable;
      if(options.tags && utils.argHasValue(options.tags)) {
        tagUtils.appendTags(parameters, options);
      }

      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Updating route table "%s"'), name));
      try {
        routeTable = networkManagementClient.routeTables.createOrUpdate(resourceGroup, name, parameters, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(routeTable, generatorUtils.traverse);
    });

  routeTables.command('delete [resource-group] [name]')
    .description($('Delete a route table'))
    .usage('[options] <resource-group> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-n, --name <name>', $('the name of the route table'))
    .option('-q, --quiet', $('quiet mode, do not ask for delete confirmation'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var routeTable;
      var progress = cli.interaction.progress(util.format($('Looking up the route table "%s"'), name));
      try {
        routeTable = networkManagementClient.routeTables.get(resourceGroup, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          routeTable = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!routeTable) {
        throw new Error(util.format($('route table with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      if (!options.quiet && !cli.interaction.confirm(util.format($('Delete route table "%s"? [y/n] '), name), _)) {
        cli.output.info(util.format($('route table "%s" was not deleted and still exists in the resource group "%s"'), name, resourceGroup));
        return;
      }

      progress = cli.interaction.progress(util.format($('Deleting route table "%s"'), name));
      try {
        routeTable = networkManagementClient.routeTables.deleteMethod(resourceGroup, name, _);
        cli.output.info(util.format($('route table "%s" was successfully deleted from resource group "%s"'), name, resourceGroup));
      } finally {
        progress.end();
      }
    });

  routeTables.command('show [resource-group] [name]')
    .description($('Show a route table'))
    .usage('[options] <resource-group> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-n, --name <name>', $('the name of the route table'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var routeTable;
      var progress = cli.interaction.progress(util.format($('Looking up the route table "%s"'), name));
      try {
        routeTable = networkManagementClient.routeTables.get(resourceGroup, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          routeTable = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!routeTable) {
        cli.output.warn(util.format($('route table with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      cli.interaction.formatOutput(routeTable, generatorUtils.traverse);
    });

  routeTables.command('list [resource-group]')
    .description($('List route tables'))
    .usage('[options] <resource-group>')
    .option('-g, --resource-group [resource-group]', $('the name of the resource group'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, options, _) {
      options.resourceGroup = resourceGroup;
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var routeTable = null;
      var progress;
      try {
        if(typeof networkManagementClient.routeTables.listAll != 'function') {
          resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
          progress = cli.interaction.progress($('Getting the route tables'));
          routeTable = networkManagementClient.routeTables.list(resourceGroup,  _);
        } else {
          if(options.resourceGroup) {
            progress = cli.interaction.progress($('Getting the route tables'));
            routeTable = networkManagementClient.routeTables.list(resourceGroup,  _);
          } else {
            progress = cli.interaction.progress($('Getting the route tables'));
            routeTable = networkManagementClient.routeTables.listAll(_);
          }
        }
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(routeTable, function(routeTable) {
        if (routeTable.length === 0) {
          cli.output.warn($('No route tables found'));
        } else {
         cli.output.table(routeTable, function (row, item) {
            row.cell($('Name'), item.name);
            row.cell($('Location'), item.location || '');
            var resInfo = resourceUtils.getResourceInformation(item.id);
            row.cell($('Resource group'), resInfo.resourceGroup);
            row.cell($('Provisioning state'), item.provisioningState);
          });
        }
      });
    });
};
