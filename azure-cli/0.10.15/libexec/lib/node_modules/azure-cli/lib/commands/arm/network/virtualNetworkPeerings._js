/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var generatorUtils = require('../../../util/generatorUtils');
var profile = require('../../../util/profile');
var resourceUtils = require('../resource/resourceUtils');
var util = require('util');
var utils = require('../../../util/utils');
var $ = utils.getLocaleString;
exports.init = function (cli) {
  var network = cli.category('network')
    .description($('Commands to manage network resources'));

  var virtualNetworks = network.category('vnet')
    .description($('Commands to manage virtual network peerings'));

  var virtualNetworkPeerings = virtualNetworks.category('peering')
    .description($('Commands to manage virtual network peerings'));

  virtualNetworkPeerings.command('create [resource-group] [vnet-name] [name] [remote-vnet-id]')
    .description($('Create a virtual network peering'))
    .usage('[options] <resource-group> <vnet-name> <name> <remote-vnet-id>')
    .option('-g, --resource-group <resource-group>', $('the resource-group of virtual network peering'))
    .option('-e, --vnet-name <vnet-name>', $('the virtual-network-name of virtual network peering'))
    .option('-n, --name <name>', $('the virtual-network-peering-name of virtual network peering'))
    .option('-r, --remote-vnet-id <remote-vnet-id>', $('the reference of the remote virtual network by Id'))
    .option('-f, --allow-forwarded-traffic <allow-forwarded-traffic>', $('whether the forwarded traffic from the VMs in the remote virtual network will be allowed/disallowed' +
    '\n      Valid values are [true,false]'))
    .option('-y, --allow-gateway-transit <allow-gateway-transit>', $('if gatewayLinks can be used in remote virtual network’s link to this virtual network' +
    '\n      Valid values are [true,false]'))
    .option('-w, --use-remote-gateways <use-remote-gateways>', $('if remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remotepeering is also true, virtual network will use gateways of remote virtual network for transit. Only 1 peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.' +
    '\n      Valid values are [true,false]'))
    .option('-a, --allow-vnet-access <allow-vnet-access>', $('whether the VMs in the linked virtual network space would be able to access all the VMs in local Virtual network space' +
    '\n      Valid values are [true,false]'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, vnetName, name, remoteVnetId, options, _) {
      if(!resourceGroup) {
        resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
      }
      if(!vnetName) {
        vnetName = cli.interaction.promptIfNotGiven($('virtual-network-name : '), vnetName, _);
      }
      if(!name) {
        name = cli.interaction.promptIfNotGiven($('virtual-network-peering-name : '), name, _);
      }

      if(!options.remoteVnetId) {
        options.remoteVnetId = cli.interaction.promptIfNotGiven($('remote-virtual-network-id : '), remoteVnetId || options.remoteVnetId, _);
      }

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var result;

      var progress = cli.interaction.progress(util.format($('Looking up the virtual network peering "%s"'), name));
      try {
        result = networkManagementClient.virtualNetworkPeerings.get(resourceGroup, vnetName, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          result = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }
      if (result) {
        throw new Error(util.format($('A virtual network peering with name "%s" already exists in the resource group "%s"'), name, resourceGroup));
      }

      var parameters = {};
      if(options.remoteVnetId) {
        parameters.remoteVirtualNetwork = {};
        parameters.remoteVirtualNetwork.id = options.remoteVnetId;
      }
      if(options.allowForwardedTraffic) {
        parameters.allowForwardedTraffic = utils.parseBool(options.allowForwardedTraffic);
      }
      if(options.allowGatewayTransit) {
        parameters.allowGatewayTransit = utils.parseBool(options.allowGatewayTransit);
      }
      if(options.useRemoteGateways) {
        parameters.useRemoteGateways = utils.parseBool(options.useRemoteGateways);
      }
      if(options.allowVnetAccess) {
        parameters.allowVirtualNetworkAccess = utils.parseBool(options.allowVnetAccess);
      }

      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Creating virtual network peering "%s"'), name));
      try {
        result = networkManagementClient.virtualNetworkPeerings.createOrUpdate(resourceGroup, vnetName, name, parameters, _);
      } finally {
        progress.end();
      }
      cli.interaction.formatOutput(result, generatorUtils.traverse);
    });

  virtualNetworkPeerings.command('set [resource-group] [vnet-name] [name]')
    .description($('Update a virtual network peering'))
    .usage('[options] <resource-group> <vnet-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the resource-group of virtual network peering'))
    .option('-e, --vnet-name <vnet-name>', $('the virtual-network-name of virtual network peering'))
    .option('-n, --name <name>', $('the virtual-network-peering-name of virtual network peering'))
    .option('-f, --allow-forwarded-traffic <allow-forwarded-traffic>', $('whether the forwarded traffic from the VMs in the remote virtual network will be allowed/disallowed' +
    '\n      Valid values are [true,false]'))
    .option('-y, --allow-gateway-transit <allow-gateway-transit>', $('if gatewayLinks can be used in remote virtual network’s link to this virtual network' +
    '\n      Valid values are [true,false]'))
    .option('-w, --use-remote-gateways <use-remote-gateways>', $('if remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remotepeering is also true, virtual network will use gateways of remote virtual network for transit. Only 1 peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.'+
    '\n      Valid values are [true,false]'))
    .option('-a, --allow-vnet-access <allow-vnet-access>', $('whether the VMs in the linked virtual network space would be able to access all the VMs in local Virtual network space' +
    '\n      Valid values are [true,false]'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, vnetName, name, options, _) {
      if(!resourceGroup) {
        resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
      }
      if(!vnetName) {
        vnetName = cli.interaction.promptIfNotGiven($('virtual-network-name : '), vnetName, _);
      }
      if(!name) {
        name = cli.interaction.promptIfNotGiven($('virtual-network-peering-name : '), name, _);
      }

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var result;

      var progress = cli.interaction.progress(util.format($('Looking up the virtual network peering "%s"'), name));
      try {
        result = networkManagementClient.virtualNetworkPeerings.get(resourceGroup, vnetName, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          result = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }
      if (!result) {
        throw new Error(util.format($('A virtual network peering with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      var parameters = result;
      if(options.allowForwardedTraffic) {
        parameters.allowForwardedTraffic = utils.parseBool(options.allowForwardedTraffic);
      }
      if(options.allowGatewayTransit) {
        parameters.allowGatewayTransit = utils.parseBool(options.allowGatewayTransit);
      }
      if(options.useRemoteGateways) {
        parameters.useRemoteGateways = utils.parseBool(options.useRemoteGateways);
      }
      if(options.allowVnetAccess) {
        parameters.allowVirtualNetworkAccess = utils.parseBool(options.allowVnetAccess);
      }

      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Updating virtual network peering "%s"'), name));
      try {
        result = networkManagementClient.virtualNetworkPeerings.createOrUpdate(resourceGroup, vnetName, name, parameters, _);
      } finally {
        progress.end();
      }
      cli.interaction.formatOutput(result, generatorUtils.traverse);
    });

  virtualNetworkPeerings.command('delete [resource-group] [vnet-name] [name]')
    .description($('Delete a virtual network peering'))
    .usage('[options] <resource-group> <vnet-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the resource-group of virtual network peering'))
    .option('-e, --vnet-name <vnet-name>', $('the virtual-network-name of virtual network peering'))
    .option('-n, --name <name>', $('the virtual-network-peering-name of virtual network peering'))
    .option('-q, --quiet', $('quiet mode, do not ask for delete confirmation'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, vnetName, name, options, _) {
      if(!resourceGroup) {
        resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
      }
      if(!vnetName) {
        vnetName = cli.interaction.promptIfNotGiven($('virtual-network-name : '), vnetName, _);
      }
      if(!name) {
        name = cli.interaction.promptIfNotGiven($('virtual-network-peering-name : '), name, _);
      }

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);
      var result;

      var progress = cli.interaction.progress(util.format($('Looking up the virtual network peering "%s"'), name));
      try {
        result = networkManagementClient.virtualNetworkPeerings.get(resourceGroup, vnetName, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          result = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }
      if (!result) {
        throw new Error(util.format($('A virtual network peering with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }
      if (!options.quiet && !cli.interaction.confirm(util.format($('Delete virtual network peering "%s"? [y/n] '), name), _)) {
        return;
      }

      progress = cli.interaction.progress(util.format($('Deleting virtual network peering "%s"'), name));
      try {
        networkManagementClient.virtualNetworkPeerings.deleteMethod(resourceGroup, vnetName, name, _);
      } finally {
        progress.end();
      }
    });

  virtualNetworkPeerings.command('show [resource-group] [vnet-name] [name]')
    .description($('Show a virtual network peering'))
    .usage('[options] <resource-group> <vnet-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the resource-group of virtual network peering'))
    .option('-e, --vnet-name <vnet-name>', $('the virtual-network-name of virtual network peering'))
    .option('-n, --name <name>', $('the virtual-network-peering-name of virtual network peering'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, vnetName, name, options, _) {
      if(!resourceGroup) {
        resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
      }
      if(!vnetName) {
        vnetName = cli.interaction.promptIfNotGiven($('virtual-network-name : '), vnetName, _);
      }
      if(!name) {
        name = cli.interaction.promptIfNotGiven($('virtual-network-peering-name : '), name, _);
      }

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);
      var result;

      var progress = cli.interaction.progress(util.format($('Looking up the virtual network peering "%s"'), name));
      try {
        result = networkManagementClient.virtualNetworkPeerings.get(resourceGroup, vnetName, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          result = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }
      if (!result) {
        cli.output.warn(util.format($('A virtual network peering with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }
      cli.interaction.formatOutput(result, generatorUtils.traverse);
    });

  virtualNetworkPeerings.command('list [resource-group] [vnet-name]')
    .description($('List a virtual network peerings'))
    .usage('[options] <resource-group> <vnet-name>')
    .option('-g, --resource-group <resource-group>', $('the resource-group of virtual network peerings'))
    .option('-e, --vnet-name <vnet-name>', $('the virtual-network-name of virtual network peerings'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, vnetName, options, _) {
      options.resourceGroup = resourceGroup;
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var result = null;

      var progress;
      try {
        if(typeof networkManagementClient.virtualNetworkPeerings.listAll != 'function') {
          if(!resourceGroup) {
            resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
          }
          if(!vnetName) {
            vnetName = cli.interaction.promptIfNotGiven($('virtual-network-name : '), vnetName, _);
          }
          progress = cli.interaction.progress($('Getting the virtual network peerings'));
          result = networkManagementClient.virtualNetworkPeerings.list(resourceGroup, vnetName,  _);
        } else {
          if(options.resourceGroup) {
            if(!vnetName) {
              vnetName = cli.interaction.promptIfNotGiven($('virtual-network-name : '), vnetName, _);
            }
            progress = cli.interaction.progress($('Getting the virtual network peerings'));
            result = networkManagementClient.virtualNetworkPeerings.list(resourceGroup, vnetName,  _);
          } else {
            if(!vnetName) {
              vnetName = cli.interaction.promptIfNotGiven($('virtual-network-name : '), vnetName, _);
            }
            progress = cli.interaction.progress($('Getting the virtual network peerings'));
            result = networkManagementClient.virtualNetworkPeerings.listAll(vnetName, _);
          }
        }
      } finally {
        progress.end();
      }

      if (result.length === 0) {
        cli.output.warn($('No virtual network peerings found'));
      } else {
       cli.output.table(result, function (row, item) {
          row.cell($('Name'), item.name);
          var resInfo = resourceUtils.getResourceInformation(item.id);
          row.cell($('Resource group'), resInfo.resourceGroup);
          row.cell($('Provisioning state'), item.provisioningState);
        });
      }
    });
};
