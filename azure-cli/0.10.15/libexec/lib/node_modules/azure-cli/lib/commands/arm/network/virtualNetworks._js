/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var constants = require('./constants');
var generatorUtils = require('../../../util/generatorUtils');
var resourceUtils = require('../resource/resourceUtils');
var tagUtils = require('../tag/tagUtils');
var util = require('util');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;

exports.init = function (cli) {
  var network = cli.category('network')
    .description($('Commands to manage network resources'));
  var virtualNetworks = network.category('vnet')
    .description($('Commands to manage virtual networks'));

  var defaultAddressPrefixes = '10.0.0.0/8';

  virtualNetworks.command('create [resource-group] [name] [location]')
    .description($('Create a virtual network'))
    .usage('[options] <resource-group> <name> <location>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-n, --name <name>', $('the name of the virtual network'))
    .option('-l, --location <location>', $('the location'))
    .option('-a, --address-prefixes [address-prefixes]', $('a list of address blocks reserved for' +
      '\n     this virtual network in CIDR notation'))
    .option('-d, --dns-servers [dns-servers]', $('the list of DNS servers IP addresses'))
    .option('-t, --tags [tags]', $(constants.help.tags.create))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, name, location, options, _) {
      var useDefaults = true;
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
      options.location = cli.interaction.promptIfNotGiven($('location : '), location, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var virtualNetwork;
      var progress = cli.interaction.progress(util.format($('Looking up the virtual network "%s"'), name));
      try {
        virtualNetwork = networkManagementClient.virtualNetworks.get(resourceGroup, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          virtualNetwork = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (virtualNetwork) {
        throw new Error(util.format($('virtual network with name "%s" already exists in the resource group "%s"'), name, resourceGroup));
      }

      var parameters = {};
      if(options.location) {
        parameters.location = options.location;
      }

      if(!parameters.addressSpace) {
        parameters.addressSpace = {};
      }
      if(options.addressPrefixes) {
        parameters.addressSpace.addressPrefixes = [];
        parameters.addressSpace.addressPrefixes = parameters.addressSpace.addressPrefixes.concat(options.addressPrefixes.split(','));
      } else if(useDefaults) {
        parameters.addressSpace.addressPrefixes = [defaultAddressPrefixes];
      }

      if(!parameters.dhcpOptions) {
        parameters.dhcpOptions = {};
      }
      if(options.dnsServers) {
        parameters.dhcpOptions.dnsServers = [];
        parameters.dhcpOptions.dnsServers = parameters.dhcpOptions.dnsServers.concat(options.dnsServers.split(','));
      }

      if(options.tags && utils.argHasValue(options.tags)) {
        tagUtils.appendTags(parameters, options);
      }

      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Creating virtual network "%s"'), name));
      try {
        virtualNetwork = networkManagementClient.virtualNetworks.createOrUpdate(resourceGroup, name, parameters, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(virtualNetwork, generatorUtils.traverse);
    });

  virtualNetworks.command('set [resource-group] [name]')
    .description($('Update a virtual network'))
    .usage('[options] <resource-group> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-n, --name <name>', $('the name of the virtual network'))
    .option('-a, --address-prefixes [address-prefixes]', $('a list of address blocks reserved for' +
      '\n     this virtual network in CIDR notation'))
    .option('-d, --dns-servers [dns-servers]', $('the list of DNS servers IP addresses'))
    .option('-t, --tags [tags]', $(constants.help.tags.create))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, name, options, _) {
      var useDefaults = false;
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var virtualNetwork;
      var progress = cli.interaction.progress(util.format($('Looking up the virtual network "%s"'), name));
      try {
        virtualNetwork = networkManagementClient.virtualNetworks.get(resourceGroup, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          virtualNetwork = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!virtualNetwork) {
        throw new Error(util.format($('virtual network with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      var parameters = virtualNetwork;
      if(!parameters.addressSpace) {
        parameters.addressSpace = {};
      }
      if(options.addressPrefixes) {
        if(virtualNetwork && virtualNetwork.addressSpace && virtualNetwork.addressSpace.addressPrefixes) {
          parameters.addressSpace.addressPrefixes = virtualNetwork.addressSpace.addressPrefixes;
        } else {
          parameters.addressSpace.addressPrefixes = [];
        }
        parameters.addressSpace.addressPrefixes = parameters.addressSpace.addressPrefixes.concat(options.addressPrefixes.split(','));
      } else if(useDefaults) {
        parameters.addressSpace.addressPrefixes = [defaultAddressPrefixes];
      }

      if(!parameters.dhcpOptions) {
        parameters.dhcpOptions = {};
      }
      if(options.dnsServers) {
        if(!utils.argHasValue(options.dnsServers)) {
          delete parameters.dhcpOptions.dnsServers;
        } else {
          if(virtualNetwork && virtualNetwork.dhcpOptions && virtualNetwork.dhcpOptions.dnsServers) {
            parameters.dhcpOptions.dnsServers = virtualNetwork.dhcpOptions.dnsServers;
          } else {
            parameters.dhcpOptions.dnsServers = [];
          }
          parameters.dhcpOptions.dnsServers = parameters.dhcpOptions.dnsServers.concat(options.dnsServers.split(','));
        }
      }

      if(options.tags && utils.argHasValue(options.tags)) {
        tagUtils.appendTags(parameters, options);
      }

      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Updating virtual network "%s"'), name));
      try {
        virtualNetwork = networkManagementClient.virtualNetworks.createOrUpdate(resourceGroup, name, parameters, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(virtualNetwork, generatorUtils.traverse);
    });

  virtualNetworks.command('delete [resource-group] [name]')
    .description($('Delete a virtual network'))
    .usage('[options] <resource-group> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-n, --name <name>', $('the name of the virtual network'))
    .option('-q, --quiet', $('quiet mode, do not ask for delete confirmation'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var virtualNetwork;
      var progress = cli.interaction.progress(util.format($('Looking up the virtual network "%s"'), name));
      try {
        virtualNetwork = networkManagementClient.virtualNetworks.get(resourceGroup, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          virtualNetwork = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!virtualNetwork) {
        throw new Error(util.format($('virtual network with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      if (!options.quiet && !cli.interaction.confirm(util.format($('Delete virtual network "%s"? [y/n] '), name), _)) {
        cli.output.info(util.format($('virtual network "%s" was not deleted and still exists in the resource group "%s"'), name, resourceGroup));
        return;
      }

      progress = cli.interaction.progress(util.format($('Deleting virtual network "%s"'), name));
      try {
        virtualNetwork = networkManagementClient.virtualNetworks.deleteMethod(resourceGroup, name, _);
        cli.output.info(util.format($('virtual network "%s" was successfully deleted from resource group "%s"'), name, resourceGroup));
      } finally {
        progress.end();
      }
    });

  virtualNetworks.command('show [resource-group] [name]')
    .description($('Show a virtual network'))
    .usage('[options] <resource-group> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-n, --name <name>', $('the name of the virtual network'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var virtualNetwork;
      var progress = cli.interaction.progress(util.format($('Looking up the virtual network "%s"'), name));
      try {
        virtualNetwork = networkManagementClient.virtualNetworks.get(resourceGroup, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          virtualNetwork = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!virtualNetwork) {
        cli.output.warn(util.format($('virtual network with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      cli.interaction.formatOutput(virtualNetwork, generatorUtils.traverse);
    });

  virtualNetworks.command('list [resource-group]')
    .description($('List virtual networks'))
    .usage('[options] <resource-group>')
    .option('-g, --resource-group [resource-group]', $('the name of the resource group'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, options, _) {
      options.resourceGroup = resourceGroup;
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var virtualNetwork = null;
      var progress;
      try {
        if(typeof networkManagementClient.virtualNetworks.listAll != 'function') {
          resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
          progress = cli.interaction.progress($('Getting the virtual networks'));
          virtualNetwork = networkManagementClient.virtualNetworks.list(resourceGroup,  _);
        } else {
          if(options.resourceGroup) {
            progress = cli.interaction.progress($('Getting the virtual networks'));
            virtualNetwork = networkManagementClient.virtualNetworks.list(resourceGroup,  _);
          } else {
            progress = cli.interaction.progress($('Getting the virtual networks'));
            virtualNetwork = networkManagementClient.virtualNetworks.listAll(_);
          }
        }
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(virtualNetwork, function(virtualNetwork) {
        if (virtualNetwork.length === 0) {
          cli.output.warn($('No virtual networks found'));
        } else {
          cli.output.table(virtualNetwork, function (row, item) {
            row.cell($('Name'), item.name);
            row.cell($('Location'), item.location || '');
            var resInfo = resourceUtils.getResourceInformation(item.id);
            row.cell($('Resource group'), resInfo.resourceGroup);
            row.cell($('Provisioning state'), item.provisioningState);
          });
        }
      });
    });

  virtualNetworks.command('usage [resource-group] [name]')
    .description($('Perform list usage operation on a virtual network'))
    .usage('[options] <resource-group> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-n, --name <name>', $('the name of the virtual network'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var virtualNetwork;

      var progress = cli.interaction.progress(util.format($('Looking up the virtual network "%s"'), name));
      try {
        virtualNetwork = networkManagementClient.virtualNetworks.get(resourceGroup, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          virtualNetwork = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!virtualNetwork) {
        throw new Error(util.format($('a virtual network with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }
      var parameters = {};
      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Performing list usage operation on a virtual network "%s"'), name));
      try {
        virtualNetwork = networkManagementClient.virtualNetworks.listUsage(resourceGroup, name, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(virtualNetwork, generatorUtils.traverse);
    });
};
