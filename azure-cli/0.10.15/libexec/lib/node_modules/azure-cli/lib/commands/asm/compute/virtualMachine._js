/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

/*

Generated Command List:

azure virtual-machine delete 
--service-name $p0
--name $p1
--virtual-machine-name $p2
--delete-from-storage $p3

azure virtual-machine show 
--service-name $p0
--name $p1
--virtual-machine-name $p2

azure virtual-machine get-remote-desktop-file 
--service-name $p0
--name $p1
--virtual-machine-name $p2

azure virtual-machine initiate-maintenance 
--service-name $p0
--name $p1
--virtual-machine-name $p2

azure virtual-machine redeploy 
--service-name $p0
--name $p1
--virtual-machine-name $p2

azure virtual-machine restart 
--service-name $p0
--name $p1
--virtual-machine-name $p2

azure virtual-machine start 
--service-name $p0
--name $p1
--virtual-machine-name $p2


*/

'use strict';

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;
function capitalize(str) {
  if (str && str.length >= 1) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  else {
    return str;
  }
}

function makeTuple(k, v, d) {
  return { key : k, value : v, depth : d };
}

function displayImpl(o, key, depth, arr) {
  if ((!!o) && (o.constructor === Object || o.constructor === Array)) {
    arr.push(makeTuple(key, '', depth));
    var len = 0;
    Object.keys(o).forEach(function(k1) {
      var v1 = o[k1];
      var p1 = o.constructor === Array ? '#' : '';
      var w = displayImpl(v1, p1 + k1, depth + 1, arr);
      if (w > len) {
        len = w;
      }
    });
    return len;
  }
  else {
    arr.push(makeTuple(key, o ? o.toString() : '', depth));
    return depth * 2 + (key ? key.toString().length : 0);
  }
}

function display(cli, o) {
  var arr = [];
  var width = displayImpl(o, '', 0, arr);
  for (var t in arr) {
    var prebuf = new Array(arr[t].depth * 2).join(' ');
    var key = arr[t].key ? arr[t].key : '';
    var postLen = width - (prebuf.length + key.length);
    var postbuf = new Array(postLen > 0 ? postLen : 0).join(' ');
    var str = prebuf + capitalize(key) + postbuf;
    if (arr[t].value) {
      str += ' : ' + arr[t].value;
    }
    cli.output.data(str);
  }
}
exports.init = function (cli) {



/*
  VirtualMachine Delete
  --service-name
  --name
  --virtual-machine-name
  --delete-from-storage
*/
  var virtualMachineDelete = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineDelete.command('delete [service-name] [name] [virtual-machine-name] [delete-from-storage]')
  .description($('The Delete Role operation deletes the specified virtual machine. (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157184.aspx for more information)'))
  .usage('[options] <service-name> <name> <virtual-machine-name> <delete-from-storage>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--delete-from-storage <delete-from-storage>', $('delete-from-storage'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, virtualMachineName, deleteFromStorage, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    if (!deleteFromStorage) {
      deleteFromStorage = cli.interaction.promptIfNotGiven($('delete-from-storage : '), deleteFromStorage, _);
    }

    cli.output.verbose('deleteFromStorage = ' + deleteFromStorage);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.deleteMethod(serviceName, name, virtualMachineName, deleteFromStorage, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachine Get
  --service-name
  --name
  --virtual-machine-name
*/
  var virtualMachineGet = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineGet.command('show [service-name] [name] [virtual-machine-name]')
  .description($('The Get Role operation retrieves information about the specified virtual machine.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157193.aspx for more information)'))
  .usage('[options] <service-name> <name> <virtual-machine-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, virtualMachineName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.get(serviceName, name, virtualMachineName, _);
    if (cli.output.format().json) {
      cli.output.json(result);
    }
    else {
      display(cli, result);
    }
  });
/*
  VirtualMachine GetRemoteDesktopFile
  --service-name
  --name
  --virtual-machine-name
*/
  var virtualMachineGetRemoteDesktopFile = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineGetRemoteDesktopFile.command('get-remote-desktop-file [service-name] [name] [virtual-machine-name]')
  .description($('The Download RDP file operation retrieves the Remote Desktop Protocol configuration file from the specified virtual machine. (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157183.aspx for more information)'))
  .usage('[options] <service-name> <name> <virtual-machine-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, virtualMachineName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.getRemoteDesktopFile(serviceName, name, virtualMachineName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachine InitiateMaintenance
  --service-name
  --name
  --virtual-machine-name
*/
  var virtualMachineInitiateMaintenance = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineInitiateMaintenance.command('initiate-maintenance [service-name] [name] [virtual-machine-name]')
  .description($('The Initiate Maintenance on role operation initiates maintenance on the specified virtual machine.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx for more information)'))
  .usage('[options] <service-name> <name> <virtual-machine-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, virtualMachineName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.initiateMaintenance(serviceName, name, virtualMachineName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachine Redeploy
  --service-name
  --name
  --virtual-machine-name
*/
  var virtualMachineRedeploy = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineRedeploy.command('redeploy [service-name] [name] [virtual-machine-name]')
  .description($('The Redeploy role operation redeploys the specified virtual machine.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx for more information)'))
  .usage('[options] <service-name> <name> <virtual-machine-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, virtualMachineName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.redeploy(serviceName, name, virtualMachineName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachine Restart
  --service-name
  --name
  --virtual-machine-name
*/
  var virtualMachineRestart = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineRestart.command('restart [service-name] [name] [virtual-machine-name]')
  .description($('The Restart role operation restarts the specified virtual machine. (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx for more information)'))
  .usage('[options] <service-name> <name> <virtual-machine-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, virtualMachineName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.restart(serviceName, name, virtualMachineName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachine Start
  --service-name
  --name
  --virtual-machine-name
*/
  var virtualMachineStart = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineStart.command('start [service-name] [name] [virtual-machine-name]')
  .description($('The Start Role operation starts the specified virtual machine. (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157189.aspx for more information)'))
  .usage('[options] <service-name> <name> <virtual-machine-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, virtualMachineName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.start(serviceName, name, virtualMachineName, _);
    if (result) {
      cli.output.json(result);
    }
  });


};
