/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

/*
 Generated Command List:

 azure vnet abort-migration
 --name $p0

 azure vnet commit-migration
 --name $p0

 azure vnet prepare-migration
 --name $p0

 azure vnet validate-migration
 --name $p0

 azure reserved-ip abort-migration
 --name $p0

 azure reserved-ip commit-migration
 --name $p0

 azure reserved-ip prepare-migration
 --name $p0

 azure reserved-ip validate-migration
 --name $p0

 azure nsg abort-migration
 --name $p0

 azure nsg commit-migration
 --name $p0

 azure nsg prepare-migration
 --name $p0

 azure nsg validate-migration
 --name $p0

 azure route-table abort-migration
 --name $p0

 azure route-table commit-migration
 --name $p0

 azure route-table prepare-migration
 --name $p0

 azure route-table validate-migration
 --name $p0

*/

'use strict';
var profile = require('../../../util/profile');
var utils = require('../../../util/utils');
var $ = utils.getLocaleString;

exports.init = function (cli) {

  /*
   Network AbortMigration
   --name
   */
  var networkAbortMigration = cli.category('network').description('Commands to invoke service management operations.')
    .category('vnet').description($('Commands to manage your network.  '));
  networkAbortMigration.command('abort-migration [name]')
    .description($('Abort Virtual Network migration api validates and aborts the given virtual network for IaaS Classic to ARM migration.'))
    .usage('[options] <name>')
    .option('-n, --name <name>', $('name'))
    .option('-s, --subscription <subscription>', $('The subscription identifier'))
    .execute(function(name, options, _) {
      if (!name) {
        name = cli.interaction.promptIfNotGiven($('name : '), name, _);
      }

      cli.output.verbose('name = ' + name);
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkClient(subscription);
      networkManagementClient.networks.abortMigration(name, _);
    });

  /*
   Network CommitMigration
   --name
   */
  var networkCommitMigration = cli.category('network').description('Commands to invoke service management operations.')
    .category('vnet').description($('Commands to manage your network.  '));
  networkCommitMigration.command('commit-migration [name]')
    .description($('Commit Virtual Network migration api validates and commits the given virtual network for IaaS Classic to ARM migration.'))
    .usage('[options] <name>')
    .option('-n, --name <name>', $('name'))
    .option('-s, --subscription <subscription>', $('The subscription identifier'))
    .execute(function(name, options, _) {
      if (!name) {
        name = cli.interaction.promptIfNotGiven($('name : '), name, _);
      }

      cli.output.verbose('name = ' + name);
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkClient(subscription);
      networkManagementClient.networks.commitMigration(name, _);
    });

  /*
   Network PrepareMigration
   --name
   */
  var networkPrepareMigration = cli.category('network').description('Commands to invoke service management operations.')
    .category('vnet').description($('Commands to manage your network.  '));
  networkPrepareMigration.command('prepare-migration [name]')
    .description($('Prepare Virtual Network migration api validates and prepare the given virtual network for IaaS Classic to ARM migration.'))
    .usage('[options] <name>')
    .option('-n, --name <name>', $('name'))
    .option('-s, --subscription <subscription>', $('The subscription identifier'))
    .execute(function(name, options, _) {
      if (!name) {
        name = cli.interaction.promptIfNotGiven($('name : '), name, _);
      }

      cli.output.verbose('name = ' + name);
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkClient(subscription);
      networkManagementClient.networks.prepareMigration(name, _);
    });

  /*
   Network ValidateMigration
   --name
   */
  var networkValidateMigration = cli.category('network').description('Commands to invoke service management operations.')
    .category('vnet').description($('Commands to manage your network.  '));
  networkValidateMigration.command('validate-migration [name]')
    .description($('Validate Virtual Network migration api validates the given virtual network for IaaS Classic to ARM migration.'))
    .usage('[options] <name>')
    .option('-n, --name <name>', $('name'))
    .option('-s, --subscription <subscription>', $('The subscription identifier'))
    .execute(function(name, options, _) {
      if (!name) {
        name = cli.interaction.promptIfNotGiven($('name : '), name, _);
      }

      cli.output.verbose('name = ' + name);
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkClient(subscription);
      var result = networkManagementClient.networks.validateMigration(name, _);
      if (result) {
        _showValidationResults(result);
      }
    });

  /*
   ReservedIP AbortMigration
   --name
   */
  var reservedIPAbortMigration = cli.category('network').description('Commands to invoke service management operations.')
    .category('reserved-ip').description($('Commands to manage your reserved ip.  '));
  reservedIPAbortMigration.command('abort-migration [name]')
    .description($('Abort Reserved IP migration api validates and aborts the given reserved IP for IaaS Classic to ARM migration.'))
    .usage('[options] <name>')
    .option('-n, --name <name>', $('name'))
    .option('-s, --subscription <subscription>', $('The subscription identifier'))
    .execute(function(name, options, _) {
      if (!name) {
        name = cli.interaction.promptIfNotGiven($('name : '), name, _);
      }

      cli.output.verbose('name = ' + name);
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkClient(subscription);
      networkManagementClient.reservedIPs.abortMigration(name, _);
    });

  /*
   ReservedIP CommitMigration
   --name
   */
  var reservedIPCommitMigration = cli.category('network').description('Commands to invoke service management operations.')
    .category('reserved-ip').description($('Commands to manage your reserved ip.  '));
  reservedIPCommitMigration.command('commit-migration [name]')
    .description($('Commit Reserved IP migration api validates and commits the given reserved IP for IaaS Classic to ARM migration.'))
    .usage('[options] <name>')
    .option('-n, --name <name>', $('name'))
    .option('-s, --subscription <subscription>', $('The subscription identifier'))
    .execute(function(name, options, _) {
      if (!name) {
        name = cli.interaction.promptIfNotGiven($('name : '), name, _);
      }

      cli.output.verbose('name = ' + name);
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkClient(subscription);
      networkManagementClient.reservedIPs.commitMigration(name, _);
    });

  /*
   ReservedIP PrepareMigration
   --name
   */
  var reservedIPPrepareMigration = cli.category('network').description('Commands to invoke service management operations.')
    .category('reserved-ip').description($('Commands to manage your reserved ip.  '));
  reservedIPPrepareMigration.command('prepare-migration [name]')
    .description($('Prepare Reserved IP migration api validates and prepare the given reserved IP for IaaS Classic to ARM migration.'))
    .usage('[options] <name>')
    .option('-n, --name <name>', $('name'))
    .option('-s, --subscription <subscription>', $('The subscription identifier'))
    .execute(function(name, options, _) {
      if (!name) {
        name = cli.interaction.promptIfNotGiven($('name : '), name, _);
      }

      cli.output.verbose('name = ' + name);
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkClient(subscription);
      networkManagementClient.reservedIPs.prepareMigration(name, _);
    });

  /*
   ReservedIP ValidateMigration
   --name
   */
  var reservedIPValidateMigration = cli.category('network').description('Commands to invoke service management operations.')
    .category('reserved-ip').description($('Commands to manage your reserved ip.  '));
  reservedIPValidateMigration.command('validate-migration [name]')
    .description($('Validate Reserved IP migration api validates the given reserved IP for IaaS Classic to ARM migration.'))
    .usage('[options] <name>')
    .option('-n, --name <name>', $('name'))
    .option('-s, --subscription <subscription>', $('The subscription identifier'))
    .execute(function(name, options, _) {
      if (!name) {
        name = cli.interaction.promptIfNotGiven($('name : '), name, _);
      }

      cli.output.verbose('name = ' + name);
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkClient(subscription);
      var result = networkManagementClient.reservedIPs.validateMigration(name, _);
      if (result) {
        _showValidationResults(result);
      }
    });

/*
  NetworkSecurityGroup AbortMigration
  --name
*/
  var networkSecurityGroupAbortMigration = cli.category('network').description('Commands to invoke service management operations.')
    .category('nsg').description($('Commands to manage your network security group.  '));
  networkSecurityGroupAbortMigration.command('abort-migration [name]')
    .description($('Abort Network Security Group migration api validates and aborts the given network security group for IaaS Classic to ARM migration.'))
    .usage('[options] <name>')
    .option('-n, --name <name>', $('name'))
    .option('-s, --subscription <subscription>', $('The subscription identifier'))
    .execute(function(name, options, _) {
      if (!name) {
        name = cli.interaction.promptIfNotGiven($('Name : '), name, _);
      }

      cli.output.verbose('name = ' + name);
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkClient(subscription);
      networkManagementClient.networkSecurityGroups.abortMigration(name, _);
    });

/*
  NetworkSecurityGroup CommitMigration
  --name
*/
  var networkSecurityGroupCommitMigration = cli.category('network').description('Commands to invoke service management operations.')
    .category('nsg').description($('Commands to manage your network security group.  '));
  networkSecurityGroupCommitMigration.command('commit-migration [name]')
    .description($('Commit Network Security Group migration api validates and commits the given network security group for IaaS Classic to ARM migration.'))
    .usage('[options] <name>')
    .option('-n, --name <name>', $('name'))
    .option('-s, --subscription <subscription>', $('The subscription identifier'))
    .execute(function(name, options, _) {
      if (!name) {
        name = cli.interaction.promptIfNotGiven($('Name : '), name, _);
      }

      cli.output.verbose('name = ' + name);
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkClient(subscription);
      networkManagementClient.networkSecurityGroups.commitMigration(name, _);
    });

/*
  NetworkSecurityGroup PrepareMigration
  --name
*/
  var networkSecurityGroupPrepareMigration = cli.category('network').description('Commands to invoke service management operations.')
    .category('nsg').description($('Commands to manage your network security group.  '));
  networkSecurityGroupPrepareMigration.command('prepare-migration [name]')
    .description($('Prepare Network Security Group migration api validates and prepare the given network security group for IaaS Classic to ARM migration.'))
    .usage('[options] <name>')
    .option('-n, --name <name>', $('name'))
    .option('-s, --subscription <subscription>', $('The subscription identifier'))
    .execute(function(name, options, _) {
      if (!name) {
        name = cli.interaction.promptIfNotGiven($('Name : '), name, _);
      }

      cli.output.verbose('name = ' + name);
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkClient(subscription);
      networkManagementClient.networkSecurityGroups.prepareMigration(name, _);
    });

/*
  NetworkSecurityGroup ValidateMigration
  --name
*/
  var networkSecurityGroupValidateMigration = cli.category('network').description('Commands to invoke service management operations.')
    .category('nsg').description($('Commands to manage your network security group.  '));
  networkSecurityGroupValidateMigration.command('validate-migration [name]')
    .description($('Validate Network Security Group migration api validates the given network security group for IaaS Classic to ARM migration.'))
    .usage('[options] <name>')
    .option('-n, --name <name>', $('name'))
    .option('-s, --subscription <subscription>', $('The subscription identifier'))
    .execute(function(name, options, _) {
      if (!name) {
        name = cli.interaction.promptIfNotGiven($('Name : '), name, _);
      }

      cli.output.verbose('name = ' + name);
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkClient(subscription);
      var result = networkManagementClient.networkSecurityGroups.validateMigration(name, _);
      if (result) {
        _showValidationResults(result);
      }
    });

/*
  Route Table AbortMigration
  --name
*/
  var routeTableAbortMigration = cli.category('network').description('Commands to invoke service management operations.')
    .category('route-table').description($('Commands to manage your route table.  '));
  routeTableAbortMigration.command('abort-migration [name]')
    .description($('Abort Route Table migration api validates and aborts the given route table group for IaaS Classic to ARM migration.'))
    .usage('[options] <name>')
    .option('-n, --name <name>', $('name'))
    .option('-s, --subscription <subscription>', $('The subscription identifier'))
    .execute(function(name, options, _) {
      if (!name) {
        name = cli.interaction.promptIfNotGiven($('Name : '), name, _);
      }

      cli.output.verbose('name = ' + name);
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkClient(subscription);
      networkManagementClient.routes.abortMigration(name, _);
    });

/*
  Route Table CommitMigration
  --name
*/
  var routeTableCommitMigration = cli.category('network').description('Commands to invoke service management operations.')
    .category('route-table').description($('Commands to manage your route table.  '));
  routeTableCommitMigration.command('commit-migration [name]')
    .description($('Commit Route Table migration api validates and commits the given route table for IaaS Classic to ARM migration.'))
    .usage('[options] <name>')
    .option('-n, --name <name>', $('name'))
    .option('-s, --subscription <subscription>', $('The subscription identifier'))
    .execute(function(name, options, _) {
      if (!name) {
        name = cli.interaction.promptIfNotGiven($('name : '), name, _);
      }

      cli.output.verbose('name = ' + name);
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkClient(subscription);
      networkManagementClient.routes.commitMigration(name, _);
    });

/*
  Route Table PrepareMigration
  --name
*/
  var routeTablePrepareMigration = cli.category('network').description('Commands to invoke service management operations.')
    .category('route-table').description($('Commands to manage your route table.  '));
  routeTablePrepareMigration.command('prepare-migration [name]')
  .description($('Prepare Route Table migration api validates and prepare the given route table for IaaS Classic to ARM migration.'))
  .usage('[options] <name>')
  .option('-n, --name <name>', $('name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
    .execute(function(name, options, _) {
      if (!name) {
        name = cli.interaction.promptIfNotGiven($('Name : '), name, _);
      }

      cli.output.verbose('name = ' + name);
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkClient(subscription);
      networkManagementClient.routes.prepareMigration(name, _);
    });

/*
  Route Table ValidateMigration
  --name
*/
  var routeTableValidateMigration = cli.category('network').description('Commands to invoke service management operations.')
    .category('route-table').description($('Commands to manage your route table.  '));
  routeTableValidateMigration.command('validate-migration [name]')
    .description($('Validate Route Table migration api validates the given route table for IaaS Classic to ARM migration.'))
    .usage('[options] <name>')
    .option('-n, --name <name>', $('name'))
    .option('-s, --subscription <subscription>', $('The subscription identifier'))
    .execute(function(name, options, _) {
      if (!name) {
        name = cli.interaction.promptIfNotGiven($('Name : '), name, _);
      }

      cli.output.verbose('name = ' + name);
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkClient(subscription);
      var result = networkManagementClient.routes.validateMigration(name, _);
      if (result) {
        _showValidationResults(result);
      }
    });

  function _showValidationResults(result) {
    cli.interaction.formatOutput(result, function (item) {
      if(item.validationMessages) {
        item.validationMessages.forEach(function (msg) {
          cli.output.nameValue(msg.category, msg.message);
        });
      }
    });
  }
};
