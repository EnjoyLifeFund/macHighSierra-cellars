/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the SecurityRuleAssociations class.
 * @constructor
 * All security rules associated with the network interface.
 *
 * @member {object} [networkInterfaceAssociation]
 *
 * @member {string} [networkInterfaceAssociation.id] Network interface ID.
 *
 * @member {array} [networkInterfaceAssociation.securityRules] Collection of
 * custom security rules.
 *
 * @member {object} [subnetAssociation]
 *
 * @member {string} [subnetAssociation.id] Subnet ID.
 *
 * @member {array} [subnetAssociation.securityRules] Collection of custom
 * security rules.
 *
 * @member {array} [defaultSecurityRules] Collection of default security rules
 * of the network security group.
 *
 * @member {array} [effectiveSecurityRules] Collection of effective security
 * rules.
 *
 */
class SecurityRuleAssociations {
  constructor() {
  }

  /**
   * Defines the metadata of SecurityRuleAssociations
   *
   * @returns {object} metadata of SecurityRuleAssociations
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SecurityRuleAssociations',
      type: {
        name: 'Composite',
        className: 'SecurityRuleAssociations',
        modelProperties: {
          networkInterfaceAssociation: {
            required: false,
            serializedName: 'networkInterfaceAssociation',
            type: {
              name: 'Composite',
              className: 'NetworkInterfaceAssociation'
            }
          },
          subnetAssociation: {
            required: false,
            serializedName: 'subnetAssociation',
            type: {
              name: 'Composite',
              className: 'SubnetAssociation'
            }
          },
          defaultSecurityRules: {
            required: false,
            serializedName: 'defaultSecurityRules',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SecurityRuleElementType',
                  type: {
                    name: 'Composite',
                    className: 'SecurityRule'
                  }
              }
            }
          },
          effectiveSecurityRules: {
            required: false,
            serializedName: 'effectiveSecurityRules',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EffectiveNetworkSecurityRuleElementType',
                  type: {
                    name: 'Composite',
                    className: 'EffectiveNetworkSecurityRule'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = SecurityRuleAssociations;
