/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the MonitorConfig class.
 * @constructor
 * Class containing endpoint monitoring settings in a Traffic Manager profile.
 *
 * @member {string} [profileMonitorStatus] Gets or sets the profile-level
 * monitoring status of the Traffic Manager profile.
 *
 * @member {string} [protocol] Gets or sets the protocol (HTTP, HTTPS or TCP)
 * used to probe for endpoint health.
 *
 * @member {number} [port] Gets or sets the TCP port used to probe for endpoint
 * health.
 *
 * @member {string} [path] Gets or sets the path relative to the endpoint
 * domain name used to probe for endpoint health.
 *
 * @member {number} [intervalInSeconds] Gets or sets the monitor interval for
 * endpoints in this profile. This is the interval at which Traffic Manager
 * will check the health of each endpoint in this profile.
 *
 * @member {number} [timeoutInSeconds] Gets or sets the monitor timeout for
 * endpoints in this profile. This is the time that Traffic Manager allows
 * endpoints in this profile to response to the health check.
 *
 * @member {number} [toleratedNumberOfFailures] Gets or sets the number of
 * consecutive failed health check that Traffic Manager tolerates before
 * declaring an endpoint in this profile Degraded after the next failed health
 * check.
 *
 */
class MonitorConfig {
  constructor() {
  }

  /**
   * Defines the metadata of MonitorConfig
   *
   * @returns {object} metadata of MonitorConfig
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MonitorConfig',
      type: {
        name: 'Composite',
        className: 'MonitorConfig',
        modelProperties: {
          profileMonitorStatus: {
            required: false,
            serializedName: 'profileMonitorStatus',
            type: {
              name: 'String'
            }
          },
          protocol: {
            required: false,
            serializedName: 'protocol',
            type: {
              name: 'String'
            }
          },
          port: {
            required: false,
            serializedName: 'port',
            type: {
              name: 'Number'
            }
          },
          path: {
            required: false,
            serializedName: 'path',
            type: {
              name: 'String'
            }
          },
          intervalInSeconds: {
            required: false,
            serializedName: 'intervalInSeconds',
            type: {
              name: 'Number'
            }
          },
          timeoutInSeconds: {
            required: false,
            serializedName: 'timeoutInSeconds',
            type: {
              name: 'Number'
            }
          },
          toleratedNumberOfFailures: {
            required: false,
            serializedName: 'toleratedNumberOfFailures',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = MonitorConfig;
