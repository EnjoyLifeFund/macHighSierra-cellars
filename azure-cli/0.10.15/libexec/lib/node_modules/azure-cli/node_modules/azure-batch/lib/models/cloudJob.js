/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the CloudJob class.
 * @constructor
 * @summary An Azure Batch job.
 *
 * @member {string} [id] A string that uniquely identifies the job within the
 * account. The id can contain any combination of alphanumeric characters
 * including hyphens and underscores, and cannot contain more than 64
 * characters. It is common to use a GUID for the id.
 * 
 * @member {string} [displayName] The display name for the job.
 * 
 * @member {boolean} [usesTaskDependencies] The flag that determines if this
 * job will use tasks with dependencies.
 * 
 * @member {string} [url] The URL of the job.
 * 
 * @member {string} [eTag] The ETag of the job.
 * 
 * @member {date} [lastModified] The last modified time of the job.
 * 
 * @member {date} [creationTime] The creation time of the job.
 * 
 * @member {string} [state] The current state of the job. Possible values
 * include: 'active', 'disabling', 'disabled', 'enabling', 'terminating',
 * 'completed', 'deleting'
 * 
 * @member {date} [stateTransitionTime] The time at which the job entered its
 * current state.
 * 
 * @member {string} [previousState] The previous state of the job. This
 * property is not set if the job is in its initial Active state. Possible
 * values include: 'active', 'disabling', 'disabled', 'enabling',
 * 'terminating', 'completed', 'deleting'
 * 
 * @member {date} [previousStateTransitionTime] The time at which the job
 * entered its previous state. This property is not set if the job is in its
 * initial Active state.
 * 
 * @member {number} [priority] The priority of the job.  Priority values can
 * range from -1000 to 1000, with -1000 being the lowest priority and 1000
 * being the highest priority. The default value is 0.
 * 
 * @member {object} [constraints] The execution constraints for the job.
 * 
 * @member {moment.duration} [constraints.maxWallClockTime]
 * 
 * @member {number} [constraints.maxTaskRetryCount]
 * 
 * @member {object} [jobManagerTask] Details of a Job Manager task to be
 * launched when the job is started.
 * 
 * @member {string} [jobManagerTask.id]
 * 
 * @member {string} [jobManagerTask.displayName]
 * 
 * @member {string} [jobManagerTask.commandLine] The command line does not run
 * under a shell, and therefore cannot take advantage of shell features such
 * as environment variable expansion. If you want to take advantage of such
 * features, you should invoke the shell in the command line, for example
 * using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
 * 
 * @member {array} [jobManagerTask.resourceFiles]
 * 
 * @member {array} [jobManagerTask.environmentSettings]
 * 
 * @member {object} [jobManagerTask.constraints]
 * 
 * @member {moment.duration} [jobManagerTask.constraints.maxWallClockTime]
 * 
 * @member {moment.duration} [jobManagerTask.constraints.retentionTime] The
 * default is infinite.
 * 
 * @member {number} [jobManagerTask.constraints.maxTaskRetryCount]
 * 
 * @member {boolean} [jobManagerTask.killJobOnCompletion]
 * 
 * @member {boolean} [jobManagerTask.runElevated]
 * 
 * @member {boolean} [jobManagerTask.runExclusive] If true, no other tasks
 * will run on the same compute node for as long as the Job Manager is
 * running. If false, other tasks can run simultaneously with the Job Manager
 * on a compute node. The Job Manager task counts normally against the node's
 * concurrent task limit, so this is only relevant if the node allows
 * multiple concurrent tasks.
 * 
 * @member {array} [jobManagerTask.applicationPackageReferences]
 * 
 * @member {object} [jobPreparationTask] The Job Preparation task.
 * 
 * @member {string} [jobPreparationTask.id] The id can contain any combination
 * of alphanumeric characters including hyphens and underscores and cannot
 * contain more than 64 characters.
 * 
 * @member {string} [jobPreparationTask.commandLine] The command line does not
 * run under a shell, and therefore cannot take advantage of shell features
 * such as environment variable expansion. If you want to take advantage of
 * such features, you should invoke the shell in the command line, for
 * example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in
 * Linux.
 * 
 * @member {array} [jobPreparationTask.resourceFiles]
 * 
 * @member {array} [jobPreparationTask.environmentSettings]
 * 
 * @member {object} [jobPreparationTask.constraints]
 * 
 * @member {moment.duration} [jobPreparationTask.constraints.maxWallClockTime]
 * 
 * @member {moment.duration} [jobPreparationTask.constraints.retentionTime]
 * The default is infinite.
 * 
 * @member {number} [jobPreparationTask.constraints.maxTaskRetryCount]
 * 
 * @member {boolean} [jobPreparationTask.waitForSuccess]
 * 
 * @member {boolean} [jobPreparationTask.runElevated]
 * 
 * @member {boolean} [jobPreparationTask.rerunOnNodeRebootAfterSuccess] Note
 * that the Job Preparation task should still be written to be idempotent
 * because it can be rerun if the compute node is rebooted while Job
 * Preparation task is still running. The default value is true.
 * 
 * @member {object} [jobReleaseTask] The Job Release task.
 * 
 * @member {string} [jobReleaseTask.id] The id can contain any combination of
 * alphanumeric characters including hyphens and underscores and cannot
 * contain more than 64 characters.
 * 
 * @member {string} [jobReleaseTask.commandLine] The command line does not run
 * under a shell, and therefore cannot take advantage of shell features such
 * as environment variable expansion. If you want to take advantage of such
 * features, you should invoke the shell in the command line, for example
 * using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
 * 
 * @member {array} [jobReleaseTask.resourceFiles]
 * 
 * @member {array} [jobReleaseTask.environmentSettings]
 * 
 * @member {moment.duration} [jobReleaseTask.maxWallClockTime]
 * 
 * @member {moment.duration} [jobReleaseTask.retentionTime]  The default is
 * infinite.
 * 
 * @member {boolean} [jobReleaseTask.runElevated] The default value is false.
 * 
 * @member {array} [commonEnvironmentSettings] The list of common environment
 * variable settings. These environment variables are set for all tasks in
 * the job (including the Job Manager, Job Preparation and Job Release tasks).
 * 
 * @member {object} [poolInfo] The pool on which the Batch service runs the
 * job's tasks.
 * 
 * @member {string} [poolInfo.poolId] You must specify either poolId or
 * autoPoolSpecification, but not both.
 * 
 * @member {object} [poolInfo.autoPoolSpecification] You must specify either
 * poolId or autoPoolSpecification, but not both.
 * 
 * @member {string} [poolInfo.autoPoolSpecification.autoPoolIdPrefix] The
 * prefix can be up to 20 characters long.
 * 
 * @member {string} [poolInfo.autoPoolSpecification.poolLifetimeOption]
 * Possible values include: 'jobschedule', 'job', 'unmapped'
 * 
 * @member {boolean} [poolInfo.autoPoolSpecification.keepAlive]
 * 
 * @member {object} [poolInfo.autoPoolSpecification.pool]
 * 
 * @member {string} [poolInfo.autoPoolSpecification.pool.displayName]
 * 
 * @member {string} [poolInfo.autoPoolSpecification.pool.vmSize]
 * 
 * @member {object}
 * [poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration] This
 * property and VirtualMachineConfiguration are mutually exclusive and one of
 * the properties must be specified.
 * 
 * @member {string}
 * [poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.osFamily]
 * 
 * @member {string}
 * [poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.targetOSVersion]
 * The default value is * which specifies the latest operating system version
 * for the specified OS family.
 * 
 * @member {string}
 * [poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.currentOSVersion]
 * 
 * @member {object}
 * [poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration] This
 * property and CloudServiceConfiguration are mutually exclusive and one of
 * the properties must be specified.
 * 
 * @member {object}
 * [poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference]
 * 
 * @member {string}
 * [poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.publisher]
 * For example, Canonical or MicrosoftWindowsServer.
 * 
 * @member {string}
 * [poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.offer]
 * For example, UbuntuServer or WindowsServer.
 * 
 * @member {string}
 * [poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.sku]
 * For example, 14.04.0-LTS or 2012-R2-Datacenter.
 * 
 * @member {string}
 * [poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.version]
 * A value of 'latest' can be specified to select the latest version of an
 * image. If omitted, the default is 'latest'.
 * 
 * @member {string}
 * [poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.nodeAgentSKUId]
 * The Batch node agent is a program that runs on each node in the pool, and
 * provides the command-and-control interface between the node and the Batch
 * service. There are different implementations of the node agent, known as
 * SKUs, for different operating systems.
 * 
 * @member {object}
 * [poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.windowsConfiguration]
 * This property must not be specified if the imageReference property
 * specifies a Linux OS image.
 * 
 * @member {boolean}
 * [poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.windowsConfiguration.enableAutomaticUpdates]
 * If omitted, the default value is true.
 * 
 * @member {number} [poolInfo.autoPoolSpecification.pool.maxTasksPerNode]
 * 
 * @member {object} [poolInfo.autoPoolSpecification.pool.taskSchedulingPolicy]
 * How tasks are distributed among compute nodes in the pool.
 * 
 * @member {string}
 * [poolInfo.autoPoolSpecification.pool.taskSchedulingPolicy.nodeFillType]
 * Possible values include: 'spread', 'pack', 'unmapped'
 * 
 * @member {moment.duration}
 * [poolInfo.autoPoolSpecification.pool.resizeTimeout]
 * 
 * @member {number} [poolInfo.autoPoolSpecification.pool.targetDedicated]
 * 
 * @member {boolean} [poolInfo.autoPoolSpecification.pool.enableAutoScale]
 * 
 * @member {string} [poolInfo.autoPoolSpecification.pool.autoScaleFormula]
 * 
 * @member {moment.duration}
 * [poolInfo.autoPoolSpecification.pool.autoScaleEvaluationInterval]
 * 
 * @member {boolean}
 * [poolInfo.autoPoolSpecification.pool.enableInterNodeCommunication]
 * 
 * @member {object} [poolInfo.autoPoolSpecification.pool.networkConfiguration]
 * 
 * @member {string}
 * [poolInfo.autoPoolSpecification.pool.networkConfiguration.subnetId] The
 * ARM resource identifier of the virtual network subnet which the compute
 * nodes of the pool will join. The virtual network must be in the same
 * region and subscription as the Azure Batch account. This property can only
 * be specified for pools created with a cloudServiceConfiguration.
 * 
 * @member {object} [poolInfo.autoPoolSpecification.pool.startTask]
 * 
 * @member {string}
 * [poolInfo.autoPoolSpecification.pool.startTask.commandLine] The command
 * line does not run under a shell, and therefore cannot take advantage of
 * shell features such as environment variable expansion. If you want to take
 * advantage of such features, you should invoke the shell in the command
 * line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c
 * MyCommand" in Linux.
 * 
 * @member {array}
 * [poolInfo.autoPoolSpecification.pool.startTask.resourceFiles]
 * 
 * @member {array}
 * [poolInfo.autoPoolSpecification.pool.startTask.environmentSettings]
 * 
 * @member {boolean}
 * [poolInfo.autoPoolSpecification.pool.startTask.runElevated]
 * 
 * @member {number}
 * [poolInfo.autoPoolSpecification.pool.startTask.maxTaskRetryCount]
 * 
 * @member {boolean}
 * [poolInfo.autoPoolSpecification.pool.startTask.waitForSuccess]
 * 
 * @member {array} [poolInfo.autoPoolSpecification.pool.certificateReferences]
 * 
 * @member {array}
 * [poolInfo.autoPoolSpecification.pool.applicationPackageReferences]
 * 
 * @member {array} [poolInfo.autoPoolSpecification.pool.metadata]
 * 
 * @member {string} [onAllTasksComplete] The action the Batch service should
 * take when all tasks in the job are in the completed state. Possible values
 * include: 'noAction', 'terminateJob'
 * 
 * @member {string} [onTaskFailure] The action the Batch service should take
 * when any task in the job fails. A task is considered to have failed if it
 * completes with a non-zero exit code and has exhausted its retry count, or
 * if it had a scheduling error. Possible values include: 'noAction',
 * 'performExitOptionsJobAction'
 * 
 * @member {array} [metadata] A list of name-value pairs associated with the
 * job as metadata.
 * 
 * @member {object} [executionInfo] The execution information for the job.
 * 
 * @member {date} [executionInfo.startTime]
 * 
 * @member {date} [executionInfo.endTime] This property is set only if the job
 * is in the completed state.
 * 
 * @member {string} [executionInfo.poolId]
 * 
 * @member {object} [executionInfo.schedulingError]
 * 
 * @member {string} [executionInfo.schedulingError.category] Possible values
 * include: 'usererror', 'servererror', 'unmapped'
 * 
 * @member {string} [executionInfo.schedulingError.code]
 * 
 * @member {string} [executionInfo.schedulingError.message]
 * 
 * @member {array} [executionInfo.schedulingError.details]
 * 
 * @member {string} [executionInfo.terminateReason]
 * 
 * @member {object} [stats] Resource usage statistics for the entire lifetime
 * of the job.
 * 
 * @member {string} [stats.url]
 * 
 * @member {date} [stats.startTime]
 * 
 * @member {date} [stats.lastUpdateTime]
 * 
 * @member {moment.duration} [stats.userCPUTime]
 * 
 * @member {moment.duration} [stats.kernelCPUTime]
 * 
 * @member {moment.duration} [stats.wallClockTime]
 * 
 * @member {number} [stats.readIOps]
 * 
 * @member {number} [stats.writeIOps]
 * 
 * @member {number} [stats.readIOGiB]
 * 
 * @member {number} [stats.writeIOGiB]
 * 
 * @member {number} [stats.numSucceededTasks]
 * 
 * @member {number} [stats.numFailedTasks]
 * 
 * @member {number} [stats.numTaskRetries]
 * 
 * @member {moment.duration} [stats.waitTime] The wait time for a task is
 * defined as the elapsed time between the creation of the task and the start
 * of task execution. (If the task is retried due to failures, the wait time
 * is the time to the most recent task execution.)
 * 
 */
function CloudJob() {
}

/**
 * Defines the metadata of CloudJob
 *
 * @returns {object} metadata of CloudJob
 *
 */
CloudJob.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'CloudJob',
    type: {
      name: 'Composite',
      className: 'CloudJob',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        displayName: {
          required: false,
          serializedName: 'displayName',
          type: {
            name: 'String'
          }
        },
        usesTaskDependencies: {
          required: false,
          serializedName: 'usesTaskDependencies',
          type: {
            name: 'Boolean'
          }
        },
        url: {
          required: false,
          serializedName: 'url',
          type: {
            name: 'String'
          }
        },
        eTag: {
          required: false,
          serializedName: 'eTag',
          type: {
            name: 'String'
          }
        },
        lastModified: {
          required: false,
          serializedName: 'lastModified',
          type: {
            name: 'DateTime'
          }
        },
        creationTime: {
          required: false,
          serializedName: 'creationTime',
          type: {
            name: 'DateTime'
          }
        },
        state: {
          required: false,
          serializedName: 'state',
          type: {
            name: 'Enum',
            allowedValues: [ 'active', 'disabling', 'disabled', 'enabling', 'terminating', 'completed', 'deleting' ]
          }
        },
        stateTransitionTime: {
          required: false,
          serializedName: 'stateTransitionTime',
          type: {
            name: 'DateTime'
          }
        },
        previousState: {
          required: false,
          serializedName: 'previousState',
          type: {
            name: 'Enum',
            allowedValues: [ 'active', 'disabling', 'disabled', 'enabling', 'terminating', 'completed', 'deleting' ]
          }
        },
        previousStateTransitionTime: {
          required: false,
          serializedName: 'previousStateTransitionTime',
          type: {
            name: 'DateTime'
          }
        },
        priority: {
          required: false,
          serializedName: 'priority',
          type: {
            name: 'Number'
          }
        },
        constraints: {
          required: false,
          serializedName: 'constraints',
          type: {
            name: 'Composite',
            className: 'JobConstraints'
          }
        },
        jobManagerTask: {
          required: false,
          serializedName: 'jobManagerTask',
          type: {
            name: 'Composite',
            className: 'JobManagerTask'
          }
        },
        jobPreparationTask: {
          required: false,
          serializedName: 'jobPreparationTask',
          type: {
            name: 'Composite',
            className: 'JobPreparationTask'
          }
        },
        jobReleaseTask: {
          required: false,
          serializedName: 'jobReleaseTask',
          type: {
            name: 'Composite',
            className: 'JobReleaseTask'
          }
        },
        commonEnvironmentSettings: {
          required: false,
          serializedName: 'commonEnvironmentSettings',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'EnvironmentSettingElementType',
                type: {
                  name: 'Composite',
                  className: 'EnvironmentSetting'
                }
            }
          }
        },
        poolInfo: {
          required: false,
          serializedName: 'poolInfo',
          type: {
            name: 'Composite',
            className: 'PoolInformation'
          }
        },
        onAllTasksComplete: {
          required: false,
          serializedName: 'onAllTasksComplete',
          type: {
            name: 'Enum',
            allowedValues: [ 'noAction', 'terminateJob' ]
          }
        },
        onTaskFailure: {
          required: false,
          serializedName: 'onTaskFailure',
          type: {
            name: 'Enum',
            allowedValues: [ 'noAction', 'performExitOptionsJobAction' ]
          }
        },
        metadata: {
          required: false,
          serializedName: 'metadata',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'MetadataItemElementType',
                type: {
                  name: 'Composite',
                  className: 'MetadataItem'
                }
            }
          }
        },
        executionInfo: {
          required: false,
          serializedName: 'executionInfo',
          type: {
            name: 'Composite',
            className: 'JobExecutionInformation'
          }
        },
        stats: {
          required: false,
          serializedName: 'stats',
          type: {
            name: 'Composite',
            className: 'JobStatistics'
          }
        }
      }
    }
  };
};

module.exports = CloudJob;
