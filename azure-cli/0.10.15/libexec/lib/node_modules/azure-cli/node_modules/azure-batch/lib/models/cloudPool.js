/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the CloudPool class.
 * @constructor
 * @summary A pool in the Azure Batch service.
 *
 * @member {string} [id] A string that uniquely identifies the pool within the
 * account. The id can contain any combination of alphanumeric characters
 * including hyphens and underscores, and cannot contain more than 64
 * characters. It is common to use a GUID for the id.
 * 
 * @member {string} [displayName] The display name for the pool.
 * 
 * @member {string} [url] The URL of the pool.
 * 
 * @member {string} [eTag] The ETag of the pool.
 * 
 * @member {date} [lastModified] The last modified time of the pool.
 * 
 * @member {date} [creationTime] The creation time of the pool.
 * 
 * @member {string} [state] The current state of the pool. Possible values
 * include: 'active', 'deleting', 'upgrading'
 * 
 * @member {date} [stateTransitionTime] The time at which the pool entered its
 * current state.
 * 
 * @member {string} [allocationState] Whether the pool is resizing. Possible
 * values include: 'steady', 'resizing', 'stopping'
 * 
 * @member {date} [allocationStateTransitionTime] The time at which the pool
 * entered its current allocation state.
 * 
 * @member {string} [vmSize] The size of virtual machines in the pool. All
 * virtual machines in a pool are the same size.
 * 
 * @member {object} [cloudServiceConfiguration] The cloud service
 * configuration for the pool. This property and virtualMachineConfiguration
 * are mutually exclusive and one of the properties must be specified.
 * 
 * @member {string} [cloudServiceConfiguration.osFamily]
 * 
 * @member {string} [cloudServiceConfiguration.targetOSVersion] The default
 * value is * which specifies the latest operating system version for the
 * specified OS family.
 * 
 * @member {string} [cloudServiceConfiguration.currentOSVersion]
 * 
 * @member {object} [virtualMachineConfiguration] The virtual machine
 * configuration for the pool. This property and cloudServiceConfiguration
 * are mutually exclusive and one of the properties must be specified.
 * 
 * @member {object} [virtualMachineConfiguration.imageReference]
 * 
 * @member {string} [virtualMachineConfiguration.imageReference.publisher] For
 * example, Canonical or MicrosoftWindowsServer.
 * 
 * @member {string} [virtualMachineConfiguration.imageReference.offer] For
 * example, UbuntuServer or WindowsServer.
 * 
 * @member {string} [virtualMachineConfiguration.imageReference.sku] For
 * example, 14.04.0-LTS or 2012-R2-Datacenter.
 * 
 * @member {string} [virtualMachineConfiguration.imageReference.version] A
 * value of 'latest' can be specified to select the latest version of an
 * image. If omitted, the default is 'latest'.
 * 
 * @member {string} [virtualMachineConfiguration.nodeAgentSKUId] The Batch
 * node agent is a program that runs on each node in the pool, and provides
 * the command-and-control interface between the node and the Batch service.
 * There are different implementations of the node agent, known as SKUs, for
 * different operating systems.
 * 
 * @member {object} [virtualMachineConfiguration.windowsConfiguration] This
 * property must not be specified if the imageReference property specifies a
 * Linux OS image.
 * 
 * @member {boolean}
 * [virtualMachineConfiguration.windowsConfiguration.enableAutomaticUpdates]
 * If omitted, the default value is true.
 * 
 * @member {moment.duration} [resizeTimeout] The timeout for allocation of
 * compute nodes to the pool. This is the timeout for the most recent resize
 * operation. The default value is 10 minutes.
 * 
 * @member {object} [resizeError] Details of any error encountered while
 * performing the last resize on the pool. This property is set only if an
 * error occurred during the last pool resize, and only when the pool
 * allocationState is Steady.
 * 
 * @member {string} [resizeError.code]
 * 
 * @member {string} [resizeError.message]
 * 
 * @member {array} [resizeError.values]
 * 
 * @member {number} [currentDedicated] The number of compute nodes currently
 * in the pool.
 * 
 * @member {number} [targetDedicated] The desired number of compute nodes in
 * the pool. This property must have the default value if enableAutoScale is
 * true. It is required if enableAutoScale is false.
 * 
 * @member {boolean} [enableAutoScale] Whether the pool size should
 * automatically adjust over time. If true, the autoScaleFormula property
 * must be set. If false, the targetDedicated property must be set.
 * 
 * @member {string} [autoScaleFormula] A formula for the desired number of
 * compute nodes in the pool.
 * 
 * @member {moment.duration} [autoScaleEvaluationInterval] A time interval for
 * the desired AutoScale evaluation period in the pool.
 * 
 * @member {object} [autoScaleRun] The results and errors from the last
 * execution of the autoscale formula.
 * 
 * @member {date} [autoScaleRun.timestamp]
 * 
 * @member {string} [autoScaleRun.results] Each variable value is returned in
 * the form $variable=value, and variables are separated by semicolons.
 * 
 * @member {object} [autoScaleRun.error]
 * 
 * @member {string} [autoScaleRun.error.code]
 * 
 * @member {string} [autoScaleRun.error.message]
 * 
 * @member {array} [autoScaleRun.error.values]
 * 
 * @member {boolean} [enableInterNodeCommunication] Whether the pool permits
 * direct communication between nodes.
 * 
 * @member {object} [networkConfiguration] The network configuration for the
 * pool.
 * 
 * @member {string} [networkConfiguration.subnetId] The ARM resource
 * identifier of the virtual network subnet which the compute nodes of the
 * pool will join. The virtual network must be in the same region and
 * subscription as the Azure Batch account. This property can only be
 * specified for pools created with a cloudServiceConfiguration.
 * 
 * @member {object} [startTask] A task specified to run on each compute node
 * as it joins the pool.
 * 
 * @member {string} [startTask.commandLine] The command line does not run
 * under a shell, and therefore cannot take advantage of shell features such
 * as environment variable expansion. If you want to take advantage of such
 * features, you should invoke the shell in the command line, for example
 * using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
 * 
 * @member {array} [startTask.resourceFiles]
 * 
 * @member {array} [startTask.environmentSettings]
 * 
 * @member {boolean} [startTask.runElevated]
 * 
 * @member {number} [startTask.maxTaskRetryCount]
 * 
 * @member {boolean} [startTask.waitForSuccess]
 * 
 * @member {array} [certificateReferences] The list of certificates to be
 * installed on each compute node in the pool.
 * 
 * @member {array} [applicationPackageReferences] The list of application
 * packages to be installed on each compute node in the pool.
 * 
 * @member {number} [maxTasksPerNode] The maximum number of tasks that can run
 * concurrently on a single compute node in the pool.
 * 
 * @member {object} [taskSchedulingPolicy] How the Batch service distributes
 * tasks between compute nodes in the pool.
 * 
 * @member {string} [taskSchedulingPolicy.nodeFillType] Possible values
 * include: 'spread', 'pack', 'unmapped'
 * 
 * @member {array} [metadata] A list of name-value pairs associated with the
 * pool as metadata.
 * 
 * @member {object} [stats] Utilization and resource usage statistics for the
 * entire lifetime of the pool.
 * 
 * @member {string} [stats.url]
 * 
 * @member {date} [stats.startTime]
 * 
 * @member {date} [stats.lastUpdateTime]
 * 
 * @member {object} [stats.usageStats]
 * 
 * @member {date} [stats.usageStats.startTime]
 * 
 * @member {date} [stats.usageStats.lastUpdateTime]
 * 
 * @member {moment.duration} [stats.usageStats.dedicatedCoreTime]
 * 
 * @member {object} [stats.resourceStats]
 * 
 * @member {date} [stats.resourceStats.startTime]
 * 
 * @member {date} [stats.resourceStats.lastUpdateTime]
 * 
 * @member {number} [stats.resourceStats.avgCPUPercentage]
 * 
 * @member {number} [stats.resourceStats.avgMemoryGiB]
 * 
 * @member {number} [stats.resourceStats.peakMemoryGiB]
 * 
 * @member {number} [stats.resourceStats.avgDiskGiB]
 * 
 * @member {number} [stats.resourceStats.peakDiskGiB]
 * 
 * @member {number} [stats.resourceStats.diskReadIOps]
 * 
 * @member {number} [stats.resourceStats.diskWriteIOps]
 * 
 * @member {number} [stats.resourceStats.diskReadGiB]
 * 
 * @member {number} [stats.resourceStats.diskWriteGiB]
 * 
 * @member {number} [stats.resourceStats.networkReadGiB]
 * 
 * @member {number} [stats.resourceStats.networkWriteGiB]
 * 
 */
function CloudPool() {
}

/**
 * Defines the metadata of CloudPool
 *
 * @returns {object} metadata of CloudPool
 *
 */
CloudPool.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'CloudPool',
    type: {
      name: 'Composite',
      className: 'CloudPool',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        displayName: {
          required: false,
          serializedName: 'displayName',
          type: {
            name: 'String'
          }
        },
        url: {
          required: false,
          serializedName: 'url',
          type: {
            name: 'String'
          }
        },
        eTag: {
          required: false,
          serializedName: 'eTag',
          type: {
            name: 'String'
          }
        },
        lastModified: {
          required: false,
          serializedName: 'lastModified',
          type: {
            name: 'DateTime'
          }
        },
        creationTime: {
          required: false,
          serializedName: 'creationTime',
          type: {
            name: 'DateTime'
          }
        },
        state: {
          required: false,
          serializedName: 'state',
          type: {
            name: 'Enum',
            allowedValues: [ 'active', 'deleting', 'upgrading' ]
          }
        },
        stateTransitionTime: {
          required: false,
          serializedName: 'stateTransitionTime',
          type: {
            name: 'DateTime'
          }
        },
        allocationState: {
          required: false,
          serializedName: 'allocationState',
          type: {
            name: 'Enum',
            allowedValues: [ 'steady', 'resizing', 'stopping' ]
          }
        },
        allocationStateTransitionTime: {
          required: false,
          serializedName: 'allocationStateTransitionTime',
          type: {
            name: 'DateTime'
          }
        },
        vmSize: {
          required: false,
          serializedName: 'vmSize',
          type: {
            name: 'String'
          }
        },
        cloudServiceConfiguration: {
          required: false,
          serializedName: 'cloudServiceConfiguration',
          type: {
            name: 'Composite',
            className: 'CloudServiceConfiguration'
          }
        },
        virtualMachineConfiguration: {
          required: false,
          serializedName: 'virtualMachineConfiguration',
          type: {
            name: 'Composite',
            className: 'VirtualMachineConfiguration'
          }
        },
        resizeTimeout: {
          required: false,
          serializedName: 'resizeTimeout',
          type: {
            name: 'TimeSpan'
          }
        },
        resizeError: {
          required: false,
          serializedName: 'resizeError',
          type: {
            name: 'Composite',
            className: 'ResizeError'
          }
        },
        currentDedicated: {
          required: false,
          serializedName: 'currentDedicated',
          type: {
            name: 'Number'
          }
        },
        targetDedicated: {
          required: false,
          serializedName: 'targetDedicated',
          type: {
            name: 'Number'
          }
        },
        enableAutoScale: {
          required: false,
          serializedName: 'enableAutoScale',
          type: {
            name: 'Boolean'
          }
        },
        autoScaleFormula: {
          required: false,
          serializedName: 'autoScaleFormula',
          type: {
            name: 'String'
          }
        },
        autoScaleEvaluationInterval: {
          required: false,
          serializedName: 'autoScaleEvaluationInterval',
          type: {
            name: 'TimeSpan'
          }
        },
        autoScaleRun: {
          required: false,
          serializedName: 'autoScaleRun',
          type: {
            name: 'Composite',
            className: 'AutoScaleRun'
          }
        },
        enableInterNodeCommunication: {
          required: false,
          serializedName: 'enableInterNodeCommunication',
          type: {
            name: 'Boolean'
          }
        },
        networkConfiguration: {
          required: false,
          serializedName: 'networkConfiguration',
          type: {
            name: 'Composite',
            className: 'NetworkConfiguration'
          }
        },
        startTask: {
          required: false,
          serializedName: 'startTask',
          type: {
            name: 'Composite',
            className: 'StartTask'
          }
        },
        certificateReferences: {
          required: false,
          serializedName: 'certificateReferences',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'CertificateReferenceElementType',
                type: {
                  name: 'Composite',
                  className: 'CertificateReference'
                }
            }
          }
        },
        applicationPackageReferences: {
          required: false,
          serializedName: 'applicationPackageReferences',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ApplicationPackageReferenceElementType',
                type: {
                  name: 'Composite',
                  className: 'ApplicationPackageReference'
                }
            }
          }
        },
        maxTasksPerNode: {
          required: false,
          serializedName: 'maxTasksPerNode',
          type: {
            name: 'Number'
          }
        },
        taskSchedulingPolicy: {
          required: false,
          serializedName: 'taskSchedulingPolicy',
          type: {
            name: 'Composite',
            className: 'TaskSchedulingPolicy'
          }
        },
        metadata: {
          required: false,
          serializedName: 'metadata',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'MetadataItemElementType',
                type: {
                  name: 'Composite',
                  className: 'MetadataItem'
                }
            }
          }
        },
        stats: {
          required: false,
          serializedName: 'stats',
          type: {
            name: 'Composite',
            className: 'PoolStatistics'
          }
        }
      }
    }
  };
};

module.exports = CloudPool;
