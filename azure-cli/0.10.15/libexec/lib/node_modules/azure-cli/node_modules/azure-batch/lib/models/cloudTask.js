/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the CloudTask class.
 * @constructor
 * @summary An Azure Batch task.
 *
 * @member {string} [id] A string that uniquely identifies the task within the
 * job. The id can contain any combination of alphanumeric characters
 * including hyphens and underscores, and cannot contain more than 64
 * characters. It is common to use a GUID for the id.
 * 
 * @member {string} [displayName] A display name for the task.
 * 
 * @member {string} [url] The URL of the task.
 * 
 * @member {string} [eTag] The ETag of the task.
 * 
 * @member {date} [lastModified] The last modified time of the task.
 * 
 * @member {date} [creationTime] The creation time of the task.
 * 
 * @member {object} [exitConditions] How the Batch service should respond when
 * the task completes.
 * 
 * @member {array} [exitConditions.exitCodes] A list of individual task exit
 * codes and how the Batch service should respond to them.
 * 
 * @member {array} [exitConditions.exitCodeRanges] A list of task exit codes
 * ranges and how the Batch service should respond to them.
 * 
 * @member {object} [exitConditions.schedulingError] How the Batch service
 * should respond if the task fails with a scheduling error.
 * 
 * @member {string} [exitConditions.schedulingError.jobAction] An action to
 * take on the job containing the task, if the task completes with the given
 * exit condition and the job’s onTaskFailed property is
 * 'performexitoptionsjobaction'. Possible values include: 'none', 'disable',
 * 'terminate'
 * 
 * @member {object} [exitConditions.default] How the Batch service should
 * respond if the task fails with an exit condition not covered by any of the
 * other properties – that is, any nonzero exit code not listed in the
 * exitCodes or exitCodeRanges collection, or a scheduling error if the
 * schedulingError property is not present.
 * 
 * @member {string} [exitConditions.default.jobAction] An action to take on
 * the job containing the task, if the task completes with the given exit
 * condition and the job’s onTaskFailed property is
 * 'performexitoptionsjobaction'. Possible values include: 'none', 'disable',
 * 'terminate'
 * 
 * @member {string} [state] The current state of the task. Possible values
 * include: 'active', 'preparing', 'running', 'completed'
 * 
 * @member {date} [stateTransitionTime] The time at which the task entered its
 * current state.
 * 
 * @member {string} [previousState] The previous state of the task. This
 * property is not set if the task is in its initial Active state. Possible
 * values include: 'active', 'preparing', 'running', 'completed'
 * 
 * @member {date} [previousStateTransitionTime] The time at which the task
 * entered its previous state. This property is not set if the task is in its
 * initial Active state.
 * 
 * @member {string} [commandLine] The command line of the task. For
 * multi-instance tasks, the command line is executed on the primary subtask
 * after all the subtasks have finished executing the coordianation command
 * line. The command line does not run under a shell, and therefore cannot
 * take advantage of shell features such as environment variable expansion.
 * If you want to take advantage of such features, you should invoke the
 * shell in the command line, for example using "cmd /c MyCommand" in Windows
 * or "/bin/sh -c MyCommand" in Linux.
 * 
 * @member {array} [resourceFiles] A list of files that the Batch service will
 * download to the compute node before running the command line. For
 * multi-instance tasks, the resource files will only be downloaded to the
 * compute node on which the primary subtask is executed.
 * 
 * @member {array} [environmentSettings] A list of environment variable
 * settings for the task.
 * 
 * @member {object} [affinityInfo] A locality hint that can be used by the
 * Batch service to select a compute node on which to start the new task.
 * 
 * @member {string} [affinityInfo.affinityId] You can pass the affinityId of a
 * compute node or task to indicate that this task needs to be placed close
 * to the node or task.
 * 
 * @member {object} [constraints] The execution constraints that apply to this
 * task.
 * 
 * @member {moment.duration} [constraints.maxWallClockTime]
 * 
 * @member {moment.duration} [constraints.retentionTime] The default is
 * infinite.
 * 
 * @member {number} [constraints.maxTaskRetryCount]
 * 
 * @member {boolean} [runElevated] Whether to run the task in elevated mode.
 * 
 * @member {object} [executionInfo] Information about the execution of the
 * task.
 * 
 * @member {date} [executionInfo.startTime] If the task has been restarted or
 * retried, this is the most recent time at which the task started running.
 * 
 * @member {date} [executionInfo.endTime] This property is set only if the
 * task is in the Completed state.
 * 
 * @member {number} [executionInfo.exitCode] This parameter is returned only
 * if the task is in the completed state. The exit code for a process
 * reflects the specific convention implemented by the application developer
 * for that process. If you use the exit code value to make decisions in your
 * code, be sure that you know the exit code convention used by the
 * application process. Note that the exit code may also be generated by the
 * compute node operating system, such as when a process is forcibly
 * terminated.
 * 
 * @member {object} [executionInfo.schedulingError]
 * 
 * @member {string} [executionInfo.schedulingError.category] Possible values
 * include: 'usererror', 'servererror', 'unmapped'
 * 
 * @member {string} [executionInfo.schedulingError.code]
 * 
 * @member {string} [executionInfo.schedulingError.message]
 * 
 * @member {array} [executionInfo.schedulingError.details]
 * 
 * @member {number} [executionInfo.retryCount]
 * 
 * @member {date} [executionInfo.lastRetryTime]
 * 
 * @member {number} [executionInfo.requeueCount]
 * 
 * @member {date} [executionInfo.lastRequeueTime]
 * 
 * @member {object} [nodeInfo] Information about the compute node on which the
 * task ran.
 * 
 * @member {string} [nodeInfo.affinityId]
 * 
 * @member {string} [nodeInfo.nodeUrl]
 * 
 * @member {string} [nodeInfo.poolId]
 * 
 * @member {string} [nodeInfo.nodeId]
 * 
 * @member {string} [nodeInfo.taskRootDirectory]
 * 
 * @member {string} [nodeInfo.taskRootDirectoryUrl]
 * 
 * @member {object} [multiInstanceSettings] Information about how to run the
 * multi-instance task.
 * 
 * @member {number} [multiInstanceSettings.numberOfInstances]
 * 
 * @member {string} [multiInstanceSettings.coordinationCommandLine]
 * 
 * @member {array} [multiInstanceSettings.commonResourceFiles] The difference
 * between common resource files and task resource files is that common
 * resource files are downloaded for all subtasks including the primary,
 * whereas task resource files are downloaded only for the primary.
 * 
 * @member {object} [stats] Resource usage statistics for the task.
 * 
 * @member {string} [stats.url]
 * 
 * @member {date} [stats.startTime]
 * 
 * @member {date} [stats.lastUpdateTime]
 * 
 * @member {moment.duration} [stats.userCPUTime]
 * 
 * @member {moment.duration} [stats.kernelCPUTime]
 * 
 * @member {moment.duration} [stats.wallClockTime]
 * 
 * @member {number} [stats.readIOps]
 * 
 * @member {number} [stats.writeIOps]
 * 
 * @member {number} [stats.readIOGiB]
 * 
 * @member {number} [stats.writeIOGiB]
 * 
 * @member {moment.duration} [stats.waitTime]
 * 
 * @member {object} [dependsOn] Any dependencies this task has.
 * 
 * @member {array} [dependsOn.taskIds]
 * 
 * @member {array} [dependsOn.taskIdRanges]
 * 
 * @member {array} [applicationPackageReferences] A list of application
 * packages that the Batch service will deploy to the compute node before
 * running the command line.
 * 
 */
function CloudTask() {
}

/**
 * Defines the metadata of CloudTask
 *
 * @returns {object} metadata of CloudTask
 *
 */
CloudTask.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'CloudTask',
    type: {
      name: 'Composite',
      className: 'CloudTask',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        displayName: {
          required: false,
          serializedName: 'displayName',
          type: {
            name: 'String'
          }
        },
        url: {
          required: false,
          serializedName: 'url',
          type: {
            name: 'String'
          }
        },
        eTag: {
          required: false,
          serializedName: 'eTag',
          type: {
            name: 'String'
          }
        },
        lastModified: {
          required: false,
          serializedName: 'lastModified',
          type: {
            name: 'DateTime'
          }
        },
        creationTime: {
          required: false,
          serializedName: 'creationTime',
          type: {
            name: 'DateTime'
          }
        },
        exitConditions: {
          required: false,
          serializedName: 'exitConditions',
          type: {
            name: 'Composite',
            className: 'ExitConditions'
          }
        },
        state: {
          required: false,
          serializedName: 'state',
          type: {
            name: 'Enum',
            allowedValues: [ 'active', 'preparing', 'running', 'completed' ]
          }
        },
        stateTransitionTime: {
          required: false,
          serializedName: 'stateTransitionTime',
          type: {
            name: 'DateTime'
          }
        },
        previousState: {
          required: false,
          serializedName: 'previousState',
          type: {
            name: 'Enum',
            allowedValues: [ 'active', 'preparing', 'running', 'completed' ]
          }
        },
        previousStateTransitionTime: {
          required: false,
          serializedName: 'previousStateTransitionTime',
          type: {
            name: 'DateTime'
          }
        },
        commandLine: {
          required: false,
          serializedName: 'commandLine',
          type: {
            name: 'String'
          }
        },
        resourceFiles: {
          required: false,
          serializedName: 'resourceFiles',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ResourceFileElementType',
                type: {
                  name: 'Composite',
                  className: 'ResourceFile'
                }
            }
          }
        },
        environmentSettings: {
          required: false,
          serializedName: 'environmentSettings',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'EnvironmentSettingElementType',
                type: {
                  name: 'Composite',
                  className: 'EnvironmentSetting'
                }
            }
          }
        },
        affinityInfo: {
          required: false,
          serializedName: 'affinityInfo',
          type: {
            name: 'Composite',
            className: 'AffinityInformation'
          }
        },
        constraints: {
          required: false,
          serializedName: 'constraints',
          type: {
            name: 'Composite',
            className: 'TaskConstraints'
          }
        },
        runElevated: {
          required: false,
          serializedName: 'runElevated',
          type: {
            name: 'Boolean'
          }
        },
        executionInfo: {
          required: false,
          serializedName: 'executionInfo',
          type: {
            name: 'Composite',
            className: 'TaskExecutionInformation'
          }
        },
        nodeInfo: {
          required: false,
          serializedName: 'nodeInfo',
          type: {
            name: 'Composite',
            className: 'ComputeNodeInformation'
          }
        },
        multiInstanceSettings: {
          required: false,
          serializedName: 'multiInstanceSettings',
          type: {
            name: 'Composite',
            className: 'MultiInstanceSettings'
          }
        },
        stats: {
          required: false,
          serializedName: 'stats',
          type: {
            name: 'Composite',
            className: 'TaskStatistics'
          }
        },
        dependsOn: {
          required: false,
          serializedName: 'dependsOn',
          type: {
            name: 'Composite',
            className: 'TaskDependencies'
          }
        },
        applicationPackageReferences: {
          required: false,
          serializedName: 'applicationPackageReferences',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ApplicationPackageReferenceElementType',
                type: {
                  name: 'Composite',
                  className: 'ApplicationPackageReference'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = CloudTask;
