/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ExitConditions class.
 * @constructor
 * Specifies how the Batch service should respond when the task completes.
 *
 * @member {array} [exitCodes] A list of individual task exit codes and how
 * the Batch service should respond to them.
 * 
 * @member {array} [exitCodeRanges] A list of task exit codes ranges and how
 * the Batch service should respond to them.
 * 
 * @member {object} [schedulingError] How the Batch service should respond if
 * the task fails with a scheduling error.
 * 
 * @member {string} [schedulingError.jobAction] An action to take on the job
 * containing the task, if the task completes with the given exit condition
 * and the job’s onTaskFailed property is 'performexitoptionsjobaction'.
 * Possible values include: 'none', 'disable', 'terminate'
 * 
 * @member {object} [default] How the Batch service should respond if the task
 * fails with an exit condition not covered by any of the other properties –
 * that is, any nonzero exit code not listed in the exitCodes or
 * exitCodeRanges collection, or a scheduling error if the schedulingError
 * property is not present.
 * 
 * @member {string} [default.jobAction] An action to take on the job
 * containing the task, if the task completes with the given exit condition
 * and the job’s onTaskFailed property is 'performexitoptionsjobaction'.
 * Possible values include: 'none', 'disable', 'terminate'
 * 
 */
function ExitConditions() {
}

/**
 * Defines the metadata of ExitConditions
 *
 * @returns {object} metadata of ExitConditions
 *
 */
ExitConditions.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'ExitConditions',
    type: {
      name: 'Composite',
      className: 'ExitConditions',
      modelProperties: {
        exitCodes: {
          required: false,
          serializedName: 'exitCodes',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ExitCodeMappingElementType',
                type: {
                  name: 'Composite',
                  className: 'ExitCodeMapping'
                }
            }
          }
        },
        exitCodeRanges: {
          required: false,
          serializedName: 'exitCodeRanges',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ExitCodeRangeMappingElementType',
                type: {
                  name: 'Composite',
                  className: 'ExitCodeRangeMapping'
                }
            }
          }
        },
        schedulingError: {
          required: false,
          serializedName: 'schedulingError',
          type: {
            name: 'Composite',
            className: 'ExitOptions'
          }
        },
        default: {
          required: false,
          serializedName: 'default',
          type: {
            name: 'Composite',
            className: 'ExitOptions'
          }
        }
      }
    }
  };
};

module.exports = ExitConditions;
