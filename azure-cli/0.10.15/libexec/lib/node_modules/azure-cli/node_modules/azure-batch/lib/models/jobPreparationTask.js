/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the JobPreparationTask class.
 * @constructor
 * @summary A Job Preparation task to run before any tasks of the job on any
 * given compute node.
 *
 * @member {string} [id] A string that uniquely identifies the job preparation
 * task within the job. The id can contain any combination of alphanumeric
 * characters including hyphens and underscores and cannot contain more than
 * 64 characters.
 * 
 * @member {string} commandLine The command line of the Job Preparation task.
 * The command line does not run under a shell, and therefore cannot take
 * advantage of shell features such as environment variable expansion. If you
 * want to take advantage of such features, you should invoke the shell in
 * the command line, for example using "cmd /c MyCommand" in Windows or
 * "/bin/sh -c MyCommand" in Linux.
 * 
 * @member {array} [resourceFiles] A list of files that the Batch service will
 * download to the compute node before running the command line.
 * 
 * @member {array} [environmentSettings] A list of environment variable
 * settings for the Job Preparation task.
 * 
 * @member {object} [constraints] Constraints that apply to the Job
 * Preparation task.
 * 
 * @member {moment.duration} [constraints.maxWallClockTime]
 * 
 * @member {moment.duration} [constraints.retentionTime] The default is
 * infinite.
 * 
 * @member {number} [constraints.maxTaskRetryCount]
 * 
 * @member {boolean} [waitForSuccess] Whether the Batch service should wait
 * for the Job Preparation task to complete successfully before scheduling
 * any other tasks of the job on the compute node.
 * 
 * @member {boolean} [runElevated] Whether to run the Job Preparation task in
 * elevated mode. The default value is false.
 * 
 * @member {boolean} [rerunOnNodeRebootAfterSuccess] Whether the Batch service
 * should rerun the Job Preparation task after a compute node reboots. Note
 * that the Job Preparation task should still be written to be idempotent
 * because it can be rerun if the compute node is rebooted while Job
 * Preparation task is still running. The default value is true.
 * 
 */
function JobPreparationTask() {
}

/**
 * Defines the metadata of JobPreparationTask
 *
 * @returns {object} metadata of JobPreparationTask
 *
 */
JobPreparationTask.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'JobPreparationTask',
    type: {
      name: 'Composite',
      className: 'JobPreparationTask',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        commandLine: {
          required: true,
          serializedName: 'commandLine',
          type: {
            name: 'String'
          }
        },
        resourceFiles: {
          required: false,
          serializedName: 'resourceFiles',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ResourceFileElementType',
                type: {
                  name: 'Composite',
                  className: 'ResourceFile'
                }
            }
          }
        },
        environmentSettings: {
          required: false,
          serializedName: 'environmentSettings',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'EnvironmentSettingElementType',
                type: {
                  name: 'Composite',
                  className: 'EnvironmentSetting'
                }
            }
          }
        },
        constraints: {
          required: false,
          serializedName: 'constraints',
          type: {
            name: 'Composite',
            className: 'TaskConstraints'
          }
        },
        waitForSuccess: {
          required: false,
          serializedName: 'waitForSuccess',
          type: {
            name: 'Boolean'
          }
        },
        runElevated: {
          required: false,
          serializedName: 'runElevated',
          type: {
            name: 'Boolean'
          }
        },
        rerunOnNodeRebootAfterSuccess: {
          required: false,
          serializedName: 'rerunOnNodeRebootAfterSuccess',
          type: {
            name: 'Boolean'
          }
        }
      }
    }
  };
};

module.exports = JobPreparationTask;
