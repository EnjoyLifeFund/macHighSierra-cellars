'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ProxyUtil {
  static get httpProxy() {
    return this.env.HTTP_PROXY || this.env.http_proxy;
  }
  static get httpsProxy() {
    return this.env.HTTPS_PROXY || this.env.https_proxy;
  }

  static get usingProxy() {
    if (this.httpProxy || this.httpsProxy) return true;
    return false;
  }

  static findTunnel(urlParsed) {
    let tunnel = require('tunnel-agent');
    return urlParsed.protocol === 'https:' ? tunnel.httpsOverHttp : tunnel.httpOverHttp;
  }

  static findProxy(urlParsed) {
    if (urlParsed.protocol === 'https:') {
      return this.httpsProxy || this.httpProxy;
    } else {
      return this.httpProxy;
    }
  }

  static get sslCertDir() {
    const certDir = this.env.SSL_CERT_DIR;
    if (certDir) {
      return _fs2.default.readdirSync(certDir).map(f => _path2.default.join(certDir, f));
    } else {
      return [];
    }
  }

  static get sslCertFile() {
    return this.env.SSL_CERT_FILE ? [this.env.SSL_CERT_FILE] : [];
  }

  static get certs() {
    let filenames = this.sslCertFile.concat(this.sslCertDir);
    return filenames.map(function (filename) {
      return _fs2.default.readFileSync(filename);
    });
  }

  static agent(urlParsed) {
    const u = this.findProxy(urlParsed);
    if (u) {
      let proxyParsed = _url2.default.parse(u);
      let tunnelMethod = this.findTunnel(urlParsed);
      let opts = {
        proxy: {
          host: proxyParsed.hostname,
          port: proxyParsed.port || '8080'
        }
      };

      if (proxyParsed.auth) {
        opts.proxy.proxyAuth = proxyParsed.auth;
      }

      if (this.certs.length > 0) {
        opts.ca = this.certs;
      }

      let tunnelAgent = tunnelMethod(opts);
      if (urlParsed.protocol === 'https:') {
        tunnelAgent.defaultPort = 443;
      }
      return tunnelAgent;
    }
  }
}
exports.default = ProxyUtil;
ProxyUtil.env = process.env;