'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildConfig = buildConfig;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _v = require('uuid/v4');

var _v2 = _interopRequireDefault(_v);

require('./user_config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function dir(config, category, d) {
  d = d || _path2.default.join(config.home, category === 'data' ? '.local/share' : '.' + category);
  if (config.windows) d = process.env.LOCALAPPDATA || d;
  d = process.env.XDG_DATA_HOME || d;
  d = _path2.default.join(d, config.dirname);
  _fsExtra2.default.mkdirpSync(d);
  return d;
}

function debug(bin) {
  const DEBUG = process.env[envVarKey(bin, 'DEBUG')];
  if (DEBUG === 'true') return 1;
  if (DEBUG) return parseInt(DEBUG);
  return 0;
}

function envVarKey(...parts) {
  return parts.map(p => p.replace('-', '_')).join('_').toUpperCase();
}

function envVarTrue(k) {
  let v = process.env[k];
  return v === '1' || v === 'true';
}

function skipAnalytics(bin, userConfig) {
  if (userConfig && userConfig.skipAnalytics) {
    return true;
  } else if (envVarTrue('TESTING') || envVarTrue(envVarKey(bin, 'SKIP_ANALYTICS'))) {
    return true;
  }
  return false;
}

let loadUserConfig = function (configDir, configOptions) {
  let config;
  let configPath = _path2.default.join(configDir, 'config.json');
  try {
    config = _fsExtra2.default.readJSONSync(configPath);
  } catch (e) {
    if (e.code === 'ENOENT') {
      config = { skipAnalytics: undefined, install: undefined };
    } else {
      throw e;
    }
  }

  if (config && config.skipAnalytics) {
    config.install = null;
  } else if (config && config.install === undefined && configOptions.install === undefined) {
    config.install = (0, _v2.default)();
    try {
      _fsExtra2.default.writeJSONSync(configPath, config);
    } catch (e) {
      config.install = null;
    }
  }

  return config;
};

function shell(onWindows = false) {
  let shellPath;
  if (process.env['SHELL']) {
    shellPath = process.env['SHELL'].split(`/`);
  } else if (onWindows && process.env['COMSPEC']) {
    shellPath = process.env['COMSPEC'].split(/\\|\//);
  } else {
    shellPath = ['unknown'];
  }
  return shellPath[shellPath.length - 1];
}

function buildConfig(options = {}) {
  if (options._version) return options;
  const pjson = options.pjson || {};
  const cli = pjson['cli-engine'] || {};
  const name = options.name || pjson.name || 'cli-engine';
  const defaults = {
    pjson,
    name,
    namespaces: cli.namespaces,
    dirname: cli.dirname || name,
    version: pjson.version || '0.0.0',
    channel: 'stable',
    home: _os2.default.homedir() || _os2.default.tmpdir(),
    debug: debug(cli.bin || 'cli-engine') || 0,
    s3: cli.s3 || {},
    root: _path2.default.join(__dirname, '..'),
    platform: _os2.default.platform(),
    arch: _os2.default.arch() === 'ia32' ? 'x86' : _os2.default.arch(),
    bin: cli.bin || 'cli-engine',
    defaultCommand: cli.defaultCommand || 'help',
    skipAnalytics: undefined,
    shell: undefined
  };
  const config = Object.assign(defaults, options);
  if (config.platform === 'win32') config.platform = 'windows';
  config.windows = config.platform === 'windows';
  config.shell = shell(config.windows);
  config.dataDir = config.dataDir || dir(config, 'data');
  config.configDir = config.configDir || dir(config, 'config');
  let defaultCacheDir = process.platform === 'darwin' ? _path2.default.join(config.home, 'Library', 'Caches') : null;
  config.cacheDir = config.cacheDir || dir(config, 'cache', defaultCacheDir);
  config._version = '1';
  let channel = config.channel === 'stable' ? '' : ` ${config.channel}`;
  config.userAgent = `${config.name}/${config.version}${channel} (${config.platform}-${config.arch}) node-${process.version}`;
  let userConfig = loadUserConfig(config.configDir, options);
  if (config.skipAnalytics === undefined) {
    config.skipAnalytics = skipAnalytics(config.bin, userConfig);
  }
  if (config.install === undefined && userConfig) {
    config.install = userConfig.install;
  }
  return config;
}