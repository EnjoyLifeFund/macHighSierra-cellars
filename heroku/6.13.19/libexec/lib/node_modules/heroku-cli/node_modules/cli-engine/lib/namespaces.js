'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

require('cli-engine-config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = class {
  static _installLevel(namespace, config) {
    let namespaces = config.namespaces;
    if (!namespace && !namespaces) namespace = namespaces = null;
    if (namespaces && namespaces.includes(namespace)) {
      return 'namespace';
    } else {
      return 'root';
    }
  }

  static _readNamespace(pluginPath) {
    try {
      let pjson = _fsExtra2.default.readJSONSync(_path2.default.join(pluginPath, 'package.json'));
      return pjson['cli-engine'] ? pjson['cli-engine'].namespace : undefined;
    } catch (err) {}
  }

  static metaData(pluginPath, config) {
    let pjsonNamespace = this._readNamespace(pluginPath);
    let installLevel = this._installLevel(pjsonNamespace, config);

    if (installLevel === 'not-permitted-for-install') installLevel = undefined;
    let namespace = installLevel === 'namespace' ? pjsonNamespace : undefined;

    return {
      installLevel,
      namespace,
      pjsonNamespace
    };
  }
};