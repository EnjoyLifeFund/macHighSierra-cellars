'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _output = require('./output');

var _output2 = _interopRequireDefault(_output);

var _parser = require('./parser');

var _parser2 = _interopRequireDefault(_parser);

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

var _cliEngineConfig = require('cli-engine-config');

var _http = require('./http');

var _http2 = _interopRequireDefault(_http);

var _help = require('./help');

var _help2 = _interopRequireDefault(_help);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-line
class Command {

  static get id() {
    return this.command ? `${this.topic}:${this.command}` : this.topic;
  }

  /**
   * instantiate and run the command setting {mock: true} in the config (shorthand method)
   */
  static async mock(...argv) {
    return this.run({ argv, mock: true });
  }

  /**
   * instantiate and run the command
   */
  static async run(options = {}) {
    let config = (0, _cliEngineConfig.buildConfig)(options.config);
    let output = options.output || new _output2.default({ mock: options.mock, config });
    let cmd = new this({ config, output });
    cmd.argv = options.argv || [];
    // if (this.flags.debug) this.config.debug = 1
    try {
      const args = await cmd.init();
      await cmd.run(args);
      await cmd.out.done();
    } catch (err) {
      cmd.out.error(err);
    }
    return cmd;
  }

  constructor(options = {}) {
    this.flags = {};
    this.args = {};

    this.config = (0, _cliEngineConfig.buildConfig)(options.config);
    this.out = options.output || new _output2.default({ config: this.config });
    this.http = new _http2.default(this.out);
  }

  async init() {
    const parser = new _parser2.default({
      flags: this.constructor.flags || {},
      args: this.constructor.args || [],
      variableArgs: this.constructor.variableArgs,
      cmd: this
    });
    const { argv, flags, args } = await parser.parse({ flags: this.flags, argv: this.argv });
    this.flags = flags;
    this.argv = argv;
    this.args = args;
  }

  // prevent setting things that need to be static


  /**
   * actual command run code goes here
   */
  async run(...rest) {}

  get stdout() {
    return this.out.stdout.output;
  }

  get stderr() {
    return this.out.stderr.output;
  }

  static buildHelp(config) {
    let help = new _help2.default(config);
    return help.command(this);
  }

  static buildHelpLine(config) {
    let help = new _help2.default(config);
    return help.commandLine(this);
  }
}
exports.default = Command;
Command.aliases = [];
Command.variableArgs = false;
Command.args = [];