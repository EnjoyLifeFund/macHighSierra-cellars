'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

require('cli-engine-config');

var _cliEngineCommand = require('cli-engine-command');

var _cliEngineCommand2 = _interopRequireDefault(_cliEngineCommand);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = require('debug')('cli:dispatcher');

const builtins = {
  version: 'version'
};

class Dispatcher {
  constructor(config) {
    this.config = config;
  }

  run(...argv) {
    let argv0 = argv.shift();
    debug('argv0: %s', argv0);
    this.cmd = argv.shift();
    let Command;
    Command = this.findCommand();
    if (!Command) throw new Error(`${this.cmd} command not found`);
    Command.run({ config: this.config, argv });
  }

  findCommand() {
    let p = this.findCommandInCLI() || this.findCommandInBuiltins();
    if (p) {
      debug('loading command from %s', p);
      return (0, _util.undefault)(require(p));
    }
  }

  findCommandInCLI() {
    let root = this.config.commandsDir;
    try {
      if (!this.cmd) {
        debug('loading root command from %s', this.cmd);
        // TODO: make flag parsing work here somehow
        return require.resolve(root);
      } else {
        debug(`finding ${this.cmd} command`);
        return require.resolve(_path2.default.join(root, ...this.cmd.split(':')));
      }
    } catch (err) {
      if (err.code !== 'MODULE_NOT_FOUND') throw err;
    }
  }

  findCommandInBuiltins() {
    let p = builtins[this.cmd];
    if (p) {
      p = _path2.default.join(__dirname, 'commands', p);
      return require.resolve(p);
    }
  }
}
exports.default = Dispatcher;