'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Dispatcher = undefined;

require('cli-engine-config');

require('cli-engine-command');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = require('debug')('cli:dispatcher');

class CommandManagerBase {
  constructor(config) {
    this.config = config;
  }
  async findCommand(id) {
    return null;
  }

  require(p) {
    return (0, _util.undefault)(require(p));
  }
}

class BuiltinCommandManager extends CommandManagerBase {
  async findCommand(id) {
    const builtins = {
      version: 'version',
      help: 'help'
    };

    let p = builtins[id];
    if (p) {
      p = _path2.default.join(__dirname, 'commands', p);
      return this.require(p);
    }
  }
}

class CLICommandManager extends CommandManagerBase {
  async findCommand(id) {
    let root = this.config.commandsDir;
    if (!root) return;
    let p;
    try {
      debug(`finding ${id} command`);
      p = require.resolve(_path2.default.join(root, ...id.split(':')));
    } catch (err) {
      if (err.code !== 'MODULE_NOT_FOUND') throw err;
    }
    if (p) return this.require(p);
  }
}

class PluginCommandManager extends CommandManagerBase {
  async findCommand(id) {
    const { default: Output } = require('cli-engine-command/lib/output');
    const { default: Plugins } = require('./plugins');
    let out = new Output(this.config);
    let plugins = new Plugins(out);
    await plugins.load();
    return plugins.findCommand(id || this.config.defaultCommand || 'help');
  }
}

class Dispatcher {

  constructor(config) {
    this.config = config;
    this.managers = [new PluginCommandManager(config), new CLICommandManager(config), new BuiltinCommandManager(config)];
  }

  async findCommand(id) {
    if (!id) return {};
    for (let manager of this.managers) {
      let Command = await manager.findCommand(id);
      if (Command) return { Command };
    }
    return {};
  }

  findTopic(id) {
    return null;
    // let Topic = await plugins.findTopic(id)
  }
}
exports.Dispatcher = Dispatcher;