/// <reference types="lodash" />
import lodash = require('lodash');
declare const _default: {
    readonly ary: {
        <TResult extends Function>(func: Function, n?: number | undefined): TResult;
        <T extends Function, TResult extends Function>(func: T, n?: number | undefined): TResult;
    };
    readonly compact: <T>(array?: ArrayLike<false | "" | 0 | T | null | undefined> | null | undefined) => T[];
    readonly get: {
        <TObject, TResult>(object: TObject, path: lodash.Many<lodash.StringRepresentable>, defaultValue?: TResult | undefined): TResult;
        <TResult>(object: any, path: lodash.Many<lodash.StringRepresentable>, defaultValue?: TResult | undefined): TResult;
    };
    readonly identity: {
        <T>(value: T): T;
        (): undefined;
    };
    readonly mapValues: {
        <T, TResult>(obj: lodash.Dictionary<T> | null | undefined, callback: lodash.ObjectIterator<T, TResult>): lodash.Dictionary<TResult>;
        <T>(obj: lodash.Dictionary<T> | null | undefined, where: lodash.Dictionary<T>): lodash.Dictionary<boolean>;
        <T, TMapped>(obj: T | null | undefined, pluck: string): TMapped;
        <T>(obj: T | null | undefined, callback: lodash.ObjectIterator<any, any>): T;
    };
    readonly maxBy: {
        <T>(collection: ArrayLike<T> | null | undefined, iteratee?: lodash.ListIterator<T, any> | undefined): T | undefined;
        <T>(collection: lodash.Dictionary<T> | null | undefined, iteratee?: lodash.DictionaryIterator<T, any> | undefined): T | undefined;
        <T>(collection: ArrayLike<T> | lodash.Dictionary<T> | null | undefined, iteratee?: string | undefined): T | undefined;
        <TObject extends {}, T>(collection: ArrayLike<T> | lodash.Dictionary<T> | null | undefined, whereValue?: TObject | undefined): T | undefined;
    };
    readonly padEnd: (string?: string | undefined, length?: number | undefined, chars?: string | undefined) => string;
    readonly partial: lodash.Partial;
    readonly pick: <TResult extends {}, T extends {}>(object: T | null | undefined, ...predicate: lodash.Many<lodash.StringRepresentable>[]) => TResult;
    readonly pickBy: <TResult extends {}, T extends {}>(object: T | null | undefined, predicate?: lodash.ObjectIterator<any, boolean> | undefined) => TResult;
    readonly property: <TObj, TResult>(path: lodash.Many<lodash.StringRepresentable>) => (obj: TObj) => TResult;
    readonly result: {
        <TObject, TResult>(object: TObject, path: lodash.Many<lodash.StringRepresentable>, defaultValue?: TResult | ((...args: any[]) => TResult) | undefined): TResult;
        <TResult>(object: any, path: lodash.Many<lodash.StringRepresentable>, defaultValue?: TResult | ((...args: any[]) => TResult) | undefined): TResult;
    };
    readonly set: {
        <TResult>(object: Object, path: lodash.Many<lodash.StringRepresentable>, value: any): TResult;
        <V, TResult>(object: Object, path: lodash.Many<lodash.StringRepresentable>, value: V): TResult;
        <O, V, TResult>(object: O, path: lodash.Many<lodash.StringRepresentable>, value: V): TResult;
    };
    readonly sortBy: {
        <T, TSort>(collection: ArrayLike<T> | null | undefined, iteratee?: lodash.ListIterator<T, TSort> | undefined): T[];
        <T, TSort>(collection: lodash.Dictionary<T> | null | undefined, iteratee?: lodash.DictionaryIterator<T, TSort> | undefined): T[];
        <T>(collection: ArrayLike<T> | lodash.Dictionary<T> | null | undefined, iteratee: string): T[];
        <W extends {}, T>(collection: ArrayLike<T> | lodash.Dictionary<T> | null | undefined, whereValue: W): T[];
        <T>(collection: ArrayLike<T> | lodash.Dictionary<T> | null | undefined): T[];
        <T>(collection: ArrayLike<T> | null | undefined, iteratees: (string | Object | lodash.ListIterator<T, any>)[]): T[];
        <T>(collection: ArrayLike<T> | null | undefined, ...iteratees: (string | Object | lodash.ListIterator<T, boolean>)[]): T[];
    };
    readonly sortedUniqBy: {
        <T>(array: ArrayLike<T> | null | undefined, iteratee: lodash.ListIterator<T, any>): T[];
        <T, TSort>(array: ArrayLike<T> | null | undefined, iteratee: lodash.ListIterator<T, TSort>): T[];
        <T>(array: ArrayLike<T> | null | undefined, iteratee: string): T[];
        <T>(array: ArrayLike<T> | null | undefined, iteratee: Object): T[];
        <TWhere extends {}, T>(array: ArrayLike<T> | null | undefined, iteratee: TWhere): T[];
    };
    readonly uniq: {
        <T>(array: ArrayLike<T> | null | undefined): T[];
        <T, TSort>(array: ArrayLike<T> | null | undefined): T[];
    };
    readonly zipObject: {
        <TValues, TResult extends {}>(props: ArrayLike<lodash.StringRepresentable> | ArrayLike<ArrayLike<any>>, values?: ArrayLike<TValues> | undefined): TResult;
        <TResult extends {}>(props: ArrayLike<lodash.StringRepresentable> | ArrayLike<ArrayLike<any>>, values?: ArrayLike<any> | undefined): TResult;
        (props: ArrayLike<lodash.StringRepresentable> | ArrayLike<ArrayLike<any>>, values?: ArrayLike<any> | undefined): lodash.Dictionary<any>;
    };
};
export default _default;
