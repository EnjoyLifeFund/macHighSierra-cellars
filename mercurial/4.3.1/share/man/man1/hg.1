.\" Man page generated from reStructuredText.
.
.TH HG 1 "" "" "Mercurial Manual"
.SH NAME
hg \- Mercurial source code management system
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.sp
\fBhg\fP \fIcommand\fP [\fIoption\fP]... [\fIargument\fP]...
.SH DESCRIPTION
.sp
The \fBhg\fP command provides a command line interface to the Mercurial
system.
.SH COMMAND ELEMENTS
.INDENT 0.0
.TP
.B files...
.
indicates one or more filename or relative path filenames; see
\%File Name Patterns\: for information on pattern matching
.TP
.B path
.
indicates a path on the local machine
.TP
.B revision
.
indicates a changeset which can be specified as a changeset
revision number, a tag, or a unique substring of the changeset
hash value
.TP
.B repository path
.
either the pathname of a local repository or the URI of a remote
repository.
.UNINDENT
.SH OPTIONS
.INDENT 0.0
.TP
.BI \-R,  \-\-repository \ <REPO>
.
repository root directory or name of overlay bundle file
.TP
.BI \-\-cwd \ <DIR>
.
change working directory
.TP
.B \-y,  \-\-noninteractive
.
do not prompt, automatically pick the first choice for all prompts
.TP
.B \-q,  \-\-quiet
.
suppress output
.TP
.B \-v,  \-\-verbose
.
enable additional output
.TP
.BI \-\-color \ <TYPE>
.
when to colorize (boolean, always, auto, never, or debug)
.TP
.BI \-\-config \ <CONFIG[+]>
.
set/override config option (use \(aqsection.name=value\(aq)
.TP
.B \-\-debug
.
enable debugging output
.TP
.B \-\-debugger
.
start debugger
.TP
.BI \-\-encoding \ <ENCODE>
.
set the charset encoding (default: UTF\-8)
.TP
.BI \-\-encodingmode \ <MODE>
.
set the charset encoding mode (default: strict)
.TP
.B \-\-traceback
.
always print a traceback on exception
.TP
.B \-\-time
.
time how long the command takes
.TP
.B \-\-profile
.
print command execution profile
.TP
.B \-\-version
.
output version information and exit
.TP
.B \-h,  \-\-help
.
display help and exit
.TP
.B \-\-hidden
.
consider hidden changesets
.TP
.BI \-\-pager \ <TYPE>
.
when to paginate (boolean, always, auto, or never) (default: auto)
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SH COMMANDS
.SS add
.sp
add the specified files on the next commit:
.sp
.nf
.ft C
hg add [OPTION]... [FILE]...
.ft P
.fi
.sp
Schedule files to be version controlled and added to the
repository.
.sp
The files will be added to the repository at the next commit. To
undo an add before that, see \%\fBhg forget\fP\:.
.sp
If no names are given, add all files to the repository (except
files matching \fB.hgignore\fP).
.sp
Examples:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
.
New (unknown) files are added
automatically by \%\fBhg add\fP\::
.sp
.nf
.ft C
$ ls
foo.c
$ hg status
? foo.c
$ hg add
adding foo.c
$ hg status
A foo.c
.ft P
.fi
.IP \(bu 2
.
Specific files to be added can be specified:
.sp
.nf
.ft C
$ ls
bar.c  foo.c
$ hg status
? bar.c
? foo.c
$ hg add bar.c
$ hg status
A bar.c
? foo.c
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Returns 0 if all files are successfully added.
.sp
Options:
.INDENT 0.0
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.TP
.B \-S,  \-\-subrepos
.
recurse into subrepositories
.TP
.B \-n,  \-\-dry\-run
.
do not perform actions, just print output
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS addremove
.sp
add all new files, delete all missing files:
.sp
.nf
.ft C
hg addremove [OPTION]... [FILE]...
.ft P
.fi
.sp
Add all new files and remove all missing files from the
repository.
.sp
Unless names are given, new files are ignored if they match any of
the patterns in \fB.hgignore\fP. As with add, these changes take
effect at the next commit.
.sp
Use the \-s/\-\-similarity option to detect renamed files. This
option takes a percentage between 0 (disabled) and 100 (files must
be identical) as its parameter. With a parameter greater than 0,
this compares every removed file with every added file and records
those similar enough as renames. Detecting renamed files this way
can be expensive. After using this option, \%\fBhg status \-C\fP\: can be
used to check which files were identified as moved or renamed. If
not specified, \-s/\-\-similarity defaults to 100 and only renames of
identical files are detected.
.sp
Examples:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
.
A number of files (bar.c and foo.c) are new,
while foobar.c has been removed (without using \%\fBhg remove\fP\:)
from the repository:
.sp
.nf
.ft C
$ ls
bar.c foo.c
$ hg status
! foobar.c
? bar.c
? foo.c
$ hg addremove
adding bar.c
adding foo.c
removing foobar.c
$ hg status
A bar.c
A foo.c
R foobar.c
.ft P
.fi
.IP \(bu 2
.
A file foobar.c was moved to foo.c without using \%\fBhg rename\fP\:.
Afterwards, it was edited slightly:
.sp
.nf
.ft C
$ ls
foo.c
$ hg status
! foobar.c
? foo.c
$ hg addremove \-\-similarity 90
removing foobar.c
adding foo.c
recording removal of foobar.c as rename to foo.c (94% similar)
$ hg status \-C
A foo.c
  foobar.c
R foobar.c
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Returns 0 if all files are successfully added.
.sp
Options:
.INDENT 0.0
.TP
.BI \-s,  \-\-similarity \ <SIMILARITY>
.
guess renamed files by similarity (0<=s<=100)
.TP
.B \-S,  \-\-subrepos
.
recurse into subrepositories
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.TP
.B \-n,  \-\-dry\-run
.
do not perform actions, just print output
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS annotate
.sp
show changeset information by line for each file:
.sp
.nf
.ft C
hg annotate [\-r REV] [\-f] [\-a] [\-u] [\-d] [\-n] [\-c] [\-l] FILE...
.ft P
.fi
.sp
List changes in files, showing the revision id responsible for
each line.
.sp
This command is useful for discovering when a change was made and
by whom.
.sp
If you include \-\-file, \-\-user, or \-\-date, the revision number is
suppressed unless you also include \-\-number.
.sp
Without the \-a/\-\-text option, annotate will avoid processing files
it detects as binary. With \-a, annotate will annotate the file
anyway, although the results will probably be neither useful
nor desirable.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.BI \-r,  \-\-rev \ <REV>
.
annotate the specified revision
.TP
.B \-\-follow
.
follow copies/renames and list the filename (DEPRECATED)
.TP
.B \-\-no\-follow
.
don\(aqt follow copies and renames
.TP
.B \-a,  \-\-text
.
treat all files as text
.TP
.B \-u,  \-\-user
.
list the author (long with \-v)
.TP
.B \-f,  \-\-file
.
list the filename
.TP
.B \-d,  \-\-date
.
list the date (short with \-q)
.TP
.B \-n,  \-\-number
.
list the revision number (default)
.TP
.B \-c,  \-\-changeset
.
list the changeset
.TP
.B \-l,  \-\-line\-number
.
show line number at the first appearance
.TP
.BI \-\-skip \ <REV[+]>
.
revision to not display (EXPERIMENTAL)
.TP
.B \-w,  \-\-ignore\-all\-space
.
ignore white space when comparing lines
.TP
.B \-b,  \-\-ignore\-space\-change
.
ignore changes in the amount of white space
.TP
.B \-B,  \-\-ignore\-blank\-lines
.
ignore changes whose lines are all blank
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template (EXPERIMENTAL)
.UNINDENT
.sp
[+] marked option can be specified multiple times
.INDENT 0.0
.INDENT 3.5
.sp
aliases: blame
.UNINDENT
.UNINDENT
.SS archive
.sp
create an unversioned archive of a repository revision:
.sp
.nf
.ft C
hg archive [OPTION]... DEST
.ft P
.fi
.sp
By default, the revision used is the parent of the working
directory; use \-r/\-\-rev to specify a different revision.
.sp
The archive type is automatically detected based on file
extension (to override, use \-t/\-\-type).
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
.
create a zip file containing the 1.0 release:
.sp
.nf
.ft C
hg archive \-r 1.0 project\-1.0.zip
.ft P
.fi
.IP \(bu 2
.
create a tarball excluding .hg files:
.sp
.nf
.ft C
hg archive project.tar.gz \-X ".hg*"
.ft P
.fi
.UNINDENT
.sp
Valid types are:
.INDENT 0.0
.TP
.B \fBfiles\fP
.sp
a directory full of files (default)
.TP
.B \fBtar\fP
.sp
tar archive, uncompressed
.TP
.B \fBtbz2\fP
.sp
tar archive, compressed using bzip2
.TP
.B \fBtgz\fP
.sp
tar archive, compressed using gzip
.TP
.B \fBuzip\fP
.sp
zip archive, uncompressed
.TP
.B \fBzip\fP
.sp
zip archive, compressed using deflate
.UNINDENT
.sp
The exact name of the destination archive or directory is given
using a format string; see \%\fBhg help export\fP\: for details.
.sp
Each member added to an archive file has a directory prefix
prepended. Use \-p/\-\-prefix to specify a format string for the
prefix. The default is the basename of the archive, with suffixes
removed.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-\-no\-decode
.
do not pass files through decoders
.TP
.BI \-p,  \-\-prefix \ <PREFIX>
.
directory prefix for files in archive
.TP
.BI \-r,  \-\-rev \ <REV>
.
revision to distribute
.TP
.BI \-t,  \-\-type \ <TYPE>
.
type of distribution to create
.TP
.B \-S,  \-\-subrepos
.
recurse into subrepositories
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS backout
.sp
reverse effect of earlier changeset:
.sp
.nf
.ft C
hg backout [OPTION]... [\-r] REV
.ft P
.fi
.sp
Prepare a new changeset with the effect of REV undone in the
current working directory. If no conflicts were encountered,
it will be committed immediately.
.sp
If REV is the parent of the working directory, then this new changeset
is committed automatically (unless \-\-no\-commit is specified).
.IP Note
.
\%\fBhg backout\fP\: cannot be used to fix either an unwanted or
incorrect merge.
.RE
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
.
Reverse the effect of the parent of the working directory.
This backout will be committed immediately:
.sp
.nf
.ft C
hg backout \-r .
.ft P
.fi
.IP \(bu 2
.
Reverse the effect of previous bad revision 23:
.sp
.nf
.ft C
hg backout \-r 23
.ft P
.fi
.IP \(bu 2
.
Reverse the effect of previous bad revision 23 and
leave changes uncommitted:
.sp
.nf
.ft C
hg backout \-r 23 \-\-no\-commit
hg commit \-m "Backout revision 23"
.ft P
.fi
.UNINDENT
.sp
By default, the pending changeset will have one parent,
maintaining a linear history. With \-\-merge, the pending
changeset will instead have two parents: the old parent of the
working directory and a new child of REV that simply undoes REV.
.sp
Before version 1.7, the behavior without \-\-merge was equivalent
to specifying \-\-merge followed by \%\fBhg update \-\-clean .\fP\: to
cancel the merge and leave the child of REV as a head to be
merged separately.
.sp
See \%\fBhg help dates\fP\: for a list of formats valid for \-d/\-\-date.
.sp
See \%\fBhg help revert\fP\: for a way to restore files to the state
of another revision.
.sp
Returns 0 on success, 1 if nothing to backout or there are unresolved
files.
.sp
Options:
.INDENT 0.0
.TP
.B \-\-merge
.
merge with old dirstate parent after backout
.TP
.B \-\-commit
.
commit if no conflicts were encountered (DEPRECATED)
.TP
.B \-\-no\-commit
.
do not commit
.TP
.BI \-\-parent \ <REV>
.
parent to choose when backing out merge (DEPRECATED)
.TP
.BI \-r,  \-\-rev \ <REV>
.
revision to backout
.TP
.B \-e,  \-\-edit
.
invoke editor on commit messages
.TP
.BI \-t,  \-\-tool \ <VALUE>
.
specify merge tool
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.TP
.BI \-m,  \-\-message \ <TEXT>
.
use text as commit message
.TP
.BI \-l,  \-\-logfile \ <FILE>
.
read commit message from file
.TP
.BI \-d,  \-\-date \ <DATE>
.
record the specified date as commit date
.TP
.BI \-u,  \-\-user \ <USER>
.
record the specified user as committer
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS bisect
.sp
subdivision search of changesets:
.sp
.nf
.ft C
hg bisect [\-gbsr] [\-U] [\-c CMD] [REV]
.ft P
.fi
.sp
This command helps to find changesets which introduce problems. To
use, mark the earliest changeset you know exhibits the problem as
bad, then mark the latest changeset which is free from the problem
as good. Bisect will update your working directory to a revision
for testing (unless the \-U/\-\-noupdate option is specified). Once
you have performed tests, mark the working directory as good or
bad, and bisect will either update to another candidate changeset
or announce that it has found the bad revision.
.sp
As a shortcut, you can also use the revision argument to mark a
revision as good or bad without checking it out first.
.sp
If you supply a command, it will be used for automatic bisection.
The environment variable HG_NODE will contain the ID of the
changeset being tested. The exit status of the command will be
used to mark revisions as good or bad: status 0 means good, 125
means to skip the revision, 127 (command not found) will abort the
bisection, and any other non\-zero exit status means the revision
is bad.
.sp
Some examples:
.INDENT 0.0
.IP \(bu 2
.
start a bisection with known bad revision 34, and good revision 12:
.sp
.nf
.ft C
hg bisect \-\-bad 34
hg bisect \-\-good 12
.ft P
.fi
.IP \(bu 2
.
advance the current bisection by marking current revision as good or
bad:
.sp
.nf
.ft C
hg bisect \-\-good
hg bisect \-\-bad
.ft P
.fi
.IP \(bu 2
.
mark the current revision, or a known revision, to be skipped (e.g. if
that revision is not usable because of another issue):
.sp
.nf
.ft C
hg bisect \-\-skip
hg bisect \-\-skip 23
.ft P
.fi
.IP \(bu 2
.
skip all revisions that do not touch directories \fBfoo\fP or \fBbar\fP:
.sp
.nf
.ft C
hg bisect \-\-skip "!( file(\(aqpath:foo\(aq) & file(\(aqpath:bar\(aq) )"
.ft P
.fi
.IP \(bu 2
.
forget the current bisection:
.sp
.nf
.ft C
hg bisect \-\-reset
.ft P
.fi
.IP \(bu 2
.
use \(aqmake && make tests\(aq to automatically find the first broken
revision:
.sp
.nf
.ft C
hg bisect \-\-reset
hg bisect \-\-bad 34
hg bisect \-\-good 12
hg bisect \-\-command "make && make tests"
.ft P
.fi
.IP \(bu 2
.
see all changesets whose states are already known in the current
bisection:
.sp
.nf
.ft C
hg log \-r "bisect(pruned)"
.ft P
.fi
.IP \(bu 2
.
see the changeset currently being bisected (especially useful
if running with \-U/\-\-noupdate):
.sp
.nf
.ft C
hg log \-r "bisect(current)"
.ft P
.fi
.IP \(bu 2
.
see all changesets that took part in the current bisection:
.sp
.nf
.ft C
hg log \-r "bisect(range)"
.ft P
.fi
.IP \(bu 2
.
you can even get a nice graph:
.sp
.nf
.ft C
hg log \-\-graph \-r "bisect(range)"
.ft P
.fi
.UNINDENT
.sp
See \%\fBhg help revisions.bisect\fP\: for more about the \fIbisect()\fP predicate.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-r,  \-\-reset
.
reset bisect state
.TP
.B \-g,  \-\-good
.
mark changeset good
.TP
.B \-b,  \-\-bad
.
mark changeset bad
.TP
.B \-s,  \-\-skip
.
skip testing changeset
.TP
.B \-e,  \-\-extend
.
extend the bisect range
.TP
.BI \-c,  \-\-command \ <CMD>
.
use command to check changeset state
.TP
.B \-U,  \-\-noupdate
.
do not update to target
.UNINDENT
.SS bookmarks
.sp
create a new bookmark or list existing bookmarks:
.sp
.nf
.ft C
hg bookmarks [OPTIONS]... [NAME]...
.ft P
.fi
.sp
Bookmarks are labels on changesets to help track lines of development.
Bookmarks are unversioned and can be moved, renamed and deleted.
Deleting or moving a bookmark has no effect on the associated changesets.
.sp
Creating or updating to a bookmark causes it to be marked as \(aqactive\(aq.
The active bookmark is indicated with a \(aq*\(aq.
When a commit is made, the active bookmark will advance to the new commit.
A plain \%\fBhg update\fP\: will also advance an active bookmark, if possible.
Updating away from a bookmark will cause it to be deactivated.
.sp
Bookmarks can be pushed and pulled between repositories (see
\%\fBhg help push\fP\: and \%\fBhg help pull\fP\:). If a shared bookmark has
diverged, a new \(aqdivergent bookmark\(aq of the form \%\(aqname@path\:\(aq will
be created. Using \%\fBhg merge\fP\: will resolve the divergence.
.sp
A bookmark named \(aq@\(aq has the special property that \%\fBhg clone\fP\: will
check it out by default if it exists.
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
.
create an active bookmark for a new line of development:
.sp
.nf
.ft C
hg book new\-feature
.ft P
.fi
.IP \(bu 2
.
create an inactive bookmark as a place marker:
.sp
.nf
.ft C
hg book \-i reviewed
.ft P
.fi
.IP \(bu 2
.
create an inactive bookmark on another changeset:
.sp
.nf
.ft C
hg book \-r .^ tested
.ft P
.fi
.IP \(bu 2
.
rename bookmark turkey to dinner:
.sp
.nf
.ft C
hg book \-m turkey dinner
.ft P
.fi
.IP \(bu 2
.
move the \(aq@\(aq bookmark from another branch:
.sp
.nf
.ft C
hg book \-f @
.ft P
.fi
.UNINDENT
.sp
Options:
.INDENT 0.0
.TP
.B \-f,  \-\-force
.
force
.TP
.BI \-r,  \-\-rev \ <REV>
.
revision for bookmark action
.TP
.B \-d,  \-\-delete
.
delete a given bookmark
.TP
.BI \-m,  \-\-rename \ <OLD>
.
rename a given bookmark
.TP
.B \-i,  \-\-inactive
.
mark a bookmark inactive
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template (EXPERIMENTAL)
.sp
aliases: bookmark
.UNINDENT
.SS branch
.sp
set or show the current branch name:
.sp
.nf
.ft C
hg branch [\-fC] [NAME]
.ft P
.fi
.IP Note
.
Branch names are permanent and global. Use \%\fBhg bookmark\fP\: to create a
light\-weight bookmark instead. See \%\fBhg help glossary\fP\: for more
information about named branches and bookmarks.
.RE
.sp
With no argument, show the current branch name. With one argument,
set the working directory branch name (the branch will not exist
in the repository until the next commit). Standard practice
recommends that primary development take place on the \(aqdefault\(aq
branch.
.sp
Unless \-f/\-\-force is specified, branch will not let you set a
branch name that already exists.
.sp
Use \-C/\-\-clean to reset the working directory branch to that of
the parent of the working directory, negating a previous branch
change.
.sp
Use the command \%\fBhg update\fP\: to switch to an existing branch. Use
\%\fBhg commit \-\-close\-branch\fP\: to mark this branch head as closed.
When all heads of a branch are closed, the branch will be
considered closed.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-f,  \-\-force
.
set branch name even if it shadows an existing branch
.TP
.B \-C,  \-\-clean
.
reset branch name to parent branch name
.UNINDENT
.SS branches
.sp
list repository named branches:
.sp
.nf
.ft C
hg branches [\-c]
.ft P
.fi
.sp
List the repository\(aqs named branches, indicating which ones are
inactive. If \-c/\-\-closed is specified, also list branches which have
been marked closed (see \%\fBhg commit \-\-close\-branch\fP\:).
.sp
Use the command \%\fBhg update\fP\: to switch to an existing branch.
.sp
Returns 0.
.sp
Options:
.INDENT 0.0
.TP
.B \-a,  \-\-active
.
show only branches that have unmerged heads (DEPRECATED)
.TP
.B \-c,  \-\-closed
.
show normal and closed branches
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template (EXPERIMENTAL)
.UNINDENT
.SS bundle
.sp
create a bundle file:
.sp
.nf
.ft C
hg bundle [\-f] [\-t BUNDLESPEC] [\-a] [\-r REV]... [\-\-base REV]... FILE [DEST]
.ft P
.fi
.sp
Generate a bundle file containing data to be added to a repository.
.sp
To create a bundle containing all changesets, use \-a/\-\-all
(or \-\-base null). Otherwise, hg assumes the destination will have
all the nodes you specify with \-\-base parameters. Otherwise, hg
will assume the repository has all the nodes in destination, or
default\-push/default if no destination is specified.
.sp
You can change bundle format with the \-t/\-\-type option. See
\%\fBhg help bundlespec\fP\: for documentation on this format. By default,
the most appropriate format is used and compression defaults to
bzip2.
.sp
The bundle file can then be transferred using conventional means
and applied to another repository with the unbundle or pull
command. This is useful when direct push and pull are not
available or when exporting an entire repository is undesirable.
.sp
Applying bundles preserves all changeset contents including
permissions, copy/rename information, and revision history.
.sp
Returns 0 on success, 1 if no changes found.
.sp
Options:
.INDENT 0.0
.TP
.B \-f,  \-\-force
.
run even when the destination is unrelated
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
a changeset intended to be added to the destination
.TP
.BI \-b,  \-\-branch \ <BRANCH[+]>
.
a specific branch you would like to bundle
.TP
.BI \-\-base \ <REV[+]>
.
a base changeset assumed to be available at the destination
.TP
.B \-a,  \-\-all
.
bundle all changesets in the repository
.TP
.BI \-t,  \-\-type \ <TYPE>
.
bundle compression type to use (default: bzip2)
.TP
.BI \-e,  \-\-ssh \ <CMD>
.
specify ssh command to use
.TP
.BI \-\-remotecmd \ <CMD>
.
specify hg command to run on the remote side
.TP
.B \-\-insecure
.
do not verify server certificate (ignoring web.cacerts config)
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS cat
.sp
output the current or given revision of files:
.sp
.nf
.ft C
hg cat [OPTION]... FILE...
.ft P
.fi
.sp
Print the specified files as they were at the given revision. If
no revision is given, the parent of the working directory is used.
.sp
Output may be to a file, in which case the name of the file is
given using a format string. The formatting rules as follows:
.INDENT 0.0
.TP
.B \fB%%\fP
.sp
literal "%" character
.TP
.B \fB%s\fP
.sp
basename of file being printed
.TP
.B \fB%d\fP
.sp
dirname of file being printed, or \(aq.\(aq if in repository root
.TP
.B \fB%p\fP
.sp
root\-relative path name of file being printed
.TP
.B \fB%H\fP
.sp
changeset hash (40 hexadecimal digits)
.TP
.B \fB%R\fP
.sp
changeset revision number
.TP
.B \fB%h\fP
.sp
short\-form changeset hash (12 hexadecimal digits)
.TP
.B \fB%r\fP
.sp
zero\-padded changeset revision number
.TP
.B \fB%b\fP
.sp
basename of the exporting repository
.UNINDENT
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.BI \-o,  \-\-output \ <FORMAT>
.
print output to file with formatted name
.TP
.BI \-r,  \-\-rev \ <REV>
.
print the given revision
.TP
.B \-\-decode
.
apply any matching decode filter
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template (EXPERIMENTAL)
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS clone
.sp
make a copy of an existing repository:
.sp
.nf
.ft C
hg clone [OPTION]... SOURCE [DEST]
.ft P
.fi
.sp
Create a copy of an existing repository in a new directory.
.sp
If no destination directory name is specified, it defaults to the
basename of the source.
.sp
The location of the source is added to the new repository\(aqs
\fB.hg/hgrc\fP file, as the default to be used for future pulls.
.sp
Only local paths and \fBssh://\fP URLs are supported as
destinations. For \fBssh://\fP destinations, no working directory or
\fB.hg/hgrc\fP will be created on the remote side.
.sp
If the source repository has a bookmark called \(aq@\(aq set, that
revision will be checked out in the new repository by default.
.sp
To check out a particular version, use \-u/\-\-update, or
\-U/\-\-noupdate to create a clone with no working directory.
.sp
To pull only a subset of changesets, specify one or more revisions
identifiers with \-r/\-\-rev or branches with \-b/\-\-branch. The
resulting clone will contain only the specified changesets and
their ancestors. These options (or \(aqclone src#rev dest\(aq) imply
\-\-pull, even for local source repositories.
.IP Note
.
Specifying a tag will include the tagged changeset but not the
changeset containing the tag.
.RE
.sp
For efficiency, hardlinks are used for cloning whenever the
source and destination are on the same filesystem (note this
applies only to the repository data, not to the working
directory). Some filesystems, such as AFS, implement hardlinking
incorrectly, but do not report errors. In these cases, use the
\-\-pull option to avoid hardlinking.
.sp
In some cases, you can clone repositories and the working
directory using full hardlinks with
.sp
.nf
.ft C
$ cp \-al REPO REPOCLONE
.ft P
.fi
.sp
This is the fastest way to clone, but it is not always safe. The
operation is not atomic (making sure REPO is not modified during
the operation is up to you) and you have to make sure your
editor breaks hardlinks (Emacs and most Linux Kernel tools do
so). Also, this is not compatible with certain extensions that
place their metadata under the .hg directory, such as mq.
.sp
Mercurial will update the working directory to the first applicable
revision from this list:
.INDENT 0.0
.IP a. 3
.
null if \-U or the source repository has no changesets
.IP b. 3
.
if \-u . and the source repository is local, the first parent of
the source repository\(aqs working directory
.IP c. 3
.
the changeset specified with \-u (if a branch name, this means the
latest head of that branch)
.IP d. 3
.
the changeset specified with \-r
.IP e. 3
.
the tipmost head specified with \-b
.IP f. 3
.
the tipmost head specified with the url#branch source syntax
.IP g. 3
.
the revision marked with the \(aq@\(aq bookmark, if present
.IP h. 3
.
the tipmost head of the default branch
.IP i. 3
.
tip
.UNINDENT
.sp
When cloning from servers that support it, Mercurial may fetch
pre\-generated data from a server\-advertised URL. When this is done,
hooks operating on incoming changesets and changegroups may fire twice,
once for the bundle fetched from the URL and another for any additional
data not fetched from this URL. In addition, if an error occurs, the
repository may be rolled back to a partial clone. This behavior may
change in future releases. See \%\fBhg help \-e clonebundles\fP\: for more.
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
.
clone a remote repository to a new directory named hg/:
.sp
.nf
.ft C
hg clone https://www.mercurial\-scm.org/repo/hg/
.ft P
.fi
.IP \(bu 2
.
create a lightweight local clone:
.sp
.nf
.ft C
hg clone project/ project\-feature/
.ft P
.fi
.IP \(bu 2
.
clone from an absolute path on an ssh server (note double\-slash):
.sp
.nf
.ft C
hg clone ssh://user@server//home/projects/alpha/
.ft P
.fi
.IP \(bu 2
.
do a high\-speed clone over a LAN while checking out a
specified version:
.sp
.nf
.ft C
hg clone \-\-uncompressed http://server/repo \-u 1.5
.ft P
.fi
.IP \(bu 2
.
create a repository without changesets after a particular revision:
.sp
.nf
.ft C
hg clone \-r 04e544 experimental/ good/
.ft P
.fi
.IP \(bu 2
.
clone (and track) a particular named branch:
.sp
.nf
.ft C
hg clone https://www.mercurial\-scm.org/repo/hg/#stable
.ft P
.fi
.UNINDENT
.sp
See \%\fBhg help urls\fP\: for details on specifying URLs.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-U,  \-\-noupdate
.
the clone will include an empty working directory (only a repository)
.TP
.BI \-u,  \-\-updaterev \ <REV>
.
revision, tag, or branch to check out
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
include the specified changeset
.TP
.BI \-b,  \-\-branch \ <BRANCH[+]>
.
clone only the specified branch
.TP
.B \-\-pull
.
use pull protocol to copy metadata
.TP
.B \-\-uncompressed
.
use uncompressed transfer (fast over LAN)
.TP
.BI \-e,  \-\-ssh \ <CMD>
.
specify ssh command to use
.TP
.BI \-\-remotecmd \ <CMD>
.
specify hg command to run on the remote side
.TP
.B \-\-insecure
.
do not verify server certificate (ignoring web.cacerts config)
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS commit
.sp
commit the specified files or all outstanding changes:
.sp
.nf
.ft C
hg commit [OPTION]... [FILE]...
.ft P
.fi
.sp
Commit changes to the given files into the repository. Unlike a
centralized SCM, this operation is a local operation. See
\%\fBhg push\fP\: for a way to actively distribute your changes.
.sp
If a list of files is omitted, all changes reported by \%\fBhg status\fP\:
will be committed.
.sp
If you are committing the result of a merge, do not provide any
filenames or \-I/\-X filters.
.sp
If no commit message is specified, Mercurial starts your
configured editor where you can enter a message. In case your
commit fails, you will find a backup of your message in
\fB.hg/last\-message.txt\fP.
.sp
The \-\-close\-branch flag can be used to mark the current branch
head closed. When all heads of a branch are closed, the branch
will be considered closed and no longer listed.
.sp
The \-\-amend flag can be used to amend the parent of the
working directory with a new commit that contains the changes
in the parent in addition to those currently reported by \%\fBhg status\fP\:,
if there are any. The old commit is stored in a backup bundle in
\fB.hg/strip\-backup\fP (see \%\fBhg help bundle\fP\: and \%\fBhg help unbundle\fP\:
on how to restore it).
.sp
Message, user and date are taken from the amended commit unless
specified. When a message isn\(aqt specified on the command line,
the editor will open with the message of the amended commit.
.sp
It is not possible to amend public changesets (see \%\fBhg help phases\fP\:)
or changesets that have children.
.sp
See \%\fBhg help dates\fP\: for a list of formats valid for \-d/\-\-date.
.sp
Returns 0 on success, 1 if nothing changed.
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
.
commit all files ending in .py:
.sp
.nf
.ft C
hg commit \-\-include "set:**.py"
.ft P
.fi
.IP \(bu 2
.
commit all non\-binary files:
.sp
.nf
.ft C
hg commit \-\-exclude "set:binary()"
.ft P
.fi
.IP \(bu 2
.
amend the current commit and set the date to now:
.sp
.nf
.ft C
hg commit \-\-amend \-\-date now
.ft P
.fi
.UNINDENT
.sp
Options:
.INDENT 0.0
.TP
.B \-A,  \-\-addremove
.
mark new/missing files as added/removed before committing
.TP
.B \-\-close\-branch
.
mark a branch head as closed
.TP
.B \-\-amend
.
amend the parent of the working directory
.TP
.B \-s,  \-\-secret
.
use the secret phase for committing
.TP
.B \-e,  \-\-edit
.
invoke editor on commit messages
.TP
.B \-i,  \-\-interactive
.
use interactive mode
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.TP
.BI \-m,  \-\-message \ <TEXT>
.
use text as commit message
.TP
.BI \-l,  \-\-logfile \ <FILE>
.
read commit message from file
.TP
.BI \-d,  \-\-date \ <DATE>
.
record the specified date as commit date
.TP
.BI \-u,  \-\-user \ <USER>
.
record the specified user as committer
.TP
.B \-S,  \-\-subrepos
.
recurse into subrepositories
.UNINDENT
.sp
[+] marked option can be specified multiple times
.INDENT 0.0
.INDENT 3.5
.sp
aliases: ci
.UNINDENT
.UNINDENT
.SS config
.sp
show combined config settings from all hgrc files:
.sp
.nf
.ft C
hg config [\-u] [NAME]...
.ft P
.fi
.sp
With no arguments, print names and values of all config items.
.sp
With one argument of the form section.name, print just the value
of that config item.
.sp
With multiple arguments, print names and values of all config
items with matching section names.
.sp
With \-\-edit, start an editor on the user\-level config file. With
\-\-global, edit the system\-wide config file. With \-\-local, edit the
repository\-level config file.
.sp
With \-\-debug, the source (filename and line number) is printed
for each config item.
.sp
See \%\fBhg help config\fP\: for more information about config files.
.sp
Returns 0 on success, 1 if NAME does not exist.
.sp
Options:
.INDENT 0.0
.TP
.B \-u,  \-\-untrusted
.
show untrusted configuration options
.TP
.B \-e,  \-\-edit
.
edit user config
.TP
.B \-l,  \-\-local
.
edit repository config
.TP
.B \-g,  \-\-global
.
edit global config
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template (EXPERIMENTAL)
.sp
aliases: showconfig debugconfig
.UNINDENT
.SS copy
.sp
mark files as copied for the next commit:
.sp
.nf
.ft C
hg copy [OPTION]... [SOURCE]... DEST
.ft P
.fi
.sp
Mark dest as having copies of source files. If dest is a
directory, copies are put in that directory. If dest is a file,
the source must be a single file.
.sp
By default, this command copies the contents of files as they
exist in the working directory. If invoked with \-A/\-\-after, the
operation is recorded, but no copying is performed.
.sp
This command takes effect with the next commit. To undo a copy
before that, see \%\fBhg revert\fP\:.
.sp
Returns 0 on success, 1 if errors are encountered.
.sp
Options:
.INDENT 0.0
.TP
.B \-A,  \-\-after
.
record a copy that has already occurred
.TP
.B \-f,  \-\-force
.
forcibly copy over an existing managed file
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.TP
.B \-n,  \-\-dry\-run
.
do not perform actions, just print output
.UNINDENT
.sp
[+] marked option can be specified multiple times
.INDENT 0.0
.INDENT 3.5
.sp
aliases: cp
.UNINDENT
.UNINDENT
.SS diff
.sp
diff repository (or selected files):
.sp
.nf
.ft C
hg diff [OPTION]... ([\-c REV] | [\-r REV1 [\-r REV2]]) [FILE]...
.ft P
.fi
.sp
Show differences between revisions for the specified files.
.sp
Differences between files are shown using the unified diff format.
.IP Note
.
\%\fBhg diff\fP\: may generate unexpected results for merges, as it will
default to comparing against the working directory\(aqs first
parent changeset if no revisions are specified.
.RE
.sp
When two revision arguments are given, then changes are shown
between those revisions. If only one revision is specified then
that revision is compared to the working directory, and, when no
revisions are specified, the working directory files are compared
to its first parent.
.sp
Alternatively you can specify \-c/\-\-change with a revision to see
the changes in that changeset relative to its first parent.
.sp
Without the \-a/\-\-text option, diff will avoid generating diffs of
files it detects as binary. With \-a, diff will generate a diff
anyway, probably with undesirable results.
.sp
Use the \-g/\-\-git option to generate diffs in the git extended diff
format. For more information, read \%\fBhg help diffs\fP\:.
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
.
compare a file in the current working directory to its parent:
.sp
.nf
.ft C
hg diff foo.c
.ft P
.fi
.IP \(bu 2
.
compare two historical versions of a directory, with rename info:
.sp
.nf
.ft C
hg diff \-\-git \-r 1.0:1.2 lib/
.ft P
.fi
.IP \(bu 2
.
get change stats relative to the last change on some date:
.sp
.nf
.ft C
hg diff \-\-stat \-r "date(\(aqmay 2\(aq)"
.ft P
.fi
.IP \(bu 2
.
diff all newly\-added files that contain a keyword:
.sp
.nf
.ft C
hg diff "set:added() and grep(GNU)"
.ft P
.fi
.IP \(bu 2
.
compare a revision and its parents:
.sp
.nf
.ft C
hg diff \-c 9353         # compare against first parent
hg diff \-r 9353^:9353   # same using revset syntax
hg diff \-r 9353^2:9353  # compare against the second parent
.ft P
.fi
.UNINDENT
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
revision
.TP
.BI \-c,  \-\-change \ <REV>
.
change made by revision
.TP
.B \-a,  \-\-text
.
treat all files as text
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.B \-\-binary
.
generate binary diffs in git mode (default)
.TP
.B \-\-nodates
.
omit dates from diff headers
.TP
.B \-\-noprefix
.
omit a/ and b/ prefixes from filenames
.TP
.B \-p,  \-\-show\-function
.
show which function each change is in
.TP
.B \-\-reverse
.
produce a diff that undoes the changes
.TP
.B \-w,  \-\-ignore\-all\-space
.
ignore white space when comparing lines
.TP
.B \-b,  \-\-ignore\-space\-change
.
ignore changes in the amount of white space
.TP
.B \-B,  \-\-ignore\-blank\-lines
.
ignore changes whose lines are all blank
.TP
.BI \-U,  \-\-unified \ <NUM>
.
number of lines of context to show
.TP
.B \-\-stat
.
output diffstat\-style summary of changes
.TP
.BI \-\-root \ <DIR>
.
produce diffs relative to subdirectory
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.TP
.B \-S,  \-\-subrepos
.
recurse into subrepositories
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS export
.sp
dump the header and diffs for one or more changesets:
.sp
.nf
.ft C
hg export [OPTION]... [\-o OUTFILESPEC] [\-r] [REV]...
.ft P
.fi
.sp
Print the changeset header and diffs for one or more revisions.
If no revision is given, the parent of the working directory is used.
.sp
The information shown in the changeset header is: author, date,
branch name (if non\-default), changeset hash, parent(s) and commit
comment.
.IP Note
.
\%\fBhg export\fP\: may generate unexpected diff output for merge
changesets, as it will compare the merge changeset against its
first parent only.
.RE
.sp
Output may be to a file, in which case the name of the file is
given using a format string. The formatting rules are as follows:
.INDENT 0.0
.TP
.B \fB%%\fP
.sp
literal "%" character
.TP
.B \fB%H\fP
.sp
changeset hash (40 hexadecimal digits)
.TP
.B \fB%N\fP
.sp
number of patches being generated
.TP
.B \fB%R\fP
.sp
changeset revision number
.TP
.B \fB%b\fP
.sp
basename of the exporting repository
.TP
.B \fB%h\fP
.sp
short\-form changeset hash (12 hexadecimal digits)
.TP
.B \fB%m\fP
.sp
first line of the commit message (only alphanumeric characters)
.TP
.B \fB%n\fP
.sp
zero\-padded sequence number, starting at 1
.TP
.B \fB%r\fP
.sp
zero\-padded changeset revision number
.UNINDENT
.sp
Without the \-a/\-\-text option, export will avoid generating diffs
of files it detects as binary. With \-a, export will generate a
diff anyway, probably with undesirable results.
.sp
Use the \-g/\-\-git option to generate diffs in the git extended diff
format. See \%\fBhg help diffs\fP\: for more information.
.sp
With the \-\-switch\-parent option, the diff will be against the
second parent. It can be useful to review a merge.
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
.
use export and import to transplant a bugfix to the current
branch:
.sp
.nf
.ft C
hg export \-r 9353 | hg import \-
.ft P
.fi
.IP \(bu 2
.
export all the changesets between two revisions to a file with
rename information:
.sp
.nf
.ft C
hg export \-\-git \-r 123:150 > changes.txt
.ft P
.fi
.IP \(bu 2
.
split outgoing changes into a series of patches with
descriptive names:
.sp
.nf
.ft C
hg export \-r "outgoing()" \-o "%n\-%m.patch"
.ft P
.fi
.UNINDENT
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.BI \-o,  \-\-output \ <FORMAT>
.
print output to file with formatted name
.TP
.B \-\-switch\-parent
.
diff against the second parent
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
revisions to export
.TP
.B \-a,  \-\-text
.
treat all files as text
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.B \-\-binary
.
generate binary diffs in git mode (default)
.TP
.B \-\-nodates
.
omit dates from diff headers
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS files
.sp
list tracked files:
.sp
.nf
.ft C
hg files [OPTION]... [FILE]...
.ft P
.fi
.sp
Print files under Mercurial control in the working directory or
specified revision for given files (excluding removed files).
Files can be specified as filenames or filesets.
.sp
If no files are given to match, this command prints the names
of all files under Mercurial control.
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
.
list all files under the current directory:
.sp
.nf
.ft C
hg files .
.ft P
.fi
.IP \(bu 2
.
shows sizes and flags for current revision:
.sp
.nf
.ft C
hg files \-vr .
.ft P
.fi
.IP \(bu 2
.
list all files named README:
.sp
.nf
.ft C
hg files \-I "**/README"
.ft P
.fi
.IP \(bu 2
.
list all binary files:
.sp
.nf
.ft C
hg files "set:binary()"
.ft P
.fi
.IP \(bu 2
.
find files containing a regular expression:
.sp
.nf
.ft C
hg files "set:grep(\(aqbob\(aq)"
.ft P
.fi
.IP \(bu 2
.
search tracked file contents with xargs and grep:
.sp
.nf
.ft C
hg files \-0 | xargs \-0 grep foo
.ft P
.fi
.UNINDENT
.sp
See \%\fBhg help patterns\fP\: and \%\fBhg help filesets\fP\: for more information
on specifying file patterns.
.sp
Returns 0 if a match is found, 1 otherwise.
.sp
Options:
.INDENT 0.0
.TP
.BI \-r,  \-\-rev \ <REV>
.
search the repository as it is in REV
.TP
.B \-0,  \-\-print0
.
end filenames with NUL, for use with xargs
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template (EXPERIMENTAL)
.TP
.B \-S,  \-\-subrepos
.
recurse into subrepositories
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS forget
.sp
forget the specified files on the next commit:
.sp
.nf
.ft C
hg forget [OPTION]... FILE...
.ft P
.fi
.sp
Mark the specified files so they will no longer be tracked
after the next commit.
.sp
This only removes files from the current branch, not from the
entire project history, and it does not delete them from the
working directory.
.sp
To delete the file from the working directory, see \%\fBhg remove\fP\:.
.sp
To undo a forget before the next commit, see \%\fBhg add\fP\:.
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
.
forget newly\-added binary files:
.sp
.nf
.ft C
hg forget "set:added() and binary()"
.ft P
.fi
.IP \(bu 2
.
forget files that would be excluded by .hgignore:
.sp
.nf
.ft C
hg forget "set:hgignore()"
.ft P
.fi
.UNINDENT
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS graft
.sp
copy changes from other branches onto the current branch:
.sp
.nf
.ft C
hg graft [OPTION]... [\-r REV]... REV...
.ft P
.fi
.sp
This command uses Mercurial\(aqs merge logic to copy individual
changes from other branches without merging branches in the
history graph. This is sometimes known as \(aqbackporting\(aq or
\(aqcherry\-picking\(aq. By default, graft will copy user, date, and
description from the source changesets.
.sp
Changesets that are ancestors of the current revision, that have
already been grafted, or that are merges will be skipped.
.sp
If \-\-log is specified, log messages will have a comment appended
of the form:
.sp
.nf
.ft C
(grafted from CHANGESETHASH)
.ft P
.fi
.sp
If \-\-force is specified, revisions will be grafted even if they
are already ancestors of or have been grafted to the destination.
This is useful when the revisions have since been backed out.
.sp
If a graft merge results in conflicts, the graft process is
interrupted so that the current merge can be manually resolved.
Once all conflicts are addressed, the graft process can be
continued with the \-c/\-\-continue option.
.IP Note
.
The \-c/\-\-continue option does not reapply earlier options, except
for \-\-force.
.RE
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
.
copy a single change to the stable branch and edit its description:
.sp
.nf
.ft C
hg update stable
hg graft \-\-edit 9393
.ft P
.fi
.IP \(bu 2
.
graft a range of changesets with one exception, updating dates:
.sp
.nf
.ft C
hg graft \-D "2085::2093 and not 2091"
.ft P
.fi
.IP \(bu 2
.
continue a graft after resolving conflicts:
.sp
.nf
.ft C
hg graft \-c
.ft P
.fi
.IP \(bu 2
.
show the source of a grafted changeset:
.sp
.nf
.ft C
hg log \-\-debug \-r .
.ft P
.fi
.IP \(bu 2
.
show revisions sorted by date:
.sp
.nf
.ft C
hg log \-r "sort(all(), date)"
.ft P
.fi
.UNINDENT
.sp
See \%\fBhg help revisions\fP\: for more about specifying revisions.
.sp
Returns 0 on successful completion.
.sp
Options:
.INDENT 0.0
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
revisions to graft
.TP
.B \-c,  \-\-continue
.
resume interrupted graft
.TP
.B \-e,  \-\-edit
.
invoke editor on commit messages
.TP
.B \-\-log
.
append graft info to log message
.TP
.B \-f,  \-\-force
.
force graft
.TP
.B \-D,  \-\-currentdate
.
record the current date as commit date
.TP
.B \-U,  \-\-currentuser
.
record the current user as committer
.TP
.BI \-d,  \-\-date \ <DATE>
.
record the specified date as commit date
.TP
.BI \-u,  \-\-user \ <USER>
.
record the specified user as committer
.TP
.BI \-t,  \-\-tool \ <VALUE>
.
specify merge tool
.TP
.B \-n,  \-\-dry\-run
.
do not perform actions, just print output
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS grep
.sp
search revision history for a pattern in specified files:
.sp
.nf
.ft C
hg grep [OPTION]... PATTERN [FILE]...
.ft P
.fi
.sp
Search revision history for a regular expression in the specified
files or the entire project.
.sp
By default, grep prints the most recent revision number for each
file in which it finds a match. To get it to print every revision
that contains a change in match status ("\-" for a match that becomes
a non\-match, or "+" for a non\-match that becomes a match), use the
\-\-all flag.
.sp
PATTERN can be any Python (roughly Perl\-compatible) regular
expression.
.sp
If no FILEs are specified (and \-f/\-\-follow isn\(aqt set), all files in
the repository are searched, including those that don\(aqt exist in the
current branch or have been deleted in a prior changeset.
.sp
Returns 0 if a match is found, 1 otherwise.
.sp
Options:
.INDENT 0.0
.TP
.B \-0,  \-\-print0
.
end fields with NUL
.TP
.B \-\-all
.
print all revisions that match
.TP
.B \-a,  \-\-text
.
treat all files as text
.TP
.B \-f,  \-\-follow
.
follow changeset history, or file history across copies and renames
.TP
.B \-i,  \-\-ignore\-case
.
ignore case when matching
.TP
.B \-l,  \-\-files\-with\-matches
.
print only filenames and revisions that match
.TP
.B \-n,  \-\-line\-number
.
print matching line numbers
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
only search files changed within revision range
.TP
.B \-u,  \-\-user
.
list the author (long with \-v)
.TP
.B \-d,  \-\-date
.
list the date (short with \-q)
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template (EXPERIMENTAL)
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS heads
.sp
show branch heads:
.sp
.nf
.ft C
hg heads [\-ct] [\-r STARTREV] [REV]...
.ft P
.fi
.sp
With no arguments, show all open branch heads in the repository.
Branch heads are changesets that have no descendants on the
same branch. They are where development generally takes place and
are the usual targets for update and merge operations.
.sp
If one or more REVs are given, only open branch heads on the
branches associated with the specified changesets are shown. This
means that you can use \%\fBhg heads .\fP\: to see the heads on the
currently checked\-out branch.
.sp
If \-c/\-\-closed is specified, also show branch heads marked closed
(see \%\fBhg commit \-\-close\-branch\fP\:).
.sp
If STARTREV is specified, only those heads that are descendants of
STARTREV will be displayed.
.sp
If \-t/\-\-topo is specified, named branch mechanics will be ignored and only
topological heads (changesets with no children) will be shown.
.sp
Returns 0 if matching heads are found, 1 if not.
.sp
Options:
.INDENT 0.0
.TP
.BI \-r,  \-\-rev \ <STARTREV>
.
show only heads which are descendants of STARTREV
.TP
.B \-t,  \-\-topo
.
show topological heads only
.TP
.B \-a,  \-\-active
.
show active branchheads only (DEPRECATED)
.TP
.B \-c,  \-\-closed
.
show normal and closed branch heads
.TP
.BI \-\-style \ <STYLE>
.
display using template map file (DEPRECATED)
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template
.UNINDENT
.SS help
.sp
show help for a given topic or a help overview:
.sp
.nf
.ft C
hg help [\-ecks] [TOPIC]
.ft P
.fi
.sp
With no arguments, print a list of commands with short help messages.
.sp
Given a topic, extension, or command name, print help for that
topic.
.sp
Returns 0 if successful.
.sp
Options:
.INDENT 0.0
.TP
.B \-e,  \-\-extension
.
show only help for extensions
.TP
.B \-c,  \-\-command
.
show only help for commands
.TP
.B \-k,  \-\-keyword
.
show topics matching keyword
.TP
.BI \-s,  \-\-system \ <VALUE[+]>
.
show help for specific platform(s)
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS identify
.sp
identify the working directory or specified revision:
.sp
.nf
.ft C
hg identify [\-nibtB] [\-r REV] [SOURCE]
.ft P
.fi
.sp
Print a summary identifying the repository state at REV using one or
two parent hash identifiers, followed by a "+" if the working
directory has uncommitted changes, the branch name (if not default),
a list of tags, and a list of bookmarks.
.sp
When REV is not given, print a summary of the current state of the
repository.
.sp
Specifying a path to a repository root or Mercurial bundle will
cause lookup to operate on that repository/bundle.
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
.
generate a build identifier for the working directory:
.sp
.nf
.ft C
hg id \-\-id > build\-id.dat
.ft P
.fi
.IP \(bu 2
.
find the revision corresponding to a tag:
.sp
.nf
.ft C
hg id \-n \-r 1.3
.ft P
.fi
.IP \(bu 2
.
check the most recent revision of a remote repository:
.sp
.nf
.ft C
hg id \-r tip https://www.mercurial\-scm.org/repo/hg/
.ft P
.fi
.UNINDENT
.sp
See \%\fBhg log\fP\: for generating more information about specific revisions,
including full hash identifiers.
.sp
Returns 0 if successful.
.sp
Options:
.INDENT 0.0
.TP
.BI \-r,  \-\-rev \ <REV>
.
identify the specified revision
.TP
.B \-n,  \-\-num
.
show local revision number
.TP
.B \-i,  \-\-id
.
show global revision id
.TP
.B \-b,  \-\-branch
.
show branch
.TP
.B \-t,  \-\-tags
.
show tags
.TP
.B \-B,  \-\-bookmarks
.
show bookmarks
.TP
.BI \-e,  \-\-ssh \ <CMD>
.
specify ssh command to use
.TP
.BI \-\-remotecmd \ <CMD>
.
specify hg command to run on the remote side
.TP
.B \-\-insecure
.
do not verify server certificate (ignoring web.cacerts config)
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template (EXPERIMENTAL)
.sp
aliases: id
.UNINDENT
.SS import
.sp
import an ordered set of patches:
.sp
.nf
.ft C
hg import [OPTION]... PATCH...
.ft P
.fi
.sp
Import a list of patches and commit them individually (unless
\-\-no\-commit is specified).
.sp
To read a patch from standard input (stdin), use "\-" as the patch
name. If a URL is specified, the patch will be downloaded from
there.
.sp
Import first applies changes to the working directory (unless
\-\-bypass is specified), import will abort if there are outstanding
changes.
.sp
Use \-\-bypass to apply and commit patches directly to the
repository, without affecting the working directory. Without
\-\-exact, patches will be applied on top of the working directory
parent revision.
.sp
You can import a patch straight from a mail message. Even patches
as attachments work (to use the body part, it must have type
text/plain or text/x\-patch). From and Subject headers of email
message are used as default committer and commit message. All
text/plain body parts before first diff are added to the commit
message.
.sp
If the imported patch was generated by \%\fBhg export\fP\:, user and
description from patch override values from message headers and
body. Values given on command line with \-m/\-\-message and \-u/\-\-user
override these.
.sp
If \-\-exact is specified, import will set the working directory to
the parent of each patch before applying it, and will abort if the
resulting changeset has a different ID than the one recorded in
the patch. This will guard against various ways that portable
patch formats and mail systems might fail to transfer Mercurial
data or metadata. See \%\fBhg bundle\fP\: for lossless transmission.
.sp
Use \-\-partial to ensure a changeset will be created from the patch
even if some hunks fail to apply. Hunks that fail to apply will be
written to a <target\-file>.rej file. Conflicts can then be resolved
by hand before \%\fBhg commit \-\-amend\fP\: is run to update the created
changeset. This flag exists to let people import patches that
partially apply without losing the associated metadata (author,
date, description, ...).
.IP Note
.
When no hunks apply cleanly, \%\fBhg import \-\-partial\fP\: will create
an empty changeset, importing only the patch metadata.
.RE
.sp
With \-s/\-\-similarity, hg will attempt to discover renames and
copies in the patch in the same way as \%\fBhg addremove\fP\:.
.sp
It is possible to use external patch programs to perform the patch
by setting the \fBui.patch\fP configuration option. For the default
internal tool, the fuzz can also be configured via \fBpatch.fuzz\fP.
See \%\fBhg help config\fP\: for more information about configuration
files and how to use these options.
.sp
See \%\fBhg help dates\fP\: for a list of formats valid for \-d/\-\-date.
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
.
import a traditional patch from a website and detect renames:
.sp
.nf
.ft C
hg import \-s 80 http://example.com/bugfix.patch
.ft P
.fi
.IP \(bu 2
.
import a changeset from an hgweb server:
.sp
.nf
.ft C
hg import https://www.mercurial\-scm.org/repo/hg/rev/5ca8c111e9aa
.ft P
.fi
.IP \(bu 2
.
import all the patches in an Unix\-style mbox:
.sp
.nf
.ft C
hg import incoming\-patches.mbox
.ft P
.fi
.IP \(bu 2
.
import patches from stdin:
.sp
.nf
.ft C
hg import \-
.ft P
.fi
.IP \(bu 2
.
attempt to exactly restore an exported changeset (not always
possible):
.sp
.nf
.ft C
hg import \-\-exact proposed\-fix.patch
.ft P
.fi
.IP \(bu 2
.
use an external tool to apply a patch which is too fuzzy for
the default internal tool.
.INDENT 2.0
.INDENT 3.5
.sp
hg import \-\-config ui.patch="patch \-\-merge" fuzzy.patch
.UNINDENT
.UNINDENT
.IP \(bu 2
.
change the default fuzzing from 2 to a less strict 7
.INDENT 2.0
.INDENT 3.5
.sp
hg import \-\-config ui.fuzz=7 fuzz.patch
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Returns 0 on success, 1 on partial success (see \-\-partial).
.sp
Options:
.INDENT 0.0
.TP
.BI \-p,  \-\-strip \ <NUM>
.
directory strip option for patch. This has the same meaning as the corresponding patch option (default: 1)
.TP
.BI \-b,  \-\-base \ <PATH>
.
base path (DEPRECATED)
.TP
.B \-e,  \-\-edit
.
invoke editor on commit messages
.TP
.B \-f,  \-\-force
.
skip check for outstanding uncommitted changes (DEPRECATED)
.TP
.B \-\-no\-commit
.
don\(aqt commit, just update the working directory
.TP
.B \-\-bypass
.
apply patch without touching the working directory
.TP
.B \-\-partial
.
commit even if some hunks fail
.TP
.B \-\-exact
.
abort if patch would apply lossily
.TP
.BI \-\-prefix \ <DIR>
.
apply patch to subdirectory
.TP
.B \-\-import\-branch
.
use any branch information in patch (implied by \-\-exact)
.TP
.BI \-m,  \-\-message \ <TEXT>
.
use text as commit message
.TP
.BI \-l,  \-\-logfile \ <FILE>
.
read commit message from file
.TP
.BI \-d,  \-\-date \ <DATE>
.
record the specified date as commit date
.TP
.BI \-u,  \-\-user \ <USER>
.
record the specified user as committer
.TP
.BI \-s,  \-\-similarity \ <SIMILARITY>
.
guess renamed files by similarity (0<=s<=100)
.sp
aliases: patch
.UNINDENT
.SS incoming
.sp
show new changesets found in source:
.sp
.nf
.ft C
hg incoming [\-p] [\-n] [\-M] [\-f] [\-r REV]... [\-\-bundle FILENAME] [SOURCE]
.ft P
.fi
.sp
Show new changesets found in the specified path/URL or the default
pull location. These are the changesets that would have been pulled
if a pull at the time you issued this command.
.sp
See pull for valid source format details.
.sp
With \-B/\-\-bookmarks, the result of bookmark comparison between
local and remote repositories is displayed. With \-v/\-\-verbose,
status is also displayed for each bookmark like below:
.sp
.nf
.ft C
BM1               01234567890a added
BM2               1234567890ab advanced
BM3               234567890abc diverged
BM4               34567890abcd changed
.ft P
.fi
.sp
The action taken locally when pulling depends on the
status of each bookmark:
.INDENT 0.0
.TP
.B \fBadded\fP
.sp
pull will create it
.TP
.B \fBadvanced\fP
.sp
pull will update it
.TP
.B \fBdiverged\fP
.sp
pull will create a divergent bookmark
.TP
.B \fBchanged\fP
.sp
result depends on remote changesets
.UNINDENT
.sp
From the point of view of pulling behavior, bookmark
existing only in the remote repository are treated as \fBadded\fP,
even if it is in fact locally deleted.
.sp
For remote repository, using \-\-bundle avoids downloading the
changesets twice if the incoming is followed by a pull.
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
.
show incoming changes with patches and full description:
.sp
.nf
.ft C
hg incoming \-vp
.ft P
.fi
.IP \(bu 2
.
show incoming changes excluding merges, store a bundle:
.sp
.nf
.ft C
hg in \-vpM \-\-bundle incoming.hg
hg pull incoming.hg
.ft P
.fi
.IP \(bu 2
.
briefly list changes inside a bundle:
.sp
.nf
.ft C
hg in changes.hg \-T "{desc|firstline}\en"
.ft P
.fi
.UNINDENT
.sp
Returns 0 if there are incoming changes, 1 otherwise.
.sp
Options:
.INDENT 0.0
.TP
.B \-f,  \-\-force
.
run even if remote repository is unrelated
.TP
.B \-n,  \-\-newest\-first
.
show newest record first
.TP
.BI \-\-bundle \ <FILE>
.
file to store the bundles into
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
a remote changeset intended to be added
.TP
.B \-B,  \-\-bookmarks
.
compare bookmarks
.TP
.BI \-b,  \-\-branch \ <BRANCH[+]>
.
a specific branch you would like to pull
.TP
.B \-p,  \-\-patch
.
show patch
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.BI \-l,  \-\-limit \ <NUM>
.
limit number of changes displayed
.TP
.B \-M,  \-\-no\-merges
.
do not show merges
.TP
.B \-\-stat
.
output diffstat\-style summary of changes
.TP
.B \-G,  \-\-graph
.
show the revision DAG
.TP
.BI \-\-style \ <STYLE>
.
display using template map file (DEPRECATED)
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template
.TP
.BI \-e,  \-\-ssh \ <CMD>
.
specify ssh command to use
.TP
.BI \-\-remotecmd \ <CMD>
.
specify hg command to run on the remote side
.TP
.B \-\-insecure
.
do not verify server certificate (ignoring web.cacerts config)
.TP
.B \-S,  \-\-subrepos
.
recurse into subrepositories
.UNINDENT
.sp
[+] marked option can be specified multiple times
.INDENT 0.0
.INDENT 3.5
.sp
aliases: in
.UNINDENT
.UNINDENT
.SS init
.sp
create a new repository in the given directory:
.sp
.nf
.ft C
hg init [\-e CMD] [\-\-remotecmd CMD] [DEST]
.ft P
.fi
.sp
Initialize a new repository in the given directory. If the given
directory does not exist, it will be created.
.sp
If no directory is given, the current directory is used.
.sp
It is possible to specify an \fBssh://\fP URL as the destination.
See \%\fBhg help urls\fP\: for more information.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.BI \-e,  \-\-ssh \ <CMD>
.
specify ssh command to use
.TP
.BI \-\-remotecmd \ <CMD>
.
specify hg command to run on the remote side
.TP
.B \-\-insecure
.
do not verify server certificate (ignoring web.cacerts config)
.UNINDENT
.SS locate
.sp
locate files matching specific patterns (DEPRECATED):
.sp
.nf
.ft C
hg locate [OPTION]... [PATTERN]...
.ft P
.fi
.sp
Print files under Mercurial control in the working directory whose
names match the given patterns.
.sp
By default, this command searches all directories in the working
directory. To search just the current directory and its
subdirectories, use "\-\-include .".
.sp
If no patterns are given to match, this command prints the names
of all files under Mercurial control in the working directory.
.sp
If you want to feed the output of this command into the "xargs"
command, use the \-0 option to both this command and "xargs". This
will avoid the problem of "xargs" treating single filenames that
contain whitespace as multiple filenames.
.sp
See \%\fBhg help files\fP\: for a more versatile command.
.sp
Returns 0 if a match is found, 1 otherwise.
.sp
Options:
.INDENT 0.0
.TP
.BI \-r,  \-\-rev \ <REV>
.
search the repository as it is in REV
.TP
.B \-0,  \-\-print0
.
end filenames with NUL, for use with xargs
.TP
.B \-f,  \-\-fullpath
.
print complete paths from the filesystem root
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS log
.sp
show revision history of entire repository or files:
.sp
.nf
.ft C
hg log [OPTION]... [FILE]
.ft P
.fi
.sp
Print the revision history of the specified files or the entire
project.
.sp
If no revision range is specified, the default is \fBtip:0\fP unless
\-\-follow is set, in which case the working directory parent is
used as the starting revision.
.sp
File history is shown without following rename or copy history of
files. Use \-f/\-\-follow with a filename to follow history across
renames and copies. \-\-follow without a filename will only show
ancestors or descendants of the starting revision.
.sp
By default this command prints revision number and changeset id,
tags, non\-trivial parents, user, date and time, and a summary for
each commit. When the \-v/\-\-verbose switch is used, the list of
changed files and full commit message are shown.
.sp
With \-\-graph the revisions are shown as an ASCII art DAG with the most
recent changeset at the top.
\(aqo\(aq is a changeset, \(aq@\(aq is a working directory parent, \(aqx\(aq is obsolete,
and \(aq+\(aq represents a fork where the changeset from the lines below is a
parent of the \(aqo\(aq merge on the same line.
Paths in the DAG are represented with \(aq|\(aq, \(aq/\(aq and so forth. \(aq:\(aq in place
of a \(aq|\(aq indicates one or more revisions in a path are omitted.
.IP Note
.
\%\fBhg log \-\-patch\fP\: may generate unexpected diff output for merge
changesets, as it will only compare the merge changeset against
its first parent. Also, only files different from BOTH parents
will appear in files:.
.RE
.IP Note
.
For performance reasons, \%\fBhg log FILE\fP\: may omit duplicate changes
made on branches and will not show removals or mode changes. To
see all such changes, use the \-\-removed switch.
.RE
.sp
Some examples:
.INDENT 0.0
.IP \(bu 2
.
changesets with full descriptions and file lists:
.sp
.nf
.ft C
hg log \-v
.ft P
.fi
.IP \(bu 2
.
changesets ancestral to the working directory:
.sp
.nf
.ft C
hg log \-f
.ft P
.fi
.IP \(bu 2
.
last 10 commits on the current branch:
.sp
.nf
.ft C
hg log \-l 10 \-b .
.ft P
.fi
.IP \(bu 2
.
changesets showing all modifications of a file, including removals:
.sp
.nf
.ft C
hg log \-\-removed file.c
.ft P
.fi
.IP \(bu 2
.
all changesets that touch a directory, with diffs, excluding merges:
.sp
.nf
.ft C
hg log \-Mp lib/
.ft P
.fi
.IP \(bu 2
.
all revision numbers that match a keyword:
.sp
.nf
.ft C
hg log \-k bug \-\-template "{rev}\en"
.ft P
.fi
.IP \(bu 2
.
the full hash identifier of the working directory parent:
.sp
.nf
.ft C
hg log \-r . \-\-template "{node}\en"
.ft P
.fi
.IP \(bu 2
.
list available log templates:
.sp
.nf
.ft C
hg log \-T list
.ft P
.fi
.IP \(bu 2
.
check if a given changeset is included in a tagged release:
.sp
.nf
.ft C
hg log \-r "a21ccf and ancestor(1.9)"
.ft P
.fi
.IP \(bu 2
.
find all changesets by some user in a date range:
.sp
.nf
.ft C
hg log \-k alice \-d "may 2008 to jul 2008"
.ft P
.fi
.IP \(bu 2
.
summary of all changesets after the last tag:
.sp
.nf
.ft C
hg log \-r "last(tagged())::" \-\-template "{desc|firstline}\en"
.ft P
.fi
.UNINDENT
.sp
See \%\fBhg help dates\fP\: for a list of formats valid for \-d/\-\-date.
.sp
See \%\fBhg help revisions\fP\: for more about specifying and ordering
revisions.
.sp
See \%\fBhg help templates\fP\: for more about pre\-packaged styles and
specifying custom templates.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-f,  \-\-follow
.
follow changeset history, or file history across copies and renames
.TP
.B \-\-follow\-first
.
only follow the first parent of merge changesets (DEPRECATED)
.TP
.BI \-d,  \-\-date \ <DATE>
.
show revisions matching date spec
.TP
.B \-C,  \-\-copies
.
show copied files
.TP
.BI \-k,  \-\-keyword \ <TEXT[+]>
.
do case\-insensitive search for a given text
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
show the specified revision or revset
.TP
.B \-\-removed
.
include revisions where files were removed
.TP
.B \-m,  \-\-only\-merges
.
show only merges (DEPRECATED)
.TP
.BI \-u,  \-\-user \ <USER[+]>
.
revisions committed by user
.TP
.BI \-\-only\-branch \ <BRANCH[+]>
.
show only changesets within the given named branch (DEPRECATED)
.TP
.BI \-b,  \-\-branch \ <BRANCH[+]>
.
show changesets within the given named branch
.TP
.BI \-P,  \-\-prune \ <REV[+]>
.
do not display revision or any of its ancestors
.TP
.B \-p,  \-\-patch
.
show patch
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.BI \-l,  \-\-limit \ <NUM>
.
limit number of changes displayed
.TP
.B \-M,  \-\-no\-merges
.
do not show merges
.TP
.B \-\-stat
.
output diffstat\-style summary of changes
.TP
.B \-G,  \-\-graph
.
show the revision DAG
.TP
.BI \-\-style \ <STYLE>
.
display using template map file (DEPRECATED)
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.UNINDENT
.sp
[+] marked option can be specified multiple times
.INDENT 0.0
.INDENT 3.5
.sp
aliases: history
.UNINDENT
.UNINDENT
.SS manifest
.sp
output the current or given revision of the project manifest:
.sp
.nf
.ft C
hg manifest [\-r REV]
.ft P
.fi
.sp
Print a list of version controlled files for the given revision.
If no revision is given, the first parent of the working directory
is used, or the null revision if no revision is checked out.
.sp
With \-v, print file permissions, symlink and executable bits.
With \-\-debug, print file revision hashes.
.sp
If option \-\-all is specified, the list of all files from all revisions
is printed. This includes deleted and renamed files.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.BI \-r,  \-\-rev \ <REV>
.
revision to display
.TP
.B \-\-all
.
list files from all revisions
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template (EXPERIMENTAL)
.UNINDENT
.SS merge
.sp
merge another revision into working directory:
.sp
.nf
.ft C
hg merge [\-P] [[\-r] REV]
.ft P
.fi
.sp
The current working directory is updated with all changes made in
the requested revision since the last common predecessor revision.
.sp
Files that changed between either parent are marked as changed for
the next commit and a commit must be performed before any further
updates to the repository are allowed. The next commit will have
two parents.
.sp
\fB\-\-tool\fP can be used to specify the merge tool used for file
merges. It overrides the HGMERGE environment variable and your
configuration files. See \%\fBhg help merge\-tools\fP\: for options.
.sp
If no revision is specified, the working directory\(aqs parent is a
head revision, and the current branch contains exactly one other
head, the other head is merged with by default. Otherwise, an
explicit revision with which to merge with must be provided.
.sp
See \%\fBhg help resolve\fP\: for information on handling file conflicts.
.sp
To undo an uncommitted merge, use \%\fBhg update \-\-clean .\fP\: which
will check out a clean copy of the original merge parent, losing
all changes.
.sp
Returns 0 on success, 1 if there are unresolved files.
.sp
Options:
.INDENT 0.0
.TP
.B \-f,  \-\-force
.
force a merge including outstanding changes (DEPRECATED)
.TP
.BI \-r,  \-\-rev \ <REV>
.
revision to merge
.TP
.B \-P,  \-\-preview
.
review revisions to merge (no merge is performed)
.TP
.BI \-t,  \-\-tool \ <VALUE>
.
specify merge tool
.UNINDENT
.SS outgoing
.sp
show changesets not found in the destination:
.sp
.nf
.ft C
hg outgoing [\-M] [\-p] [\-n] [\-f] [\-r REV]... [DEST]
.ft P
.fi
.sp
Show changesets not found in the specified destination repository
or the default push location. These are the changesets that would
be pushed if a push was requested.
.sp
See pull for details of valid destination formats.
.sp
With \-B/\-\-bookmarks, the result of bookmark comparison between
local and remote repositories is displayed. With \-v/\-\-verbose,
status is also displayed for each bookmark like below:
.sp
.nf
.ft C
BM1               01234567890a added
BM2                            deleted
BM3               234567890abc advanced
BM4               34567890abcd diverged
BM5               4567890abcde changed
.ft P
.fi
.sp
The action taken when pushing depends on the
status of each bookmark:
.INDENT 0.0
.TP
.B \fBadded\fP
.sp
push with \fB\-B\fP will create it
.TP
.B \fBdeleted\fP
.sp
push with \fB\-B\fP will delete it
.TP
.B \fBadvanced\fP
.sp
push will update it
.TP
.B \fBdiverged\fP
.sp
push with \fB\-B\fP will update it
.TP
.B \fBchanged\fP
.sp
push with \fB\-B\fP will update it
.UNINDENT
.sp
From the point of view of pushing behavior, bookmarks
existing only in the remote repository are treated as
\fBdeleted\fP, even if it is in fact added remotely.
.sp
Returns 0 if there are outgoing changes, 1 otherwise.
.sp
Options:
.INDENT 0.0
.TP
.B \-f,  \-\-force
.
run even when the destination is unrelated
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
a changeset intended to be included in the destination
.TP
.B \-n,  \-\-newest\-first
.
show newest record first
.TP
.B \-B,  \-\-bookmarks
.
compare bookmarks
.TP
.BI \-b,  \-\-branch \ <BRANCH[+]>
.
a specific branch you would like to push
.TP
.B \-p,  \-\-patch
.
show patch
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.BI \-l,  \-\-limit \ <NUM>
.
limit number of changes displayed
.TP
.B \-M,  \-\-no\-merges
.
do not show merges
.TP
.B \-\-stat
.
output diffstat\-style summary of changes
.TP
.B \-G,  \-\-graph
.
show the revision DAG
.TP
.BI \-\-style \ <STYLE>
.
display using template map file (DEPRECATED)
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template
.TP
.BI \-e,  \-\-ssh \ <CMD>
.
specify ssh command to use
.TP
.BI \-\-remotecmd \ <CMD>
.
specify hg command to run on the remote side
.TP
.B \-\-insecure
.
do not verify server certificate (ignoring web.cacerts config)
.TP
.B \-S,  \-\-subrepos
.
recurse into subrepositories
.UNINDENT
.sp
[+] marked option can be specified multiple times
.INDENT 0.0
.INDENT 3.5
.sp
aliases: out
.UNINDENT
.UNINDENT
.SS parents
.sp
show the parents of the working directory or revision (DEPRECATED):
.sp
.nf
.ft C
hg parents [\-r REV] [FILE]
.ft P
.fi
.sp
Print the working directory\(aqs parent revisions. If a revision is
given via \-r/\-\-rev, the parent of that revision will be printed.
If a file argument is given, the revision in which the file was
last changed (before the working directory revision or the
argument to \-\-rev if given) is printed.
.sp
This command is equivalent to:
.sp
.nf
.ft C
hg log \-r "p1()+p2()" or
hg log \-r "p1(REV)+p2(REV)" or
hg log \-r "max(::p1() and file(FILE))+max(::p2() and file(FILE))" or
hg log \-r "max(::p1(REV) and file(FILE))+max(::p2(REV) and file(FILE))"
.ft P
.fi
.sp
See \%\fBhg summary\fP\: and \%\fBhg help revsets\fP\: for related information.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.BI \-r,  \-\-rev \ <REV>
.
show parents of the specified revision
.TP
.BI \-\-style \ <STYLE>
.
display using template map file (DEPRECATED)
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template
.UNINDENT
.SS paths
.sp
show aliases for remote repositories:
.sp
.nf
.ft C
hg paths [NAME]
.ft P
.fi
.sp
Show definition of symbolic path name NAME. If no name is given,
show definition of all available names.
.sp
Option \-q/\-\-quiet suppresses all output when searching for NAME
and shows only the path names when listing all definitions.
.sp
Path names are defined in the [paths] section of your
configuration file and in \fB/etc/mercurial/hgrc\fP. If run inside a
repository, \fB.hg/hgrc\fP is used, too.
.sp
The path names \fBdefault\fP and \fBdefault\-push\fP have a special
meaning.  When performing a push or pull operation, they are used
as fallbacks if no location is specified on the command\-line.
When \fBdefault\-push\fP is set, it will be used for push and
\fBdefault\fP will be used for pull; otherwise \fBdefault\fP is used
as the fallback for both.  When cloning a repository, the clone
source is written as \fBdefault\fP in \fB.hg/hgrc\fP.
.IP Note
.
\fBdefault\fP and \fBdefault\-push\fP apply to all inbound (e.g.
\%\fBhg incoming\fP\:) and outbound (e.g. \%\fBhg outgoing\fP\:, \%\fBhg email\fP\:
and \%\fBhg bundle\fP\:) operations.
.RE
.sp
See \%\fBhg help urls\fP\: for more information.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template (EXPERIMENTAL)
.UNINDENT
.SS phase
.sp
set or show the current phase name:
.sp
.nf
.ft C
hg phase [\-p|\-d|\-s] [\-f] [\-r] [REV...]
.ft P
.fi
.sp
With no argument, show the phase name of the current revision(s).
.sp
With one of \-p/\-\-public, \-d/\-\-draft or \-s/\-\-secret, change the
phase value of the specified revisions.
.sp
Unless \-f/\-\-force is specified, \%\fBhg phase\fP\: won\(aqt move changeset from a
lower phase to an higher phase. Phases are ordered as follows:
.sp
.nf
.ft C
public < draft < secret
.ft P
.fi
.sp
Returns 0 on success, 1 if some phases could not be changed.
.sp
(For more information about the phases concept, see \%\fBhg help phases\fP\:.)
.sp
Options:
.INDENT 0.0
.TP
.B \-p,  \-\-public
.
set changeset phase to public
.TP
.B \-d,  \-\-draft
.
set changeset phase to draft
.TP
.B \-s,  \-\-secret
.
set changeset phase to secret
.TP
.B \-f,  \-\-force
.
allow to move boundary backward
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
target revision
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS pull
.sp
pull changes from the specified source:
.sp
.nf
.ft C
hg pull [\-u] [\-f] [\-r REV]... [\-e CMD] [\-\-remotecmd CMD] [SOURCE]
.ft P
.fi
.sp
Pull changes from a remote repository to a local one.
.sp
This finds all changes from the repository at the specified path
or URL and adds them to a local repository (the current one unless
\-R is specified). By default, this does not update the copy of the
project in the working directory.
.sp
Use \%\fBhg incoming\fP\: if you want to see what would have been added
by a pull at the time you issued this command. If you then decide
to add those changes to the repository, you should use \%\fBhg pull
\-r X\fP\: where \fBX\fP is the last changeset listed by \%\fBhg incoming\fP\:.
.sp
If SOURCE is omitted, the \(aqdefault\(aq path will be used.
See \%\fBhg help urls\fP\: for more information.
.sp
Specifying bookmark as \fB.\fP is equivalent to specifying the active
bookmark\(aqs name.
.sp
Returns 0 on success, 1 if an update had unresolved files.
.sp
Options:
.INDENT 0.0
.TP
.B \-u,  \-\-update
.
update to new branch head if changesets were pulled
.TP
.B \-f,  \-\-force
.
run even when remote repository is unrelated
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
a remote changeset intended to be added
.TP
.BI \-B,  \-\-bookmark \ <BOOKMARK[+]>
.
bookmark to pull
.TP
.BI \-b,  \-\-branch \ <BRANCH[+]>
.
a specific branch you would like to pull
.TP
.BI \-e,  \-\-ssh \ <CMD>
.
specify ssh command to use
.TP
.BI \-\-remotecmd \ <CMD>
.
specify hg command to run on the remote side
.TP
.B \-\-insecure
.
do not verify server certificate (ignoring web.cacerts config)
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS push
.sp
push changes to the specified destination:
.sp
.nf
.ft C
hg push [\-f] [\-r REV]... [\-e CMD] [\-\-remotecmd CMD] [DEST]
.ft P
.fi
.sp
Push changesets from the local repository to the specified
destination.
.sp
This operation is symmetrical to pull: it is identical to a pull
in the destination repository from the current one.
.sp
By default, push will not allow creation of new heads at the
destination, since multiple heads would make it unclear which head
to use. In this situation, it is recommended to pull and merge
before pushing.
.sp
Use \-\-new\-branch if you want to allow push to create a new named
branch that is not present at the destination. This allows you to
only create a new branch without forcing other changes.
.IP Note
.
Extra care should be taken with the \-f/\-\-force option,
which will push all new heads on all branches, an action which will
almost always cause confusion for collaborators.
.RE
.sp
If \-r/\-\-rev is used, the specified revision and all its ancestors
will be pushed to the remote repository.
.sp
If \-B/\-\-bookmark is used, the specified bookmarked revision, its
ancestors, and the bookmark will be pushed to the remote
repository. Specifying \fB.\fP is equivalent to specifying the active
bookmark\(aqs name.
.sp
Please see \%\fBhg help urls\fP\: for important details about \fBssh://\fP
URLs. If DESTINATION is omitted, a default path will be used.
.sp
Returns 0 if push was successful, 1 if nothing to push.
.sp
Options:
.INDENT 0.0
.TP
.B \-f,  \-\-force
.
force push
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
a changeset intended to be included in the destination
.TP
.BI \-B,  \-\-bookmark \ <BOOKMARK[+]>
.
bookmark to push
.TP
.BI \-b,  \-\-branch \ <BRANCH[+]>
.
a specific branch you would like to push
.TP
.B \-\-new\-branch
.
allow pushing a new branch
.TP
.BI \-e,  \-\-ssh \ <CMD>
.
specify ssh command to use
.TP
.BI \-\-remotecmd \ <CMD>
.
specify hg command to run on the remote side
.TP
.B \-\-insecure
.
do not verify server certificate (ignoring web.cacerts config)
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS recover
.sp
roll back an interrupted transaction:
.sp
.nf
.ft C
hg recover
.ft P
.fi
.sp
Recover from an interrupted commit or pull.
.sp
This command tries to fix the repository status after an
interrupted operation. It should only be necessary when Mercurial
suggests it.
.sp
Returns 0 if successful, 1 if nothing to recover or verify fails.
.SS remove
.sp
remove the specified files on the next commit:
.sp
.nf
.ft C
hg remove [OPTION]... FILE...
.ft P
.fi
.sp
Schedule the indicated files for removal from the current branch.
.sp
This command schedules the files to be removed at the next commit.
To undo a remove before that, see \%\fBhg revert\fP\:. To undo added
files, see \%\fBhg forget\fP\:.
.sp
\-A/\-\-after can be used to remove only files that have already
been deleted, \-f/\-\-force can be used to force deletion, and \-Af
can be used to remove files from the next revision without
deleting them from the working directory.
.sp
The following table details the behavior of remove for different
file states (columns) and option combinations (rows). The file
states are Added [A], Clean [C], Modified [M] and Missing [!]
(as reported by \%\fBhg status\fP\:). The actions are Warn, Remove
(from branch) and Delete (from disk):
.TS
center;
|l|l|l|l|l|.
_
T{
opt/state
T}	T{
A
T}	T{
C
T}	T{
M
T}	T{
!
T}
_
T{
none
T}	T{
W
T}	T{
RD
T}	T{
W
T}	T{
R
T}
_
T{
\-f
T}	T{
R
T}	T{
RD
T}	T{
RD
T}	T{
R
T}
_
T{
\-A
T}	T{
W
T}	T{
W
T}	T{
W
T}	T{
R
T}
_
T{
\-Af
T}	T{
R
T}	T{
R
T}	T{
R
T}	T{
R
T}
_
.TE
.IP Note
.
\%\fBhg remove\fP\: never deletes files in Added [A] state from the
working directory, not even if \fB\-\-force\fP is specified.
.RE
.sp
Returns 0 on success, 1 if any warnings encountered.
.sp
Options:
.INDENT 0.0
.TP
.B \-A,  \-\-after
.
record delete for missing files
.TP
.B \-f,  \-\-force
.
forget added files, delete modified files
.TP
.B \-S,  \-\-subrepos
.
recurse into subrepositories
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.UNINDENT
.sp
[+] marked option can be specified multiple times
.INDENT 0.0
.INDENT 3.5
.sp
aliases: rm
.UNINDENT
.UNINDENT
.SS rename
.sp
rename files; equivalent of copy + remove:
.sp
.nf
.ft C
hg rename [OPTION]... SOURCE... DEST
.ft P
.fi
.sp
Mark dest as copies of sources; mark sources for deletion. If dest
is a directory, copies are put in that directory. If dest is a
file, there can only be one source.
.sp
By default, this command copies the contents of files as they
exist in the working directory. If invoked with \-A/\-\-after, the
operation is recorded, but no copying is performed.
.sp
This command takes effect at the next commit. To undo a rename
before that, see \%\fBhg revert\fP\:.
.sp
Returns 0 on success, 1 if errors are encountered.
.sp
Options:
.INDENT 0.0
.TP
.B \-A,  \-\-after
.
record a rename that has already occurred
.TP
.B \-f,  \-\-force
.
forcibly copy over an existing managed file
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.TP
.B \-n,  \-\-dry\-run
.
do not perform actions, just print output
.UNINDENT
.sp
[+] marked option can be specified multiple times
.INDENT 0.0
.INDENT 3.5
.sp
aliases: move mv
.UNINDENT
.UNINDENT
.SS resolve
.sp
redo merges or set/view the merge status of files:
.sp
.nf
.ft C
hg resolve [OPTION]... [FILE]...
.ft P
.fi
.sp
Merges with unresolved conflicts are often the result of
non\-interactive merging using the \fBinternal:merge\fP configuration
setting, or a command\-line merge tool like \fBdiff3\fP. The resolve
command is used to manage the files involved in a merge, after
\%\fBhg merge\fP\: has been run, and before \%\fBhg commit\fP\: is run (i.e. the
working directory must have two parents). See \%\fBhg help
merge\-tools\fP\: for information on configuring merge tools.
.sp
The resolve command can be used in the following ways:
.INDENT 0.0
.IP \(bu 2
.
\%\fBhg resolve [\-\-tool TOOL] FILE...\fP\:: attempt to re\-merge the specified
files, discarding any previous merge attempts. Re\-merging is not
performed for files already marked as resolved. Use \fB\-\-all/\-a\fP
to select all unresolved files. \fB\-\-tool\fP can be used to specify
the merge tool used for the given files. It overrides the HGMERGE
environment variable and your configuration files.  Previous file
contents are saved with a \fB.orig\fP suffix.
.IP \(bu 2
.
\%\fBhg resolve \-m [FILE]\fP\:: mark a file as having been resolved
(e.g. after having manually fixed\-up the files). The default is
to mark all unresolved files.
.IP \(bu 2
.
\%\fBhg resolve \-u [FILE]...\fP\:: mark a file as unresolved. The
default is to mark all resolved files.
.IP \(bu 2
.
\%\fBhg resolve \-l\fP\:: list files which had or still have conflicts.
In the printed list, \fBU\fP = unresolved and \fBR\fP = resolved.
You can use \fBset:unresolved()\fP or \fBset:resolved()\fP to filter
the list. See \%\fBhg help filesets\fP\: for details.
.UNINDENT
.IP Note
.
Mercurial will not let you commit files with unresolved merge
conflicts. You must use \%\fBhg resolve \-m ...\fP\: before you can
commit after a conflicting merge.
.RE
.sp
Returns 0 on success, 1 if any files fail a resolve attempt.
.sp
Options:
.INDENT 0.0
.TP
.B \-a,  \-\-all
.
select all unresolved files
.TP
.B \-l,  \-\-list
.
list state of files needing merge
.TP
.B \-m,  \-\-mark
.
mark files as resolved
.TP
.B \-u,  \-\-unmark
.
mark files as unresolved
.TP
.B \-n,  \-\-no\-status
.
hide status prefix
.TP
.BI \-t,  \-\-tool \ <VALUE>
.
specify merge tool
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template (EXPERIMENTAL)
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS revert
.sp
restore files to their checkout state:
.sp
.nf
.ft C
hg revert [OPTION]... [\-r REV] [NAME]...
.ft P
.fi
.IP Note
.
To check out earlier revisions, you should use \%\fBhg update REV\fP\:.
To cancel an uncommitted merge (and lose your changes),
use \%\fBhg update \-\-clean .\fP\:.
.RE
.sp
With no revision specified, revert the specified files or directories
to the contents they had in the parent of the working directory.
This restores the contents of files to an unmodified
state and unschedules adds, removes, copies, and renames. If the
working directory has two parents, you must explicitly specify a
revision.
.sp
Using the \-r/\-\-rev or \-d/\-\-date options, revert the given files or
directories to their states as of a specific revision. Because
revert does not change the working directory parents, this will
cause these files to appear modified. This can be helpful to "back
out" some or all of an earlier change. See \%\fBhg backout\fP\: for a
related method.
.sp
Modified files are saved with a .orig suffix before reverting.
To disable these backups, use \-\-no\-backup. It is possible to store
the backup files in a custom directory relative to the root of the
repository by setting the \fBui.origbackuppath\fP configuration
option.
.sp
See \%\fBhg help dates\fP\: for a list of formats valid for \-d/\-\-date.
.sp
See \%\fBhg help backout\fP\: for a way to reverse the effect of an
earlier changeset.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-a,  \-\-all
.
revert all changes when no arguments given
.TP
.BI \-d,  \-\-date \ <DATE>
.
tipmost revision matching date
.TP
.BI \-r,  \-\-rev \ <REV>
.
revert to the specified revision
.TP
.B \-C,  \-\-no\-backup
.
do not save backup copies of files
.TP
.B \-i,  \-\-interactive
.
interactively select the changes (EXPERIMENTAL)
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.TP
.B \-n,  \-\-dry\-run
.
do not perform actions, just print output
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS rollback
.sp
roll back the last transaction (DANGEROUS) (DEPRECATED):
.sp
.nf
.ft C
hg rollback
.ft P
.fi
.sp
Please use \%\fBhg commit \-\-amend\fP\: instead of rollback to correct
mistakes in the last commit.
.sp
This command should be used with care. There is only one level of
rollback, and there is no way to undo a rollback. It will also
restore the dirstate at the time of the last transaction, losing
any dirstate changes since that time. This command does not alter
the working directory.
.sp
Transactions are used to encapsulate the effects of all commands
that create new changesets or propagate existing changesets into a
repository.
.sp
For example, the following commands are transactional, and their
effects can be rolled back:
.INDENT 0.0
.IP \(bu 2
.
commit
.IP \(bu 2
.
import
.IP \(bu 2
.
pull
.IP \(bu 2
.
push (with this repository as the destination)
.IP \(bu 2
.
unbundle
.UNINDENT
.sp
To avoid permanent data loss, rollback will refuse to rollback a
commit transaction if it isn\(aqt checked out. Use \-\-force to
override this protection.
.sp
The rollback command can be entirely disabled by setting the
\fBui.rollback\fP configuration setting to false. If you\(aqre here
because you want to use rollback and it\(aqs disabled, you can
re\-enable the command by setting \fBui.rollback\fP to true.
.sp
This command is not intended for use on public repositories. Once
changes are visible for pull by other users, rolling a transaction
back locally is ineffective (someone else may already have pulled
the changes). Furthermore, a race is possible with readers of the
repository; for example an in\-progress pull from the repository
may fail if a rollback is performed.
.sp
Returns 0 on success, 1 if no rollback data is available.
.sp
Options:
.INDENT 0.0
.TP
.B \-n,  \-\-dry\-run
.
do not perform actions, just print output
.TP
.B \-f,  \-\-force
.
ignore safety measures
.UNINDENT
.SS root
.sp
print the root (top) of the current working directory:
.sp
.nf
.ft C
hg root
.ft P
.fi
.sp
Print the root directory of the current repository.
.sp
Returns 0 on success.
.SS serve
.sp
start stand\-alone webserver:
.sp
.nf
.ft C
hg serve [OPTION]...
.ft P
.fi
.sp
Start a local HTTP repository browser and pull server. You can use
this for ad\-hoc sharing and browsing of repositories. It is
recommended to use a real web server to serve a repository for
longer periods of time.
.sp
Please note that the server does not implement access control.
This means that, by default, anybody can read from the server and
nobody can write to it by default. Set the \fBweb.allow_push\fP
option to \fB*\fP to allow everybody to push to the server. You
should use a real web server if you need to authenticate users.
.sp
By default, the server logs accesses to stdout and errors to
stderr. Use the \-A/\-\-accesslog and \-E/\-\-errorlog options to log to
files.
.sp
To have the server choose a free port number to listen on, specify
a port number of 0; in this case, the server will print the port
number it uses.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.BI \-A,  \-\-accesslog \ <FILE>
.
name of access log file to write to
.TP
.B \-d,  \-\-daemon
.
run server in background
.TP
.BI \-\-daemon\-postexec \ <VALUE[+]>
.
used internally by daemon mode
.TP
.BI \-E,  \-\-errorlog \ <FILE>
.
name of error log file to write to
.TP
.BI \-p,  \-\-port \ <PORT>
.
port to listen on (default: 8000)
.TP
.BI \-a,  \-\-address \ <ADDR>
.
address to listen on (default: all interfaces)
.TP
.BI \-\-prefix \ <PREFIX>
.
prefix path to serve from (default: server root)
.TP
.BI \-n,  \-\-name \ <NAME>
.
name to show in web pages (default: working directory)
.TP
.BI \-\-web\-conf \ <FILE>
.
name of the hgweb config file (see \(aqhg help hgweb\(aq)
.TP
.BI \-\-webdir\-conf \ <FILE>
.
name of the hgweb config file (DEPRECATED)
.TP
.BI \-\-pid\-file \ <FILE>
.
name of file to write process ID to
.TP
.B \-\-stdio
.
for remote clients (ADVANCED)
.TP
.BI \-\-cmdserver \ <MODE>
.
for remote clients (ADVANCED)
.TP
.BI \-t,  \-\-templates \ <TEMPLATE>
.
web templates to use
.TP
.BI \-\-style \ <STYLE>
.
template style to use
.TP
.B \-6,  \-\-ipv6
.
use IPv6 in addition to IPv4
.TP
.BI \-\-certificate \ <FILE>
.
SSL certificate file
.TP
.B \-S,  \-\-subrepos
.
recurse into subrepositories
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS status
.sp
show changed files in the working directory:
.sp
.nf
.ft C
hg status [OPTION]... [FILE]...
.ft P
.fi
.sp
Show status of files in the repository. If names are given, only
files that match are shown. Files that are clean or ignored or
the source of a copy/move operation, are not listed unless
\-c/\-\-clean, \-i/\-\-ignored, \-C/\-\-copies or \-A/\-\-all are given.
Unless options described with "show only ..." are given, the
options \-mardu are used.
.sp
Option \-q/\-\-quiet hides untracked (unknown and ignored) files
unless explicitly requested with \-u/\-\-unknown or \-i/\-\-ignored.
.IP Note
.
\%\fBhg status\fP\: may appear to disagree with diff if permissions have
changed or a merge has occurred. The standard diff format does
not report permission changes and diff only reports changes
relative to one merge parent.
.RE
.sp
If one revision is given, it is used as the base revision.
If two revisions are given, the differences between them are
shown. The \-\-change option can also be used as a shortcut to list
the changed files of a revision from its first parent.
.sp
The codes used to show the status of files are:
.sp
.nf
.ft C
M = modified
A = added
R = removed
C = clean
! = missing (deleted by non\-hg command, but still tracked)
? = not tracked
I = ignored
  = origin of the previous file (with \-\-copies)
.ft P
.fi
.sp
The \-t/\-\-terse option abbreviates the output by showing directory name
if all the files in it share the same status. The option expects a value
which can be a string formed by using \(aqm\(aq, \(aqa\(aq, \(aqr\(aq, \(aqd\(aq, \(aqu\(aq, \(aqi\(aq, \(aqc\(aq
where, \(aqm\(aq stands for \(aqmodified\(aq, \(aqa\(aq for \(aqadded\(aq, \(aqr\(aq for \(aqremoved\(aq,
\(aqd\(aq for \(aqdeleted\(aq, \(aqu\(aq for \(aqunknown\(aq, \(aqi\(aq for \(aqignored\(aq and \(aqc\(aq for clean.
.sp
It terses the output of only those status which are passed. The ignored
files are not considered while tersing until \(aqi\(aq is there in \-\-terse value
or the \-\-ignored option is used.
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
.
show changes in the working directory relative to a
changeset:
.sp
.nf
.ft C
hg status \-\-rev 9353
.ft P
.fi
.IP \(bu 2
.
show changes in the working directory relative to the
current directory (see \%\fBhg help patterns\fP\: for more information):
.sp
.nf
.ft C
hg status re:
.ft P
.fi
.IP \(bu 2
.
show all changes including copies in an existing changeset:
.sp
.nf
.ft C
hg status \-\-copies \-\-change 9353
.ft P
.fi
.IP \(bu 2
.
get a NUL separated list of added files, suitable for xargs:
.sp
.nf
.ft C
hg status \-an0
.ft P
.fi
.UNINDENT
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-A,  \-\-all
.
show status of all files
.TP
.B \-m,  \-\-modified
.
show only modified files
.TP
.B \-a,  \-\-added
.
show only added files
.TP
.B \-r,  \-\-removed
.
show only removed files
.TP
.B \-d,  \-\-deleted
.
show only deleted (but tracked) files
.TP
.B \-c,  \-\-clean
.
show only files without changes
.TP
.B \-u,  \-\-unknown
.
show only unknown (not tracked) files
.TP
.B \-i,  \-\-ignored
.
show only ignored files
.TP
.B \-n,  \-\-no\-status
.
hide status prefix
.TP
.BI \-t,  \-\-terse \ <VALUE>
.
show the terse output (EXPERIMENTAL)
.TP
.B \-C,  \-\-copies
.
show source of copied files
.TP
.B \-0,  \-\-print0
.
end filenames with NUL, for use with xargs
.TP
.BI \-\-rev \ <REV[+]>
.
show difference from revision
.TP
.BI \-\-change \ <REV>
.
list the changed files of a revision
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.TP
.B \-S,  \-\-subrepos
.
recurse into subrepositories
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template (EXPERIMENTAL)
.UNINDENT
.sp
[+] marked option can be specified multiple times
.INDENT 0.0
.INDENT 3.5
.sp
aliases: st
.UNINDENT
.UNINDENT
.SS summary
.sp
summarize working directory state:
.sp
.nf
.ft C
hg summary [\-\-remote]
.ft P
.fi
.sp
This generates a brief summary of the working directory state,
including parents, branch, commit status, phase and available updates.
.sp
With the \-\-remote option, this will check the default paths for
incoming and outgoing changes. This can be time\-consuming.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-\-remote
.
check for push and pull
.sp
aliases: sum
.UNINDENT
.SS tag
.sp
add one or more tags for the current or given revision:
.sp
.nf
.ft C
hg tag [\-f] [\-l] [\-m TEXT] [\-d DATE] [\-u USER] [\-r REV] NAME...
.ft P
.fi
.sp
Name a particular revision using <name>.
.sp
Tags are used to name particular revisions of the repository and are
very useful to compare different revisions, to go back to significant
earlier versions or to mark branch points as releases, etc. Changing
an existing tag is normally disallowed; use \-f/\-\-force to override.
.sp
If no revision is given, the parent of the working directory is
used.
.sp
To facilitate version control, distribution, and merging of tags,
they are stored as a file named ".hgtags" which is managed similarly
to other project files and can be hand\-edited if necessary. This
also means that tagging creates a new commit. The file
".hg/localtags" is used for local tags (not shared among
repositories).
.sp
Tag commits are usually made at the head of a branch. If the parent
of the working directory is not a branch head, \%\fBhg tag\fP\: aborts; use
\-f/\-\-force to force the tag commit to be based on a non\-head
changeset.
.sp
See \%\fBhg help dates\fP\: for a list of formats valid for \-d/\-\-date.
.sp
Since tag names have priority over branch names during revision
lookup, using an existing branch name as a tag name is discouraged.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-f,  \-\-force
.
force tag
.TP
.B \-l,  \-\-local
.
make the tag local
.TP
.BI \-r,  \-\-rev \ <REV>
.
revision to tag
.TP
.B \-\-remove
.
remove a tag
.TP
.B \-e,  \-\-edit
.
invoke editor on commit messages
.TP
.BI \-m,  \-\-message \ <TEXT>
.
use text as commit message
.TP
.BI \-d,  \-\-date \ <DATE>
.
record the specified date as commit date
.TP
.BI \-u,  \-\-user \ <USER>
.
record the specified user as committer
.UNINDENT
.SS tags
.sp
list repository tags:
.sp
.nf
.ft C
hg tags
.ft P
.fi
.sp
This lists both regular and local tags. When the \-v/\-\-verbose
switch is used, a third column "local" is printed for local tags.
When the \-q/\-\-quiet switch is used, only the tag name is printed.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template (EXPERIMENTAL)
.UNINDENT
.SS tip
.sp
show the tip revision (DEPRECATED):
.sp
.nf
.ft C
hg tip [\-p] [\-g]
.ft P
.fi
.sp
The tip revision (usually just called the tip) is the changeset
most recently added to the repository (and therefore the most
recently changed head).
.sp
If you have just made a commit, that commit will be the tip. If
you have just pulled changes from another repository, the tip of
that repository becomes the current tip. The "tip" tag is special
and cannot be renamed or assigned to a different changeset.
.sp
This command is deprecated, please use \%\fBhg heads\fP\: instead.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-p,  \-\-patch
.
show patch
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.BI \-\-style \ <STYLE>
.
display using template map file (DEPRECATED)
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template
.UNINDENT
.SS unbundle
.sp
apply one or more bundle files:
.sp
.nf
.ft C
hg unbundle [\-u] FILE...
.ft P
.fi
.sp
Apply one or more bundle files generated by \%\fBhg bundle\fP\:.
.sp
Returns 0 on success, 1 if an update has unresolved files.
.sp
Options:
.INDENT 0.0
.TP
.B \-u,  \-\-update
.
update to new branch head if changesets were unbundled
.UNINDENT
.SS update
.sp
update working directory (or switch revisions):
.sp
.nf
.ft C
hg update [\-C|\-c|\-m] [\-d DATE] [[\-r] REV]
.ft P
.fi
.sp
Update the repository\(aqs working directory to the specified
changeset. If no changeset is specified, update to the tip of the
current named branch and move the active bookmark (see \%\fBhg help
bookmarks\fP\:).
.sp
Update sets the working directory\(aqs parent revision to the specified
changeset (see \%\fBhg help parents\fP\:).
.sp
If the changeset is not a descendant or ancestor of the working
directory\(aqs parent and there are uncommitted changes, the update is
aborted. With the \-c/\-\-check option, the working directory is checked
for uncommitted changes; if none are found, the working directory is
updated to the specified changeset.
.sp
The \-C/\-\-clean, \-c/\-\-check, and \-m/\-\-merge options control what
happens if the working directory contains uncommitted changes.
At most of one of them can be specified.
.INDENT 0.0
.IP 1. 3
.
If no option is specified, and if
the requested changeset is an ancestor or descendant of
the working directory\(aqs parent, the uncommitted changes
are merged into the requested changeset and the merged
result is left uncommitted. If the requested changeset is
not an ancestor or descendant (that is, it is on another
branch), the update is aborted and the uncommitted changes
are preserved.
.IP 2. 3
.
With the \-m/\-\-merge option, the update is allowed even if the
requested changeset is not an ancestor or descendant of
the working directory\(aqs parent.
.IP 3. 3
.
With the \-c/\-\-check option, the update is aborted and the
uncommitted changes are preserved.
.IP 4. 3
.
With the \-C/\-\-clean option, uncommitted changes are discarded and
the working directory is updated to the requested changeset.
.UNINDENT
.sp
To cancel an uncommitted merge (and lose your changes), use
\%\fBhg update \-\-clean .\fP\:.
.sp
Use null as the changeset to remove the working directory (like
\%\fBhg clone \-U\fP\:).
.sp
If you want to revert just one file to an older revision, use
\%\fBhg revert [\-r REV] NAME\fP\:.
.sp
See \%\fBhg help dates\fP\: for a list of formats valid for \-d/\-\-date.
.sp
Returns 0 on success, 1 if there are unresolved files.
.sp
Options:
.INDENT 0.0
.TP
.B \-C,  \-\-clean
.
discard uncommitted changes (no backup)
.TP
.B \-c,  \-\-check
.
require clean working directory
.TP
.B \-m,  \-\-merge
.
merge uncommitted changes
.TP
.BI \-d,  \-\-date \ <DATE>
.
tipmost revision matching date
.TP
.BI \-r,  \-\-rev \ <REV>
.
revision
.TP
.BI \-t,  \-\-tool \ <VALUE>
.
specify merge tool
.sp
aliases: up checkout co
.UNINDENT
.SS verify
.sp
verify the integrity of the repository:
.sp
.nf
.ft C
hg verify
.ft P
.fi
.sp
Verify the integrity of the current repository.
.sp
This will perform an extensive check of the repository\(aqs
integrity, validating the hashes and checksums of each entry in
the changelog, manifest, and tracked files, as well as the
integrity of their crosslinks and indices.
.sp
Please see \%https://mercurial\-scm.org/wiki/RepositoryCorruption\:
for more information about recovery from corruption of the
repository.
.sp
Returns 0 on success, 1 if errors are encountered.
.SS version
.sp
output version and copyright information:
.sp
.nf
.ft C
hg version
.ft P
.fi
.sp
output version and copyright information
.sp
Options:
.INDENT 0.0
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template (EXPERIMENTAL)
.UNINDENT
.SH BUNDLE FILE FORMATS
.sp
Mercurial supports generating standalone "bundle" files that hold repository
data. These "bundles" are typically saved locally and used later or exchanged
between different repositories, possibly on different machines. Example
commands using bundles are \%\fBhg bundle\fP\: and \%\fBhg unbundle\fP\:.
.sp
Generation of bundle files is controlled by a "bundle specification"
("bundlespec") string. This string tells the bundle generation process how
to create the bundle.
.sp
A "bundlespec" string is composed of the following elements:
.INDENT 0.0
.TP
.B type
.
A string denoting the bundle format to use.
.TP
.B compression
.
Denotes the compression engine to use compressing the raw bundle data.
.TP
.B parameters
.
Arbitrary key\-value parameters to further control bundle generation.
.UNINDENT
.sp
A "bundlespec" string has the following formats:
.INDENT 0.0
.TP
.B <type>
.
The literal bundle format string is used.
.TP
.B <compression>\-<type>
.
The compression engine and format are delimited by a hyphen (\fB\-\fP).
.UNINDENT
.sp
Optional parameters follow the \fB<type>\fP. Parameters are URI escaped
\fBkey=value\fP pairs. Each pair is delimited by a semicolon (\fB;\fP). The
first parameter begins after a \fB;\fP immediately following the \fB<type>\fP
value.
.SS Available Types
.sp
The following bundle <type> strings are available:
.INDENT 0.0
.TP
.B v1
.
Produces a legacy "changegroup" version 1 bundle.
.sp
This format is compatible with nearly all Mercurial clients because it is
the oldest. However, it has some limitations, which is why it is no longer
the default for new repositories.
.sp
\fBv1\fP bundles can be used with modern repositories using the "generaldelta"
storage format. However, it may take longer to produce the bundle and the
resulting bundle may be significantly larger than a \fBv2\fP bundle.
.sp
\fBv1\fP bundles can only use the \fBgzip\fP, \fBbzip2\fP, and \fBnone\fP compression
formats.
.TP
.B v2
.
Produces a version 2 bundle.
.sp
Version 2 bundles are an extensible format that can store additional
repository data (such as bookmarks and phases information) and they can
store data more efficiently, resulting in smaller bundles.
.sp
Version 2 bundles can also use modern compression engines, such as
\fBzstd\fP, making them faster to compress and often smaller.
.UNINDENT
.SS Available Compression Engines
.sp
The following bundle <compression> engines can be used:
.INDENT 0.0
.TP
.B \fBbzip2\fP
.sp
An algorithm that produces smaller bundles than \fBgzip\fP.
.sp
All Mercurial clients should support this format.
.sp
This engine will likely produce smaller bundles than \fBgzip\fP but
will be significantly slower, both during compression and
decompression.
.sp
If available, the \fBzstd\fP engine can yield similar or better
compression at much higher speeds.
.TP
.B \fBgzip\fP
.sp
zlib compression using the DEFLATE algorithm.
.sp
All Mercurial clients should support this format. The compression
algorithm strikes a reasonable balance between compression ratio
and size.
.TP
.B \fBnone\fP
.sp
No compression is performed.
.sp
Use this compression engine to explicitly disable compression.
.UNINDENT
.SS Examples
.INDENT 0.0
.TP
.B \fBv2\fP
.sp
Produce a \fBv2\fP bundle using default options, including compression.
.TP
.B \fBnone\-v1\fP
.sp
Produce a \fBv1\fP bundle with no compression.
.TP
.B \fBzstd\-v2\fP
.sp
Produce a \fBv2\fP bundle with zstandard compression using default
settings.
.TP
.B \fBzstd\-v1\fP
.sp
This errors because \fBzstd\fP is not supported for \fBv1\fP types.
.UNINDENT
.SH COLORIZING OUTPUTS
.sp
Mercurial colorizes output from several commands.
.sp
For example, the diff command shows additions in green and deletions
in red, while the status command shows modified files in magenta. Many
other commands have analogous colors. It is possible to customize
these colors.
.sp
To enable color (default) whenever possible use:
.sp
.nf
.ft C
[ui]
color = yes
.ft P
.fi
.sp
To disable color use:
.sp
.nf
.ft C
[ui]
color = no
.ft P
.fi
.sp
See \%\fBhg help config.ui.color\fP\: for details.
.sp
The default pager on Windows does not support color, so enabling the pager
will effectively disable color.  See \%\fBhg help config.ui.paginate\fP\: to disable
the pager.  Alternately, MSYS and Cygwin shells provide \fIless\fP as a pager,
which can be configured to support ANSI color mode.  Windows 10 natively
supports ANSI color mode.
.SS Mode
.sp
Mercurial can use various systems to display color. The supported modes are
\fBansi\fP, \fBwin32\fP, and \fBterminfo\fP.  See \%\fBhg help config.color\fP\: for details
about how to control the mode.
.SS Effects
.sp
Other effects in addition to color, like bold and underlined text, are
also available. By default, the terminfo database is used to find the
terminal codes used to change color and effect.  If terminfo is not
available, then effects are rendered with the ECMA\-48 SGR control
function (aka ANSI escape codes).
.sp
The available effects in terminfo mode are \(aqblink\(aq, \(aqbold\(aq, \(aqdim\(aq,
\(aqinverse\(aq, \(aqinvisible\(aq, \(aqitalic\(aq, \(aqstandout\(aq, and \(aqunderline\(aq; in
ECMA\-48 mode, the options are \(aqbold\(aq, \(aqinverse\(aq, \(aqitalic\(aq, and
\(aqunderline\(aq.  How each is rendered depends on the terminal emulator.
Some may not be available for a given terminal type, and will be
silently ignored.
.sp
If the terminfo entry for your terminal is missing codes for an effect
or has the wrong codes, you can add or override those codes in your
configuration:
.sp
.nf
.ft C
[color]
terminfo.dim = \eE[2m
.ft P
.fi
.sp
where \(aqE\(aq is substituted with an escape character.
.SS Labels
.sp
Text receives color effects depending on the labels that it has. Many
default Mercurial commands emit labelled text. You can also define
your own labels in templates using the label function, see \%\fBhg help
templates\fP\:. A single portion of text may have more than one label. In
that case, effects given to the last label will override any other
effects. This includes the special "none" effect, which nullifies
other effects.
.sp
Labels are normally invisible. In order to see these labels and their
position in the text, use the global \-\-color=debug option. The same
anchor text may be associated to multiple labels, e.g.
.INDENT 0.0
.INDENT 3.5
.sp
[log.changeset changeset.secret|changeset:   22611:6f0a53c8f587]
.UNINDENT
.UNINDENT
.sp
The following are the default effects for some default labels. Default
effects may be overridden from your configuration file:
.sp
.nf
.ft C
[color]
status.modified = blue bold underline red_background
status.added = green bold
status.removed = red bold blue_background
status.deleted = cyan bold underline
status.unknown = magenta bold underline
status.ignored = black bold

# \(aqnone\(aq turns off all effects
status.clean = none
status.copied = none

qseries.applied = blue bold underline
qseries.unapplied = black bold
qseries.missing = red bold

diff.diffline = bold
diff.extended = cyan bold
diff.file_a = red bold
diff.file_b = green bold
diff.hunk = magenta
diff.deleted = red
diff.inserted = green
diff.changed = white
diff.tab =
diff.trailingwhitespace = bold red_background

# Blank so it inherits the style of the surrounding label
changeset.public =
changeset.draft =
changeset.secret =

resolve.unresolved = red bold
resolve.resolved = green bold

bookmarks.active = green

branches.active = none
branches.closed = black bold
branches.current = green
branches.inactive = none

tags.normal = green
tags.local = black bold

rebase.rebased = blue
rebase.remaining = red bold

shelve.age = cyan
shelve.newest = green bold
shelve.name = blue bold

histedit.remaining = red bold
.ft P
.fi
.SS Custom colors
.sp
Because there are only eight standard colors, Mercurial allows you
to define color names for other color slots which might be available
for your terminal type, assuming terminfo mode.  For instance:
.sp
.nf
.ft C
color.brightblue = 12
color.pink = 207
color.orange = 202
.ft P
.fi
.sp
to set \(aqbrightblue\(aq to color slot 12 (useful for 16 color terminals
that have brighter colors defined in the upper eight) and, \(aqpink\(aq and
\(aqorange\(aq to colors in 256\-color xterm\(aqs default color cube.  These
defined colors may then be used as any of the pre\-defined eight,
including appending \(aq_background\(aq to set the background to that color.
.SH DATE FORMATS
.sp
Some commands allow the user to specify a date, e.g.:
.INDENT 0.0
.IP \(bu 2
.
backout, commit, import, tag: Specify the commit date.
.IP \(bu 2
.
log, revert, update: Select revision(s) by date.
.UNINDENT
.sp
Many date formats are valid. Here are some examples:
.INDENT 0.0
.IP \(bu 2
.
\fBWed Dec 6 13:18:29 2006\fP (local timezone assumed)
.IP \(bu 2
.
\fBDec 6 13:18 \-0600\fP (year assumed, time offset provided)
.IP \(bu 2
.
\fBDec 6 13:18 UTC\fP (UTC and GMT are aliases for +0000)
.IP \(bu 2
.
\fBDec 6\fP (midnight)
.IP \(bu 2
.
\fB13:18\fP (today assumed)
.IP \(bu 2
.
\fB3:39\fP (3:39AM assumed)
.IP \(bu 2
.
\fB3:39pm\fP (15:39)
.IP \(bu 2
.
\fB2006\-12\-06 13:18:29\fP (ISO 8601 format)
.IP \(bu 2
.
\fB2006\-12\-6 13:18\fP
.IP \(bu 2
.
\fB2006\-12\-6\fP
.IP \(bu 2
.
\fB12\-6\fP
.IP \(bu 2
.
\fB12/6\fP
.IP \(bu 2
.
\fB12/6/6\fP (Dec 6 2006)
.IP \(bu 2
.
\fBtoday\fP (midnight)
.IP \(bu 2
.
\fByesterday\fP (midnight)
.IP \(bu 2
.
\fBnow\fP \- right now
.UNINDENT
.sp
Lastly, there is Mercurial\(aqs internal format:
.INDENT 0.0
.IP \(bu 2
.
\fB1165411109 0\fP (Wed Dec 6 13:18:29 2006 UTC)
.UNINDENT
.sp
This is the internal representation format for dates. The first number
is the number of seconds since the epoch (1970\-01\-01 00:00 UTC). The
second is the offset of the local timezone, in seconds west of UTC
(negative if the timezone is east of UTC).
.sp
The log command also accepts date ranges:
.INDENT 0.0
.IP \(bu 2
.
\fB<DATE\fP \- at or before a given date/time
.IP \(bu 2
.
\fB>DATE\fP \- on or after a given date/time
.IP \(bu 2
.
\fBDATE to DATE\fP \- a date range, inclusive
.IP \(bu 2
.
\fB\-DAYS\fP \- within a given number of days of today
.UNINDENT
.SH DIFF FORMATS
.sp
Mercurial\(aqs default format for showing changes between two versions of
a file is compatible with the unified format of GNU diff, which can be
used by GNU patch and many other standard tools.
.sp
While this standard format is often enough, it does not encode the
following information:
.INDENT 0.0
.IP \(bu 2
.
executable status and other permission bits
.IP \(bu 2
.
copy or rename information
.IP \(bu 2
.
changes in binary files
.IP \(bu 2
.
creation or deletion of empty files
.UNINDENT
.sp
Mercurial also supports the extended diff format from the git VCS
which addresses these limitations. The git diff format is not produced
by default because a few widespread tools still do not understand this
format.
.sp
This means that when generating diffs from a Mercurial repository
(e.g. with \%\fBhg export\fP\:), you should be careful about things like file
copies and renames or other things mentioned above, because when
applying a standard diff to a different repository, this extra
information is lost. Mercurial\(aqs internal operations (like push and
pull) are not affected by this, because they use an internal binary
format for communicating changes.
.sp
To make Mercurial produce the git extended diff format, use the \-\-git
option available for many commands, or set \(aqgit = True\(aq in the [diff]
section of your configuration file. You do not need to set this option
when importing diffs in this format or using them in the mq extension.
.SH ENVIRONMENT VARIABLES
.INDENT 0.0
.TP
.B HG
.
Path to the \(aqhg\(aq executable, automatically passed when running
hooks, extensions or external tools. If unset or empty, this is
the hg executable\(aqs name if it\(aqs frozen, or an executable named
\(aqhg\(aq (with %PATHEXT% [defaulting to COM/EXE/BAT/CMD] extensions on
Windows) is searched.
.TP
.B HGEDITOR
.
This is the name of the editor to run when committing. See EDITOR.
.sp
(deprecated, see \%\fBhg help config.ui.editor\fP\:)
.TP
.B HGENCODING
.
This overrides the default locale setting detected by Mercurial.
This setting is used to convert data including usernames,
changeset descriptions, tag names, and branches. This setting can
be overridden with the \-\-encoding command\-line option.
.TP
.B HGENCODINGMODE
.
This sets Mercurial\(aqs behavior for handling unknown characters
while transcoding user input. The default is "strict", which
causes Mercurial to abort if it can\(aqt map a character. Other
settings include "replace", which replaces unknown characters, and
"ignore", which drops them. This setting can be overridden with
the \-\-encodingmode command\-line option.
.TP
.B HGENCODINGAMBIGUOUS
.
This sets Mercurial\(aqs behavior for handling characters with
"ambiguous" widths like accented Latin characters with East Asian
fonts. By default, Mercurial assumes ambiguous characters are
narrow, set this variable to "wide" if such characters cause
formatting problems.
.TP
.B HGMERGE
.
An executable to use for resolving merge conflicts. The program
will be executed with three arguments: local file, remote file,
ancestor file.
.sp
(deprecated, see \%\fBhg help config.ui.merge\fP\:)
.TP
.B HGRCPATH
.
A list of files or directories to search for configuration
files. Item separator is ":" on Unix, ";" on Windows. If HGRCPATH
is not set, platform default search path is used. If empty, only
the .hg/hgrc from the current repository is read.
.sp
For each element in HGRCPATH:
.INDENT 7.0
.IP \(bu 2
.
if it\(aqs a directory, all files ending with .rc are added
.IP \(bu 2
.
otherwise, the file itself will be added
.UNINDENT
.TP
.B HGPLAIN
.
When set, this disables any configuration settings that might
change Mercurial\(aqs default output. This includes encoding,
defaults, verbose mode, debug mode, quiet mode, tracebacks, and
localization. This can be useful when scripting against Mercurial
in the face of existing user configuration.
.sp
Equivalent options set via command line flags or environment
variables are not overridden.
.TP
.B HGPLAINEXCEPT
.
This is a comma\-separated list of features to preserve when
HGPLAIN is enabled. Currently the following values are supported:
.INDENT 7.0
.TP
.B \fBalias\fP
.sp
Don\(aqt remove aliases.
.TP
.B \fBi18n\fP
.sp
Preserve internationalization.
.TP
.B \fBrevsetalias\fP
.sp
Don\(aqt remove revset aliases.
.TP
.B \fBtemplatealias\fP
.sp
Don\(aqt remove template aliases.
.TP
.B \fBprogress\fP
.sp
Don\(aqt hide progress output.
.UNINDENT
.sp
Setting HGPLAINEXCEPT to anything (even an empty string) will
enable plain mode.
.TP
.B HGUSER
.
This is the string used as the author of a commit. If not set,
available values will be considered in this order:
.INDENT 7.0
.IP \(bu 2
.
HGUSER (deprecated)
.IP \(bu 2
.
configuration files from the HGRCPATH
.IP \(bu 2
.
EMAIL
.IP \(bu 2
.
interactive prompt
.IP \(bu 2
.
LOGNAME (with \fB@hostname\fP appended)
.UNINDENT
.sp
(deprecated, see \%\fBhg help config.ui.username\fP\:)
.TP
.B EMAIL
.
May be used as the author of a commit; see HGUSER.
.TP
.B LOGNAME
.
May be used as the author of a commit; see HGUSER.
.TP
.B VISUAL
.
This is the name of the editor to use when committing. See EDITOR.
.TP
.B EDITOR
.
Sometimes Mercurial needs to open a text file in an editor for a
user to modify, for example when writing commit messages. The
editor it uses is determined by looking at the environment
variables HGEDITOR, VISUAL and EDITOR, in that order. The first
non\-empty one is chosen. If all of them are empty, the editor
defaults to \(aqvi\(aq.
.TP
.B PYTHONPATH
.
This is used by Python to find imported modules and may need to be
set appropriately if this Mercurial is not installed system\-wide.
.UNINDENT
.SH USING ADDITIONAL FEATURES
.sp
Mercurial has the ability to add new features through the use of
extensions. Extensions may add new commands, add options to
existing commands, change the default behavior of commands, or
implement hooks.
.sp
To enable the "foo" extension, either shipped with Mercurial or in the
Python search path, create an entry for it in your configuration file,
like this:
.sp
.nf
.ft C
[extensions]
foo =
.ft P
.fi
.sp
You may also specify the full path to an extension:
.sp
.nf
.ft C
[extensions]
myfeature = ~/.hgext/myfeature.py
.ft P
.fi
.sp
See \%\fBhg help config\fP\: for more information on configuration files.
.sp
Extensions are not loaded by default for a variety of reasons:
they can increase startup overhead; they may be meant for advanced
usage only; they may provide potentially dangerous abilities (such
as letting you destroy or modify history); they might not be ready
for prime time; or they may alter some usual behaviors of stock
Mercurial. It is thus up to the user to activate extensions as
needed.
.sp
To explicitly disable an extension enabled in a configuration file of
broader scope, prepend its path with !:
.sp
.nf
.ft C
[extensions]
# disabling extension bar residing in /path/to/extension/bar.py
bar = !/path/to/extension/bar.py
# ditto, but no path was supplied for extension baz
baz = !
.ft P
.fi
.sp
disabled extensions:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B acl
.
hooks for controlling repository access
.TP
.B blackbox
.
log repository events to a blackbox for debugging
.TP
.B bugzilla
.
hooks for integrating with the Bugzilla bug tracker
.TP
.B censor
.
erase file content at a given revision
.TP
.B churn
.
command to display statistics about repository history
.TP
.B clonebundles
.
advertise pre\-generated bundles to seed clones
.TP
.B convert
.
import revisions from foreign VCS repositories into Mercurial
.TP
.B eol
.
automatically manage newlines in repository files
.TP
.B extdiff
.
command to allow external programs to compare revisions
.TP
.B factotum
.
http authentication with factotum
.TP
.B gpg
.
commands to sign and verify changesets
.TP
.B hgk
.
browse the repository in a graphical way
.TP
.B highlight
.
syntax highlighting for hgweb (requires Pygments)
.TP
.B histedit
.
interactive history editing
.TP
.B keyword
.
expand keywords in tracked files
.TP
.B largefiles
.
track large binary files
.TP
.B mq
.
manage a stack of patches
.TP
.B notify
.
hooks for sending email push notifications
.TP
.B patchbomb
.
command to send changesets as (a series of) patch emails
.TP
.B purge
.
command to delete untracked files from the working directory
.TP
.B rebase
.
command to move sets of revisions to a different ancestor
.TP
.B relink
.
recreates hardlinks between repository clones
.TP
.B schemes
.
extend schemes with shortcuts to repository swarms
.TP
.B share
.
share a common history between several working directories
.TP
.B shelve
.
save and restore changes to the working directory
.TP
.B strip
.
strip changesets and their descendants from history
.TP
.B transplant
.
command to transplant changesets from another branch
.TP
.B win32mbcs
.
allow the use of MBCS paths with problematic encodings
.TP
.B zeroconf
.
discover and advertise repositories on the local network
.UNINDENT
.UNINDENT
.UNINDENT
.SH SPECIFYING FILE SETS
.sp
Mercurial supports a functional language for selecting a set of
files.
.sp
Like other file patterns, this pattern type is indicated by a prefix,
\(aqset:\(aq. The language supports a number of predicates which are joined
by infix operators. Parenthesis can be used for grouping.
.sp
Identifiers such as filenames or patterns must be quoted with single
or double quotes if they contain characters outside of
\fB[.*{}[]?/\e_a\-zA\-Z0\-9\ex80\-\exff]\fP or if they match one of the
predefined predicates. This generally applies to file patterns other
than globs and arguments for predicates.
.sp
Special characters can be used in quoted identifiers by escaping them,
e.g., \fB\en\fP is interpreted as a newline. To prevent them from being
interpreted, strings can be prefixed with \fBr\fP, e.g. \fBr\(aq...\(aq\fP.
.sp
See also \%\fBhg help patterns\fP\:.
.SS Operators
.sp
There is a single prefix operator:
.INDENT 0.0
.TP
.B \fBnot x\fP
.sp
Files not in x. Short form is \fB! x\fP.
.UNINDENT
.sp
These are the supported infix operators:
.INDENT 0.0
.TP
.B \fBx and y\fP
.sp
The intersection of files in x and y. Short form is \fBx & y\fP.
.TP
.B \fBx or y\fP
.sp
The union of files in x and y. There are two alternative short
forms: \fBx | y\fP and \fBx + y\fP.
.TP
.B \fBx \- y\fP
.sp
Files in x but not in y.
.UNINDENT
.SS Predicates
.sp
The following predicates are supported:
.INDENT 0.0
.TP
.B \fBadded()\fP
.sp
File that is added according to \%\fBhg status\fP\:.
.TP
.B \fBbinary()\fP
.sp
File that appears to be binary (contains NUL bytes).
.TP
.B \fBclean()\fP
.sp
File that is clean according to \%\fBhg status\fP\:.
.TP
.B \fBcopied()\fP
.sp
File that is recorded as being copied.
.TP
.B \fBdeleted()\fP
.sp
Alias for \fBmissing()\fP.
.TP
.B \fBencoding(name)\fP
.sp
File can be successfully decoded with the given character
encoding. May not be useful for encodings other than ASCII and
UTF\-8.
.TP
.B \fBeol(style)\fP
.sp
File contains newlines of the given style (dos, unix, mac). Binary
files are excluded, files with mixed line endings match multiple
styles.
.TP
.B \fBexec()\fP
.sp
File that is marked as executable.
.TP
.B \fBgrep(regex)\fP
.sp
File contains the given regular expression.
.TP
.B \fBhgignore()\fP
.sp
File that matches the active .hgignore pattern.
.TP
.B \fBignored()\fP
.sp
File that is ignored according to \%\fBhg status\fP\:. These files will only be
considered if this predicate is used.
.TP
.B \fBmissing()\fP
.sp
File that is missing according to \%\fBhg status\fP\:.
.TP
.B \fBmodified()\fP
.sp
File that is modified according to \%\fBhg status\fP\:.
.TP
.B \fBportable()\fP
.sp
File that has a portable name. (This doesn\(aqt include filenames with case
collisions.)
.TP
.B \fBremoved()\fP
.sp
File that is removed according to \%\fBhg status\fP\:.
.TP
.B \fBresolved()\fP
.sp
File that is marked resolved according to \%\fBhg resolve \-l\fP\:.
.TP
.B \fBrevs(revs, pattern)\fP
.sp
Evaluate set in the specified revisions. If the revset match multiple
revs, this will return file matching pattern in any of the revision.
.TP
.B \fBsize(expression)\fP
.sp
File size matches the given expression. Examples:
.INDENT 7.0
.IP \(bu 2
.
size(\(aq1k\(aq) \- files from 1024 to 2047 bytes
.IP \(bu 2
.
size(\(aq< 20k\(aq) \- files less than 20480 bytes
.IP \(bu 2
.
size(\(aq>= .5MB\(aq) \- files at least 524288 bytes
.IP \(bu 2
.
size(\(aq4k \- 1MB\(aq) \- files from 4096 bytes to 1048576 bytes
.UNINDENT
.TP
.B \fBstatus(base, rev, pattern)\fP
.sp
Evaluate predicate using status change between \fBbase\fP and
\fBrev\fP. Examples:
.INDENT 7.0
.IP \(bu 2
.
\fBstatus(3, 7, added())\fP \- matches files added from "3" to "7"
.UNINDENT
.TP
.B \fBsubrepo([pattern])\fP
.sp
Subrepositories whose paths match the given pattern.
.TP
.B \fBsymlink()\fP
.sp
File that is marked as a symlink.
.TP
.B \fBunknown()\fP
.sp
File that is unknown according to \%\fBhg status\fP\:. These files will only be
considered if this predicate is used.
.TP
.B \fBunresolved()\fP
.sp
File that is marked unresolved according to \%\fBhg resolve \-l\fP\:.
.UNINDENT
.SS Examples
.sp
Some sample queries:
.INDENT 0.0
.IP \(bu 2
.
Show status of files that appear to be binary in the working directory:
.sp
.nf
.ft C
hg status \-A "set:binary()"
.ft P
.fi
.IP \(bu 2
.
Forget files that are in .hgignore but are already tracked:
.sp
.nf
.ft C
hg forget "set:hgignore() and not ignored()"
.ft P
.fi
.IP \(bu 2
.
Find text files that contain a string:
.sp
.nf
.ft C
hg files "set:grep(magic) and not binary()"
.ft P
.fi
.IP \(bu 2
.
Find C files in a non\-standard encoding:
.sp
.nf
.ft C
hg files "set:**.c and not encoding(\(aqUTF\-8\(aq)"
.ft P
.fi
.IP \(bu 2
.
Revert copies of large binary files:
.sp
.nf
.ft C
hg revert "set:copied() and binary() and size(\(aq>1M\(aq)"
.ft P
.fi
.IP \(bu 2
.
Revert files that were added to the working directory:
.sp
.nf
.ft C
hg revert "set:revs(\(aqwdir()\(aq, added())"
.ft P
.fi
.IP \(bu 2
.
Remove files listed in foo.lst that contain the letter a or b:
.sp
.nf
.ft C
hg remove "set: \(aqlistfile:foo.lst\(aq and (**a* or **b*)"
.ft P
.fi
.UNINDENT
.SH GLOSSARY
.INDENT 0.0
.TP
.B Ancestor
.
Any changeset that can be reached by an unbroken chain of parent
changesets from a given changeset. More precisely, the ancestors
of a changeset can be defined by two properties: a parent of a
changeset is an ancestor, and a parent of an ancestor is an
ancestor. See also: \(aqDescendant\(aq.
.TP
.B Bookmark
.
Bookmarks are pointers to certain commits that move when
committing. They are similar to tags in that it is possible to use
bookmark names in all places where Mercurial expects a changeset
ID, e.g., with \%\fBhg update\fP\:. Unlike tags, bookmarks move along
when you make a commit.
.sp
Bookmarks can be renamed, copied and deleted. Bookmarks are local,
unless they are explicitly pushed or pulled between repositories.
Pushing and pulling bookmarks allow you to collaborate with others
on a branch without creating a named branch.
.TP
.B Branch
.
(Noun) A child changeset that has been created from a parent that
is not a head. These are known as topological branches, see
\(aqBranch, topological\(aq. If a topological branch is named, it becomes
a named branch. If a topological branch is not named, it becomes
an anonymous branch. See \(aqBranch, anonymous\(aq and \(aqBranch, named\(aq.
.sp
Branches may be created when changes are pulled from or pushed to
a remote repository, since new heads may be created by these
operations. Note that the term branch can also be used informally
to describe a development process in which certain development is
done independently of other development. This is sometimes done
explicitly with a named branch, but it can also be done locally,
using bookmarks or clones and anonymous branches.
.sp
Example: "The experimental branch."
.sp
(Verb) The action of creating a child changeset which results in
its parent having more than one child.
.sp
Example: "I\(aqm going to branch at X."
.TP
.B Branch, anonymous
.
Every time a new child changeset is created from a parent that is not
a head and the name of the branch is not changed, a new anonymous
branch is created.
.TP
.B Branch, closed
.
A named branch whose branch heads have all been closed.
.TP
.B Branch, default
.
The branch assigned to a changeset when no name has previously been
assigned.
.TP
.B Branch head
.
See \(aqHead, branch\(aq.
.TP
.B Branch, inactive
.
If a named branch has no topological heads, it is considered to be
inactive. As an example, a feature branch becomes inactive when it
is merged into the default branch. The \%\fBhg branches\fP\: command
shows inactive branches by default, though they can be hidden with
\%\fBhg branches \-\-active\fP\:.
.sp
NOTE: this concept is deprecated because it is too implicit.
Branches should now be explicitly closed using \%\fBhg commit
\-\-close\-branch\fP\: when they are no longer needed.
.TP
.B Branch, named
.
A collection of changesets which have the same branch name. By
default, children of a changeset in a named branch belong to the
same named branch. A child can be explicitly assigned to a
different branch. See \%\fBhg help branch\fP\:, \%\fBhg help branches\fP\: and
\%\fBhg commit \-\-close\-branch\fP\: for more information on managing
branches.
.sp
Named branches can be thought of as a kind of namespace, dividing
the collection of changesets that comprise the repository into a
collection of disjoint subsets. A named branch is not necessarily
a topological branch. If a new named branch is created from the
head of another named branch, or the default branch, but no
further changesets are added to that previous branch, then that
previous branch will be a branch in name only.
.TP
.B Branch tip
.
See \(aqTip, branch\(aq.
.TP
.B Branch, topological
.
Every time a new child changeset is created from a parent that is
not a head, a new topological branch is created. If a topological
branch is named, it becomes a named branch. If a topological
branch is not named, it becomes an anonymous branch of the
current, possibly default, branch.
.TP
.B Changelog
.
A record of the changesets in the order in which they were added
to the repository. This includes details such as changeset id,
author, commit message, date, and list of changed files.
.TP
.B Changeset
.
A snapshot of the state of the repository used to record a change.
.TP
.B Changeset, child
.
The converse of parent changeset: if P is a parent of C, then C is
a child of P. There is no limit to the number of children that a
changeset may have.
.TP
.B Changeset id
.
A SHA\-1 hash that uniquely identifies a changeset. It may be
represented as either a "long" 40 hexadecimal digit string, or a
"short" 12 hexadecimal digit string.
.TP
.B Changeset, merge
.
A changeset with two parents. This occurs when a merge is
committed.
.TP
.B Changeset, parent
.
A revision upon which a child changeset is based. Specifically, a
parent changeset of a changeset C is a changeset whose node
immediately precedes C in the DAG. Changesets have at most two
parents.
.TP
.B Checkout
.
(Noun) The working directory being updated to a specific
revision. This use should probably be avoided where possible, as
changeset is much more appropriate than checkout in this context.
.sp
Example: "I\(aqm using checkout X."
.sp
(Verb) Updating the working directory to a specific changeset. See
\%\fBhg help update\fP\:.
.sp
Example: "I\(aqm going to check out changeset X."
.TP
.B Child changeset
.
See \(aqChangeset, child\(aq.
.TP
.B Close changeset
.
See \(aqHead, closed branch\(aq.
.TP
.B Closed branch
.
See \(aqBranch, closed\(aq.
.TP
.B Clone
.
(Noun) An entire or partial copy of a repository. The partial
clone must be in the form of a revision and its ancestors.
.sp
Example: "Is your clone up to date?"
.sp
(Verb) The process of creating a clone, using \%\fBhg clone\fP\:.
.sp
Example: "I\(aqm going to clone the repository."
.TP
.B Closed branch head
.
See \(aqHead, closed branch\(aq.
.TP
.B Commit
.
(Noun) A synonym for changeset.
.sp
Example: "Is the bug fixed in your recent commit?"
.sp
(Verb) The act of recording changes to a repository. When files
are committed in a working directory, Mercurial finds the
differences between the committed files and their parent
changeset, creating a new changeset in the repository.
.sp
Example: "You should commit those changes now."
.TP
.B Cset
.
A common abbreviation of the term changeset.
.TP
.B DAG
.
The repository of changesets of a distributed version control
system (DVCS) can be described as a directed acyclic graph (DAG),
consisting of nodes and edges, where nodes correspond to
changesets and edges imply a parent \-> child relation. This graph
can be visualized by graphical tools such as \%\fBhg log \-\-graph\fP\:. In
Mercurial, the DAG is limited by the requirement for children to
have at most two parents.
.TP
.B Deprecated
.
Feature removed from documentation, but not scheduled for removal.
.TP
.B Default branch
.
See \(aqBranch, default\(aq.
.TP
.B Descendant
.
Any changeset that can be reached by a chain of child changesets
from a given changeset. More precisely, the descendants of a
changeset can be defined by two properties: the child of a
changeset is a descendant, and the child of a descendant is a
descendant. See also: \(aqAncestor\(aq.
.TP
.B Diff
.
(Noun) The difference between the contents and attributes of files
in two changesets or a changeset and the current working
directory. The difference is usually represented in a standard
form called a "diff" or "patch". The "git diff" format is used
when the changes include copies, renames, or changes to file
attributes, none of which can be represented/handled by classic
"diff" and "patch".
.sp
Example: "Did you see my correction in the diff?"
.sp
(Verb) Diffing two changesets is the action of creating a diff or
patch.
.sp
Example: "If you diff with changeset X, you will see what I mean."
.TP
.B Directory, working
.
The working directory represents the state of the files tracked by
Mercurial, that will be recorded in the next commit. The working
directory initially corresponds to the snapshot at an existing
changeset, known as the parent of the working directory. See
\(aqParent, working directory\(aq. The state may be modified by changes
to the files introduced manually or by a merge. The repository
metadata exists in the .hg directory inside the working directory.
.TP
.B Draft
.
Changesets in the draft phase have not been shared with publishing
repositories and may thus be safely changed by history\-modifying
extensions. See \%\fBhg help phases\fP\:.
.TP
.B Experimental
.
Feature that may change or be removed at a later date.
.TP
.B Graph
.
See DAG and \%\fBhg log \-\-graph\fP\:.
.TP
.B Head
.
The term \(aqhead\(aq may be used to refer to both a branch head or a
repository head, depending on the context. See \(aqHead, branch\(aq and
\(aqHead, repository\(aq for specific definitions.
.sp
Heads are where development generally takes place and are the
usual targets for update and merge operations.
.TP
.B Head, branch
.
A changeset with no descendants on the same named branch.
.TP
.B Head, closed branch
.
A changeset that marks a head as no longer interesting. The closed
head is no longer listed by \%\fBhg heads\fP\:. A branch is considered
closed when all its heads are closed and consequently is not
listed by \%\fBhg branches\fP\:.
.sp
Closed heads can be re\-opened by committing new changeset as the
child of the changeset that marks a head as closed.
.TP
.B Head, repository
.
A topological head which has not been closed.
.TP
.B Head, topological
.
A changeset with no children in the repository.
.TP
.B History, immutable
.
Once committed, changesets cannot be altered.  Extensions which
appear to change history actually create new changesets that
replace existing ones, and then destroy the old changesets. Doing
so in public repositories can result in old changesets being
reintroduced to the repository.
.TP
.B History, rewriting
.
The changesets in a repository are immutable. However, extensions
to Mercurial can be used to alter the repository, usually in such
a way as to preserve changeset contents.
.TP
.B Immutable history
.
See \(aqHistory, immutable\(aq.
.TP
.B Merge changeset
.
See \(aqChangeset, merge\(aq.
.TP
.B Manifest
.
Each changeset has a manifest, which is the list of files that are
tracked by the changeset.
.TP
.B Merge
.
Used to bring together divergent branches of work. When you update
to a changeset and then merge another changeset, you bring the
history of the latter changeset into your working directory. Once
conflicts are resolved (and marked), this merge may be committed
as a merge changeset, bringing two branches together in the DAG.
.TP
.B Named branch
.
See \(aqBranch, named\(aq.
.TP
.B Null changeset
.
The empty changeset. It is the parent state of newly\-initialized
repositories and repositories with no checked out revision. It is
thus the parent of root changesets and the effective ancestor when
merging unrelated changesets. Can be specified by the alias \(aqnull\(aq
or by the changeset ID \(aq000000000000\(aq.
.TP
.B Parent
.
See \(aqChangeset, parent\(aq.
.TP
.B Parent changeset
.
See \(aqChangeset, parent\(aq.
.TP
.B Parent, working directory
.
The working directory parent reflects a virtual revision which is
the child of the changeset (or two changesets with an uncommitted
merge) shown by \%\fBhg parents\fP\:. This is changed with
\%\fBhg update\fP\:. Other commands to see the working directory parent
are \%\fBhg summary\fP\: and \%\fBhg id\fP\:. Can be specified by the alias ".".
.TP
.B Patch
.
(Noun) The product of a diff operation.
.sp
Example: "I\(aqve sent you my patch."
.sp
(Verb) The process of using a patch file to transform one
changeset into another.
.sp
Example: "You will need to patch that revision."
.TP
.B Phase
.
A per\-changeset state tracking how the changeset has been or
should be shared. See \%\fBhg help phases\fP\:.
.TP
.B Public
.
Changesets in the public phase have been shared with publishing
repositories and are therefore considered immutable. See \%\fBhg help
phases\fP\:.
.TP
.B Pull
.
An operation in which changesets in a remote repository which are
not in the local repository are brought into the local
repository. Note that this operation without special arguments
only updates the repository, it does not update the files in the
working directory. See \%\fBhg help pull\fP\:.
.TP
.B Push
.
An operation in which changesets in a local repository which are
not in a remote repository are sent to the remote repository. Note
that this operation only adds changesets which have been committed
locally to the remote repository. Uncommitted changes are not
sent. See \%\fBhg help push\fP\:.
.TP
.B Repository
.
The metadata describing all recorded states of a collection of
files. Each recorded state is represented by a changeset. A
repository is usually (but not always) found in the \fB.hg\fP
subdirectory of a working directory. Any recorded state can be
recreated by "updating" a working directory to a specific
changeset.
.TP
.B Repository head
.
See \(aqHead, repository\(aq.
.TP
.B Revision
.
A state of the repository at some point in time. Earlier revisions
can be updated to by using \%\fBhg update\fP\:.  See also \(aqRevision
number\(aq; See also \(aqChangeset\(aq.
.TP
.B Revision number
.
This integer uniquely identifies a changeset in a specific
repository. It represents the order in which changesets were added
to a repository, starting with revision number 0. Note that the
revision number may be different in each clone of a repository. To
identify changesets uniquely between different clones, see
\(aqChangeset id\(aq.
.TP
.B Revlog
.
History storage mechanism used by Mercurial. It is a form of delta
encoding, with occasional full revision of data followed by delta
of each successive revision. It includes data and an index
pointing to the data.
.TP
.B Rewriting history
.
See \(aqHistory, rewriting\(aq.
.TP
.B Root
.
A changeset that has only the null changeset as its parent. Most
repositories have only a single root changeset.
.TP
.B Secret
.
Changesets in the secret phase may not be shared via push, pull,
or clone. See \%\fBhg help phases\fP\:.
.TP
.B Tag
.
An alternative name given to a changeset. Tags can be used in all
places where Mercurial expects a changeset ID, e.g., with
\%\fBhg update\fP\:. The creation of a tag is stored in the history and
will thus automatically be shared with other using push and pull.
.TP
.B Tip
.
The changeset with the highest revision number. It is the changeset
most recently added in a repository.
.TP
.B Tip, branch
.
The head of a given branch with the highest revision number. When
a branch name is used as a revision identifier, it refers to the
branch tip. See also \(aqBranch, head\(aq. Note that because revision
numbers may be different in different repository clones, the
branch tip may be different in different cloned repositories.
.TP
.B Update
.
(Noun) Another synonym of changeset.
.sp
Example: "I\(aqve pushed an update."
.sp
(Verb) This term is usually used to describe updating the state of
the working directory to that of a specific changeset. See
\%\fBhg help update\fP\:.
.sp
Example: "You should update."
.TP
.B Working directory
.
See \(aqDirectory, working\(aq.
.TP
.B Working directory parent
.
See \(aqParent, working directory\(aq.
.UNINDENT
.SH SYNTAX FOR MERCURIAL IGNORE FILES
.SS Synopsis
.sp
The Mercurial system uses a file called \fB.hgignore\fP in the root
directory of a repository to control its behavior when it searches
for files that it is not currently tracking.
.SS Description
.sp
The working directory of a Mercurial repository will often contain
files that should not be tracked by Mercurial. These include backup
files created by editors and build products created by compilers.
These files can be ignored by listing them in a \fB.hgignore\fP file in
the root of the working directory. The \fB.hgignore\fP file must be
created manually. It is typically put under version control, so that
the settings will propagate to other repositories with push and pull.
.sp
An untracked file is ignored if its path relative to the repository
root directory, or any prefix path of that path, is matched against
any pattern in \fB.hgignore\fP.
.sp
For example, say we have an untracked file, \fBfile.c\fP, at
\fBa/b/file.c\fP inside our repository. Mercurial will ignore \fBfile.c\fP
if any pattern in \fB.hgignore\fP matches \fBa/b/file.c\fP, \fBa/b\fP or \fBa\fP.
.sp
In addition, a Mercurial configuration file can reference a set of
per\-user or global ignore files. See the \fBignore\fP configuration
key on the \fB[ui]\fP section of \%\fBhg help config\fP\: for details of how to
configure these files.
.sp
To control Mercurial\(aqs handling of files that it manages, many
commands support the \fB\-I\fP and \fB\-X\fP options; see
\%\fBhg help <command>\fP\: and \%\fBhg help patterns\fP\: for details.
.sp
Files that are already tracked are not affected by .hgignore, even
if they appear in .hgignore. An untracked file X can be explicitly
added with \%\fBhg add X\fP\:, even if X would be excluded by a pattern
in .hgignore.
.SS Syntax
.sp
An ignore file is a plain text file consisting of a list of patterns,
with one pattern per line. Empty lines are skipped. The \fB#\fP
character is treated as a comment character, and the \fB\e\fP character
is treated as an escape character.
.sp
Mercurial supports several pattern syntaxes. The default syntax used
is Python/Perl\-style regular expressions.
.sp
To change the syntax used, use a line of the following form:
.sp
.nf
.ft C
syntax: NAME
.ft P
.fi
.sp
where \fBNAME\fP is one of the following:
.INDENT 0.0
.TP
.B \fBregexp\fP
.sp
Regular expression, Python/Perl syntax.
.TP
.B \fBglob\fP
.sp
Shell\-style glob.
.UNINDENT
.sp
The chosen syntax stays in effect when parsing all patterns that
follow, until another syntax is selected.
.sp
Neither glob nor regexp patterns are rooted. A glob\-syntax pattern of
the form \fB*.c\fP will match a file ending in \fB.c\fP in any directory,
and a regexp pattern of the form \fB\e.c$\fP will do the same. To root a
regexp pattern, start it with \fB^\fP.
.sp
Subdirectories can have their own .hgignore settings by adding
\fBsubinclude:path/to/subdir/.hgignore\fP to the root \fB.hgignore\fP. See
\%\fBhg help patterns\fP\: for details on \fBsubinclude:\fP and \fBinclude:\fP.
.IP Note
.
Patterns specified in other than \fB.hgignore\fP are always rooted.
Please see \%\fBhg help patterns\fP\: for details.
.RE
.SS Example
.sp
Here is an example ignore file.
.sp
.nf
.ft C
# use glob syntax.
syntax: glob

*.elc
*.pyc
*~

# switch to regexp syntax.
syntax: regexp
^\e.pc/
.ft P
.fi
.SH CONFIGURING HGWEB
.sp
Mercurial\(aqs internal web server, hgweb, can serve either a single
repository, or a tree of repositories. In the second case, repository
paths and global options can be defined using a dedicated
configuration file common to \%\fBhg serve\fP\:, \fBhgweb.wsgi\fP,
\fBhgweb.cgi\fP and \fBhgweb.fcgi\fP.
.sp
This file uses the same syntax as other Mercurial configuration files
but recognizes only the following sections:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
.
web
.IP \(bu 2
.
paths
.IP \(bu 2
.
collections
.UNINDENT
.UNINDENT
.UNINDENT
.sp
The \fBweb\fP options are thoroughly described in \%\fBhg help config\fP\:.
.sp
The \fBpaths\fP section maps URL paths to paths of repositories in the
filesystem. hgweb will not expose the filesystem directly \- only
Mercurial repositories can be published and only according to the
configuration.
.sp
The left hand side is the path in the URL. Note that hgweb reserves
subpaths like \fBrev\fP or \fBfile\fP, try using different names for
nested repositories to avoid confusing effects.
.sp
The right hand side is the path in the filesystem. If the specified
path ends with \fB*\fP or \fB**\fP the filesystem will be searched
recursively for repositories below that point.
With \fB*\fP it will not recurse into the repositories it finds (except for
\fB.hg/patches\fP).
With \fB**\fP it will also search inside repository working directories
and possibly find subrepositories.
.sp
In this example:
.sp
.nf
.ft C
[paths]
/projects/a = /srv/tmprepos/a
/projects/b = c:/repos/b
/ = /srv/repos/*
/user/bob = /home/bob/repos/**
.ft P
.fi
.INDENT 0.0
.IP \(bu 2
.
The first two entries make two repositories in different directories
appear under the same directory in the web interface
.IP \(bu 2
.
The third entry will publish every Mercurial repository found in
\fB/srv/repos/\fP, for instance the repository \fB/srv/repos/quux/\fP
will appear as \fBhttp://server/quux/\fP
.IP \(bu 2
.
The fourth entry will publish both \fBhttp://server/user/bob/quux/\fP
and \fBhttp://server/user/bob/quux/testsubrepo/\fP
.UNINDENT
.sp
The \fBcollections\fP section is deprecated and has been superseded by
\fBpaths\fP.
.SS URLs and Common Arguments
.sp
URLs under each repository have the form \fB/{command}[/{arguments}]\fP
where \fB{command}\fP represents the name of a command or handler and
\fB{arguments}\fP represents any number of additional URL parameters
to that command.
.sp
The web server has a default style associated with it. Styles map to
a collection of named templates. Each template is used to render a
specific piece of data, such as a changeset or diff.
.sp
The style for the current request can be overwritten two ways. First,
if \fB{command}\fP contains a hyphen (\fB\-\fP), the text before the hyphen
defines the style. For example, \fB/atom\-log\fP will render the \fBlog\fP
command handler with the \fBatom\fP style. The second way to set the
style is with the \fBstyle\fP query string argument. For example,
\fB/log?style=atom\fP. The hyphenated URL parameter is preferred.
.sp
Not all templates are available for all styles. Attempting to use
a style that doesn\(aqt have all templates defined may result in an error
rendering the page.
.sp
Many commands take a \fB{revision}\fP URL parameter. This defines the
changeset to operate on. This is commonly specified as the short,
12 digit hexadecimal abbreviation for the full 40 character unique
revision identifier. However, any value described by
\%\fBhg help revisions\fP\: typically works.
.SS Commands and URLs
.sp
The following web commands and their URLs are available:
.SS /annotate/{revision}/{path}
.sp
Show changeset information for each line in a file.
.sp
The \fBfileannotate\fP template is rendered.
.SS /archive/{revision}.{format}[/{path}]
.sp
Obtain an archive of repository content.
.sp
The content and type of the archive is defined by a URL path parameter.
\fBformat\fP is the file extension of the archive type to be generated. e.g.
\fBzip\fP or \fBtar.bz2\fP. Not all archive types may be allowed by your
server configuration.
.sp
The optional \fBpath\fP URL parameter controls content to include in the
archive. If omitted, every file in the specified revision is present in the
archive. If included, only the specified file or contents of the specified
directory will be included in the archive.
.sp
No template is used for this handler. Raw, binary content is generated.
.SS /bookmarks
.sp
Show information about bookmarks.
.sp
No arguments are accepted.
.sp
The \fBbookmarks\fP template is rendered.
.SS /branches
.sp
Show information about branches.
.sp
All known branches are contained in the output, even closed branches.
.sp
No arguments are accepted.
.sp
The \fBbranches\fP template is rendered.
.SS /changelog[/{revision}]
.sp
Show information about multiple changesets.
.sp
If the optional \fBrevision\fP URL argument is absent, information about
all changesets starting at \fBtip\fP will be rendered. If the \fBrevision\fP
argument is present, changesets will be shown starting from the specified
revision.
.sp
If \fBrevision\fP is absent, the \fBrev\fP query string argument may be
defined. This will perform a search for changesets.
.sp
The argument for \fBrev\fP can be a single revision, a revision set,
or a literal keyword to search for in changeset data (equivalent to
\%\fBhg log \-k\fP\:).
.sp
The \fBrevcount\fP query string argument defines the maximum numbers of
changesets to render.
.sp
For non\-searches, the \fBchangelog\fP template will be rendered.
.SS /changeset[/{revision}]
.sp
Show information about a single changeset.
.sp
A URL path argument is the changeset identifier to show. See \fBhg help
revisions\fP for possible values. If not defined, the \fBtip\fP changeset
will be shown.
.sp
The \fBchangeset\fP template is rendered. Contents of the \fBchangesettag\fP,
\fBchangesetbookmark\fP, \fBfilenodelink\fP, \fBfilenolink\fP, and the many
templates related to diffs may all be used to produce the output.
.SS /comparison/{revision}/{path}
.sp
Show a comparison between the old and new versions of a file from changes
made on a particular revision.
.sp
This is similar to the \fBdiff\fP handler. However, this form features
a split or side\-by\-side diff rather than a unified diff.
.sp
The \fBcontext\fP query string argument can be used to control the lines of
context in the diff.
.sp
The \fBfilecomparison\fP template is rendered.
.SS /diff/{revision}/{path}
.sp
Show how a file changed in a particular commit.
.sp
The \fBfilediff\fP template is rendered.
.sp
This handler is registered under both the \fB/diff\fP and \fB/filediff\fP
paths. \fB/diff\fP is used in modern code.
.SS /file/{revision}[/{path}]
.sp
Show information about a directory or file in the repository.
.sp
Info about the \fBpath\fP given as a URL parameter will be rendered.
.sp
If \fBpath\fP is a directory, information about the entries in that
directory will be rendered. This form is equivalent to the \fBmanifest\fP
handler.
.sp
If \fBpath\fP is a file, information about that file will be shown via
the \fBfilerevision\fP template.
.sp
If \fBpath\fP is not defined, information about the root directory will
be rendered.
.SS /diff/{revision}/{path}
.sp
Show how a file changed in a particular commit.
.sp
The \fBfilediff\fP template is rendered.
.sp
This handler is registered under both the \fB/diff\fP and \fB/filediff\fP
paths. \fB/diff\fP is used in modern code.
.SS /filelog/{revision}/{path}
.sp
Show information about the history of a file in the repository.
.sp
The \fBrevcount\fP query string argument can be defined to control the
maximum number of entries to show.
.sp
The \fBfilelog\fP template will be rendered.
.SS /graph[/{revision}]
.sp
Show information about the graphical topology of the repository.
.sp
Information rendered by this handler can be used to create visual
representations of repository topology.
.sp
The \fBrevision\fP URL parameter controls the starting changeset.
.sp
The \fBrevcount\fP query string argument can define the number of changesets
to show information for.
.sp
This handler will render the \fBgraph\fP template.
.SS /help[/{topic}]
.sp
Render help documentation.
.sp
This web command is roughly equivalent to \%\fBhg help\fP\:. If a \fBtopic\fP
is defined, that help topic will be rendered. If not, an index of
available help topics will be rendered.
.sp
The \fBhelp\fP template will be rendered when requesting help for a topic.
\fBhelptopics\fP will be rendered for the index of help topics.
.SS /log[/{revision}[/{path}]]
.sp
Show repository or file history.
.sp
For URLs of the form \fB/log/{revision}\fP, a list of changesets starting at
the specified changeset identifier is shown. If \fB{revision}\fP is not
defined, the default is \fBtip\fP. This form is equivalent to the
\fBchangelog\fP handler.
.sp
For URLs of the form \fB/log/{revision}/{file}\fP, the history for a specific
file will be shown. This form is equivalent to the \fBfilelog\fP handler.
.SS /manifest[/{revision}[/{path}]]
.sp
Show information about a directory.
.sp
If the URL path arguments are omitted, information about the root
directory for the \fBtip\fP changeset will be shown.
.sp
Because this handler can only show information for directories, it
is recommended to use the \fBfile\fP handler instead, as it can handle both
directories and files.
.sp
The \fBmanifest\fP template will be rendered for this handler.
.SS /changeset[/{revision}]
.sp
Show information about a single changeset.
.sp
A URL path argument is the changeset identifier to show. See \fBhg help
revisions\fP for possible values. If not defined, the \fBtip\fP changeset
will be shown.
.sp
The \fBchangeset\fP template is rendered. Contents of the \fBchangesettag\fP,
\fBchangesetbookmark\fP, \fBfilenodelink\fP, \fBfilenolink\fP, and the many
templates related to diffs may all be used to produce the output.
.SS /shortlog
.sp
Show basic information about a set of changesets.
.sp
This accepts the same parameters as the \fBchangelog\fP handler. The only
difference is the \fBshortlog\fP template will be rendered instead of the
\fBchangelog\fP template.
.SS /summary
.sp
Show a summary of repository state.
.sp
Information about the latest changesets, bookmarks, tags, and branches
is captured by this handler.
.sp
The \fBsummary\fP template is rendered.
.SS /tags
.sp
Show information about tags.
.sp
No arguments are accepted.
.sp
The \fBtags\fP template is rendered.
.SH TECHNICAL IMPLEMENTATION TOPICS
.sp
To access a subtopic, use "hg help internals.{subtopic\-name}"
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B bundles
.
Bundles
.TP
.B censor
.
Censor
.TP
.B changegroups
.
Changegroups
.TP
.B requirements
.
Repository Requirements
.TP
.B revlogs
.
Revision Logs
.TP
.B wireprotocol
.
Wire Protocol
.UNINDENT
.UNINDENT
.UNINDENT
.SH MERGE TOOLS
.sp
To merge files Mercurial uses merge tools.
.sp
A merge tool combines two different versions of a file into a merged
file. Merge tools are given the two files and the greatest common
ancestor of the two file versions, so they can determine the changes
made on both branches.
.sp
Merge tools are used both for \%\fBhg resolve\fP\:, \%\fBhg merge\fP\:, \%\fBhg update\fP\:,
\%\fBhg backout\fP\: and in several extensions.
.sp
Usually, the merge tool tries to automatically reconcile the files by
combining all non\-overlapping changes that occurred separately in
the two different evolutions of the same initial base file. Furthermore, some
interactive merge programs make it easier to manually resolve
conflicting merges, either in a graphical way, or by inserting some
conflict markers. Mercurial does not include any interactive merge
programs but relies on external tools for that.
.SS Available merge tools
.sp
External merge tools and their properties are configured in the
merge\-tools configuration section \- see hgrc(5) \- but they can often just
be named by their executable.
.sp
A merge tool is generally usable if its executable can be found on the
system and if it can handle the merge. The executable is found if it
is an absolute or relative executable path or the name of an
application in the executable search path. The tool is assumed to be
able to handle the merge if it can handle symlinks if the file is a
symlink, if it can handle binary files if the file is binary, and if a
GUI is available if the tool requires a GUI.
.sp
There are some internal merge tools which can be used. The internal
merge tools are:
.INDENT 0.0
.TP
.B \fB:dump\fP
.sp
Creates three versions of the files to merge, containing the
contents of local, other and base. These files can then be used to
perform a merge manually. If the file to be merged is named
\fBa.txt\fP, these files will accordingly be named \fBa.txt.local\fP,
\fBa.txt.other\fP and \fBa.txt.base\fP and they will be placed in the
same directory as \fBa.txt\fP.
.sp
This implies permerge. Therefore, files aren\(aqt dumped, if premerge
runs successfully. Use :forcedump to forcibly write files out.
.TP
.B \fB:fail\fP
.sp
Rather than attempting to merge files that were modified on both
branches, it marks them as unresolved. The resolve command must be
used to resolve these conflicts.
.TP
.B \fB:forcedump\fP
.sp
Creates three versions of the files as same as :dump, but omits premerge.
.TP
.B \fB:local\fP
.sp
Uses the local \fIp1()\fP version of files as the merged version.
.TP
.B \fB:merge\fP
.sp
Uses the internal non\-interactive simple merge algorithm for merging
files. It will fail if there are any conflicts and leave markers in
the partially merged file. Markers will have two sections, one for each side
of merge.
.TP
.B \fB:merge\-local\fP
.sp
Like :merge, but resolve all conflicts non\-interactively in favor
of the local \fIp1()\fP changes.
.TP
.B \fB:merge\-other\fP
.sp
Like :merge, but resolve all conflicts non\-interactively in favor
of the other \fIp2()\fP changes.
.TP
.B \fB:merge3\fP
.sp
Uses the internal non\-interactive simple merge algorithm for merging
files. It will fail if there are any conflicts and leave markers in
the partially merged file. Marker will have three sections, one from each
side of the merge and one for the base content.
.TP
.B \fB:other\fP
.sp
Uses the other \fIp2()\fP version of files as the merged version.
.TP
.B \fB:prompt\fP
.sp
Asks the user which of the local \fIp1()\fP or the other \fIp2()\fP version to
keep as the merged version.
.TP
.B \fB:tagmerge\fP
.sp
Uses the internal tag merge algorithm (experimental).
.TP
.B \fB:union\fP
.sp
Uses the internal non\-interactive simple merge algorithm for merging
files. It will use both left and right sides for conflict regions.
No markers are inserted.
.UNINDENT
.sp
Internal tools are always available and do not require a GUI but will by default
not handle symlinks or binary files.
.SS Choosing a merge tool
.sp
Mercurial uses these rules when deciding which merge tool to use:
.INDENT 0.0
.IP 1. 3
.
If a tool has been specified with the \-\-tool option to merge or resolve, it
is used.  If it is the name of a tool in the merge\-tools configuration, its
configuration is used. Otherwise the specified tool must be executable by
the shell.
.IP 2. 3
.
If the \fBHGMERGE\fP environment variable is present, its value is used and
must be executable by the shell.
.IP 3. 3
.
If the filename of the file to be merged matches any of the patterns in the
merge\-patterns configuration section, the first usable merge tool
corresponding to a matching pattern is used. Here, binary capabilities of the
merge tool are not considered.
.IP 4. 3
.
If ui.merge is set it will be considered next. If the value is not the name
of a configured tool, the specified value is used and must be executable by
the shell. Otherwise the named tool is used if it is usable.
.IP 5. 3
.
If any usable merge tools are present in the merge\-tools configuration
section, the one with the highest priority is used.
.IP 6. 3
.
If a program named \fBhgmerge\fP can be found on the system, it is used \- but
it will by default not be used for symlinks and binary files.
.IP 7. 3
.
If the file to be merged is not binary and is not a symlink, then
internal \fB:merge\fP is used.
.IP 8. 3
.
Otherwise, \fB:prompt\fP is used.
.UNINDENT
.IP Note
.
After selecting a merge program, Mercurial will by default attempt
to merge the files using a simple merge algorithm first. Only if it doesn\(aqt
succeed because of conflicting changes Mercurial will actually execute the
merge program. Whether to use the simple merge algorithm first can be
controlled by the premerge setting of the merge tool. Premerge is enabled by
default unless the file is binary or a symlink.
.RE
.sp
See the merge\-tools and ui sections of hgrc(5) for details on the
configuration of merge tools.
.SH PAGER SUPPORT
.sp
Some Mercurial commands can produce a lot of output, and Mercurial will
attempt to use a pager to make those commands more pleasant.
.sp
To set the pager that should be used, set the application variable:
.sp
.nf
.ft C
[pager]
pager = less \-FRX
.ft P
.fi
.sp
If no pager is set in the user or repository configuration, Mercurial uses the
environment variable $PAGER. If $PAGER is not set, pager.pager from the default
or system configuration is used. If none of these are set, a default pager will
be used, typically \fIless\fP on Unix and \fImore\fP on Windows.
.sp
On Windows, \fImore\fP is not color aware, so using it effectively disables color.
MSYS and Cygwin shells provide \fIless\fP as a pager, which can be configured to
support ANSI color codes.  See \%\fBhg help config.color.pagermode\fP\: to configure
the color mode when invoking a pager.
.sp
You can disable the pager for certain commands by adding them to the
pager.ignore list:
.sp
.nf
.ft C
[pager]
ignore = version, help, update
.ft P
.fi
.sp
To ignore global commands like \%\fBhg version\fP\: or \%\fBhg help\fP\:, you have
to specify them in your user configuration file.
.sp
To control whether the pager is used at all for an individual command,
you can use \-\-pager=<value>:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
.
use as needed: \fIauto\fP.
.IP \(bu 2
.
require the pager: \fIyes\fP or \fIon\fP.
.IP \(bu 2
.
suppress the pager: \fIno\fP or \fIoff\fP (any unrecognized value
will also work).
.UNINDENT
.UNINDENT
.UNINDENT
.sp
To globally turn off all attempts to use a pager, set:
.sp
.nf
.ft C
[ui]
paginate = never
.ft P
.fi
.sp
which will prevent the pager from running.
.SH FILE NAME PATTERNS
.sp
Mercurial accepts several notations for identifying one or more files
at a time.
.sp
By default, Mercurial treats filenames as shell\-style extended glob
patterns.
.sp
Alternate pattern notations must be specified explicitly.
.IP Note
.
Patterns specified in \fB.hgignore\fP are not rooted.
Please see \%\fBhg help hgignore\fP\: for details.
.RE
.sp
To use a plain path name without any pattern matching, start it with
\fBpath:\fP. These path names must completely match starting at the
current repository root, and when the path points to a directory, it is matched
recursively. To match all files in a directory non\-recursively (not including
any files in subdirectories), \fBrootfilesin:\fP can be used, specifying an
absolute path (relative to the repository root).
.sp
To use an extended glob, start a name with \fBglob:\fP. Globs are rooted
at the current directory; a glob such as \fB*.c\fP will only match files
in the current directory ending with \fB.c\fP.
.sp
The supported glob syntax extensions are \fB**\fP to match any string
across path separators and \fB{a,b}\fP to mean "a or b".
.sp
To use a Perl/Python regular expression, start a name with \fBre:\fP.
Regexp pattern matching is anchored at the root of the repository.
.sp
To read name patterns from a file, use \fBlistfile:\fP or \fBlistfile0:\fP.
The latter expects null delimited patterns while the former expects line
feeds. Each string read from the file is itself treated as a file
pattern.
.sp
To read a set of patterns from a file, use \fBinclude:\fP or \fBsubinclude:\fP.
\fBinclude:\fP will use all the patterns from the given file and treat them as if
they had been passed in manually.  \fBsubinclude:\fP will only apply the patterns
against files that are under the subinclude file\(aqs directory. See \%\fBhg help
hgignore\fP\: for details on the format of these files.
.sp
All patterns, except for \fBglob:\fP specified in command line (not for
\fB\-I\fP or \fB\-X\fP options), can match also against directories: files
under matched directories are treated as matched.
For \fB\-I\fP and \fB\-X\fP options, \fBglob:\fP will match directories recursively.
.sp
Plain examples:
.sp
.nf
.ft C
path:foo/bar        a name bar in a directory named foo in the root
                    of the repository
path:path:name      a file or directory named "path:name"
rootfilesin:foo/bar the files in a directory called foo/bar, but not any files
                    in its subdirectories and not a file bar in directory foo
.ft P
.fi
.sp
Glob examples:
.sp
.nf
.ft C
glob:*.c       any name ending in ".c" in the current directory
*.c            any name ending in ".c" in the current directory
**.c           any name ending in ".c" in any subdirectory of the
               current directory including itself.
foo/*          any file in directory foo
foo/**         any file in directory foo plus all its subdirectories,
               recursively
foo/*.c        any name ending in ".c" in the directory foo
foo/**.c       any name ending in ".c" in any subdirectory of foo
               including itself.
.ft P
.fi
.sp
Regexp examples:
.sp
.nf
.ft C
re:.*\e.c$      any name ending in ".c", anywhere in the repository
.ft P
.fi
.sp
File examples:
.sp
.nf
.ft C
listfile:list.txt  read list from list.txt with one file pattern per line
listfile0:list.txt read list from list.txt with null byte delimiters
.ft P
.fi
.sp
See also \%\fBhg help filesets\fP\:.
.sp
Include examples:
.sp
.nf
.ft C
include:path/to/mypatternfile    reads patterns to be applied to all paths
subinclude:path/to/subignorefile reads patterns specifically for paths in the
                                 subdirectory
.ft P
.fi
.SH WORKING WITH PHASES
.SS What are phases?
.sp
Phases are a system for tracking which changesets have been or should
be shared. This helps prevent common mistakes when modifying history
(for instance, with the mq or rebase extensions).
.sp
Each changeset in a repository is in one of the following phases:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
.
public : changeset is visible on a public server
.IP \(bu 2
.
draft : changeset is not yet published
.IP \(bu 2
.
secret : changeset should not be pushed, pulled, or cloned
.UNINDENT
.UNINDENT
.UNINDENT
.sp
These phases are ordered (public < draft < secret) and no changeset
can be in a lower phase than its ancestors. For instance, if a
changeset is public, all its ancestors are also public. Lastly,
changeset phases should only be changed towards the public phase.
.SS How are phases managed?
.sp
For the most part, phases should work transparently. By default, a
changeset is created in the draft phase and is moved into the public
phase when it is pushed to another repository.
.sp
Once changesets become public, extensions like mq and rebase will
refuse to operate on them to prevent creating duplicate changesets.
Phases can also be manually manipulated with the \%\fBhg phase\fP\: command
if needed. See \%\fBhg help \-v phase\fP\: for examples.
.sp
To make yours commits secret by default, put this in your
configuration file:
.sp
.nf
.ft C
[phases]
new\-commit = secret
.ft P
.fi
.SS Phases and servers
.sp
Normally, all servers are \fBpublishing\fP by default. This means:
.sp
.nf
.ft C
\- all draft changesets that are pulled or cloned appear in phase
public on the client

\- all draft changesets that are pushed appear as public on both
client and server

\- secret changesets are neither pushed, pulled, or cloned
.ft P
.fi
.IP Note
.
Pulling a draft changeset from a publishing server does not mark it
as public on the server side due to the read\-only nature of pull.
.RE
.sp
Sometimes it may be desirable to push and pull changesets in the draft
phase to share unfinished work. This can be done by setting a
repository to disable publishing in its configuration file:
.sp
.nf
.ft C
[phases]
publish = False
.ft P
.fi
.sp
See \%\fBhg help config\fP\: for more information on configuration files.
.IP Note
.
Servers running older versions of Mercurial are treated as
publishing.
.RE
.IP Note
.
Changesets in secret phase are not exchanged with the server. This
applies to their content: file names, file contents, and changeset
metadata. For technical reasons, the identifier (e.g. d825e4025e39)
of the secret changeset may be communicated to the server.
.RE
.SS Examples
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
.
list changesets in draft or secret phase:
.sp
.nf
.ft C
hg log \-r "not public()"
.ft P
.fi
.IP \(bu 2
.
change all secret changesets to draft:
.sp
.nf
.ft C
hg phase \-\-draft "secret()"
.ft P
.fi
.IP \(bu 2
.
forcibly move the current changeset and descendants from public to draft:
.sp
.nf
.ft C
hg phase \-\-force \-\-draft .
.ft P
.fi
.IP \(bu 2
.
show a list of changeset revision and phase:
.sp
.nf
.ft C
hg log \-\-template "{rev} {phase}\en"
.ft P
.fi
.IP \(bu 2
.
resynchronize draft changesets relative to a remote repository:
.sp
.nf
.ft C
hg phase \-fd "outgoing(URL)"
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
See \%\fBhg help phase\fP\: for more information on manually manipulating phases.
.SH SPECIFYING REVISIONS
.sp
Mercurial supports several ways to specify revisions.
.SS Specifying single revisions
.sp
A plain integer is treated as a revision number. Negative integers are
treated as sequential offsets from the tip, with \-1 denoting the tip,
\-2 denoting the revision prior to the tip, and so forth.
.sp
A 40\-digit hexadecimal string is treated as a unique revision identifier.
A hexadecimal string less than 40 characters long is treated as a
unique revision identifier and is referred to as a short\-form
identifier. A short\-form identifier is only valid if it is the prefix
of exactly one full\-length identifier.
.sp
Any other string is treated as a bookmark, tag, or branch name. A
bookmark is a movable pointer to a revision. A tag is a permanent name
associated with a revision. A branch name denotes the tipmost open branch head
of that branch \- or if they are all closed, the tipmost closed head of the
branch. Bookmark, tag, and branch names must not contain the ":" character.
.sp
The reserved name "tip" always identifies the most recent revision.
.sp
The reserved name "null" indicates the null revision. This is the
revision of an empty repository, and the parent of revision 0.
.sp
The reserved name "." indicates the working directory parent. If no
working directory is checked out, it is equivalent to null. If an
uncommitted merge is in progress, "." is the revision of the first
parent.
.sp
Finally, commands that expect a single revision (like \fBhg update\fP) also
accept revsets (see below for details). When given a revset, they use the
last revision of the revset. A few commands accept two single revisions
(like \fBhg diff\fP). When given a revset, they use the first and the last
revisions of the revset.
.SS Specifying multiple revisions
.sp
Mercurial supports a functional language for selecting a set of
revisions. Expressions in this language are called revsets.
.sp
The language supports a number of predicates which are joined by infix
operators. Parenthesis can be used for grouping.
.sp
Identifiers such as branch names may need quoting with single or
double quotes if they contain characters like \fB\-\fP or if they match
one of the predefined predicates.
.sp
Special characters can be used in quoted identifiers by escaping them,
e.g., \fB\en\fP is interpreted as a newline. To prevent them from being
interpreted, strings can be prefixed with \fBr\fP, e.g. \fBr\(aq...\(aq\fP.
.SS Operators
.sp
There is a single prefix operator:
.INDENT 0.0
.TP
.B \fBnot x\fP
.sp
Changesets not in x. Short form is \fB! x\fP.
.UNINDENT
.sp
These are the supported infix operators:
.INDENT 0.0
.TP
.B \fBx::y\fP
.sp
A DAG range, meaning all changesets that are descendants of x and
ancestors of y, including x and y themselves. If the first endpoint
is left out, this is equivalent to \fBancestors(y)\fP, if the second
is left out it is equivalent to \fBdescendants(x)\fP.
.sp
An alternative syntax is \fBx..y\fP.
.TP
.B \fBx:y\fP
.sp
All changesets with revision numbers between x and y, both
inclusive. Either endpoint can be left out, they default to 0 and
tip.
.TP
.B \fBx and y\fP
.sp
The intersection of changesets in x and y. Short form is \fBx & y\fP.
.TP
.B \fBx or y\fP
.sp
The union of changesets in x and y. There are two alternative short
forms: \fBx | y\fP and \fBx + y\fP.
.TP
.B \fBx \- y\fP
.sp
Changesets in x but not in y.
.TP
.B \fBx % y\fP
.sp
Changesets that are ancestors of x but not ancestors of y (i.e. ::x \- ::y).
This is shorthand notation for \fBonly(x, y)\fP (see below). The second
argument is optional and, if left out, is equivalent to \fBonly(x)\fP.
.TP
.B \fBx^n\fP
.sp
The nth parent of x, n == 0, 1, or 2.
For n == 0, x; for n == 1, the first parent of each changeset in x;
for n == 2, the second parent of changeset in x.
.TP
.B \fBx~n\fP
.sp
The nth first ancestor of x; \fBx~0\fP is x; \fBx~3\fP is \fBx^^^\fP.
For n < 0, the nth unambiguous descendent of x.
.TP
.B \fBx ## y\fP
.sp
Concatenate strings and identifiers into one string.
.sp
All other prefix, infix and postfix operators have lower priority than
\fB##\fP. For example, \fBa1 ## a2~2\fP is equivalent to \fB(a1 ## a2)~2\fP.
.sp
For example:
.sp
.nf
.ft C
[revsetalias]
issue(a1) = grep(r\(aq\ebissue[ :]?\(aq ## a1 ## r\(aq\eb|\ebbug\e(\(aq ## a1 ## r\(aq\e)\(aq)
.ft P
.fi
.sp
\fBissue(1234)\fP is equivalent to
\fBgrep(r\(aq\ebissue[ :]?1234\eb|\ebbug\e(1234\e)\(aq)\fP
in this case. This matches against all of "issue 1234", "issue:1234",
"issue1234" and "bug(1234)".
.UNINDENT
.sp
There is a single postfix operator:
.INDENT 0.0
.TP
.B \fBx^\fP
.sp
Equivalent to \fBx^1\fP, the first parent of each changeset in x.
.UNINDENT
.SS Patterns
.sp
Where noted, predicates that perform string matching can accept a pattern
string. The pattern may be either a literal, or a regular expression. If the
pattern starts with \fBre:\fP, the remainder of the pattern is treated as a
regular expression. Otherwise, it is treated as a literal. To match a pattern
that actually starts with \fBre:\fP, use the prefix \fBliteral:\fP.
.sp
Matching is case\-sensitive, unless otherwise noted.  To perform a case\-
insensitive match on a case\-sensitive predicate, use a regular expression,
prefixed with \fB(?i)\fP.
.sp
For example, \fBtag(r\(aqre:(?i)release\(aq)\fP matches "release" or "RELEASE"
or "Release", etc
.SS Predicates
.sp
The following predicates are supported:
.INDENT 0.0
.TP
.B \fBadds(pattern)\fP
.sp
Changesets that add a file matching pattern.
.sp
The pattern without explicit kind like \fBglob:\fP is expected to be
relative to the current directory and match against a file or a
directory.
.TP
.B \fBall()\fP
.sp
All changesets, the same as \fB0:tip\fP.
.TP
.B \fBancestor(*changeset)\fP
.sp
A greatest common ancestor of the changesets.
.sp
Accepts 0 or more changesets.
Will return empty list when passed no args.
Greatest common ancestor of a single changeset is that changeset.
.TP
.B \fBancestors(set[, depth])\fP
.sp
Changesets that are ancestors of changesets in set, including the
given changesets themselves.
.sp
If depth is specified, the result only includes changesets up to
the specified generation.
.TP
.B \fBauthor(string)\fP
.sp
Alias for \fBuser(string)\fP.
.TP
.B \fBbisect(string)\fP
.sp
Changesets marked in the specified bisect status:
.INDENT 7.0
.IP \(bu 2
.
\fBgood\fP, \fBbad\fP, \fBskip\fP: csets explicitly marked as good/bad/skip
.IP \(bu 2
.
\fBgoods\fP, \fBbads\fP      : csets topologically good/bad
.IP \(bu 2
.
\fBrange\fP              : csets taking part in the bisection
.IP \(bu 2
.
\fBpruned\fP             : csets that are goods, bads or skipped
.IP \(bu 2
.
\fBuntested\fP           : csets whose fate is yet unknown
.IP \(bu 2
.
\fBignored\fP            : csets ignored due to DAG topology
.IP \(bu 2
.
\fBcurrent\fP            : the cset currently being bisected
.UNINDENT
.TP
.B \fBbookmark([name])\fP
.sp
The named bookmark or all bookmarks.
.sp
Pattern matching is supported for \fIname\fP. See \%\fBhg help revisions.patterns\fP\:.
.TP
.B \fBbranch(string or set)\fP
.sp
All changesets belonging to the given branch or the branches of the given
changesets.
.sp
Pattern matching is supported for \fIstring\fP. See
\%\fBhg help revisions.patterns\fP\:.
.TP
.B \fBbranchpoint()\fP
.sp
Changesets with more than one child.
.TP
.B \fBbumped()\fP
.sp
Mutable changesets marked as successors of public changesets.
.sp
Only non\-public and non\-obsolete changesets can be \fIbumped\fP.
.TP
.B \fBbundle()\fP
.sp
Changesets in the bundle.
.sp
Bundle must be specified by the \-R option.
.TP
.B \fBchildren(set)\fP
.sp
Child changesets of changesets in set.
.TP
.B \fBclosed()\fP
.sp
Changeset is closed.
.TP
.B \fBcontains(pattern)\fP
.sp
The revision\(aqs manifest contains a file matching pattern (but might not
modify it). See \%\fBhg help patterns\fP\: for information about file patterns.
.sp
The pattern without explicit kind like \fBglob:\fP is expected to be
relative to the current directory and match against a file exactly
for efficiency.
.TP
.B \fBconverted([id])\fP
.sp
Changesets converted from the given identifier in the old repository if
present, or all converted changesets if no identifier is specified.
.TP
.B \fBdate(interval)\fP
.sp
Changesets within the interval, see \%\fBhg help dates\fP\:.
.TP
.B \fBdesc(string)\fP
.sp
Search commit message for string. The match is case\-insensitive.
.sp
Pattern matching is supported for \fIstring\fP. See
\%\fBhg help revisions.patterns\fP\:.
.TP
.B \fBdescendants(set[, depth])\fP
.sp
Changesets which are descendants of changesets in set, including the
given changesets themselves.
.sp
If depth is specified, the result only includes changesets up to
the specified generation.
.TP
.B \fBdestination([set])\fP
.sp
Changesets that were created by a graft, transplant or rebase operation,
with the given revisions specified as the source.  Omitting the optional set
is the same as passing all().
.TP
.B \fBdivergent()\fP
.sp
Final successors of changesets with an alternative set of final successors.
.TP
.B \fBdraft()\fP
.sp
Changeset in draft phase.
.TP
.B \fBextinct()\fP
.sp
Obsolete changesets with obsolete descendants only.
.TP
.B \fBextra(label, [value])\fP
.sp
Changesets with the given label in the extra metadata, with the given
optional value.
.sp
Pattern matching is supported for \fIvalue\fP. See
\%\fBhg help revisions.patterns\fP\:.
.TP
.B \fBfile(pattern)\fP
.sp
Changesets affecting files matched by pattern.
.sp
For a faster but less accurate result, consider using \fBfilelog()\fP
instead.
.sp
This predicate uses \fBglob:\fP as the default kind of pattern.
.TP
.B \fBfilelog(pattern)\fP
.sp
Changesets connected to the specified filelog.
.sp
For performance reasons, visits only revisions mentioned in the file\-level
filelog, rather than filtering through all changesets (much faster, but
doesn\(aqt include deletes or duplicate changes). For a slower, more accurate
result, use \fBfile()\fP.
.sp
The pattern without explicit kind like \fBglob:\fP is expected to be
relative to the current directory and match against a file exactly
for efficiency.
.sp
If some linkrev points to revisions filtered by the current repoview, we\(aqll
work around it to return a non\-filtered value.
.TP
.B \fBfirst(set, [n])\fP
.sp
An alias for limit().
.TP
.B \fBfollow([pattern[, startrev]])\fP
.sp
An alias for \fB::.\fP (ancestors of the working directory\(aqs first parent).
If pattern is specified, the histories of files matching given
pattern in the revision given by startrev are followed, including copies.
.TP
.B \fBfollowlines(file, fromline:toline[, startrev=., descend=False])\fP
.sp
Changesets modifying \fIfile\fP in line range (\(aqfromline\(aq, \(aqtoline\(aq).
.sp
Line range corresponds to \(aqfile\(aq content at \(aqstartrev\(aq and should hence be
consistent with file size. If startrev is not specified, working directory\(aqs
parent is used.
.sp
By default, ancestors of \(aqstartrev\(aq are returned. If \(aqdescend\(aq is True,
descendants of \(aqstartrev\(aq are returned though renames are (currently) not
followed in this direction.
.TP
.B \fBgrep(regex)\fP
.sp
Like \fBkeyword(string)\fP but accepts a regex. Use \fBgrep(r\(aq...\(aq)\fP
to ensure special escape characters are handled correctly. Unlike
\fBkeyword(string)\fP, the match is case\-sensitive.
.TP
.B \fBhead()\fP
.sp
Changeset is a named branch head.
.TP
.B \fBheads(set)\fP
.sp
Members of set with no children in set.
.TP
.B \fBhidden()\fP
.sp
Hidden changesets.
.TP
.B \fBid(string)\fP
.sp
Revision non\-ambiguously specified by the given hex string prefix.
.TP
.B \fBkeyword(string)\fP
.sp
Search commit message, user name, and names of changed files for
string. The match is case\-insensitive.
.sp
For a regular expression or case sensitive search of these fields, use
\fBgrep(regex)\fP.
.TP
.B \fBlast(set, [n])\fP
.sp
Last n members of set, defaulting to 1.
.TP
.B \fBlimit(set[, n[, offset]])\fP
.sp
First n members of set, defaulting to 1, starting from offset.
.TP
.B \fBmatching(revision [, field])\fP
.sp
Changesets in which a given set of fields match the set of fields in the
selected revision or set.
.sp
To match more than one field pass the list of fields to match separated
by spaces (e.g. \fBauthor description\fP).
.sp
Valid fields are most regular revision fields and some special fields.
.sp
Regular revision fields are \fBdescription\fP, \fBauthor\fP, \fBbranch\fP,
\fBdate\fP, \fBfiles\fP, \fBphase\fP, \fBparents\fP, \fBsubstate\fP, \fBuser\fP
and \fBdiff\fP.
Note that \fBauthor\fP and \fBuser\fP are synonyms. \fBdiff\fP refers to the
contents of the revision. Two revisions matching their \fBdiff\fP will
also match their \fBfiles\fP.
.sp
Special fields are \fBsummary\fP and \fBmetadata\fP:
\fBsummary\fP matches the first line of the description.
\fBmetadata\fP is equivalent to matching \fBdescription user date\fP
(i.e. it matches the main metadata fields).
.sp
\fBmetadata\fP is the default field which is used when no fields are
specified. You can match more than one field at a time.
.TP
.B \fBmax(set)\fP
.sp
Changeset with highest revision number in set.
.TP
.B \fBmerge()\fP
.sp
Changeset is a merge changeset.
.TP
.B \fBmin(set)\fP
.sp
Changeset with lowest revision number in set.
.TP
.B \fBmodifies(pattern)\fP
.sp
Changesets modifying files matched by pattern.
.sp
The pattern without explicit kind like \fBglob:\fP is expected to be
relative to the current directory and match against a file or a
directory.
.TP
.B \fBnamed(namespace)\fP
.sp
The changesets in a given namespace.
.sp
Pattern matching is supported for \fInamespace\fP. See
\%\fBhg help revisions.patterns\fP\:.
.TP
.B \fBobsolete()\fP
.sp
Mutable changeset with a newer version.
.TP
.B \fBonly(set, [set])\fP
.sp
Changesets that are ancestors of the first set that are not ancestors
of any other head in the repo. If a second set is specified, the result
is ancestors of the first set that are not ancestors of the second set
(i.e. ::<set1> \- ::<set2>).
.TP
.B \fBorigin([set])\fP
.sp
Changesets that were specified as a source for the grafts, transplants or
rebases that created the given revisions.  Omitting the optional set is the
same as passing all().  If a changeset created by these operations is itself
specified as a source for one of these operations, only the source changeset
for the first operation is selected.
.TP
.B \fBoutgoing([path])\fP
.sp
Changesets not found in the specified destination repository, or the
default push location.
.TP
.B \fBp1([set])\fP
.sp
First parent of changesets in set, or the working directory.
.TP
.B \fBp2([set])\fP
.sp
Second parent of changesets in set, or the working directory.
.TP
.B \fBparents([set])\fP
.sp
The set of all parents for all changesets in set, or the working directory.
.TP
.B \fBpresent(set)\fP
.sp
An empty set, if any revision in set isn\(aqt found; otherwise,
all revisions in set.
.sp
If any of specified revisions is not present in the local repository,
the query is normally aborted. But this predicate allows the query
to continue even in such cases.
.TP
.B \fBpublic()\fP
.sp
Changeset in public phase.
.TP
.B \fBremote([id [,path]])\fP
.sp
Local revision that corresponds to the given identifier in a
remote repository, if present. Here, the \(aq.\(aq identifier is a
synonym for the current local branch.
.TP
.B \fBremoves(pattern)\fP
.sp
Changesets which remove files matching pattern.
.sp
The pattern without explicit kind like \fBglob:\fP is expected to be
relative to the current directory and match against a file or a
directory.
.TP
.B \fBrev(number)\fP
.sp
Revision with the given numeric identifier.
.TP
.B \fBreverse(set)\fP
.sp
Reverse order of set.
.TP
.B \fBroots(set)\fP
.sp
Changesets in set with no parent changeset in set.
.TP
.B \fBsecret()\fP
.sp
Changeset in secret phase.
.TP
.B \fBsort(set[, [\-]key... [, ...]])\fP
.sp
Sort set by keys. The default sort order is ascending, specify a key
as \fB\-key\fP to sort in descending order.
.sp
The keys can be:
.INDENT 7.0
.IP \(bu 2
.
\fBrev\fP for the revision number,
.IP \(bu 2
.
\fBbranch\fP for the branch name,
.IP \(bu 2
.
\fBdesc\fP for the commit message (description),
.IP \(bu 2
.
\fBuser\fP for user name (\fBauthor\fP can be used as an alias),
.IP \(bu 2
.
\fBdate\fP for the commit date
.IP \(bu 2
.
\fBtopo\fP for a reverse topographical sort
.UNINDENT
.sp
The \fBtopo\fP sort order cannot be combined with other sort keys. This sort
takes one optional argument, \fBtopo.firstbranch\fP, which takes a revset that
specifies what topographical branches to prioritize in the sort.
.TP
.B \fBsubrepo([pattern])\fP
.sp
Changesets that add, modify or remove the given subrepo.  If no subrepo
pattern is named, any subrepo changes are returned.
.TP
.B \fBsuccessors(set)\fP
.sp
All successors for set, including the given set themselves
.TP
.B \fBtag([name])\fP
.sp
The specified tag by name, or all tagged revisions if no name is given.
.sp
Pattern matching is supported for \fIname\fP. See
\%\fBhg help revisions.patterns\fP\:.
.TP
.B \fBunstable()\fP
.sp
Non\-obsolete changesets with obsolete ancestors.
.TP
.B \fBuser(string)\fP
.sp
User name contains string. The match is case\-insensitive.
.sp
Pattern matching is supported for \fIstring\fP. See
\%\fBhg help revisions.patterns\fP\:.
.UNINDENT
.SS Aliases
.sp
New predicates (known as "aliases") can be defined, using any combination of
existing predicates or other aliases. An alias definition looks like:
.sp
.nf
.ft C
<alias> = <definition>
.ft P
.fi
.sp
in the \fBrevsetalias\fP section of a Mercurial configuration file. Arguments
of the form \fIa1\fP, \fIa2\fP, etc. are substituted from the alias into the
definition.
.sp
For example,
.sp
.nf
.ft C
[revsetalias]
h = heads()
d(s) = sort(s, date)
rs(s, k) = reverse(sort(s, k))
.ft P
.fi
.sp
defines three aliases, \fBh\fP, \fBd\fP, and \fBrs\fP. \fBrs(0:tip, author)\fP is
exactly equivalent to \fBreverse(sort(0:tip, author))\fP.
.SS Equivalents
.sp
Command line equivalents for \%\fBhg log\fP\::
.sp
.nf
.ft C
\-f    \->  ::.
\-d x  \->  date(x)
\-k x  \->  keyword(x)
\-m    \->  merge()
\-u x  \->  user(x)
\-b x  \->  branch(x)
\-P x  \->  !::x
\-l x  \->  limit(expr, x)
.ft P
.fi
.SS Examples
.sp
Some sample queries:
.INDENT 0.0
.IP \(bu 2
.
Changesets on the default branch:
.sp
.nf
.ft C
hg log \-r "branch(default)"
.ft P
.fi
.IP \(bu 2
.
Changesets on the default branch since tag 1.5 (excluding merges):
.sp
.nf
.ft C
hg log \-r "branch(default) and 1.5:: and not merge()"
.ft P
.fi
.IP \(bu 2
.
Open branch heads:
.sp
.nf
.ft C
hg log \-r "head() and not closed()"
.ft P
.fi
.IP \(bu 2
.
Changesets between tags 1.3 and 1.5 mentioning "bug" that affect
\fBhgext/*\fP:
.sp
.nf
.ft C
hg log \-r "1.3::1.5 and keyword(bug) and file(\(aqhgext/*\(aq)"
.ft P
.fi
.IP \(bu 2
.
Changesets committed in May 2008, sorted by user:
.sp
.nf
.ft C
hg log \-r "sort(date(\(aqMay 2008\(aq), user)"
.ft P
.fi
.IP \(bu 2
.
Changesets mentioning "bug" or "issue" that are not in a tagged
release:
.sp
.nf
.ft C
hg log \-r "(keyword(bug) or keyword(issue)) and not ancestors(tag())"
.ft P
.fi
.IP \(bu 2
.
Update to commit that bookmark @ is pointing too, without activating the
bookmark (this works because the last revision of the revset is used):
.sp
.nf
.ft C
hg update :@
.ft P
.fi
.IP \(bu 2
.
Show diff between tags 1.3 and 1.5 (this works because the first and the
last revisions of the revset are used):
.sp
.nf
.ft C
hg diff \-r 1.3::1.5
.ft P
.fi
.UNINDENT
.SH USING MERCURIAL FROM SCRIPTS AND AUTOMATION
.sp
It is common for machines (as opposed to humans) to consume Mercurial.
This help topic describes some of the considerations for interfacing
machines with Mercurial.
.SS Choosing an Interface
.sp
Machines have a choice of several methods to interface with Mercurial.
These include:
.INDENT 0.0
.IP \(bu 2
.
Executing the \fBhg\fP process
.IP \(bu 2
.
Querying a HTTP server
.IP \(bu 2
.
Calling out to a command server
.UNINDENT
.sp
Executing \fBhg\fP processes is very similar to how humans interact with
Mercurial in the shell. It should already be familiar to you.
.sp
\%\fBhg serve\fP\: can be used to start a server. By default, this will start
a "hgweb" HTTP server. This HTTP server has support for machine\-readable
output, such as JSON. For more, see \%\fBhg help hgweb\fP\:.
.sp
\%\fBhg serve\fP\: can also start a "command server." Clients can connect
to this server and issue Mercurial commands over a special protocol.
For more details on the command server, including links to client
libraries, see \%https://www.mercurial\-scm.org/wiki/CommandServer\:.
.sp
\%\fBhg serve\fP\: based interfaces (the hgweb and command servers) have the
advantage over simple \fBhg\fP process invocations in that they are
likely more efficient. This is because there is significant overhead
to spawn new Python processes.
.IP Tip
.
If you need to invoke several \fBhg\fP processes in short order and/or
performance is important to you, use of a server\-based interface
is highly recommended.
.RE
.SS Environment Variables
.sp
As documented in \%\fBhg help environment\fP\:, various environment variables
influence the operation of Mercurial. The following are particularly
relevant for machines consuming Mercurial:
.INDENT 0.0
.TP
.B HGPLAIN
.
If not set, Mercurial\(aqs output could be influenced by configuration
settings that impact its encoding, verbose mode, localization, etc.
.sp
It is highly recommended for machines to set this variable when
invoking \fBhg\fP processes.
.TP
.B HGENCODING
.
If not set, the locale used by Mercurial will be detected from the
environment. If the determined locale does not support display of
certain characters, Mercurial may render these character sequences
incorrectly (often by using "?" as a placeholder for invalid
characters in the current locale).
.sp
Explicitly setting this environment variable is a good practice to
guarantee consistent results. "utf\-8" is a good choice on UNIX\-like
environments.
.TP
.B HGRCPATH
.
If not set, Mercurial will inherit config options from config files
using the process described in \%\fBhg help config\fP\:. This includes
inheriting user or system\-wide config files.
.sp
When utmost control over the Mercurial configuration is desired, the
value of \fBHGRCPATH\fP can be set to an explicit file with known good
configs. In rare cases, the value can be set to an empty file or the
null device (often \fB/dev/null\fP) to bypass loading of any user or
system config files. Note that these approaches can have unintended
consequences, as the user and system config files often define things
like the username and extensions that may be required to interface
with a repository.
.UNINDENT
.SS Consuming Command Output
.sp
It is common for machines to need to parse the output of Mercurial
commands for relevant data. This section describes the various
techniques for doing so.
.SS Parsing Raw Command Output
.sp
Likely the simplest and most effective solution for consuming command
output is to simply invoke \fBhg\fP commands as you would as a user and
parse their output.
.sp
The output of many commands can easily be parsed with tools like
\fBgrep\fP, \fBsed\fP, and \fBawk\fP.
.sp
A potential downside with parsing command output is that the output
of commands can change when Mercurial is upgraded. While Mercurial
does generally strive for strong backwards compatibility, command
output does occasionally change. Having tests for your automated
interactions with \fBhg\fP commands is generally recommended, but is
even more important when raw command output parsing is involved.
.SS Using Templates to Control Output
.sp
Many \fBhg\fP commands support templatized output via the
\fB\-T/\-\-template\fP argument. For more, see \%\fBhg help templates\fP\:.
.sp
Templates are useful for explicitly controlling output so that
you get exactly the data you want formatted how you want it. For
example, \fBlog \-T {node}\en\fP can be used to print a newline
delimited list of changeset nodes instead of a human\-tailored
output containing authors, dates, descriptions, etc.
.IP Tip
.
If parsing raw command output is too complicated, consider
using templates to make your life easier.
.RE
.sp
The \fB\-T/\-\-template\fP argument allows specifying pre\-defined styles.
Mercurial ships with the machine\-readable styles \fBjson\fP and \fBxml\fP,
which provide JSON and XML output, respectively. These are useful for
producing output that is machine readable as\-is.
.IP Important
.
The \fBjson\fP and \fBxml\fP styles are considered experimental. While
they may be attractive to use for easily obtaining machine\-readable
output, their behavior may change in subsequent versions.
.sp
These styles may also exhibit unexpected results when dealing with
certain encodings. Mercurial treats things like filenames as a
series of bytes and normalizing certain byte sequences to JSON
or XML with certain encoding settings can lead to surprises.
.RE
.SS Command Server Output
.sp
If using the command server to interact with Mercurial, you are likely
using an existing library/API that abstracts implementation details of
the command server. If so, this interface layer may perform parsing for
you, saving you the work of implementing it yourself.
.SS Output Verbosity
.sp
Commands often have varying output verbosity, even when machine
readable styles are being used (e.g. \fB\-T json\fP). Adding
\fB\-v/\-\-verbose\fP and \fB\-\-debug\fP to the command\(aqs arguments can
increase the amount of data exposed by Mercurial.
.sp
An alternate way to get the data you need is by explicitly specifying
a template.
.SS Other Topics
.INDENT 0.0
.TP
.B revsets
.
Revisions sets is a functional query language for selecting a set
of revisions. Think of it as SQL for Mercurial repositories. Revsets
are useful for querying repositories for specific data.
.sp
See \%\fBhg help revsets\fP\: for more.
.TP
.B share extension
.
The \fBshare\fP extension provides functionality for sharing
repository data across several working copies. It can even
automatically "pool" storage for logically related repositories when
cloning.
.sp
Configuring the \fBshare\fP extension can lead to significant resource
utilization reduction, particularly around disk space and the
network. This is especially true for continuous integration (CI)
environments.
.sp
See \%\fBhg help \-e share\fP\: for more.
.UNINDENT
.SH SUBREPOSITORIES
.sp
Subrepositories let you nest external repositories or projects into a
parent Mercurial repository, and make commands operate on them as a
group.
.sp
Mercurial currently supports Mercurial, Git, and Subversion
subrepositories.
.sp
Subrepositories are made of three components:
.INDENT 0.0
.IP 1. 3
.
Nested repository checkouts. They can appear anywhere in the
parent working directory.
.IP 2. 3
.
Nested repository references. They are defined in \fB.hgsub\fP, which
should be placed in the root of working directory, and
tell where the subrepository checkouts come from. Mercurial
subrepositories are referenced like:
.sp
.nf
.ft C
path/to/nested = https://example.com/nested/repo/path
.ft P
.fi
.sp
Git and Subversion subrepos are also supported:
.sp
.nf
.ft C
path/to/nested = [git]git://example.com/nested/repo/path
path/to/nested = [svn]https://example.com/nested/trunk/path
.ft P
.fi
.sp
where \fBpath/to/nested\fP is the checkout location relatively to the
parent Mercurial root, and \fBhttps://example.com/nested/repo/path\fP
is the source repository path. The source can also reference a
filesystem path.
.sp
Note that \fB.hgsub\fP does not exist by default in Mercurial
repositories, you have to create and add it to the parent
repository before using subrepositories.
.IP 3. 3
.
Nested repository states. They are defined in \fB.hgsubstate\fP, which
is placed in the root of working directory, and
capture whatever information is required to restore the
subrepositories to the state they were committed in a parent
repository changeset. Mercurial automatically record the nested
repositories states when committing in the parent repository.
.IP Note
.
The \fB.hgsubstate\fP file should not be edited manually.
.RE
.UNINDENT
.SS Adding a Subrepository
.sp
If \fB.hgsub\fP does not exist, create it and add it to the parent
repository. Clone or checkout the external projects where you want it
to live in the parent repository. Edit \fB.hgsub\fP and add the
subrepository entry as described above. At this point, the
subrepository is tracked and the next commit will record its state in
\fB.hgsubstate\fP and bind it to the committed changeset.
.SS Synchronizing a Subrepository
.sp
Subrepos do not automatically track the latest changeset of their
sources. Instead, they are updated to the changeset that corresponds
with the changeset checked out in the top\-level changeset. This is so
developers always get a consistent set of compatible code and
libraries when they update.
.sp
Thus, updating subrepos is a manual process. Simply check out target
subrepo at the desired revision, test in the top\-level repo, then
commit in the parent repository to record the new combination.
.SS Deleting a Subrepository
.sp
To remove a subrepository from the parent repository, delete its
reference from \fB.hgsub\fP, then remove its files.
.SS Interaction with Mercurial Commands
.INDENT 0.0
.TP
.B add
.
add does not recurse in subrepos unless \-S/\-\-subrepos is
specified.  However, if you specify the full path of a file in a
subrepo, it will be added even without \-S/\-\-subrepos specified.
Subversion subrepositories are currently silently
ignored.
.TP
.B addremove
.
addremove does not recurse into subrepos unless
\-S/\-\-subrepos is specified.  However, if you specify the full
path of a directory in a subrepo, addremove will be performed on
it even without \-S/\-\-subrepos being specified.  Git and
Subversion subrepositories will print a warning and continue.
.TP
.B archive
.
archive does not recurse in subrepositories unless
\-S/\-\-subrepos is specified.
.TP
.B cat
.
cat currently only handles exact file matches in subrepos.
Subversion subrepositories are currently ignored.
.TP
.B commit
.
commit creates a consistent snapshot of the state of the
entire project and its subrepositories. If any subrepositories
have been modified, Mercurial will abort.  Mercurial can be made
to instead commit all modified subrepositories by specifying
\-S/\-\-subrepos, or setting "ui.commitsubrepos=True" in a
configuration file (see \%\fBhg help config\fP\:).  After there are no
longer any modified subrepositories, it records their state and
finally commits it in the parent repository.  The \-\-addremove
option also honors the \-S/\-\-subrepos option.  However, Git and
Subversion subrepositories will print a warning and abort.
.TP
.B diff
.
diff does not recurse in subrepos unless \-S/\-\-subrepos is
specified. Changes are displayed as usual, on the subrepositories
elements. Subversion subrepositories are currently silently ignored.
.TP
.B files
.
files does not recurse into subrepos unless \-S/\-\-subrepos is
specified.  However, if you specify the full path of a file or
directory in a subrepo, it will be displayed even without
\-S/\-\-subrepos being specified.  Git and Subversion subrepositories
are currently silently ignored.
.TP
.B forget
.
forget currently only handles exact file matches in subrepos.
Git and Subversion subrepositories are currently silently ignored.
.TP
.B incoming
.
incoming does not recurse in subrepos unless \-S/\-\-subrepos
is specified. Git and Subversion subrepositories are currently
silently ignored.
.TP
.B outgoing
.
outgoing does not recurse in subrepos unless \-S/\-\-subrepos
is specified. Git and Subversion subrepositories are currently
silently ignored.
.TP
.B pull
.
pull is not recursive since it is not clear what to pull prior
to running \%\fBhg update\fP\:. Listing and retrieving all
subrepositories changes referenced by the parent repository pulled
changesets is expensive at best, impossible in the Subversion
case.
.TP
.B push
.
Mercurial will automatically push all subrepositories first
when the parent repository is being pushed. This ensures new
subrepository changes are available when referenced by top\-level
repositories.  Push is a no\-op for Subversion subrepositories.
.TP
.B serve
.
serve does not recurse into subrepositories unless
\-S/\-\-subrepos is specified.  Git and Subversion subrepositories
are currently silently ignored.
.TP
.B status
.
status does not recurse into subrepositories unless
\-S/\-\-subrepos is specified. Subrepository changes are displayed as
regular Mercurial changes on the subrepository
elements. Subversion subrepositories are currently silently
ignored.
.TP
.B remove
.
remove does not recurse into subrepositories unless
\-S/\-\-subrepos is specified.  However, if you specify a file or
directory path in a subrepo, it will be removed even without
\-S/\-\-subrepos.  Git and Subversion subrepositories are currently
silently ignored.
.TP
.B update
.
update restores the subrepos in the state they were
originally committed in target changeset. If the recorded
changeset is not available in the current subrepository, Mercurial
will pull it in first before updating.  This means that updating
can require network access when using subrepositories.
.UNINDENT
.SS Remapping Subrepositories Sources
.sp
A subrepository source location may change during a project life,
invalidating references stored in the parent repository history. To
fix this, rewriting rules can be defined in parent repository \fBhgrc\fP
file or in Mercurial configuration. See the \fB[subpaths]\fP section in
hgrc(5) for more details.
.SH TEMPLATE USAGE
.sp
Mercurial allows you to customize output of commands through
templates. You can either pass in a template or select an existing
template\-style from the command line, via the \-\-template option.
.sp
You can customize output for any "log\-like" command: log,
outgoing, incoming, tip, parents, and heads.
.sp
Some built\-in styles are packaged with Mercurial. These can be listed
with \%\fBhg log \-\-template list\fP\:. Example usage:
.sp
.nf
.ft C
$ hg log \-r1.0::1.1 \-\-template changelog
.ft P
.fi
.sp
A template is a piece of text, with markup to invoke variable
expansion:
.sp
.nf
.ft C
$ hg log \-r1 \-\-template "{node}\en"
b56ce7b07c52de7d5fd79fb89701ea538af65746
.ft P
.fi
.SS Keywords
.sp
Strings in curly braces are called keywords. The availability of
keywords depends on the exact context of the templater. These
keywords are usually available for templating a log\-like command:
.INDENT 0.0
.TP
.B activebookmark
.
String. The active bookmark, if it is
associated with the changeset
.TP
.B author
.
String. The unmodified author of the changeset.
.TP
.B bisect
.
String. The changeset bisection status.
.TP
.B bookmarks
.
List of strings. Any bookmarks associated with the
changeset. Also sets \(aqactive\(aq, the name of the active bookmark.
.TP
.B branch
.
String. The name of the branch on which the changeset was
committed.
.TP
.B changessincelatesttag
.
Integer. All ancestors not in the latest tag.
.TP
.B children
.
List of strings. The children of the changeset.
.TP
.B date
.
Date information. The date when the changeset was committed.
.TP
.B desc
.
String. The text of the changeset description.
.TP
.B diffstat
.
String. Statistics of changes with the following format:
"modified files: +added/\-removed lines"
.TP
.B extras
.
List of dicts with key, value entries of the \(aqextras\(aq
field of this changeset.
.TP
.B file_adds
.
List of strings. Files added by this changeset.
.TP
.B file_copies
.
List of strings. Files copied in this changeset with
their sources.
.TP
.B file_copies_switch
.
List of strings. Like "file_copies" but displayed
only if the \-\-copied switch is set.
.TP
.B file_dels
.
List of strings. Files removed by this changeset.
.TP
.B file_mods
.
List of strings. Files modified by this changeset.
.TP
.B files
.
List of strings. All files modified, added, or removed by this
changeset.
.TP
.B graphnode
.
String. The character representing the changeset node in
an ASCII revision graph
.TP
.B index
.
Integer. The current iteration of the loop. (0 indexed)
.TP
.B latesttag
.
List of strings. The global tags on the most recent globally
tagged ancestor of this changeset.  If no such tags exist, the list
consists of the single string "null".
.TP
.B latesttagdistance
.
Integer. Longest path to the latest tag.
.TP
.B namespaces
.
Dict of lists. Names attached to this changeset per
namespace.
.TP
.B node
.
String. The changeset identification hash, as a 40 hexadecimal
digit string.
.TP
.B obsolete
.
String. Whether the changeset is obsolete.
.TP
.B p1node
.
String. The identification hash of the changeset\(aqs first parent,
as a 40 digit hexadecimal string. If the changeset has no parents, all
digits are 0.
.TP
.B p1rev
.
Integer. The repository\-local revision number of the changeset\(aqs
first parent, or \-1 if the changeset has no parents.
.TP
.B p2node
.
String. The identification hash of the changeset\(aqs second
parent, as a 40 digit hexadecimal string. If the changeset has no second
parent, all digits are 0.
.TP
.B p2rev
.
Integer. The repository\-local revision number of the changeset\(aqs
second parent, or \-1 if the changeset has no second parent.
.TP
.B parents
.
List of strings. The parents of the changeset in "rev:node"
format. If the changeset has only one "natural" parent (the predecessor
revision) nothing is shown.
.TP
.B phase
.
String. The changeset phase name.
.TP
.B phaseidx
.
Integer. The changeset phase index.
.TP
.B predecessors
.
Returns the list if the closest visible successors
.TP
.B rev
.
Integer. The repository\-local changeset revision number.
.TP
.B subrepos
.
List of strings. Updated subrepositories in the changeset.
.TP
.B successorssets
.
Returns a string of sets of successors for a changectx
.sp
Format used is: [ctx1, ctx2], [ctx3] if ctx has been splitted into ctx1 and
ctx2 while also diverged into ctx3
.TP
.B tags
.
List of strings. Any tags associated with the changeset.
.TP
.B termwidth
.
Integer. The width of the current terminal.
.UNINDENT
.sp
The "date" keyword does not produce human\-readable output. If you
want to use a date in your output, you can use a filter to process
it. Filters are functions which return a string based on the input
variable. Be sure to use the stringify filter first when you\(aqre
applying a string\-input filter to a list\-like input variable.
You can also use a chain of filters to get the desired output:
.sp
.nf
.ft C
$ hg tip \-\-template "{date|isodate}\en"
2008\-08\-21 18:22 +0000
.ft P
.fi
.SS Filters
.sp
List of filters:
.INDENT 0.0
.TP
.B addbreaks
.
Any text. Add an XHTML "<br />" tag before the end of
every line except the last.
.TP
.B age
.
Date. Returns a human\-readable date/time difference between the
given date/time and the current date/time.
.TP
.B basename
.
Any text. Treats the text as a path, and returns the last
component of the path after splitting by the path separator
(ignoring trailing separators). For example, "foo/bar/baz" becomes
"baz" and "foo/bar//" becomes "bar".
.TP
.B count
.
List or text. Returns the length as an integer.
.TP
.B domain
.
Any text. Finds the first string that looks like an email
address, and extracts just the domain component. Example: \fBUser
<user@example.com>\fP becomes \fBexample.com\fP.
.TP
.B email
.
Any text. Extracts the first string that looks like an email
address. Example: \fBUser <user@example.com>\fP becomes
\fBuser@example.com\fP.
.TP
.B emailuser
.
Any text. Returns the user portion of an email address.
.TP
.B escape
.
Any text. Replaces the special XML/XHTML characters "&", "<"
and ">" with XML entities, and filters out NUL characters.
.TP
.B fill68
.
Any text. Wraps the text to fit in 68 columns.
.TP
.B fill76
.
Any text. Wraps the text to fit in 76 columns.
.TP
.B firstline
.
Any text. Returns the first line of text.
.TP
.B hex
.
Any text. Convert a binary Mercurial node identifier into
its long hexadecimal representation.
.TP
.B hgdate
.
Date. Returns the date as a pair of numbers: "1157407993
25200" (Unix timestamp, timezone offset).
.TP
.B isodate
.
Date. Returns the date in ISO 8601 format: "2009\-08\-18 13:00
+0200".
.TP
.B isodatesec
.
Date. Returns the date in ISO 8601 format, including
seconds: "2009\-08\-18 13:00:13 +0200". See also the rfc3339date
filter.
.TP
.B lower
.
Any text. Converts the text to lowercase.
.TP
.B nonempty
.
Any text. Returns \(aq(none)\(aq if the string is empty.
.TP
.B obfuscate
.
Any text. Returns the input text rendered as a sequence of
XML entities.
.TP
.B person
.
Any text. Returns the name before an email address,
interpreting it as per RFC 5322.
.TP
.B revescape
.
Any text. Escapes all "special" characters, except @.
Forward slashes are escaped twice to prevent web servers from prematurely
unescaping them. For example, "@foo bar/baz" becomes "@foo%20bar%252Fbaz".
.TP
.B rfc3339date
.
Date. Returns a date using the Internet date format
specified in RFC 3339: "2009\-08\-18T13:00:13+02:00".
.TP
.B rfc822date
.
Date. Returns a date using the same format used in email
headers: "Tue, 18 Aug 2009 13:00:13 +0200".
.TP
.B short
.
Changeset hash. Returns the short form of a changeset hash,
i.e. a 12 hexadecimal digit string.
.TP
.B shortbisect
.
Any text. Treats \fItext\fP as a bisection status, and
returns a single\-character representing the status (G: good, B: bad,
S: skipped, U: untested, I: ignored). Returns single space if \fItext\fP
is not a valid bisection status.
.TP
.B shortdate
.
Date. Returns a date like "2006\-09\-18".
.TP
.B splitlines
.
Any text. Split text into a list of lines.
.TP
.B stringify
.
Any type. Turns the value into text by converting values into
text and concatenating them.
.TP
.B stripdir
.
Treat the text as path and strip a directory level, if
possible. For example, "foo" and "foo/bar" becomes "foo".
.TP
.B tabindent
.
Any text. Returns the text, with every non\-empty line
except the first starting with a tab character.
.TP
.B upper
.
Any text. Converts the text to uppercase.
.TP
.B urlescape
.
Any text. Escapes all "special" characters. For example,
"foo bar" becomes "foo%20bar".
.TP
.B user
.
Any text. Returns a short representation of a user name or email
address.
.TP
.B utf8
.
Any text. Converts from the local character encoding to UTF\-8.
.UNINDENT
.sp
Note that a filter is nothing more than a function call, i.e.
\fBexpr|filter\fP is equivalent to \fBfilter(expr)\fP.
.SS Functions
.sp
In addition to filters, there are some basic built\-in functions:
.INDENT 0.0
.TP
.B date(date[, fmt])
.
Format a date. See \%\fBhg help dates\fP\: for formatting
strings. The default is a Unix date format, including the timezone:
"Mon Sep 04 15:13:13 2006 0700".
.TP
.B dict([[key=]value...])
.
Construct a dict from key\-value pairs. A key may be omitted if
a value expression can provide an unambiguous name.
.TP
.B diff([includepattern [, excludepattern]])
.
Show a diff, optionally
specifying files to include or exclude.
.TP
.B files(pattern)
.
All files of the current changeset matching the pattern. See
\%\fBhg help patterns\fP\:.
.TP
.B fill(text[, width[, initialident[, hangindent]]])
.
Fill many
paragraphs with optional indentation. See the "fill" filter.
.TP
.B get(dict, key)
.
Get an attribute/key from an object. Some keywords
are complex types. This function allows you to obtain the value of an
attribute on these types.
.TP
.B if(expr, then[, else])
.
Conditionally execute based on the result of
an expression.
.TP
.B ifcontains(needle, haystack, then[, else])
.
Conditionally execute based
on whether the item "needle" is in "haystack".
.TP
.B ifeq(expr1, expr2, then[, else])
.
Conditionally execute based on
whether 2 items are equivalent.
.TP
.B indent(text, indentchars[, firstline])
.
Indents all non\-empty lines
with the characters given in the indentchars string. An optional
third parameter will override the indent for the first line only
if present.
.TP
.B join(list, sep)
.
Join items in a list with a delimiter.
.TP
.B label(label, expr)
.
Apply a label to generated content. Content with
a label applied can result in additional post\-processing, such as
automatic colorization.
.TP
.B latesttag([pattern])
.
The global tags matching the given pattern on the
most recent globally tagged ancestor of this changeset.
If no such tags exist, the "{tag}" template resolves to
the string "null".
.TP
.B localdate(date[, tz])
.
Converts a date to the specified timezone.
The default is local date.
.TP
.B mod(a, b)
.
Calculate a mod b such that a / b + a mod b == a
.TP
.B pad(text, width[, fillchar=\(aq \(aq[, left=False]])
.
Pad text with a
fill character.
.TP
.B relpath(path)
.
Convert a repository\-absolute path into a filesystem path relative to
the current working directory.
.TP
.B revset(query[, formatargs...])
.
Execute a revision set query. See
\%\fBhg help revset\fP\:.
.TP
.B rstdoc(text, style)
.
Format reStructuredText.
.TP
.B separate(sep, args)
.
Add a separator between non\-empty arguments.
.TP
.B shortest(node, minlength=4)
.
Obtain the shortest representation of
a node.
.TP
.B startswith(pattern, text)
.
Returns the value from the "text" argument
if it begins with the content from the "pattern" argument.
.TP
.B strip(text[, chars])
.
Strip characters from a string. By default,
strips all leading and trailing whitespace.
.TP
.B sub(pattern, replacement, expression)
.
Perform text substitution
using regular expressions.
.TP
.B word(number, text[, separator])
.
Return the nth word from a string.
.UNINDENT
.SS Operators
.sp
We provide a limited set of infix arithmetic operations on integers:
.sp
.nf
.ft C
+ for addition
\- for subtraction
* for multiplication
/ for floor division (division rounded to integer nearest \-infinity)
.ft P
.fi
.sp
Division fulfills the law x = x / y + mod(x, y).
.sp
Also, for any expression that returns a list, there is a list operator:
.sp
.nf
.ft C
expr % "{template}"
.ft P
.fi
.sp
As seen in the above example, \fB{template}\fP is interpreted as a template.
To prevent it from being interpreted, you can use an escape character \fB\e{\fP
or a raw string prefix, \fBr\(aq...\(aq\fP.
.SS Aliases
.sp
New keywords and functions can be defined in the \fBtemplatealias\fP section of
a Mercurial configuration file:
.sp
.nf
.ft C
<alias> = <definition>
.ft P
.fi
.sp
Arguments of the form \fIa1\fP, \fIa2\fP, etc. are substituted from the alias into
the definition.
.sp
For example,
.sp
.nf
.ft C
[templatealias]
r = rev
rn = "{r}:{node|short}"
leftpad(s, w) = pad(s, w, \(aq \(aq, True)
.ft P
.fi
.sp
defines two symbol aliases, \fBr\fP and \fBrn\fP, and a function alias
\fBleftpad()\fP.
.sp
It\(aqs also possible to specify complete template strings, using the
\fBtemplates\fP section. The syntax used is the general template string syntax.
.sp
For example,
.sp
.nf
.ft C
[templates]
nodedate = "{node|short}: {date(date, "%Y\-%m\-%d")}\en"
.ft P
.fi
.sp
defines a template, \fBnodedate\fP, which can be called like:
.sp
.nf
.ft C
$ hg log \-r . \-Tnodedate
.ft P
.fi
.sp
A template defined in \fBtemplates\fP section can also be referenced from
another template:
.sp
.nf
.ft C
$ hg log \-r . \-T "{rev} {nodedate}"
.ft P
.fi
.sp
but be aware that the keywords cannot be overridden by templates. For example,
a template defined as \fBtemplates.rev\fP cannot be referenced as \fB{rev}\fP.
.sp
A template defined in \fBtemplates\fP section may have sub templates which
are inserted before/after/between items:
.sp
.nf
.ft C
[templates]
myjson = \(aq {dict(rev, node|short)|json}\(aq
myjson:docheader = \(aq\e{\en\(aq
myjson:docfooter = \(aq\en}\en\(aq
myjson:separator = \(aq,\en\(aq
.ft P
.fi
.SS Examples
.sp
Some sample command line templates:
.INDENT 0.0
.IP \(bu 2
.
Format lists, e.g. files:
.sp
.nf
.ft C
$ hg log \-r 0 \-\-template "files:\en{files % \(aq  {file}\en\(aq}"
.ft P
.fi
.IP \(bu 2
.
Join the list of files with a ", ":
.sp
.nf
.ft C
$ hg log \-r 0 \-\-template "files: {join(files, \(aq, \(aq)}\en"
.ft P
.fi
.IP \(bu 2
.
Join the list of files ending with ".py" with a ", ":
.sp
.nf
.ft C
$ hg log \-r 0 \-\-template "pythonfiles: {join(files(\(aq**.py\(aq), \(aq, \(aq)}\en"
.ft P
.fi
.IP \(bu 2
.
Separate non\-empty arguments by a " ":
.sp
.nf
.ft C
$ hg log \-r 0 \-\-template "{separate(\(aq \(aq, node, bookmarks, tags}\en"
.ft P
.fi
.IP \(bu 2
.
Modify each line of a commit description:
.sp
.nf
.ft C
$ hg log \-\-template "{splitlines(desc) % \(aq**** {line}\en\(aq}"
.ft P
.fi
.IP \(bu 2
.
Format date:
.sp
.nf
.ft C
$ hg log \-r 0 \-\-template "{date(date, \(aq%Y\(aq)}\en"
.ft P
.fi
.IP \(bu 2
.
Display date in UTC:
.sp
.nf
.ft C
$ hg log \-r 0 \-\-template "{localdate(date, \(aqUTC\(aq)|date}\en"
.ft P
.fi
.IP \(bu 2
.
Output the description set to a fill\-width of 30:
.sp
.nf
.ft C
$ hg log \-r 0 \-\-template "{fill(desc, 30)}"
.ft P
.fi
.IP \(bu 2
.
Use a conditional to test for the default branch:
.sp
.nf
.ft C
$ hg log \-r 0 \-\-template "{ifeq(branch, \(aqdefault\(aq, \(aqon the main branch\(aq,
\(aqon branch {branch}\(aq)}\en"
.ft P
.fi
.IP \(bu 2
.
Append a newline if not empty:
.sp
.nf
.ft C
$ hg tip \-\-template "{if(author, \(aq{author}\en\(aq)}"
.ft P
.fi
.IP \(bu 2
.
Label the output for use with the color extension:
.sp
.nf
.ft C
$ hg log \-r 0 \-\-template "{label(\(aqchangeset.{phase}\(aq, node|short)}\en"
.ft P
.fi
.IP \(bu 2
.
Invert the firstline filter, i.e. everything but the first line:
.sp
.nf
.ft C
$ hg log \-r 0 \-\-template "{sub(r\(aq^.*\en?\en?\(aq, \(aq\(aq, desc)}\en"
.ft P
.fi
.IP \(bu 2
.
Display the contents of the \(aqextra\(aq field, one per line:
.sp
.nf
.ft C
$ hg log \-r 0 \-\-template "{join(extras, \(aq\en\(aq)}\en"
.ft P
.fi
.IP \(bu 2
.
Mark the active bookmark with \(aq*\(aq:
.sp
.nf
.ft C
$ hg log \-\-template "{bookmarks % \(aq{bookmark}{ifeq(bookmark, active, \(aq*\(aq)} \(aq}\en"
.ft P
.fi
.IP \(bu 2
.
Find the previous release candidate tag, the distance and changes since the tag:
.sp
.nf
.ft C
$ hg log \-r . \-\-template "{latesttag(\(aqre:^.*\-rc$\(aq) % \(aq{tag}, {changes}, {distance}\(aq}\en"
.ft P
.fi
.IP \(bu 2
.
Mark the working copy parent with \(aq@\(aq:
.sp
.nf
.ft C
$ hg log \-\-template "{ifcontains(rev, revset(\(aq.\(aq), \(aq@\(aq)}\en"
.ft P
.fi
.IP \(bu 2
.
Show details of parent revisions:
.sp
.nf
.ft C
$ hg log \-\-template "{revset(\(aqparents(%d)\(aq, rev) % \(aq{desc|firstline}\en\(aq}"
.ft P
.fi
.IP \(bu 2
.
Show only commit descriptions that start with "template":
.sp
.nf
.ft C
$ hg log \-\-template "{startswith(\(aqtemplate\(aq, firstline(desc))}\en"
.ft P
.fi
.IP \(bu 2
.
Print the first word of each line of a commit message:
.sp
.nf
.ft C
$ hg log \-\-template "{word(0, desc)}\en"
.ft P
.fi
.UNINDENT
.SH URL PATHS
.sp
Valid URLs are of the form:
.sp
.nf
.ft C
local/filesystem/path[#revision]
file://local/filesystem/path[#revision]
http://[user[:pass]@]host[:port]/[path][#revision]
https://[user[:pass]@]host[:port]/[path][#revision]
ssh://[user@]host[:port]/[path][#revision]
.ft P
.fi
.sp
Paths in the local filesystem can either point to Mercurial
repositories or to bundle files (as created by \%\fBhg bundle\fP\: or
\%\fBhg incoming \-\-bundle\fP\:). See also \%\fBhg help paths\fP\:.
.sp
An optional identifier after # indicates a particular branch, tag, or
changeset to use from the remote repository. See also \%\fBhg help
revisions\fP\:.
.sp
Some features, such as pushing to \%http://\: and \%https://\: URLs are only
possible if the feature is explicitly enabled on the remote Mercurial
server.
.sp
Note that the security of HTTPS URLs depends on proper configuration of
web.cacerts.
.sp
Some notes about using SSH with Mercurial:
.INDENT 0.0
.IP \(bu 2
.
SSH requires an accessible shell account on the destination machine
and a copy of hg in the remote path or specified with as remotecmd.
.IP \(bu 2
.
path is relative to the remote user\(aqs home directory by default. Use
an extra slash at the start of a path to specify an absolute path:
.sp
.nf
.ft C
ssh://example.com//tmp/repository
.ft P
.fi
.IP \(bu 2
.
Mercurial doesn\(aqt use its own compression via SSH; the right thing
to do is to configure it in your ~/.ssh/config, e.g.:
.sp
.nf
.ft C
Host *.mylocalnetwork.example.com
  Compression no
Host *
  Compression yes
.ft P
.fi
.sp
Alternatively specify "ssh \-C" as your ssh command in your
configuration file or with the \-\-ssh command line option.
.UNINDENT
.sp
These URLs can all be stored in your configuration file with path
aliases under the [paths] section like so:
.sp
.nf
.ft C
[paths]
alias1 = URL1
alias2 = URL2
\&...
.ft P
.fi
.sp
You can then use the alias for any command that uses a URL (for
example \%\fBhg pull alias1\fP\: will be treated as \%\fBhg pull URL1\fP\:).
.sp
Two path aliases are special because they are used as defaults when
you do not provide the URL to a command:
.INDENT 0.0
.TP
.B default:
.
When you create a repository with hg clone, the clone command saves
the location of the source repository as the new repository\(aqs
\(aqdefault\(aq path. This is then used when you omit path from push\- and
pull\-like commands (including incoming and outgoing).
.TP
.B default\-push:
.
The push command will look for a path named \(aqdefault\-push\(aq, and
prefer it over \(aqdefault\(aq if both are defined.
.UNINDENT
.SH EXTENSIONS
.sp
This section contains help for extensions that are distributed together with Mercurial. Help for other extensions is available in the help system.
.SS acl
.sp
hooks for controlling repository access
.sp
This hook makes it possible to allow or deny write access to given
branches and paths of a repository when receiving incoming changesets
via pretxnchangegroup and pretxncommit.
.sp
The authorization is matched based on the local user name on the
system where the hook runs, and not the committer of the original
changeset (since the latter is merely informative).
.sp
The acl hook is best used along with a restricted shell like hgsh,
preventing authenticating users from doing anything other than pushing
or pulling. The hook is not safe to use if users have interactive
shell access, as they can then disable the hook. Nor is it safe if
remote users share an account, because then there is no way to
distinguish them.
.sp
The order in which access checks are performed is:
.INDENT 0.0
.IP 1. 3
.
Deny  list for branches (section \fBacl.deny.branches\fP)
.IP 2. 3
.
Allow list for branches (section \fBacl.allow.branches\fP)
.IP 3. 3
.
Deny  list for paths    (section \fBacl.deny\fP)
.IP 4. 3
.
Allow list for paths    (section \fBacl.allow\fP)
.UNINDENT
.sp
The allow and deny sections take key\-value pairs.
.SS Branch\-based Access Control
.sp
Use the \fBacl.deny.branches\fP and \fBacl.allow.branches\fP sections to
have branch\-based access control. Keys in these sections can be
either:
.INDENT 0.0
.IP \(bu 2
.
a branch name, or
.IP \(bu 2
.
an asterisk, to match any branch;
.UNINDENT
.sp
The corresponding values can be either:
.INDENT 0.0
.IP \(bu 2
.
a comma\-separated list containing users and groups, or
.IP \(bu 2
.
an asterisk, to match anyone;
.UNINDENT
.sp
You can add the "!" prefix to a user or group name to invert the sense
of the match.
.SS Path\-based Access Control
.sp
Use the \fBacl.deny\fP and \fBacl.allow\fP sections to have path\-based
access control. Keys in these sections accept a subtree pattern (with
a glob syntax by default). The corresponding values follow the same
syntax as the other sections above.
.SS Groups
.sp
Group names must be prefixed with an \fB@\fP symbol. Specifying a group
name has the same effect as specifying all the users in that group.
.sp
You can define group members in the \fBacl.groups\fP section.
If a group name is not defined there, and Mercurial is running under
a Unix\-like system, the list of users will be taken from the OS.
Otherwise, an exception will be raised.
.SS Example Configuration
.sp
.nf
.ft C
[hooks]

# Use this if you want to check access restrictions at commit time
pretxncommit.acl = python:hgext.acl.hook

# Use this if you want to check access restrictions for pull, push,
# bundle and serve.
pretxnchangegroup.acl = python:hgext.acl.hook

[acl]
# Allow or deny access for incoming changes only if their source is
# listed here, let them pass otherwise. Source is "serve" for all
# remote access (http or ssh), "push", "pull" or "bundle" when the
# related commands are run locally.
# Default: serve
sources = serve

[acl.deny.branches]

# Everyone is denied to the frozen branch:
frozen\-branch = *

# A bad user is denied on all branches:
* = bad\-user

[acl.allow.branches]

# A few users are allowed on branch\-a:
branch\-a = user\-1, user\-2, user\-3

# Only one user is allowed on branch\-b:
branch\-b = user\-1

# The super user is allowed on any branch:
* = super\-user

# Everyone is allowed on branch\-for\-tests:
branch\-for\-tests = *

[acl.deny]
# This list is checked first. If a match is found, acl.allow is not
# checked. All users are granted access if acl.deny is not present.
# Format for both lists: glob pattern = user, ..., @group, ...

# To match everyone, use an asterisk for the user:
# my/glob/pattern = *

# user6 will not have write access to any file:
** = user6

# Group "hg\-denied" will not have write access to any file:
** = @hg\-denied

# Nobody will be able to change "DONT\-TOUCH\-THIS.txt", despite
# everyone being able to change all other files. See below.
src/main/resources/DONT\-TOUCH\-THIS.txt = *

[acl.allow]
# if acl.allow is not present, all users are allowed by default
# empty acl.allow = no users allowed

# User "doc_writer" has write access to any file under the "docs"
# folder:
docs/** = doc_writer

# User "jack" and group "designers" have write access to any file
# under the "images" folder:
images/** = jack, @designers

# Everyone (except for "user6" and "@hg\-denied" \- see acl.deny above)
# will have write access to any file under the "resources" folder
# (except for 1 file. See acl.deny):
src/main/resources/** = *

\&.hgtags = release_engineer
.ft P
.fi
.SS Examples using the "!" prefix
.sp
Suppose there\(aqs a branch that only a given user (or group) should be able to
push to, and you don\(aqt want to restrict access to any other branch that may
be created.
.sp
The "!" prefix allows you to prevent anyone except a given user or group to
push changesets in a given branch or path.
.sp
In the examples below, we will:
1) Deny access to branch "ring" to anyone but user "gollum"
2) Deny access to branch "lake" to anyone but members of the group "hobbit"
3) Deny access to a file to anyone but user "gollum"
.sp
.nf
.ft C
[acl.allow.branches]
# Empty

[acl.deny.branches]

# 1) only \(aqgollum\(aq can commit to branch \(aqring\(aq;
# \(aqgollum\(aq and anyone else can still commit to any other branch.
ring = !gollum

# 2) only members of the group \(aqhobbit\(aq can commit to branch \(aqlake\(aq;
# \(aqhobbit\(aq members and anyone else can still commit to any other branch.
lake = !@hobbit

# You can also deny access based on file paths:

[acl.allow]
# Empty

[acl.deny]
# 3) only \(aqgollum\(aq can change the file below;
# \(aqgollum\(aq and anyone else can still change any other file.
/misty/mountains/cave/ring = !gollum
.ft P
.fi
.SS amend
.sp
provide the amend command (EXPERIMENTAL)
.sp
This extension provides an \fBamend\fP command that is similar to
\fBcommit \-\-amend\fP but does not prompt an editor.
.SS Commands
.SS amend
.sp
amend the working copy parent with all or specified outstanding changes:
.sp
.nf
.ft C
hg amend [OPTION]... [FILE]...
.ft P
.fi
.sp
Similar to \%\fBhg commit \-\-amend\fP\:, but reuse the commit message without
invoking editor, unless \fB\-\-edit\fP was set.
.sp
See \%\fBhg help commit\fP\: for more details.
.sp
Options:
.INDENT 0.0
.TP
.B \-A,  \-\-addremove
.
mark new/missing files as added/removed before committing
.TP
.B \-e,  \-\-edit
.
invoke editor on commit messages
.TP
.B \-i,  \-\-interactive
.
use interactive mode
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.TP
.BI \-m,  \-\-message \ <TEXT>
.
use text as commit message
.TP
.BI \-l,  \-\-logfile \ <FILE>
.
read commit message from file
.TP
.BI \-d,  \-\-date \ <DATE>
.
record the specified date as commit date
.TP
.BI \-u,  \-\-user \ <USER>
.
record the specified user as committer
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS automv
.sp
check for unrecorded moves at commit time (EXPERIMENTAL)
.sp
This extension checks at commit/amend time if any of the committed files
comes from an unrecorded mv.
.sp
The threshold at which a file is considered a move can be set with the
\fBautomv.similarity\fP config option. This option takes a percentage between 0
(disabled) and 100 (files must be identical), the default is 95.
.SS blackbox
.sp
log repository events to a blackbox for debugging
.sp
Logs event information to .hg/blackbox.log to help debug and diagnose problems.
The events that get logged can be configured via the blackbox.track config key.
.sp
Examples:
.sp
.nf
.ft C
[blackbox]
track = *
# dirty is *EXPENSIVE* (slow);
# each log entry indicates \(ga+\(ga if the repository is dirty, like :hg:\(gaid\(ga.
dirty = True
# record the source of log messages
logsource = True

[blackbox]
track = command, commandfinish, commandexception, exthook, pythonhook

[blackbox]
track = incoming

[blackbox]
# limit the size of a log file
maxsize = 1.5 MB
# rotate up to N log files when the current one gets too big
maxfiles = 3
.ft P
.fi
.SS Commands
.SS blackbox
.sp
view the recent repository events:
.sp
.nf
.ft C
hg blackbox [OPTION]...
.ft P
.fi
.sp
view the recent repository events
.sp
Options:
.INDENT 0.0
.TP
.BI \-l,  \-\-limit \ <VALUE>
.
the number of events to show (default: 10)
.UNINDENT
.SS bugzilla
.sp
hooks for integrating with the Bugzilla bug tracker
.sp
This hook extension adds comments on bugs in Bugzilla when changesets
that refer to bugs by Bugzilla ID are seen. The comment is formatted using
the Mercurial template mechanism.
.sp
The bug references can optionally include an update for Bugzilla of the
hours spent working on the bug. Bugs can also be marked fixed.
.sp
Four basic modes of access to Bugzilla are provided:
.INDENT 0.0
.IP 1. 3
.
Access via the Bugzilla REST\-API. Requires bugzilla 5.0 or later.
.IP 2. 3
.
Access via the Bugzilla XMLRPC interface. Requires Bugzilla 3.4 or later.
.IP 3. 3
.
Check data via the Bugzilla XMLRPC interface and submit bug change
via email to Bugzilla email interface. Requires Bugzilla 3.4 or later.
.IP 4. 3
.
Writing directly to the Bugzilla database. Only Bugzilla installations
using MySQL are supported. Requires Python MySQLdb.
.UNINDENT
.sp
Writing directly to the database is susceptible to schema changes, and
relies on a Bugzilla contrib script to send out bug change
notification emails. This script runs as the user running Mercurial,
must be run on the host with the Bugzilla install, and requires
permission to read Bugzilla configuration details and the necessary
MySQL user and password to have full access rights to the Bugzilla
database. For these reasons this access mode is now considered
deprecated, and will not be updated for new Bugzilla versions going
forward. Only adding comments is supported in this access mode.
.sp
Access via XMLRPC needs a Bugzilla username and password to be specified
in the configuration. Comments are added under that username. Since the
configuration must be readable by all Mercurial users, it is recommended
that the rights of that user are restricted in Bugzilla to the minimum
necessary to add comments. Marking bugs fixed requires Bugzilla 4.0 and later.
.sp
Access via XMLRPC/email uses XMLRPC to query Bugzilla, but sends
email to the Bugzilla email interface to submit comments to bugs.
The From: address in the email is set to the email address of the Mercurial
user, so the comment appears to come from the Mercurial user. In the event
that the Mercurial user email is not recognized by Bugzilla as a Bugzilla
user, the email associated with the Bugzilla username used to log into
Bugzilla is used instead as the source of the comment. Marking bugs fixed
works on all supported Bugzilla versions.
.sp
Access via the REST\-API needs either a Bugzilla username and password
or an apikey specified in the configuration. Comments are made under
the given username or the user associated with the apikey in Bugzilla.
.sp
Configuration items common to all access modes:
.INDENT 0.0
.TP
.B bugzilla.version
.
The access type to use. Values recognized are:
.INDENT 7.0
.TP
.B \fBrestapi\fP
.sp
Bugzilla REST\-API, Bugzilla 5.0 and later.
.TP
.B \fBxmlrpc\fP
.sp
Bugzilla XMLRPC interface.
.TP
.B \fBxmlrpc+email\fP
.sp
Bugzilla XMLRPC and email interfaces.
.TP
.B \fB3.0\fP
.sp
MySQL access, Bugzilla 3.0 and later.
.TP
.B \fB2.18\fP
.sp
MySQL access, Bugzilla 2.18 and up to but not
including 3.0.
.TP
.B \fB2.16\fP
.sp
MySQL access, Bugzilla 2.16 and up to but not
including 2.18.
.UNINDENT
.TP
.B bugzilla.regexp
.
Regular expression to match bug IDs for update in changeset commit message.
It must contain one "()" named group \fB<ids>\fP containing the bug
IDs separated by non\-digit characters. It may also contain
a named group \fB<hours>\fP with a floating\-point number giving the
hours worked on the bug. If no named groups are present, the first
"()" group is assumed to contain the bug IDs, and work time is not
updated. The default expression matches \fBBug 1234\fP, \fBBug no. 1234\fP,
\fBBug number 1234\fP, \fBBugs 1234,5678\fP, \fBBug 1234 and 5678\fP and
variations thereof, followed by an hours number prefixed by \fBh\fP or
\fBhours\fP, e.g. \fBhours 1.5\fP. Matching is case insensitive.
.TP
.B bugzilla.fixregexp
.
Regular expression to match bug IDs for marking fixed in changeset
commit message. This must contain a "()" named group \fB<ids>\(ga containing
the bug IDs separated by non\-digit characters. It may also contain
a named group \(ga\(ga<hours>\fP with a floating\-point number giving the
hours worked on the bug. If no named groups are present, the first
"()" group is assumed to contain the bug IDs, and work time is not
updated. The default expression matches \fBFixes 1234\fP, \fBFixes bug 1234\fP,
\fBFixes bugs 1234,5678\fP, \fBFixes 1234 and 5678\fP and
variations thereof, followed by an hours number prefixed by \fBh\fP or
\fBhours\fP, e.g. \fBhours 1.5\fP. Matching is case insensitive.
.TP
.B bugzilla.fixstatus
.
The status to set a bug to when marking fixed. Default \fBRESOLVED\fP.
.TP
.B bugzilla.fixresolution
.
The resolution to set a bug to when marking fixed. Default \fBFIXED\fP.
.TP
.B bugzilla.style
.
The style file to use when formatting comments.
.TP
.B bugzilla.template
.
Template to use when formatting comments. Overrides style if
specified. In addition to the usual Mercurial keywords, the
extension specifies:
.INDENT 7.0
.TP
.B \fB{bug}\fP
.sp
The Bugzilla bug ID.
.TP
.B \fB{root}\fP
.sp
The full pathname of the Mercurial repository.
.TP
.B \fB{webroot}\fP
.sp
Stripped pathname of the Mercurial repository.
.TP
.B \fB{hgweb}\fP
.sp
Base URL for browsing Mercurial repositories.
.UNINDENT
.sp
Default \fBchangeset {node|short} in repo {root} refers to bug
{bug}.\endetails:\en\et{desc|tabindent}\fP
.TP
.B bugzilla.strip
.
The number of path separator characters to strip from the front of
the Mercurial repository path (\fB{root}\fP in templates) to produce
\fB{webroot}\fP. For example, a repository with \fB{root}\fP
\fB/var/local/my\-project\fP with a strip of 2 gives a value for
\fB{webroot}\fP of \fBmy\-project\fP. Default 0.
.TP
.B web.baseurl
.
Base URL for browsing Mercurial repositories. Referenced from
templates as \fB{hgweb}\fP.
.UNINDENT
.sp
Configuration items common to XMLRPC+email and MySQL access modes:
.INDENT 0.0
.TP
.B bugzilla.usermap
.
Path of file containing Mercurial committer email to Bugzilla user email
mappings. If specified, the file should contain one mapping per
line:
.sp
.nf
.ft C
committer = Bugzilla user
.ft P
.fi
.sp
See also the \fB[usermap]\fP section.
.UNINDENT
.sp
The \fB[usermap]\fP section is used to specify mappings of Mercurial
committer email to Bugzilla user email. See also \fBbugzilla.usermap\fP.
Contains entries of the form \fBcommitter = Bugzilla user\fP.
.sp
XMLRPC and REST\-API access mode configuration:
.INDENT 0.0
.TP
.B bugzilla.bzurl
.
The base URL for the Bugzilla installation.
Default \fBhttp://localhost/bugzilla\fP.
.TP
.B bugzilla.user
.
The username to use to log into Bugzilla via XMLRPC. Default
\fBbugs\fP.
.TP
.B bugzilla.password
.
The password for Bugzilla login.
.UNINDENT
.sp
REST\-API access mode uses the options listed above as well as:
.INDENT 0.0
.TP
.B bugzilla.apikey
.
An apikey generated on the Bugzilla instance for api access.
Using an apikey removes the need to store the user and password
options.
.UNINDENT
.sp
XMLRPC+email access mode uses the XMLRPC access mode configuration items,
and also:
.INDENT 0.0
.TP
.B bugzilla.bzemail
.
The Bugzilla email address.
.UNINDENT
.sp
In addition, the Mercurial email settings must be configured. See the
documentation in hgrc(5), sections \fB[email]\fP and \fB[smtp]\fP.
.sp
MySQL access mode configuration:
.INDENT 0.0
.TP
.B bugzilla.host
.
Hostname of the MySQL server holding the Bugzilla database.
Default \fBlocalhost\fP.
.TP
.B bugzilla.db
.
Name of the Bugzilla database in MySQL. Default \fBbugs\fP.
.TP
.B bugzilla.user
.
Username to use to access MySQL server. Default \fBbugs\fP.
.TP
.B bugzilla.password
.
Password to use to access MySQL server.
.TP
.B bugzilla.timeout
.
Database connection timeout (seconds). Default 5.
.TP
.B bugzilla.bzuser
.
Fallback Bugzilla user name to record comments with, if changeset
committer cannot be found as a Bugzilla user.
.TP
.B bugzilla.bzdir
.
Bugzilla install directory. Used by default notify. Default
\fB/var/www/html/bugzilla\fP.
.TP
.B bugzilla.notify
.
The command to run to get Bugzilla to send bug change notification
emails. Substitutes from a map with 3 keys, \fBbzdir\fP, \fBid\fP (bug
id) and \fBuser\fP (committer bugzilla email). Default depends on
version; from 2.18 it is "cd %(bzdir)s && perl \-T
contrib/sendbugmail.pl %(id)s %(user)s".
.UNINDENT
.sp
Activating the extension:
.sp
.nf
.ft C
[extensions]
bugzilla =

[hooks]
# run bugzilla hook on every change pulled or pushed in here
incoming.bugzilla = python:hgext.bugzilla.hook
.ft P
.fi
.sp
Example configurations:
.sp
XMLRPC example configuration. This uses the Bugzilla at
\fBhttp://my\-project.org/bugzilla\fP, logging in as user
\fBbugmail@my\-project.org\fP with password \fBplugh\fP. It is used with a
collection of Mercurial repositories in \fB/var/local/hg/repos/\fP,
with a web interface at \fBhttp://my\-project.org/hg\fP.
.sp
.nf
.ft C
[bugzilla]
bzurl=http://my\-project.org/bugzilla
user=bugmail@my\-project.org
password=plugh
version=xmlrpc
template=Changeset {node|short} in {root|basename}.
         {hgweb}/{webroot}/rev/{node|short}\en
         {desc}\en
strip=5

[web]
baseurl=http://my\-project.org/hg
.ft P
.fi
.sp
XMLRPC+email example configuration. This uses the Bugzilla at
\fBhttp://my\-project.org/bugzilla\fP, logging in as user
\fBbugmail@my\-project.org\fP with password \fBplugh\fP. It is used with a
collection of Mercurial repositories in \fB/var/local/hg/repos/\fP,
with a web interface at \fBhttp://my\-project.org/hg\fP. Bug comments
are sent to the Bugzilla email address
\fBbugzilla@my\-project.org\fP.
.sp
.nf
.ft C
[bugzilla]
bzurl=http://my\-project.org/bugzilla
user=bugmail@my\-project.org
password=plugh
version=xmlrpc+email
bzemail=bugzilla@my\-project.org
template=Changeset {node|short} in {root|basename}.
         {hgweb}/{webroot}/rev/{node|short}\en
         {desc}\en
strip=5

[web]
baseurl=http://my\-project.org/hg

[usermap]
user@emaildomain.com=user.name@bugzilladomain.com
.ft P
.fi
.sp
MySQL example configuration. This has a local Bugzilla 3.2 installation
in \fB/opt/bugzilla\-3.2\fP. The MySQL database is on \fBlocalhost\fP,
the Bugzilla database name is \fBbugs\fP and MySQL is
accessed with MySQL username \fBbugs\fP password \fBXYZZY\fP. It is used
with a collection of Mercurial repositories in \fB/var/local/hg/repos/\fP,
with a web interface at \fBhttp://my\-project.org/hg\fP.
.sp
.nf
.ft C
[bugzilla]
host=localhost
password=XYZZY
version=3.0
bzuser=unknown@domain.com
bzdir=/opt/bugzilla\-3.2
template=Changeset {node|short} in {root|basename}.
         {hgweb}/{webroot}/rev/{node|short}\en
         {desc}\en
strip=5

[web]
baseurl=http://my\-project.org/hg

[usermap]
user@emaildomain.com=user.name@bugzilladomain.com
.ft P
.fi
.sp
All the above add a comment to the Bugzilla bug record of the form:
.sp
.nf
.ft C
Changeset 3b16791d6642 in repository\-name.
http://my\-project.org/hg/repository\-name/rev/3b16791d6642

Changeset commit comment. Bug 1234.
.ft P
.fi
.SS censor
.sp
erase file content at a given revision
.sp
The censor command instructs Mercurial to erase all content of a file at a given
revision \fIwithout updating the changeset hash.\fP This allows existing history to
remain valid while preventing future clones/pulls from receiving the erased
data.
.sp
Typical uses for censor are due to security or legal requirements, including:
.sp
.nf
.ft C
* Passwords, private keys, cryptographic material
* Licensed data/code/libraries for which the license has expired
* Personally Identifiable Information or other private data
.ft P
.fi
.sp
Censored nodes can interrupt mercurial\(aqs typical operation whenever the excised
data needs to be materialized. Some commands, like \fBhg cat\fP/\fBhg revert\fP,
simply fail when asked to produce censored data. Others, like \fBhg verify\fP and
\fBhg update\fP, must be capable of tolerating censored data to continue to
function in a meaningful way. Such commands only tolerate censored file
revisions if they are allowed by the "censor.policy=ignore" config option.
.SS Commands
.SS censor
.sp
.nf
.ft C
hg censor \-r REV [\-t TEXT] [FILE]
.ft P
.fi
.sp
Options:
.INDENT 0.0
.TP
.BI \-r,  \-\-rev \ <REV>
.
censor file from specified revision
.TP
.BI \-t,  \-\-tombstone \ <TEXT>
.
replacement tombstone data
.UNINDENT
.SS children
.sp
command to display child changesets (DEPRECATED)
.sp
This extension is deprecated. You should use \%\fBhg log \-r
"children(REV)"\fP\: instead.
.SS Commands
.SS children
.sp
show the children of the given or working directory revision:
.sp
.nf
.ft C
hg children [\-r REV] [FILE]
.ft P
.fi
.sp
Print the children of the working directory\(aqs revisions. If a
revision is given via \-r/\-\-rev, the children of that revision will
be printed. If a file argument is given, revision in which the
file was last changed (after the working directory revision or the
argument to \-\-rev if given) is printed.
.sp
Please use \%\fBhg log\fP\: instead:
.sp
.nf
.ft C
hg children => hg log \-r "children()"
hg children \-r REV => hg log \-r "children(REV)"
.ft P
.fi
.sp
See \%\fBhg help log\fP\: and \%\fBhg help revsets.children\fP\:.
.sp
Options:
.INDENT 0.0
.TP
.BI \-r,  \-\-rev \ <REV>
.
show children of the specified revision
.TP
.BI \-\-style \ <STYLE>
.
display using template map file (DEPRECATED)
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template
.UNINDENT
.SS churn
.sp
command to display statistics about repository history
.SS Commands
.SS churn
.sp
histogram of changes to the repository:
.sp
.nf
.ft C
hg churn [\-d DATE] [\-r REV] [\-\-aliases FILE] [FILE]
.ft P
.fi
.sp
This command will display a histogram representing the number
of changed lines or revisions, grouped according to the given
template. The default template will group changes by author.
The \-\-dateformat option may be used to group the results by
date instead.
.sp
Statistics are based on the number of changed lines, or
alternatively the number of matching revisions if the
\-\-changesets option is specified.
.sp
Examples:
.sp
.nf
.ft C
# display count of changed lines for every committer
hg churn \-T "{author|email}"

# display daily activity graph
hg churn \-f "%H" \-s \-c

# display activity of developers by month
hg churn \-f "%Y\-%m" \-s \-c

# display count of lines changed in every year
hg churn \-f "%Y" \-s
.ft P
.fi
.sp
It is possible to map alternate email addresses to a main address
by providing a file using the following format:
.sp
.nf
.ft C
<alias email> = <actual email>
.ft P
.fi
.sp
Such a file may be specified with the \-\-aliases option, otherwise
a .hgchurn file will be looked for in the working directory root.
Aliases will be split from the rightmost "=".
.sp
Options:
.INDENT 0.0
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
count rate for the specified revision or revset
.TP
.BI \-d,  \-\-date \ <DATE>
.
count rate for revisions matching date spec
.TP
.BI \-t,  \-\-oldtemplate \ <TEMPLATE>
.
template to group changesets (DEPRECATED)
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
template to group changesets (default: {author|email})
.TP
.BI \-f,  \-\-dateformat \ <FORMAT>
.
strftime\-compatible format for grouping by date
.TP
.B \-c,  \-\-changesets
.
count rate by number of changesets
.TP
.B \-s,  \-\-sort
.
sort by key (default: sort by count)
.TP
.B \-\-diffstat
.
display added/removed lines separately
.TP
.BI \-\-aliases \ <FILE>
.
file with email aliases
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS clonebundles
.sp
advertise pre\-generated bundles to seed clones
.sp
"clonebundles" is a server\-side extension used to advertise the existence
of pre\-generated, externally hosted bundle files to clients that are
cloning so that cloning can be faster, more reliable, and require less
resources on the server.
.sp
Cloning can be a CPU and I/O intensive operation on servers. Traditionally,
the server, in response to a client\(aqs request to clone, dynamically generates
a bundle containing the entire repository content and sends it to the client.
There is no caching on the server and the server will have to redundantly
generate the same outgoing bundle in response to each clone request. For
servers with large repositories or with high clone volume, the load from
clones can make scaling the server challenging and costly.
.sp
This extension provides server operators the ability to offload potentially
expensive clone load to an external service. Here\(aqs how it works.
.INDENT 0.0
.IP 1. 3
.
A server operator establishes a mechanism for making bundle files available
on a hosting service where Mercurial clients can fetch them.
.IP 2. 3
.
A manifest file listing available bundle URLs and some optional metadata
is added to the Mercurial repository on the server.
.IP 3. 3
.
A client initiates a clone against a clone bundles aware server.
.IP 4. 3
.
The client sees the server is advertising clone bundles and fetches the
manifest listing available bundles.
.IP 5. 3
.
The client filters and sorts the available bundles based on what it
supports and prefers.
.IP 6. 3
.
The client downloads and applies an available bundle from the
server\-specified URL.
.IP 7. 3
.
The client reconnects to the original server and performs the equivalent
of \%\fBhg pull\fP\: to retrieve all repository data not in the bundle. (The
repository could have been updated between when the bundle was created
and when the client started the clone.)
.UNINDENT
.sp
Instead of the server generating full repository bundles for every clone
request, it generates full bundles once and they are subsequently reused to
bootstrap new clones. The server may still transfer data at clone time.
However, this is only data that has been added/changed since the bundle was
created. For large, established repositories, this can reduce server load for
clones to less than 1% of original.
.sp
To work, this extension requires the following of server operators:
.INDENT 0.0
.IP \(bu 2
.
Generating bundle files of repository content (typically periodically,
such as once per day).
.IP \(bu 2
.
A file server that clients have network access to and that Python knows
how to talk to through its normal URL handling facility (typically an
HTTP server).
.IP \(bu 2
.
A process for keeping the bundles manifest in sync with available bundle
files.
.UNINDENT
.sp
Strictly speaking, using a static file hosting server isn\(aqt required: a server
operator could use a dynamic service for retrieving bundle data. However,
static file hosting services are simple and scalable and should be sufficient
for most needs.
.sp
Bundle files can be generated with the \%\fBhg bundle\fP\: command. Typically
\%\fBhg bundle \-\-all\fP\: is used to produce a bundle of the entire repository.
.sp
\%\fBhg debugcreatestreamclonebundle\fP\: can be used to produce a special
\fIstreaming clone bundle\fP. These are bundle files that are extremely efficient
to produce and consume (read: fast). However, they are larger than
traditional bundle formats and require that clients support the exact set
of repository data store formats in use by the repository that created them.
Typically, a newer server can serve data that is compatible with older clients.
However, \fIstreaming clone bundles\fP don\(aqt have this guarantee. \fBServer
operators need to be aware that newer versions of Mercurial may produce
streaming clone bundles incompatible with older Mercurial versions.\fP
.sp
A server operator is responsible for creating a \fB.hg/clonebundles.manifest\fP
file containing the list of available bundle files suitable for seeding
clones. If this file does not exist, the repository will not advertise the
existence of clone bundles when clients connect.
.sp
The manifest file contains a newline (n) delimited list of entries.
.sp
Each line in this file defines an available bundle. Lines have the format:
.INDENT 0.0
.INDENT 3.5
.sp
<URL> [<key>=<value>[ <key>=<value>]]
.UNINDENT
.UNINDENT
.sp
That is, a URL followed by an optional, space\-delimited list of key=value
pairs describing additional properties of this bundle. Both keys and values
are URI encoded.
.sp
Keys in UPPERCASE are reserved for use by Mercurial and are defined below.
All non\-uppercase keys can be used by site installations. An example use
for custom properties is to use the \fIdatacenter\fP attribute to define which
data center a file is hosted in. Clients could then prefer a server in the
data center closest to them.
.sp
The following reserved keys are currently defined:
.INDENT 0.0
.TP
.B BUNDLESPEC
.
A "bundle specification" string that describes the type of the bundle.
.sp
These are string values that are accepted by the "\-\-type" argument of
\%\fBhg bundle\fP\:.
.sp
The values are parsed in strict mode, which means they must be of the
"<compression>\-<type>" form. See
mercurial.exchange.parsebundlespec() for more details.
.sp
\%\fBhg debugbundle \-\-spec\fP\: can be used to print the bundle specification
string for a bundle file. The output of this command can be used verbatim
for the value of \fBBUNDLESPEC\fP (it is already escaped).
.sp
Clients will automatically filter out specifications that are unknown or
unsupported so they won\(aqt attempt to download something that likely won\(aqt
apply.
.sp
The actual value doesn\(aqt impact client behavior beyond filtering:
clients will still sniff the bundle type from the header of downloaded
files.
.sp
\fBUse of this key is highly recommended\fP, as it allows clients to
easily skip unsupported bundles. If this key is not defined, an old
client may attempt to apply a bundle that it is incapable of reading.
.TP
.B REQUIRESNI
.
Whether Server Name Indication (SNI) is required to connect to the URL.
SNI allows servers to use multiple certificates on the same IP. It is
somewhat common in CDNs and other hosting providers. Older Python
versions do not support SNI. Defining this attribute enables clients
with older Python versions to filter this entry without experiencing
an opaque SSL failure at connection time.
.sp
If this is defined, it is important to advertise a non\-SNI fallback
URL or clients running old Python releases may not be able to clone
with the clonebundles facility.
.sp
Value should be "true".
.UNINDENT
.sp
Manifests can contain multiple entries. Assuming metadata is defined, clients
will filter entries from the manifest that they don\(aqt support. The remaining
entries are optionally sorted by client preferences
(\fBui.clonebundleprefers\fP config option). The client then attempts
to fetch the bundle at the first URL in the remaining list.
.sp
\fBErrors when downloading a bundle will fail the entire clone operation:
clients do not automatically fall back to a traditional clone.\fP The reason
for this is that if a server is using clone bundles, it is probably doing so
because the feature is necessary to help it scale. In other words, there
is an assumption that clone load will be offloaded to another service and
that the Mercurial server isn\(aqt responsible for serving this clone load.
If that other service experiences issues and clients start mass falling back to
the original Mercurial server, the added clone load could overwhelm the server
due to unexpected load and effectively take it offline. Not having clients
automatically fall back to cloning from the original server mitigates this
scenario.
.sp
Because there is no automatic Mercurial server fallback on failure of the
bundle hosting service, it is important for server operators to view the bundle
hosting service as an extension of the Mercurial server in terms of
availability and service level agreements: if the bundle hosting service goes
down, so does the ability for clients to clone. Note: clients will see a
message informing them how to bypass the clone bundles facility when a failure
occurs. So server operators should prepare for some people to follow these
instructions when a failure occurs, thus driving more load to the original
Mercurial server when the bundle hosting service fails.
.SS commitextras
.sp
adds a new flag extras to commit (ADVANCED)
.SS convert
.sp
import revisions from foreign VCS repositories into Mercurial
.SS Commands
.SS convert
.sp
convert a foreign SCM repository to a Mercurial one.:
.sp
.nf
.ft C
hg convert [OPTION]... SOURCE [DEST [REVMAP]]
.ft P
.fi
.sp
Accepted source formats [identifiers]:
.INDENT 0.0
.IP \(bu 2
.
Mercurial [hg]
.IP \(bu 2
.
CVS [cvs]
.IP \(bu 2
.
Darcs [darcs]
.IP \(bu 2
.
git [git]
.IP \(bu 2
.
Subversion [svn]
.IP \(bu 2
.
Monotone [mtn]
.IP \(bu 2
.
GNU Arch [gnuarch]
.IP \(bu 2
.
Bazaar [bzr]
.IP \(bu 2
.
Perforce [p4]
.UNINDENT
.sp
Accepted destination formats [identifiers]:
.INDENT 0.0
.IP \(bu 2
.
Mercurial [hg]
.IP \(bu 2
.
Subversion [svn] (history on branches is not preserved)
.UNINDENT
.sp
If no revision is given, all revisions will be converted.
Otherwise, convert will only import up to the named revision
(given in a format understood by the source).
.sp
If no destination directory name is specified, it defaults to the
basename of the source with \fB\-hg\fP appended. If the destination
repository doesn\(aqt exist, it will be created.
.sp
By default, all sources except Mercurial will use \-\-branchsort.
Mercurial uses \-\-sourcesort to preserve original revision numbers
order. Sort modes have the following effects:
.INDENT 0.0
.TP
.B \-\-branchsort
.
convert from parent to child revision when possible,
which means branches are usually converted one after
the other. It generates more compact repositories.
.TP
.B \-\-datesort
.
sort revisions by date. Converted repositories have
good\-looking changelogs but are often an order of
magnitude larger than the same ones generated by
\-\-branchsort.
.TP
.B \-\-sourcesort
.
try to preserve source revisions order, only
supported by Mercurial sources.
.TP
.B \-\-closesort
.
try to move closed revisions as close as possible
to parent branches, only supported by Mercurial
sources.
.UNINDENT
.sp
If \fBREVMAP\fP isn\(aqt given, it will be put in a default location
(\fB<dest>/.hg/shamap\fP by default). The \fBREVMAP\fP is a simple
text file that maps each source commit ID to the destination ID
for that revision, like so:
.sp
.nf
.ft C
<source ID> <destination ID>
.ft P
.fi
.sp
If the file doesn\(aqt exist, it\(aqs automatically created. It\(aqs
updated on each commit copied, so \%\fBhg convert\fP\: can be interrupted
and can be run repeatedly to copy new commits.
.sp
The authormap is a simple text file that maps each source commit
author to a destination commit author. It is handy for source SCMs
that use unix logins to identify authors (e.g.: CVS). One line per
author mapping and the line format is:
.sp
.nf
.ft C
source author = destination author
.ft P
.fi
.sp
Empty lines and lines starting with a \fB#\fP are ignored.
.sp
The filemap is a file that allows filtering and remapping of files
and directories. Each line can contain one of the following
directives:
.sp
.nf
.ft C
include path/to/file\-or\-dir

exclude path/to/file\-or\-dir

rename path/to/source path/to/destination
.ft P
.fi
.sp
Comment lines start with \fB#\fP. A specified path matches if it
equals the full relative name of a file or one of its parent
directories. The \fBinclude\fP or \fBexclude\fP directive with the
longest matching path applies, so line order does not matter.
.sp
The \fBinclude\fP directive causes a file, or all files under a
directory, to be included in the destination repository. The default
if there are no \fBinclude\fP statements is to include everything.
If there are any \fBinclude\fP statements, nothing else is included.
The \fBexclude\fP directive causes files or directories to
be omitted. The \fBrename\fP directive renames a file or directory if
it is converted. To rename from a subdirectory into the root of
the repository, use \fB.\fP as the path to rename to.
.sp
\fB\-\-full\fP will make sure the converted changesets contain exactly
the right files with the right content. It will make a full
conversion of all files, not just the ones that have
changed. Files that already are correct will not be changed. This
can be used to apply filemap changes when converting
incrementally. This is currently only supported for Mercurial and
Subversion.
.sp
The splicemap is a file that allows insertion of synthetic
history, letting you specify the parents of a revision. This is
useful if you want to e.g. give a Subversion merge two parents, or
graft two disconnected series of history together. Each entry
contains a key, followed by a space, followed by one or two
comma\-separated values:
.sp
.nf
.ft C
key parent1, parent2
.ft P
.fi
.sp
The key is the revision ID in the source
revision control system whose parents should be modified (same
format as a key in .hg/shamap). The values are the revision IDs
(in either the source or destination revision control system) that
should be used as the new parents for that node. For example, if
you have merged "release\-1.0" into "trunk", then you should
specify the revision on "trunk" as the first parent and the one on
the "release\-1.0" branch as the second.
.sp
The branchmap is a file that allows you to rename a branch when it is
being brought in from whatever external repository. When used in
conjunction with a splicemap, it allows for a powerful combination
to help fix even the most badly mismanaged repositories and turn them
into nicely structured Mercurial repositories. The branchmap contains
lines of the form:
.sp
.nf
.ft C
original_branch_name new_branch_name
.ft P
.fi
.sp
where "original_branch_name" is the name of the branch in the
source repository, and "new_branch_name" is the name of the branch
is the destination repository. No whitespace is allowed in the new
branch name. This can be used to (for instance) move code in one
repository from "default" to a named branch.
.SS Mercurial Source
.sp
The Mercurial source recognizes the following configuration
options, which you can set on the command line with \fB\-\-config\fP:
.INDENT 0.0
.TP
.B convert.hg.ignoreerrors
.
ignore integrity errors when reading.
Use it to fix Mercurial repositories with missing revlogs, by
converting from and to Mercurial. Default is False.
.TP
.B convert.hg.saverev
.
store original revision ID in changeset
(forces target IDs to change). It takes a boolean argument and
defaults to False.
.TP
.B convert.hg.startrev
.
specify the initial Mercurial revision.
The default is 0.
.TP
.B convert.hg.revs
.
revset specifying the source revisions to convert.
.UNINDENT
.SS CVS Source
.sp
CVS source will use a sandbox (i.e. a checked\-out copy) from CVS
to indicate the starting point of what will be converted. Direct
access to the repository files is not needed, unless of course the
repository is \fB:local:\fP. The conversion uses the top level
directory in the sandbox to find the CVS repository, and then uses
CVS rlog commands to find files to convert. This means that unless
a filemap is given, all files under the starting directory will be
converted, and that any directory reorganization in the CVS
sandbox is ignored.
.sp
The following options can be used with \fB\-\-config\fP:
.INDENT 0.0
.TP
.B convert.cvsps.cache
.
Set to False to disable remote log caching,
for testing and debugging purposes. Default is True.
.TP
.B convert.cvsps.fuzz
.
Specify the maximum time (in seconds) that is
allowed between commits with identical user and log message in
a single changeset. When very large files were checked in as
part of a changeset then the default may not be long enough.
The default is 60.
.TP
.B convert.cvsps.logencoding
.
Specify encoding name to be used for
transcoding CVS log messages. Multiple encoding names can be
specified as a list (see \%\fBhg help config.Syntax\fP\:), but only
the first acceptable encoding in the list is used per CVS log
entries. This transcoding is executed before cvslog hook below.
.TP
.B convert.cvsps.mergeto
.
Specify a regular expression to which
commit log messages are matched. If a match occurs, then the
conversion process will insert a dummy revision merging the
branch on which this log message occurs to the branch
indicated in the regex. Default is \fB{{mergetobranch
([\-\ew]+)}}\fP
.TP
.B convert.cvsps.mergefrom
.
Specify a regular expression to which
commit log messages are matched. If a match occurs, then the
conversion process will add the most recent revision on the
branch indicated in the regex as the second parent of the
changeset. Default is \fB{{mergefrombranch ([\-\ew]+)}}\fP
.TP
.B convert.localtimezone
.
use local time (as determined by the TZ
environment variable) for changeset date/times. The default
is False (use UTC).
.TP
.B hooks.cvslog
.
Specify a Python function to be called at the end of
gathering the CVS log. The function is passed a list with the
log entries, and can modify the entries in\-place, or add or
delete them.
.TP
.B hooks.cvschangesets
.
Specify a Python function to be called after
the changesets are calculated from the CVS log. The
function is passed a list with the changeset entries, and can
modify the changesets in\-place, or add or delete them.
.UNINDENT
.sp
An additional "debugcvsps" Mercurial command allows the builtin
changeset merging code to be run without doing a conversion. Its
parameters and output are similar to that of cvsps 2.1. Please see
the command help for more details.
.SS Subversion Source
.sp
Subversion source detects classical trunk/branches/tags layouts.
By default, the supplied \fBsvn://repo/path/\fP source URL is
converted as a single branch. If \fBsvn://repo/path/trunk\fP exists
it replaces the default branch. If \fBsvn://repo/path/branches\fP
exists, its subdirectories are listed as possible branches. If
\fBsvn://repo/path/tags\fP exists, it is looked for tags referencing
converted branches. Default \fBtrunk\fP, \fBbranches\fP and \fBtags\fP
values can be overridden with following options. Set them to paths
relative to the source URL, or leave them blank to disable auto
detection.
.sp
The following options can be set with \fB\-\-config\fP:
.INDENT 0.0
.TP
.B convert.svn.branches
.
specify the directory containing branches.
The default is \fBbranches\fP.
.TP
.B convert.svn.tags
.
specify the directory containing tags. The
default is \fBtags\fP.
.TP
.B convert.svn.trunk
.
specify the name of the trunk branch. The
default is \fBtrunk\fP.
.TP
.B convert.localtimezone
.
use local time (as determined by the TZ
environment variable) for changeset date/times. The default
is False (use UTC).
.UNINDENT
.sp
Source history can be retrieved starting at a specific revision,
instead of being integrally converted. Only single branch
conversions are supported.
.INDENT 0.0
.TP
.B convert.svn.startrev
.
specify start Subversion revision number.
The default is 0.
.UNINDENT
.SS Git Source
.sp
The Git importer converts commits from all reachable branches (refs
in refs/heads) and remotes (refs in refs/remotes) to Mercurial.
Branches are converted to bookmarks with the same name, with the
leading \(aqrefs/heads\(aq stripped. Git submodules are converted to Git
subrepos in Mercurial.
.sp
The following options can be set with \fB\-\-config\fP:
.INDENT 0.0
.TP
.B convert.git.similarity
.
specify how similar files modified in a
commit must be to be imported as renames or copies, as a
percentage between \fB0\fP (disabled) and \fB100\fP (files must be
identical). For example, \fB90\fP means that a delete/add pair will
be imported as a rename if more than 90% of the file hasn\(aqt
changed. The default is \fB50\fP.
.TP
.B convert.git.findcopiesharder
.
while detecting copies, look at all
files in the working copy instead of just changed ones. This
is very expensive for large projects, and is only effective when
\fBconvert.git.similarity\fP is greater than 0. The default is False.
.TP
.B convert.git.renamelimit
.
perform rename and copy detection up to this
many changed files in a commit. Increasing this will make rename
and copy detection more accurate but will significantly slow down
computation on large projects. The option is only relevant if
\fBconvert.git.similarity\fP is greater than 0. The default is
\fB400\fP.
.TP
.B convert.git.committeractions
.
list of actions to take when processing
author and committer values.
.sp
Git commits have separate author (who wrote the commit) and committer
(who applied the commit) fields. Not all destinations support separate
author and committer fields (including Mercurial). This config option
controls what to do with these author and committer fields during
conversion.
.sp
A value of \fBmessagedifferent\fP will append a \fBcommitter: ...\fP
line to the commit message if the Git committer is different from the
author. The prefix of that line can be specified using the syntax
\fBmessagedifferent=<prefix>\fP. e.g. \fBmessagedifferent=git\-committer:\fP.
When a prefix is specified, a space will always be inserted between the
prefix and the value.
.sp
\fBmessagealways\fP behaves like \fBmessagedifferent\fP except it will
always result in a \fBcommitter: ...\fP line being appended to the commit
message. This value is mutually exclusive with \fBmessagedifferent\fP.
.sp
\fBdropcommitter\fP will remove references to the committer. Only
references to the author will remain. Actions that add references
to the committer will have no effect when this is set.
.sp
\fBreplaceauthor\fP will replace the value of the author field with
the committer. Other actions that add references to the committer
will still take effect when this is set.
.sp
The default is \fBmessagedifferent\fP.
.TP
.B convert.git.extrakeys
.
list of extra keys from commit metadata to copy to
the destination. Some Git repositories store extra metadata in commits.
By default, this non\-default metadata will be lost during conversion.
Setting this config option can retain that metadata. Some built\-in
keys such as \fBparent\fP and \fBbranch\fP are not allowed to be copied.
.TP
.B convert.git.remoteprefix
.
remote refs are converted as bookmarks with
\fBconvert.git.remoteprefix\fP as a prefix followed by a /. The default
is \(aqremote\(aq.
.TP
.B convert.git.saverev
.
whether to store the original Git commit ID in the
metadata of the destination commit. The default is True.
.TP
.B convert.git.skipsubmodules
.
does not convert root level .gitmodules files
or files with 160000 mode indicating a submodule. Default is False.
.UNINDENT
.SS Perforce Source
.sp
The Perforce (P4) importer can be given a p4 depot path or a
client specification as source. It will convert all files in the
source to a flat Mercurial repository, ignoring labels, branches
and integrations. Note that when a depot path is given you then
usually should specify a target directory, because otherwise the
target may be named \fB...\-hg\fP.
.sp
The following options can be set with \fB\-\-config\fP:
.INDENT 0.0
.TP
.B convert.p4.encoding
.
specify the encoding to use when decoding standard
output of the Perforce command line tool. The default is default system
encoding.
.TP
.B convert.p4.startrev
.
specify initial Perforce revision (a
Perforce changelist number).
.UNINDENT
.SS Mercurial Destination
.sp
The Mercurial destination will recognize Mercurial subrepositories in the
destination directory, and update the .hgsubstate file automatically if the
destination subrepositories contain the <dest>/<sub>/.hg/shamap file.
Converting a repository with subrepositories requires converting a single
repository at a time, from the bottom up.
.sp
An example showing how to convert a repository with subrepositories:
.sp
.nf
.ft C
# so convert knows the type when it sees a non empty destination
$ hg init converted

$ hg convert orig/sub1 converted/sub1
$ hg convert orig/sub2 converted/sub2
$ hg convert orig converted
.ft P
.fi
.sp
The following options are supported:
.INDENT 0.0
.TP
.B convert.hg.clonebranches
.
dispatch source branches in separate
clones. The default is False.
.TP
.B convert.hg.tagsbranch
.
branch name for tag revisions, defaults to
\fBdefault\fP.
.TP
.B convert.hg.usebranchnames
.
preserve branch names. The default is
True.
.TP
.B convert.hg.sourcename
.
records the given string as a \(aqconvert_source\(aq extra
value on each commit made in the target repository. The default is None.
.UNINDENT
.SS All Destinations
.sp
All destination types accept the following options:
.INDENT 0.0
.TP
.B convert.skiptags
.
does not convert tags from the source repo to the target
repo. The default is False.
.UNINDENT
.sp
Options:
.INDENT 0.0
.TP
.BI \-\-authors \ <FILE>
.
username mapping filename (DEPRECATED) (use \-\-authormap instead)
.TP
.BI \-s,  \-\-source\-type \ <TYPE>
.
source repository type
.TP
.BI \-d,  \-\-dest\-type \ <TYPE>
.
destination repository type
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
import up to source revision REV
.TP
.BI \-A,  \-\-authormap \ <FILE>
.
remap usernames using this file
.TP
.BI \-\-filemap \ <FILE>
.
remap file names using contents of file
.TP
.B \-\-full
.
apply filemap changes by converting all files again
.TP
.BI \-\-splicemap \ <FILE>
.
splice synthesized history into place
.TP
.BI \-\-branchmap \ <FILE>
.
change branch names while converting
.TP
.B \-\-branchsort
.
try to sort changesets by branches
.TP
.B \-\-datesort
.
try to sort changesets by date
.TP
.B \-\-sourcesort
.
preserve source changesets order
.TP
.B \-\-closesort
.
try to reorder closed revisions
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS eol
.sp
automatically manage newlines in repository files
.sp
This extension allows you to manage the type of line endings (CRLF or
LF) that are used in the repository and in the local working
directory. That way you can get CRLF line endings on Windows and LF on
Unix/Mac, thereby letting everybody use their OS native line endings.
.sp
The extension reads its configuration from a versioned \fB.hgeol\fP
configuration file found in the root of the working directory. The
\fB.hgeol\fP file use the same syntax as all other Mercurial
configuration files. It uses two sections, \fB[patterns]\fP and
\fB[repository]\fP.
.sp
The \fB[patterns]\fP section specifies how line endings should be
converted between the working directory and the repository. The format is
specified by a file pattern. The first match is used, so put more
specific patterns first. The available line endings are \fBLF\fP,
\fBCRLF\fP, and \fBBIN\fP.
.sp
Files with the declared format of \fBCRLF\fP or \fBLF\fP are always
checked out and stored in the repository in that format and files
declared to be binary (\fBBIN\fP) are left unchanged. Additionally,
\fBnative\fP is an alias for checking out in the platform\(aqs default line
ending: \fBLF\fP on Unix (including Mac OS X) and \fBCRLF\fP on
Windows. Note that \fBBIN\fP (do nothing to line endings) is Mercurial\(aqs
default behavior; it is only needed if you need to override a later,
more general pattern.
.sp
The optional \fB[repository]\fP section specifies the line endings to
use for files stored in the repository. It has a single setting,
\fBnative\fP, which determines the storage line endings for files
declared as \fBnative\fP in the \fB[patterns]\fP section. It can be set to
\fBLF\fP or \fBCRLF\fP. The default is \fBLF\fP. For example, this means
that on Windows, files configured as \fBnative\fP (\fBCRLF\fP by default)
will be converted to \fBLF\fP when stored in the repository. Files
declared as \fBLF\fP, \fBCRLF\fP, or \fBBIN\fP in the \fB[patterns]\fP section
are always stored as\-is in the repository.
.sp
Example versioned \fB.hgeol\fP file:
.sp
.nf
.ft C
[patterns]
**.py = native
**.vcproj = CRLF
**.txt = native
Makefile = LF
**.jpg = BIN

[repository]
native = LF
.ft P
.fi
.IP Note
.
The rules will first apply when files are touched in the working
directory, e.g. by updating to null and back to tip to touch all files.
.RE
.sp
The extension uses an optional \fB[eol]\fP section read from both the
normal Mercurial configuration files and the \fB.hgeol\fP file, with the
latter overriding the former. You can use that section to control the
overall behavior. There are three settings:
.INDENT 0.0
.IP \(bu 2
.
\fBeol.native\fP (default \fBos.linesep\fP) can be set to \fBLF\fP or
\fBCRLF\fP to override the default interpretation of \fBnative\fP for
checkout. This can be used with \%\fBhg archive\fP\: on Unix, say, to
generate an archive where files have line endings for Windows.
.IP \(bu 2
.
\fBeol.only\-consistent\fP (default True) can be set to False to make
the extension convert files with inconsistent EOLs. Inconsistent
means that there is both \fBCRLF\fP and \fBLF\fP present in the file.
Such files are normally not touched under the assumption that they
have mixed EOLs on purpose.
.IP \(bu 2
.
\fBeol.fix\-trailing\-newline\fP (default False) can be set to True to
ensure that converted files end with a EOL character (either \fB\en\fP
or \fB\er\en\fP as per the configured patterns).
.UNINDENT
.sp
The extension provides \fBcleverencode:\fP and \fBcleverdecode:\fP filters
like the deprecated win32text extension does. This means that you can
disable win32text and enable eol and your filters will still work. You
only need to these filters until you have prepared a \fB.hgeol\fP file.
.sp
The \fBwin32text.forbid*\fP hooks provided by the win32text extension
have been unified into a single hook named \fBeol.checkheadshook\fP. The
hook will lookup the expected line endings from the \fB.hgeol\fP file,
which means you must migrate to a \fB.hgeol\fP file first before using
the hook. \fBeol.checkheadshook\fP only checks heads, intermediate
invalid revisions will be pushed. To forbid them completely, use the
\fBeol.checkallhook\fP hook. These hooks are best used as
\fBpretxnchangegroup\fP hooks.
.sp
See \%\fBhg help patterns\fP\: for more information about the glob patterns
used.
.SS extdiff
.sp
command to allow external programs to compare revisions
.sp
The extdiff Mercurial extension allows you to use external programs
to compare revisions, or revision with working directory. The external
diff programs are called with a configurable set of options and two
non\-option arguments: paths to directories containing snapshots of
files to compare.
.sp
The extdiff extension also allows you to configure new diff commands, so
you do not need to type \%\fBhg extdiff \-p kdiff3\fP\: always.
.sp
.nf
.ft C
[extdiff]
# add new command that runs GNU diff(1) in \(aqcontext diff\(aq mode
cdiff = gdiff \-Nprc5
## or the old way:
#cmd.cdiff = gdiff
#opts.cdiff = \-Nprc5

# add new command called meld, runs meld (no need to name twice).  If
# the meld executable is not available, the meld tool in [merge\-tools]
# will be used, if available
meld =

# add new command called vimdiff, runs gvimdiff with DirDiff plugin
# (see http://www.vim.org/scripts/script.php?script_id=102) Non
# English user, be sure to put "let g:DirDiffDynamicDiffText = 1" in
# your .vimrc
vimdiff = gvim \-f "+next" \e
          "+execute \(aqDirDiff\(aq fnameescape(argv(0)) fnameescape(argv(1))"
.ft P
.fi
.sp
Tool arguments can include variables that are expanded at runtime:
.sp
.nf
.ft C
$parent1, $plabel1 \- filename, descriptive label of first parent
$child,   $clabel  \- filename, descriptive label of child revision
$parent2, $plabel2 \- filename, descriptive label of second parent
$root              \- repository root
$parent is an alias for $parent1.
.ft P
.fi
.sp
The extdiff extension will look in your [diff\-tools] and [merge\-tools]
sections for diff tool arguments, when none are specified in [extdiff].
.sp
.nf
.ft C
[extdiff]
kdiff3 =

[diff\-tools]
kdiff3.diffargs=\-\-L1 \(aq$plabel1\(aq \-\-L2 \(aq$clabel\(aq $parent $child
.ft P
.fi
.sp
You can use \-I/\-X and list of file or directory names like normal
\%\fBhg diff\fP\: command. The extdiff extension makes snapshots of only
needed files, so running the external diff program will actually be
pretty fast (at least faster than having to compare the entire tree).
.SS Commands
.SS extdiff
.sp
use external program to diff repository (or selected files):
.sp
.nf
.ft C
hg extdiff [OPT]... [FILE]...
.ft P
.fi
.sp
Show differences between revisions for the specified files, using
an external program. The default program used is diff, with
default options "\-Npru".
.sp
To select a different program, use the \-p/\-\-program option. The
program will be passed the names of two directories to compare. To
pass additional options to the program, use \-o/\-\-option. These
will be passed before the names of the directories to compare.
.sp
When two revision arguments are given, then changes are shown
between those revisions. If only one revision is specified then
that revision is compared to the working directory, and, when no
revisions are specified, the working directory files are compared
to its parent.
.sp
Options:
.INDENT 0.0
.TP
.BI \-p,  \-\-program \ <CMD>
.
comparison program to run
.TP
.BI \-o,  \-\-option \ <OPT[+]>
.
pass option to comparison program
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
revision
.TP
.BI \-c,  \-\-change \ <REV>
.
change made by revision
.TP
.B \-\-patch
.
compare patches for two revisions
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.TP
.B \-S,  \-\-subrepos
.
recurse into subrepositories
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS factotum
.sp
http authentication with factotum
.sp
This extension allows the factotum(4) facility on Plan 9 from Bell Labs
platforms to provide authentication information for HTTP access. Configuration
entries specified in the auth section as well as authentication information
provided in the repository URL are fully supported. If no prefix is specified,
a value of "*" will be assumed.
.sp
By default, keys are specified as:
.sp
.nf
.ft C
proto=pass service=hg prefix=<prefix> user=<username> !password=<password>
.ft P
.fi
.sp
If the factotum extension is unable to read the required key, one will be
requested interactively.
.sp
A configuration section is available to customize runtime behavior. By
default, these entries are:
.sp
.nf
.ft C
[factotum]
executable = /bin/auth/factotum
mountpoint = /mnt/factotum
service = hg
.ft P
.fi
.sp
The executable entry defines the full path to the factotum binary. The
mountpoint entry defines the path to the factotum file service. Lastly, the
service entry controls the service name used when reading keys.
.SS fetch
.sp
pull, update and merge in one command (DEPRECATED)
.SS Commands
.SS fetch
.sp
pull changes from a remote repository, merge new changes if needed.:
.sp
.nf
.ft C
hg fetch [SOURCE]
.ft P
.fi
.sp
This finds all changes from the repository at the specified path
or URL and adds them to the local repository.
.sp
If the pulled changes add a new branch head, the head is
automatically merged, and the result of the merge is committed.
Otherwise, the working directory is updated to include the new
changes.
.sp
When a merge is needed, the working directory is first updated to
the newly pulled changes. Local changes are then merged into the
pulled changes. To switch the merge order, use \-\-switch\-parent.
.sp
See \%\fBhg help dates\fP\: for a list of formats valid for \-d/\-\-date.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
a specific revision you would like to pull
.TP
.B \-\-edit
.
invoke editor on commit messages
.TP
.B \-\-force\-editor
.
edit commit message (DEPRECATED)
.TP
.B \-\-switch\-parent
.
switch parents when merging
.TP
.BI \-m,  \-\-message \ <TEXT>
.
use text as commit message
.TP
.BI \-l,  \-\-logfile \ <FILE>
.
read commit message from file
.TP
.BI \-d,  \-\-date \ <DATE>
.
record the specified date as commit date
.TP
.BI \-u,  \-\-user \ <USER>
.
record the specified user as committer
.TP
.BI \-e,  \-\-ssh \ <CMD>
.
specify ssh command to use
.TP
.BI \-\-remotecmd \ <CMD>
.
specify hg command to run on the remote side
.TP
.B \-\-insecure
.
do not verify server certificate (ignoring web.cacerts config)
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS fsmonitor
.sp
Faster status operations with the Watchman file monitor (EXPERIMENTAL)
.sp
Integrates the file\-watching program Watchman with Mercurial to produce faster
status results.
.sp
On a particular Linux system, for a real\-world repository with over 400,000
files hosted on ext4, vanilla \fIhg status\fP takes 1.3 seconds. On the same
system, with fsmonitor it takes about 0.3 seconds.
.sp
fsmonitor requires no configuration \-\- it will tell Watchman about your
repository as necessary. You\(aqll need to install Watchman from
\%https://facebook.github.io/watchman/\: and make sure it is in your PATH.
.sp
The following configuration options exist:
.sp
.nf
.ft C
[fsmonitor]
mode = {off, on, paranoid}
.ft P
.fi
.sp
When \fImode = off\fP, fsmonitor will disable itself (similar to not loading the
extension at all). When \fImode = on\fP, fsmonitor will be enabled (the default).
When \fImode = paranoid\fP, fsmonitor will query both Watchman and the filesystem,
and ensure that the results are consistent.
.sp
.nf
.ft C
[fsmonitor]
timeout = (float)
.ft P
.fi
.sp
A value, in seconds, that determines how long fsmonitor will wait for Watchman
to return results. Defaults to \fI2.0\fP.
.sp
.nf
.ft C
[fsmonitor]
blacklistusers = (list of userids)
.ft P
.fi
.sp
A list of usernames for which fsmonitor will disable itself altogether.
.sp
.nf
.ft C
[fsmonitor]
walk_on_invalidate = (boolean)
.ft P
.fi
.sp
Whether or not to walk the whole repo ourselves when our cached state has been
invalidated, for example when Watchman has been restarted or .hgignore rules
have been changed. Walking the repo in that case can result in competing for
I/O with Watchman. For large repos it is recommended to set this value to
false. You may wish to set this to true if you have a very fast filesystem
that can outpace the IPC overhead of getting the result data for the full repo
from Watchman. Defaults to false.
.sp
fsmonitor is incompatible with the largefiles and eol extensions, and
will disable itself if any of those are active.
.SS gpg
.sp
commands to sign and verify changesets
.SS Commands
.SS sigcheck
.sp
verify all the signatures there may be for a particular revision:
.sp
.nf
.ft C
hg sigcheck REV
.ft P
.fi
.sp
verify all the signatures there may be for a particular revision
.SS sign
.sp
add a signature for the current or given revision:
.sp
.nf
.ft C
hg sign [OPTION]... [REV]...
.ft P
.fi
.sp
If no revision is given, the parent of the working directory is used,
or tip if no revision is checked out.
.sp
The \fBgpg.cmd\fP config setting can be used to specify the command
to run. A default key can be specified with \fBgpg.key\fP.
.sp
See \%\fBhg help dates\fP\: for a list of formats valid for \-d/\-\-date.
.sp
Options:
.INDENT 0.0
.TP
.B \-l,  \-\-local
.
make the signature local
.TP
.B \-f,  \-\-force
.
sign even if the sigfile is modified
.TP
.B \-\-no\-commit
.
do not commit the sigfile after signing
.TP
.BI \-k,  \-\-key \ <ID>
.
the key id to sign with
.TP
.BI \-m,  \-\-message \ <TEXT>
.
use text as commit message
.TP
.B \-e,  \-\-edit
.
invoke editor on commit messages
.TP
.BI \-d,  \-\-date \ <DATE>
.
record the specified date as commit date
.TP
.BI \-u,  \-\-user \ <USER>
.
record the specified user as committer
.UNINDENT
.SS sigs
.sp
list signed changesets:
.sp
.nf
.ft C
hg sigs
.ft P
.fi
.sp
list signed changesets
.SS graphlog
.sp
command to view revision graphs from a shell (DEPRECATED)
.sp
The functionality of this extension has been include in core Mercurial
since version 2.3. Please use \%\fBhg log \-G ...\fP\: instead.
.sp
This extension adds a \-\-graph option to the incoming, outgoing and log
commands. When this options is given, an ASCII representation of the
revision graph is also shown.
.SS Commands
.SS glog
.sp
show revision history alongside an ASCII revision graph:
.sp
.nf
.ft C
hg glog [OPTION]... [FILE]
.ft P
.fi
.sp
Print a revision history alongside a revision graph drawn with
ASCII characters.
.sp
Nodes printed as an @ character are parents of the working
directory.
.sp
This is an alias to \%\fBhg log \-G\fP\:.
.sp
Options:
.INDENT 0.0
.TP
.B \-f,  \-\-follow
.
follow changeset history, or file history across copies and renames
.TP
.B \-\-follow\-first
.
only follow the first parent of merge changesets (DEPRECATED)
.TP
.BI \-d,  \-\-date \ <DATE>
.
show revisions matching date spec
.TP
.B \-C,  \-\-copies
.
show copied files
.TP
.BI \-k,  \-\-keyword \ <TEXT[+]>
.
do case\-insensitive search for a given text
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
show the specified revision or revset
.TP
.B \-\-removed
.
include revisions where files were removed
.TP
.B \-m,  \-\-only\-merges
.
show only merges (DEPRECATED)
.TP
.BI \-u,  \-\-user \ <USER[+]>
.
revisions committed by user
.TP
.BI \-\-only\-branch \ <BRANCH[+]>
.
show only changesets within the given named branch (DEPRECATED)
.TP
.BI \-b,  \-\-branch \ <BRANCH[+]>
.
show changesets within the given named branch
.TP
.BI \-P,  \-\-prune \ <REV[+]>
.
do not display revision or any of its ancestors
.TP
.B \-p,  \-\-patch
.
show patch
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.BI \-l,  \-\-limit \ <NUM>
.
limit number of changes displayed
.TP
.B \-M,  \-\-no\-merges
.
do not show merges
.TP
.B \-\-stat
.
output diffstat\-style summary of changes
.TP
.B \-G,  \-\-graph
.
show the revision DAG
.TP
.BI \-\-style \ <STYLE>
.
display using template map file (DEPRECATED)
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS hgk
.sp
browse the repository in a graphical way
.sp
The hgk extension allows browsing the history of a repository in a
graphical way. It requires Tcl/Tk version 8.4 or later. (Tcl/Tk is not
distributed with Mercurial.)
.sp
hgk consists of two parts: a Tcl script that does the displaying and
querying of information, and an extension to Mercurial named hgk.py,
which provides hooks for hgk to get information. hgk can be found in
the contrib directory, and the extension is shipped in the hgext
repository, and needs to be enabled.
.sp
The \%\fBhg view\fP\: command will launch the hgk Tcl script. For this command
to work, hgk must be in your search path. Alternately, you can specify
the path to hgk in your configuration file:
.sp
.nf
.ft C
[hgk]
path = /location/of/hgk
.ft P
.fi
.sp
hgk can make use of the extdiff extension to visualize revisions.
Assuming you had already configured extdiff vdiff command, just add:
.sp
.nf
.ft C
[hgk]
vdiff=vdiff
.ft P
.fi
.sp
Revisions context menu will now display additional entries to fire
vdiff on hovered and selected revisions.
.SS Commands
.SS view
.sp
start interactive history viewer:
.sp
.nf
.ft C
hg view [\-l LIMIT] [REVRANGE]
.ft P
.fi
.sp
start interactive history viewer
.sp
Options:
.INDENT 0.0
.TP
.BI \-l,  \-\-limit \ <NUM>
.
limit number of changes displayed
.UNINDENT
.SS highlight
.sp
syntax highlighting for hgweb (requires Pygments)
.sp
It depends on the Pygments syntax highlighting library:
\%http://pygments.org/\:
.sp
There are the following configuration options:
.sp
.nf
.ft C
[web]
pygments_style = <style> (default: colorful)
highlightfiles = <fileset> (default: size(\(aq<5M\(aq))
highlightonlymatchfilename = <bool> (default False)
.ft P
.fi
.sp
\fBhighlightonlymatchfilename\fP will only highlight files if their type could
be identified by their filename. When this is not enabled (the default),
Pygments will try very hard to identify the file type from content and any
match (even matches with a low confidence score) will be used.
.SS histedit
.sp
interactive history editing
.sp
With this extension installed, Mercurial gains one new command: histedit. Usage
is as follows, assuming the following history:
.sp
.nf
.ft C
@  3[tip]   7c2fd3b9020c   2009\-04\-27 18:04 \-0500   durin42
|    Add delta
|
o  2   030b686bedc4   2009\-04\-27 18:04 \-0500   durin42
|    Add gamma
|
o  1   c561b4e977df   2009\-04\-27 18:04 \-0500   durin42
|    Add beta
|
o  0   d8d2fcd0e319   2009\-04\-27 18:04 \-0500   durin42
     Add alpha
.ft P
.fi
.sp
If you were to run \fBhg histedit c561b4e977df\fP, you would see the following
file open in your editor:
.sp
.nf
.ft C
pick c561b4e977df Add beta
pick 030b686bedc4 Add gamma
pick 7c2fd3b9020c Add delta

# Edit history between c561b4e977df and 7c2fd3b9020c
#
# Commits are listed from least to most recent
#
# Commands:
#  p, pick = use commit
#  e, edit = use commit, but stop for amending
#  f, fold = use commit, but combine it with the one above
#  r, roll = like fold, but discard this commit\(aqs description and date
#  d, drop = remove commit from history
#  m, mess = edit commit message without changing commit content
#
.ft P
.fi
.sp
In this file, lines beginning with \fB#\fP are ignored. You must specify a rule
for each revision in your history. For example, if you had meant to add gamma
before beta, and then wanted to add delta in the same revision as beta, you
would reorganize the file to look like this:
.sp
.nf
.ft C
pick 030b686bedc4 Add gamma
pick c561b4e977df Add beta
fold 7c2fd3b9020c Add delta

# Edit history between c561b4e977df and 7c2fd3b9020c
#
# Commits are listed from least to most recent
#
# Commands:
#  p, pick = use commit
#  e, edit = use commit, but stop for amending
#  f, fold = use commit, but combine it with the one above
#  r, roll = like fold, but discard this commit\(aqs description and date
#  d, drop = remove commit from history
#  m, mess = edit commit message without changing commit content
#
.ft P
.fi
.sp
At which point you close the editor and \fBhistedit\fP starts working. When you
specify a \fBfold\fP operation, \fBhistedit\fP will open an editor when it folds
those revisions together, offering you a chance to clean up the commit message:
.sp
.nf
.ft C
Add beta
***
Add delta
.ft P
.fi
.sp
Edit the commit message to your liking, then close the editor. The date used
for the commit will be the later of the two commits\(aq dates. For this example,
let\(aqs assume that the commit message was changed to \fBAdd beta and delta.\fP
After histedit has run and had a chance to remove any old or temporary
revisions it needed, the history looks like this:
.sp
.nf
.ft C
@  2[tip]   989b4d060121   2009\-04\-27 18:04 \-0500   durin42
|    Add beta and delta.
|
o  1   081603921c3f   2009\-04\-27 18:04 \-0500   durin42
|    Add gamma
|
o  0   d8d2fcd0e319   2009\-04\-27 18:04 \-0500   durin42
     Add alpha
.ft P
.fi
.sp
Note that \fBhistedit\fP does \fInot\fP remove any revisions (even its own temporary
ones) until after it has completed all the editing operations, so it will
probably perform several strip operations when it\(aqs done. For the above example,
it had to run strip twice. Strip can be slow depending on a variety of factors,
so you might need to be a little patient. You can choose to keep the original
revisions by passing the \fB\-\-keep\fP flag.
.sp
The \fBedit\fP operation will drop you back to a command prompt,
allowing you to edit files freely, or even use \fBhg record\fP to commit
some changes as a separate commit. When you\(aqre done, any remaining
uncommitted changes will be committed as well. When done, run \fBhg
histedit \-\-continue\fP to finish this step. If there are uncommitted
changes, you\(aqll be prompted for a new commit message, but the default
commit message will be the original message for the \fBedit\fP ed
revision, and the date of the original commit will be preserved.
.sp
The \fBmessage\fP operation will give you a chance to revise a commit
message without changing the contents. It\(aqs a shortcut for doing
\fBedit\fP immediately followed by \fIhg histedit \-\-continue\(ga\fP.
.sp
If \fBhistedit\fP encounters a conflict when moving a revision (while
handling \fBpick\fP or \fBfold\fP), it\(aqll stop in a similar manner to
\fBedit\fP with the difference that it won\(aqt prompt you for a commit
message when done. If you decide at this point that you don\(aqt like how
much work it will be to rearrange history, or that you made a mistake,
you can use \fBhg histedit \-\-abort\fP to abandon the new changes you
have made and return to the state before you attempted to edit your
history.
.sp
If we clone the histedit\-ed example repository above and add four more
changes, such that we have the following history:
.sp
.nf
.ft C
@  6[tip]   038383181893   2009\-04\-27 18:04 \-0500   stefan
|    Add theta
|
o  5   140988835471   2009\-04\-27 18:04 \-0500   stefan
|    Add eta
|
o  4   122930637314   2009\-04\-27 18:04 \-0500   stefan
|    Add zeta
|
o  3   836302820282   2009\-04\-27 18:04 \-0500   stefan
|    Add epsilon
|
o  2   989b4d060121   2009\-04\-27 18:04 \-0500   durin42
|    Add beta and delta.
|
o  1   081603921c3f   2009\-04\-27 18:04 \-0500   durin42
|    Add gamma
|
o  0   d8d2fcd0e319   2009\-04\-27 18:04 \-0500   durin42
     Add alpha
.ft P
.fi
.sp
If you run \fBhg histedit \-\-outgoing\fP on the clone then it is the same
as running \fBhg histedit 836302820282\fP. If you need plan to push to a
repository that Mercurial does not detect to be related to the source
repo, you can add a \fB\-\-force\fP option.
.SS Config
.sp
Histedit rule lines are truncated to 80 characters by default. You
can customize this behavior by setting a different length in your
configuration file:
.sp
.nf
.ft C
[histedit]
linelen = 120      # truncate rule lines at 120 characters
.ft P
.fi
.sp
\fBhg histedit\fP attempts to automatically choose an appropriate base
revision to use. To change which base revision is used, define a
revset in your configuration file:
.sp
.nf
.ft C
[histedit]
defaultrev = only(.) & draft()
.ft P
.fi
.sp
By default each edited revision needs to be present in histedit commands.
To remove revision you need to use \fBdrop\fP operation. You can configure
the drop to be implicit for missing commits by adding:
.sp
.nf
.ft C
[histedit]
dropmissing = True
.ft P
.fi
.sp
By default, histedit will close the transaction after each action. For
performance purposes, you can configure histedit to use a single transaction
across the entire histedit. WARNING: This setting introduces a significant risk
of losing the work you\(aqve done in a histedit if the histedit aborts
unexpectedly:
.sp
.nf
.ft C
[histedit]
singletransaction = True
.ft P
.fi
.SS Commands
.SS histedit
.sp
interactively edit changeset history:
.sp
.nf
.ft C
hg histedit [OPTIONS] ([ANCESTOR] | \-\-outgoing [URL])
.ft P
.fi
.sp
This command lets you edit a linear series of changesets (up to
and including the working directory, which should be clean).
You can:
.INDENT 0.0
.IP \(bu 2
.
\fIpick\fP to [re]order a changeset
.IP \(bu 2
.
\fIdrop\fP to omit changeset
.IP \(bu 2
.
\fImess\fP to reword the changeset commit message
.IP \(bu 2
.
\fIfold\fP to combine it with the preceding changeset (using the later date)
.IP \(bu 2
.
\fIroll\fP like fold, but discarding this commit\(aqs description and date
.IP \(bu 2
.
\fIedit\fP to edit this changeset (preserving date)
.UNINDENT
.sp
There are a number of ways to select the root changeset:
.INDENT 0.0
.IP \(bu 2
.
Specify ANCESTOR directly
.IP \(bu 2
.
Use \-\-outgoing \-\- it will be the first linear changeset not
included in destination. (See \%\fBhg help config.paths.default\-push\fP\:)
.IP \(bu 2
.
Otherwise, the value from the "histedit.defaultrev" config option
is used as a revset to select the base revision when ANCESTOR is not
specified. The first revision returned by the revset is used. By
default, this selects the editable history that is unique to the
ancestry of the working directory.
.UNINDENT
.sp
If you use \-\-outgoing, this command will abort if there are ambiguous
outgoing revisions. For example, if there are multiple branches
containing outgoing revisions.
.sp
Use "min(outgoing() and ::.)" or similar revset specification
instead of \-\-outgoing to specify edit target revision exactly in
such ambiguous situation. See \%\fBhg help revsets\fP\: for detail about
selecting revisions.
.sp
Examples:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
.
A number of changes have been made.
Revision 3 is no longer needed.
.sp
Start history editing from revision 3:
.sp
.nf
.ft C
hg histedit \-r 3
.ft P
.fi
.sp
An editor opens, containing the list of revisions,
with specific actions specified:
.sp
.nf
.ft C
pick 5339bf82f0ca 3 Zworgle the foobar
pick 8ef592ce7cc4 4 Bedazzle the zerlog
pick 0a9639fcda9d 5 Morgify the cromulancy
.ft P
.fi
.sp
Additional information about the possible actions
to take appears below the list of revisions.
.sp
To remove revision 3 from the history,
its action (at the beginning of the relevant line)
is changed to \(aqdrop\(aq:
.sp
.nf
.ft C
drop 5339bf82f0ca 3 Zworgle the foobar
pick 8ef592ce7cc4 4 Bedazzle the zerlog
pick 0a9639fcda9d 5 Morgify the cromulancy
.ft P
.fi
.IP \(bu 2
.
A number of changes have been made.
Revision 2 and 4 need to be swapped.
.sp
Start history editing from revision 2:
.sp
.nf
.ft C
hg histedit \-r 2
.ft P
.fi
.sp
An editor opens, containing the list of revisions,
with specific actions specified:
.sp
.nf
.ft C
pick 252a1af424ad 2 Blorb a morgwazzle
pick 5339bf82f0ca 3 Zworgle the foobar
pick 8ef592ce7cc4 4 Bedazzle the zerlog
.ft P
.fi
.sp
To swap revision 2 and 4, its lines are swapped
in the editor:
.sp
.nf
.ft C
pick 8ef592ce7cc4 4 Bedazzle the zerlog
pick 5339bf82f0ca 3 Zworgle the foobar
pick 252a1af424ad 2 Blorb a morgwazzle
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Returns 0 on success, 1 if user intervention is required (not only
for intentional "edit" command, but also for resolving unexpected
conflicts).
.sp
Options:
.INDENT 0.0
.TP
.BI \-\-commands \ <FILE>
.
read history edits from the specified file
.TP
.B \-c,  \-\-continue
.
continue an edit already in progress
.TP
.B \-\-edit\-plan
.
edit remaining actions list
.TP
.B \-k,  \-\-keep
.
don\(aqt strip old nodes after edit is complete
.TP
.B \-\-abort
.
abort an edit in progress
.TP
.B \-o,  \-\-outgoing
.
changesets not found in destination
.TP
.B \-f,  \-\-force
.
force outgoing even for unrelated repositories
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
first revision to be edited
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS journal
.sp
track previous positions of bookmarks (EXPERIMENTAL)
.sp
This extension adds a new command: \fIhg journal\fP, which shows you where
bookmarks were previously located.
.SS Commands
.SS journal
.sp
show the previous position of bookmarks and the working copy:
.sp
.nf
.ft C
hg journal [OPTION]... [BOOKMARKNAME]
.ft P
.fi
.sp
The journal is used to see the previous commits that bookmarks and the
working copy pointed to. By default the previous locations for the working
copy.  Passing a bookmark name will show all the previous positions of
that bookmark. Use the \-\-all switch to show previous locations for all
bookmarks and the working copy; each line will then include the bookmark
name, or \(aq.\(aq for the working copy, as well.
.sp
If \fIname\fP starts with \fIre:\fP, the remainder of the name is treated as
a regular expression. To match a name that actually starts with \fIre:\fP,
use the prefix \fIliteral:\fP.
.sp
By default hg journal only shows the commit hash and the command that was
running at that time. \-v/\-\-verbose will show the prior hash, the user, and
the time at which it happened.
.sp
Use \-c/\-\-commits to output log information on each commit hash; at this
point you can use the usual \fI\-\-patch\fP, \fI\-\-git\fP, \fI\-\-stat\fP and \fI\-\-template\fP
switches to alter the log output for these.
.sp
\fIhg journal \-T json\fP can be used to produce machine readable output.
.sp
Options:
.INDENT 0.0
.TP
.B \-\-all
.
show history for all names
.TP
.B \-c,  \-\-commits
.
show commit metadata
.TP
.B \-p,  \-\-patch
.
show patch
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.BI \-l,  \-\-limit \ <NUM>
.
limit number of changes displayed
.TP
.B \-\-stat
.
output diffstat\-style summary of changes
.TP
.BI \-\-style \ <STYLE>
.
display using template map file (DEPRECATED)
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template
.UNINDENT
.SS keyword
.sp
expand keywords in tracked files
.sp
This extension expands RCS/CVS\-like or self\-customized $Keywords$ in
tracked text files selected by your configuration.
.sp
Keywords are only expanded in local repositories and not stored in the
change history. The mechanism can be regarded as a convenience for the
current user or for archive distribution.
.sp
Keywords expand to the changeset data pertaining to the latest change
relative to the working directory parent of each file.
.sp
Configuration is done in the [keyword], [keywordset] and [keywordmaps]
sections of hgrc files.
.sp
Example:
.sp
.nf
.ft C
[keyword]
# expand keywords in every python file except those matching "x*"
**.py =
x*    = ignore

[keywordset]
# prefer svn\- over cvs\-like default keywordmaps
svn = True
.ft P
.fi
.IP Note
.
The more specific you are in your filename patterns the less you
lose speed in huge repositories.
.RE
.sp
For [keywordmaps] template mapping and expansion demonstration and
control run \%\fBhg kwdemo\fP\:. See \%\fBhg help templates\fP\: for a list of
available templates and filters.
.sp
Three additional date template filters are provided:
.INDENT 0.0
.TP
.B \fButcdate\fP
.sp
"2006/09/18 15:13:13"
.TP
.B \fBsvnutcdate\fP
.sp
"2006\-09\-18 15:13:13Z"
.TP
.B \fBsvnisodate\fP
.sp
"2006\-09\-18 08:13:13 \-700 (Mon, 18 Sep 2006)"
.UNINDENT
.sp
The default template mappings (view with \%\fBhg kwdemo \-d\fP\:) can be
replaced with customized keywords and templates. Again, run
\%\fBhg kwdemo\fP\: to control the results of your configuration changes.
.sp
Before changing/disabling active keywords, you must run \%\fBhg kwshrink\fP\:
to avoid storing expanded keywords in the change history.
.sp
To force expansion after enabling it, or a configuration change, run
\%\fBhg kwexpand\fP\:.
.sp
Expansions spanning more than one line and incremental expansions,
like CVS\(aq $Log$, are not supported. A keyword template map "Log =
{desc}" expands to the first line of the changeset description.
.SS Commands
.SS kwdemo
.sp
print [keywordmaps] configuration and an expansion example:
.sp
.nf
.ft C
hg kwdemo [\-d] [\-f RCFILE] [TEMPLATEMAP]...
.ft P
.fi
.sp
Show current, custom, or default keyword template maps and their
expansions.
.sp
Extend the current configuration by specifying maps as arguments
and using \-f/\-\-rcfile to source an external hgrc file.
.sp
Use \-d/\-\-default to disable current configuration.
.sp
See \%\fBhg help templates\fP\: for information on templates and filters.
.sp
Options:
.INDENT 0.0
.TP
.B \-d,  \-\-default
.
show default keyword template maps
.TP
.BI \-f,  \-\-rcfile \ <FILE>
.
read maps from rcfile
.UNINDENT
.SS kwexpand
.sp
expand keywords in the working directory:
.sp
.nf
.ft C
hg kwexpand [OPTION]... [FILE]...
.ft P
.fi
.sp
Run after (re)enabling keyword expansion.
.sp
kwexpand refuses to run if given files contain local changes.
.sp
Options:
.INDENT 0.0
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS kwfiles
.sp
show files configured for keyword expansion:
.sp
.nf
.ft C
hg kwfiles [OPTION]... [FILE]...
.ft P
.fi
.sp
List which files in the working directory are matched by the
[keyword] configuration patterns.
.sp
Useful to prevent inadvertent keyword expansion and to speed up
execution by including only files that are actual candidates for
expansion.
.sp
See \%\fBhg help keyword\fP\: on how to construct patterns both for
inclusion and exclusion of files.
.sp
With \-A/\-\-all and \-v/\-\-verbose the codes used to show the status
of files are:
.sp
.nf
.ft C
K = keyword expansion candidate
k = keyword expansion candidate (not tracked)
I = ignored
i = ignored (not tracked)
.ft P
.fi
.sp
Options:
.INDENT 0.0
.TP
.B \-A,  \-\-all
.
show keyword status flags of all files
.TP
.B \-i,  \-\-ignore
.
show files excluded from expansion
.TP
.B \-u,  \-\-unknown
.
only show unknown (not tracked) files
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS kwshrink
.sp
revert expanded keywords in the working directory:
.sp
.nf
.ft C
hg kwshrink [OPTION]... [FILE]...
.ft P
.fi
.sp
Must be run before changing/disabling active keywords.
.sp
kwshrink refuses to run if given files contain local changes.
.sp
Options:
.INDENT 0.0
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS largefiles
.sp
track large binary files
.sp
Large binary files tend to be not very compressible, not very
diffable, and not at all mergeable. Such files are not handled
efficiently by Mercurial\(aqs storage format (revlog), which is based on
compressed binary deltas; storing large binary files as regular
Mercurial files wastes bandwidth and disk space and increases
Mercurial\(aqs memory usage. The largefiles extension addresses these
problems by adding a centralized client\-server layer on top of
Mercurial: largefiles live in a \fIcentral store\fP out on the network
somewhere, and you only fetch the revisions that you need when you
need them.
.sp
largefiles works by maintaining a "standin file" in .hglf/ for each
largefile. The standins are small (41 bytes: an SHA\-1 hash plus
newline) and are tracked by Mercurial. Largefile revisions are
identified by the SHA\-1 hash of their contents, which is written to
the standin. largefiles uses that revision ID to get/put largefile
revisions from/to the central store. This saves both disk space and
bandwidth, since you don\(aqt need to retrieve all historical revisions
of large files when you clone or pull.
.sp
To start a new repository or add new large binary files, just add
\-\-large to your \%\fBhg add\fP\: command. For example:
.sp
.nf
.ft C
$ dd if=/dev/urandom of=randomdata count=2000
$ hg add \-\-large randomdata
$ hg commit \-m "add randomdata as a largefile"
.ft P
.fi
.sp
When you push a changeset that adds/modifies largefiles to a remote
repository, its largefile revisions will be uploaded along with it.
Note that the remote Mercurial must also have the largefiles extension
enabled for this to work.
.sp
When you pull a changeset that affects largefiles from a remote
repository, the largefiles for the changeset will by default not be
pulled down. However, when you update to such a revision, any
largefiles needed by that revision are downloaded and cached (if
they have never been downloaded before). One way to pull largefiles
when pulling is thus to use \-\-update, which will update your working
copy to the latest pulled revision (and thereby downloading any new
largefiles).
.sp
If you want to pull largefiles you don\(aqt need for update yet, then
you can use pull with the \fI\-\-lfrev\fP option or the \%\fBhg lfpull\fP\: command.
.sp
If you know you are pulling from a non\-default location and want to
download all the largefiles that correspond to the new changesets at
the same time, then you can pull with \fI\-\-lfrev "pulled()"\fP.
.sp
If you just want to ensure that you will have the largefiles needed to
merge or rebase with new heads that you are pulling, then you can pull
with \fI\-\-lfrev "head(pulled())"\fP flag to pre\-emptively download any largefiles
that are new in the heads you are pulling.
.sp
Keep in mind that network access may now be required to update to
changesets that you have not previously updated to. The nature of the
largefiles extension means that updating is no longer guaranteed to
be a local\-only operation.
.sp
If you already have large files tracked by Mercurial without the
largefiles extension, you will need to convert your repository in
order to benefit from largefiles. This is done with the
\%\fBhg lfconvert\fP\: command:
.sp
.nf
.ft C
$ hg lfconvert \-\-size 10 oldrepo newrepo
.ft P
.fi
.sp
In repositories that already have largefiles in them, any new file
over 10MB will automatically be added as a largefile. To change this
threshold, set \fBlargefiles.minsize\fP in your Mercurial config file
to the minimum size in megabytes to track as a largefile, or use the
\-\-lfsize option to the add command (also in megabytes):
.sp
.nf
.ft C
[largefiles]
minsize = 2

$ hg add \-\-lfsize 2
.ft P
.fi
.sp
The \fBlargefiles.patterns\fP config option allows you to specify a list
of filename patterns (see \%\fBhg help patterns\fP\:) that should always be
tracked as largefiles:
.sp
.nf
.ft C
[largefiles]
patterns =
  *.jpg
  re:.*\e.(png|bmp)$
  library.zip
  content/audio/*
.ft P
.fi
.sp
Files that match one of these patterns will be added as largefiles
regardless of their size.
.sp
The \fBlargefiles.minsize\fP and \fBlargefiles.patterns\fP config options
will be ignored for any repositories not already containing a
largefile. To add the first largefile to a repository, you must
explicitly do so with the \-\-large flag passed to the \%\fBhg add\fP\:
command.
.SS Commands
.SS lfconvert
.sp
convert a normal repository to a largefiles repository:
.sp
.nf
.ft C
hg lfconvert SOURCE DEST [FILE ...]
.ft P
.fi
.sp
Convert repository SOURCE to a new repository DEST, identical to
SOURCE except that certain files will be converted as largefiles:
specifically, any file that matches any PATTERN \fIor\fP whose size is
above the minimum size threshold is converted as a largefile. The
size used to determine whether or not to track a file as a
largefile is the size of the first version of the file. The
minimum size can be specified either with \-\-size or in
configuration as \fBlargefiles.size\fP.
.sp
After running this command you will need to make sure that
largefiles is enabled anywhere you intend to push the new
repository.
.sp
Use \-\-to\-normal to convert largefiles back to normal files; after
this, the DEST repository can be used without largefiles at all.
.sp
Options:
.INDENT 0.0
.TP
.BI \-s,  \-\-size \ <SIZE>
.
minimum size (MB) for files to be converted as largefiles
.TP
.B \-\-to\-normal
.
convert from a largefiles repo to a normal repo
.UNINDENT
.SS lfpull
.sp
pull largefiles for the specified revisions from the specified source:
.sp
.nf
.ft C
hg lfpull \-r REV... [\-e CMD] [\-\-remotecmd CMD] [SOURCE]
.ft P
.fi
.sp
Pull largefiles that are referenced from local changesets but missing
locally, pulling from a remote repository to the local cache.
.sp
If SOURCE is omitted, the \(aqdefault\(aq path will be used.
See \%\fBhg help urls\fP\: for more information.
.sp
Some examples:
.INDENT 0.0
.IP \(bu 2
.
pull largefiles for all branch heads:
.sp
.nf
.ft C
hg lfpull \-r "head() and not closed()"
.ft P
.fi
.IP \(bu 2
.
pull largefiles on the default branch:
.sp
.nf
.ft C
hg lfpull \-r "branch(default)"
.ft P
.fi
.UNINDENT
.sp
Options:
.INDENT 0.0
.TP
.BI \-r,  \-\-rev \ <VALUE[+]>
.
pull largefiles for these revisions
.TP
.BI \-e,  \-\-ssh \ <CMD>
.
specify ssh command to use
.TP
.BI \-\-remotecmd \ <CMD>
.
specify hg command to run on the remote side
.TP
.B \-\-insecure
.
do not verify server certificate (ignoring web.cacerts config)
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS logtoprocess
.sp
send ui.log() data to a subprocess (EXPERIMENTAL)
.sp
This extension lets you specify a shell command per ui.log() event,
sending all remaining arguments to as environment variables to that command.
.sp
Each positional argument to the method results in a \fIMSG[N]\fP key in the
environment, starting at 1 (so \fIMSG1\fP, \fIMSG2\fP, etc.). Each keyword argument
is set as a \fIOPT_UPPERCASE_KEY\fP variable (so the key is uppercased, and
prefixed with \fIOPT_\fP). The original event name is passed in the \fIEVENT\fP
environment variable, and the process ID of mercurial is given in \fIHGPID\fP.
.sp
So given a call \fIui.log(\(aqfoo\(aq, \(aqbar\(aq, \(aqbaz\(aq, spam=\(aqeggs\(aq), a script configured
for the \(gafoo\fP event can expect an environment with \fIMSG1=bar\fP, \fIMSG2=baz\fP, and
\fIOPT_SPAM=eggs\fP.
.sp
Scripts are configured in the \fI[logtoprocess]\fP section, each key an event name.
For example:
.sp
.nf
.ft C
[logtoprocess]
commandexception = echo "$MSG2$MSG3" > /var/log/mercurial_exceptions.log
.ft P
.fi
.sp
would log the warning message and traceback of any failed command dispatch.
.sp
Scripts are run asynchronously as detached daemon processes; mercurial will
not ensure that they exit cleanly.
.SS mq
.sp
manage a stack of patches
.sp
This extension lets you work with a stack of patches in a Mercurial
repository. It manages two stacks of patches \- all known patches, and
applied patches (subset of known patches).
.sp
Known patches are represented as patch files in the .hg/patches
directory. Applied patches are both patch files and changesets.
.sp
Common tasks (use \%\fBhg help COMMAND\fP\: for more details):
.sp
.nf
.ft C
create new patch                          qnew
import existing patch                     qimport

print patch series                        qseries
print applied patches                     qapplied

add known patch to applied stack          qpush
remove patch from applied stack           qpop
refresh contents of top applied patch     qrefresh
.ft P
.fi
.sp
By default, mq will automatically use git patches when required to
avoid losing file mode changes, copy records, binary files or empty
files creations or deletions. This behavior can be configured with:
.sp
.nf
.ft C
[mq]
git = auto/keep/yes/no
.ft P
.fi
.sp
If set to \(aqkeep\(aq, mq will obey the [diff] section configuration while
preserving existing git patches upon qrefresh. If set to \(aqyes\(aq or
\(aqno\(aq, mq will override the [diff] section and always generate git or
regular patches, possibly losing data in the second case.
.sp
It may be desirable for mq changesets to be kept in the secret phase (see
\%\fBhg help phases\fP\:), which can be enabled with the following setting:
.sp
.nf
.ft C
[mq]
secret = True
.ft P
.fi
.sp
You will by default be managing a patch queue named "patches". You can
create other, independent patch queues with the \%\fBhg qqueue\fP\: command.
.sp
If the working directory contains uncommitted files, qpush, qpop and
qgoto abort immediately. If \-f/\-\-force is used, the changes are
discarded. Setting:
.sp
.nf
.ft C
[mq]
keepchanges = True
.ft P
.fi
.sp
make them behave as if \-\-keep\-changes were passed, and non\-conflicting
local changes will be tolerated and preserved. If incompatible options
such as \-f/\-\-force or \-\-exact are passed, this setting is ignored.
.sp
This extension used to provide a strip command. This command now lives
in the strip extension.
.SS Commands
.SS qapplied
.sp
print the patches already applied:
.sp
.nf
.ft C
hg qapplied [\-1] [\-s] [PATCH]
.ft P
.fi
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-1,  \-\-last
.
show only the preceding applied patch
.TP
.B \-s,  \-\-summary
.
print first line of patch header
.UNINDENT
.SS qclone
.sp
clone main and patch repository at same time:
.sp
.nf
.ft C
hg qclone [OPTION]... SOURCE [DEST]
.ft P
.fi
.sp
If source is local, destination will have no patches applied. If
source is remote, this command can not check if patches are
applied in source, so cannot guarantee that patches are not
applied in destination. If you clone remote repository, be sure
before that it has no patches applied.
.sp
Source patch repository is looked for in <src>/.hg/patches by
default. Use \-p <url> to change.
.sp
The patch directory must be a nested Mercurial repository, as
would be created by \%\fBhg init \-\-mq\fP\:.
.sp
Return 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-\-pull
.
use pull protocol to copy metadata
.TP
.B \-U,  \-\-noupdate
.
do not update the new working directories
.TP
.B \-\-uncompressed
.
use uncompressed transfer (fast over LAN)
.TP
.BI \-p,  \-\-patches \ <REPO>
.
location of source patch repository
.TP
.BI \-e,  \-\-ssh \ <CMD>
.
specify ssh command to use
.TP
.BI \-\-remotecmd \ <CMD>
.
specify hg command to run on the remote side
.TP
.B \-\-insecure
.
do not verify server certificate (ignoring web.cacerts config)
.UNINDENT
.SS qcommit
.sp
commit changes in the queue repository (DEPRECATED):
.sp
.nf
.ft C
hg qcommit [OPTION]... [FILE]...
.ft P
.fi
.sp
This command is deprecated; use \%\fBhg commit \-\-mq\fP\: instead.
.sp
Options:
.INDENT 0.0
.TP
.B \-A,  \-\-addremove
.
mark new/missing files as added/removed before committing
.TP
.B \-\-close\-branch
.
mark a branch head as closed
.TP
.B \-\-amend
.
amend the parent of the working directory
.TP
.B \-s,  \-\-secret
.
use the secret phase for committing
.TP
.B \-e,  \-\-edit
.
invoke editor on commit messages
.TP
.B \-i,  \-\-interactive
.
use interactive mode
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.TP
.BI \-m,  \-\-message \ <TEXT>
.
use text as commit message
.TP
.BI \-l,  \-\-logfile \ <FILE>
.
read commit message from file
.TP
.BI \-d,  \-\-date \ <DATE>
.
record the specified date as commit date
.TP
.BI \-u,  \-\-user \ <USER>
.
record the specified user as committer
.TP
.B \-S,  \-\-subrepos
.
recurse into subrepositories
.UNINDENT
.sp
[+] marked option can be specified multiple times
.INDENT 0.0
.INDENT 3.5
.sp
aliases: qci
.UNINDENT
.UNINDENT
.SS qdelete
.sp
remove patches from queue:
.sp
.nf
.ft C
hg qdelete [\-k] [PATCH]...
.ft P
.fi
.sp
The patches must not be applied, and at least one patch is required. Exact
patch identifiers must be given. With \-k/\-\-keep, the patch files are
preserved in the patch directory.
.sp
To stop managing a patch and move it into permanent history,
use the \%\fBhg qfinish\fP\: command.
.sp
Options:
.INDENT 0.0
.TP
.B \-k,  \-\-keep
.
keep patch file
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
stop managing a revision (DEPRECATED)
.UNINDENT
.sp
[+] marked option can be specified multiple times
.INDENT 0.0
.INDENT 3.5
.sp
aliases: qremove qrm
.UNINDENT
.UNINDENT
.SS qdiff
.sp
diff of the current patch and subsequent modifications:
.sp
.nf
.ft C
hg qdiff [OPTION]... [FILE]...
.ft P
.fi
.sp
Shows a diff which includes the current patch as well as any
changes which have been made in the working directory since the
last refresh (thus showing what the current patch would become
after a qrefresh).
.sp
Use \%\fBhg diff\fP\: if you only want to see the changes made since the
last qrefresh, or \%\fBhg export qtip\fP\: if you want to see changes
made by the current patch without including changes made since the
qrefresh.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-a,  \-\-text
.
treat all files as text
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.B \-\-binary
.
generate binary diffs in git mode (default)
.TP
.B \-\-nodates
.
omit dates from diff headers
.TP
.B \-\-noprefix
.
omit a/ and b/ prefixes from filenames
.TP
.B \-p,  \-\-show\-function
.
show which function each change is in
.TP
.B \-\-reverse
.
produce a diff that undoes the changes
.TP
.B \-w,  \-\-ignore\-all\-space
.
ignore white space when comparing lines
.TP
.B \-b,  \-\-ignore\-space\-change
.
ignore changes in the amount of white space
.TP
.B \-B,  \-\-ignore\-blank\-lines
.
ignore changes whose lines are all blank
.TP
.BI \-U,  \-\-unified \ <NUM>
.
number of lines of context to show
.TP
.B \-\-stat
.
output diffstat\-style summary of changes
.TP
.BI \-\-root \ <DIR>
.
produce diffs relative to subdirectory
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS qfinish
.sp
move applied patches into repository history:
.sp
.nf
.ft C
hg qfinish [\-a] [REV]...
.ft P
.fi
.sp
Finishes the specified revisions (corresponding to applied
patches) by moving them out of mq control into regular repository
history.
.sp
Accepts a revision range or the \-a/\-\-applied option. If \-\-applied
is specified, all applied mq revisions are removed from mq
control. Otherwise, the given revisions must be at the base of the
stack of applied patches.
.sp
This can be especially useful if your changes have been applied to
an upstream repository, or if you are about to push your changes
to upstream.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-a,  \-\-applied
.
finish all applied changesets
.UNINDENT
.SS qfold
.sp
fold the named patches into the current patch:
.sp
.nf
.ft C
hg qfold [\-e] [\-k] [\-m TEXT] [\-l FILE] PATCH...
.ft P
.fi
.sp
Patches must not yet be applied. Each patch will be successively
applied to the current patch in the order given. If all the
patches apply successfully, the current patch will be refreshed
with the new cumulative patch, and the folded patches will be
deleted. With \-k/\-\-keep, the folded patch files will not be
removed afterwards.
.sp
The header for each folded patch will be concatenated with the
current patch header, separated by a line of \fB* * *\fP.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-e,  \-\-edit
.
invoke editor on commit messages
.TP
.B \-k,  \-\-keep
.
keep folded patch files
.TP
.BI \-m,  \-\-message \ <TEXT>
.
use text as commit message
.TP
.BI \-l,  \-\-logfile \ <FILE>
.
read commit message from file
.UNINDENT
.SS qgoto
.sp
push or pop patches until named patch is at top of stack:
.sp
.nf
.ft C
hg qgoto [OPTION]... PATCH
.ft P
.fi
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-\-keep\-changes
.
tolerate non\-conflicting local changes
.TP
.B \-f,  \-\-force
.
overwrite any local changes
.TP
.B \-\-no\-backup
.
do not save backup copies of files
.UNINDENT
.SS qguard
.sp
set or print guards for a patch:
.sp
.nf
.ft C
hg qguard [\-l] [\-n] [PATCH] [\-\- [+GUARD]... [\-GUARD]...]
.ft P
.fi
.sp
Guards control whether a patch can be pushed. A patch with no
guards is always pushed. A patch with a positive guard ("+foo") is
pushed only if the \%\fBhg qselect\fP\: command has activated it. A patch with
a negative guard ("\-foo") is never pushed if the \%\fBhg qselect\fP\: command
has activated it.
.sp
With no arguments, print the currently active guards.
With arguments, set guards for the named patch.
.IP Note
.
Specifying negative guards now requires \(aq\-\-\(aq.
.RE
.sp
To set guards on another patch:
.sp
.nf
.ft C
hg qguard other.patch \-\- +2.6.17 \-stable
.ft P
.fi
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-l,  \-\-list
.
list all patches and guards
.TP
.B \-n,  \-\-none
.
drop all guards
.UNINDENT
.SS qheader
.sp
print the header of the topmost or specified patch:
.sp
.nf
.ft C
hg qheader [PATCH]
.ft P
.fi
.sp
Returns 0 on success.
.SS qimport
.sp
import a patch or existing changeset:
.sp
.nf
.ft C
hg qimport [\-e] [\-n NAME] [\-f] [\-g] [\-P] [\-r REV]... [FILE]...
.ft P
.fi
.sp
The patch is inserted into the series after the last applied
patch. If no patches have been applied, qimport prepends the patch
to the series.
.sp
The patch will have the same name as its source file unless you
give it a new one with \-n/\-\-name.
.sp
You can register an existing patch inside the patch directory with
the \-e/\-\-existing flag.
.sp
With \-f/\-\-force, an existing patch of the same name will be
overwritten.
.sp
An existing changeset may be placed under mq control with \-r/\-\-rev
(e.g. qimport \-\-rev . \-n patch will place the current revision
under mq control). With \-g/\-\-git, patches imported with \-\-rev will
use the git diff format. See the diffs help topic for information
on why this is important for preserving rename/copy information
and permission changes. Use \%\fBhg qfinish\fP\: to remove changesets
from mq control.
.sp
To import a patch from standard input, pass \- as the patch file.
When importing from standard input, a patch name must be specified
using the \-\-name flag.
.sp
To import an existing patch while renaming it:
.sp
.nf
.ft C
hg qimport \-e existing\-patch \-n new\-name
.ft P
.fi
.sp
Returns 0 if import succeeded.
.sp
Options:
.INDENT 0.0
.TP
.B \-e,  \-\-existing
.
import file in patch directory
.TP
.BI \-n,  \-\-name \ <NAME>
.
name of patch file
.TP
.B \-f,  \-\-force
.
overwrite existing files
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
place existing revisions under mq control
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.B \-P,  \-\-push
.
qpush after importing
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS qinit
.sp
init a new queue repository (DEPRECATED):
.sp
.nf
.ft C
hg qinit [\-c]
.ft P
.fi
.sp
The queue repository is unversioned by default. If
\-c/\-\-create\-repo is specified, qinit will create a separate nested
repository for patches (qinit \-c may also be run later to convert
an unversioned patch repository into a versioned one). You can use
qcommit to commit changes to this queue repository.
.sp
This command is deprecated. Without \-c, it\(aqs implied by other relevant
commands. With \-c, use \%\fBhg init \-\-mq\fP\: instead.
.sp
Options:
.INDENT 0.0
.TP
.B \-c,  \-\-create\-repo
.
create queue repository
.UNINDENT
.SS qnew
.sp
create a new patch:
.sp
.nf
.ft C
hg qnew [\-e] [\-m TEXT] [\-l FILE] PATCH [FILE]...
.ft P
.fi
.sp
qnew creates a new patch on top of the currently\-applied patch (if
any). The patch will be initialized with any outstanding changes
in the working directory. You may also use \-I/\-\-include,
\-X/\-\-exclude, and/or a list of files after the patch name to add
only changes to matching files to the new patch, leaving the rest
as uncommitted modifications.
.sp
\-u/\-\-user and \-d/\-\-date can be used to set the (given) user and
date, respectively. \-U/\-\-currentuser and \-D/\-\-currentdate set user
to current user and date to current date.
.sp
\-e/\-\-edit, \-m/\-\-message or \-l/\-\-logfile set the patch header as
well as the commit message. If none is specified, the header is
empty and the commit message is \(aq[mq]: PATCH\(aq.
.sp
Use the \-g/\-\-git option to keep the patch in the git extended diff
format. Read the diffs help topic for more information on why this
is important for preserving permission changes and copy/rename
information.
.sp
Returns 0 on successful creation of a new patch.
.sp
Options:
.INDENT 0.0
.TP
.B \-e,  \-\-edit
.
invoke editor on commit messages
.TP
.B \-f,  \-\-force
.
import uncommitted changes (DEPRECATED)
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.B \-U,  \-\-currentuser
.
add "From: <current user>" to patch
.TP
.BI \-u,  \-\-user \ <USER>
.
add "From: <USER>" to patch
.TP
.B \-D,  \-\-currentdate
.
add "Date: <current date>" to patch
.TP
.BI \-d,  \-\-date \ <DATE>
.
add "Date: <DATE>" to patch
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.TP
.BI \-m,  \-\-message \ <TEXT>
.
use text as commit message
.TP
.BI \-l,  \-\-logfile \ <FILE>
.
read commit message from file
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS qnext
.sp
print the name of the next pushable patch:
.sp
.nf
.ft C
hg qnext [\-s]
.ft P
.fi
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-s,  \-\-summary
.
print first line of patch header
.UNINDENT
.SS qpop
.sp
pop the current patch off the stack:
.sp
.nf
.ft C
hg qpop [\-a] [\-f] [PATCH | INDEX]
.ft P
.fi
.sp
Without argument, pops off the top of the patch stack. If given a
patch name, keeps popping off patches until the named patch is at
the top of the stack.
.sp
By default, abort if the working directory contains uncommitted
changes. With \-\-keep\-changes, abort only if the uncommitted files
overlap with patched files. With \-f/\-\-force, backup and discard
changes made to such files.
.sp
Return 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-a,  \-\-all
.
pop all patches
.TP
.BI \-n,  \-\-name \ <NAME>
.
queue name to pop (DEPRECATED)
.TP
.B \-\-keep\-changes
.
tolerate non\-conflicting local changes
.TP
.B \-f,  \-\-force
.
forget any local changes to patched files
.TP
.B \-\-no\-backup
.
do not save backup copies of files
.UNINDENT
.SS qprev
.sp
print the name of the preceding applied patch:
.sp
.nf
.ft C
hg qprev [\-s]
.ft P
.fi
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-s,  \-\-summary
.
print first line of patch header
.UNINDENT
.SS qpush
.sp
push the next patch onto the stack:
.sp
.nf
.ft C
hg qpush [\-f] [\-l] [\-a] [\-\-move] [PATCH | INDEX]
.ft P
.fi
.sp
By default, abort if the working directory contains uncommitted
changes. With \-\-keep\-changes, abort only if the uncommitted files
overlap with patched files. With \-f/\-\-force, backup and patch over
uncommitted changes.
.sp
Return 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-\-keep\-changes
.
tolerate non\-conflicting local changes
.TP
.B \-f,  \-\-force
.
apply on top of local changes
.TP
.B \-e,  \-\-exact
.
apply the target patch to its recorded parent
.TP
.B \-l,  \-\-list
.
list patch name in commit text
.TP
.B \-a,  \-\-all
.
apply all patches
.TP
.B \-m,  \-\-merge
.
merge from another queue (DEPRECATED)
.TP
.BI \-n,  \-\-name \ <NAME>
.
merge queue name (DEPRECATED)
.TP
.B \-\-move
.
reorder patch series and apply only the patch
.TP
.B \-\-no\-backup
.
do not save backup copies of files
.UNINDENT
.SS qqueue
.sp
manage multiple patch queues:
.sp
.nf
.ft C
hg qqueue [OPTION] [QUEUE]
.ft P
.fi
.sp
Supports switching between different patch queues, as well as creating
new patch queues and deleting existing ones.
.sp
Omitting a queue name or specifying \-l/\-\-list will show you the registered
queues \- by default the "normal" patches queue is registered. The currently
active queue will be marked with "(active)". Specifying \-\-active will print
only the name of the active queue.
.sp
To create a new queue, use \-c/\-\-create. The queue is automatically made
active, except in the case where there are applied patches from the
currently active queue in the repository. Then the queue will only be
created and switching will fail.
.sp
To delete an existing queue, use \-\-delete. You cannot delete the currently
active queue.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-l,  \-\-list
.
list all available queues
.TP
.B \-\-active
.
print name of active queue
.TP
.B \-c,  \-\-create
.
create new queue
.TP
.B \-\-rename
.
rename active queue
.TP
.B \-\-delete
.
delete reference to queue
.TP
.B \-\-purge
.
delete queue, and remove patch dir
.UNINDENT
.SS qrefresh
.sp
update the current patch:
.sp
.nf
.ft C
hg qrefresh [\-I] [\-X] [\-e] [\-m TEXT] [\-l FILE] [\-s] [FILE]...
.ft P
.fi
.sp
If any file patterns are provided, the refreshed patch will
contain only the modifications that match those patterns; the
remaining modifications will remain in the working directory.
.sp
If \-s/\-\-short is specified, files currently included in the patch
will be refreshed just like matched files and remain in the patch.
.sp
If \-e/\-\-edit is specified, Mercurial will start your configured editor for
you to enter a message. In case qrefresh fails, you will find a backup of
your message in \fB.hg/last\-message.txt\fP.
.sp
hg add/remove/copy/rename work as usual, though you might want to
use git\-style patches (\-g/\-\-git or [diff] git=1) to track copies
and renames. See the diffs help topic for more information on the
git diff format.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-e,  \-\-edit
.
invoke editor on commit messages
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.B \-s,  \-\-short
.
refresh only files already in the patch and specified files
.TP
.B \-U,  \-\-currentuser
.
add/update author field in patch with current user
.TP
.BI \-u,  \-\-user \ <USER>
.
add/update author field in patch with given user
.TP
.B \-D,  \-\-currentdate
.
add/update date field in patch with current date
.TP
.BI \-d,  \-\-date \ <DATE>
.
add/update date field in patch with given date
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.TP
.BI \-m,  \-\-message \ <TEXT>
.
use text as commit message
.TP
.BI \-l,  \-\-logfile \ <FILE>
.
read commit message from file
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS qrename
.sp
rename a patch:
.sp
.nf
.ft C
hg qrename PATCH1 [PATCH2]
.ft P
.fi
.sp
With one argument, renames the current patch to PATCH1.
With two arguments, renames PATCH1 to PATCH2.
.sp
Returns 0 on success.
.INDENT 0.0
.INDENT 3.5
.sp
aliases: qmv
.UNINDENT
.UNINDENT
.SS qrestore
.sp
restore the queue state saved by a revision (DEPRECATED):
.sp
.nf
.ft C
hg qrestore [\-d] [\-u] REV
.ft P
.fi
.sp
This command is deprecated, use \%\fBhg rebase\fP\: instead.
.sp
Options:
.INDENT 0.0
.TP
.B \-d,  \-\-delete
.
delete save entry
.TP
.B \-u,  \-\-update
.
update queue working directory
.UNINDENT
.SS qsave
.sp
save current queue state (DEPRECATED):
.sp
.nf
.ft C
hg qsave [\-m TEXT] [\-l FILE] [\-c] [\-n NAME] [\-e] [\-f]
.ft P
.fi
.sp
This command is deprecated, use \%\fBhg rebase\fP\: instead.
.sp
Options:
.INDENT 0.0
.TP
.B \-c,  \-\-copy
.
copy patch directory
.TP
.BI \-n,  \-\-name \ <NAME>
.
copy directory name
.TP
.B \-e,  \-\-empty
.
clear queue status file
.TP
.B \-f,  \-\-force
.
force copy
.TP
.BI \-m,  \-\-message \ <TEXT>
.
use text as commit message
.TP
.BI \-l,  \-\-logfile \ <FILE>
.
read commit message from file
.UNINDENT
.SS qselect
.sp
set or print guarded patches to push:
.sp
.nf
.ft C
hg qselect [OPTION]... [GUARD]...
.ft P
.fi
.sp
Use the \%\fBhg qguard\fP\: command to set or print guards on patch, then use
qselect to tell mq which guards to use. A patch will be pushed if
it has no guards or any positive guards match the currently
selected guard, but will not be pushed if any negative guards
match the current guard. For example:
.sp
.nf
.ft C
qguard foo.patch \-\- \-stable    (negative guard)
qguard bar.patch    +stable    (positive guard)
qselect stable
.ft P
.fi
.sp
This activates the "stable" guard. mq will skip foo.patch (because
it has a negative match) but push bar.patch (because it has a
positive match).
.sp
With no arguments, prints the currently active guards.
With one argument, sets the active guard.
.sp
Use \-n/\-\-none to deactivate guards (no other arguments needed).
When no guards are active, patches with positive guards are
skipped and patches with negative guards are pushed.
.sp
qselect can change the guards on applied patches. It does not pop
guarded patches by default. Use \-\-pop to pop back to the last
applied patch that is not guarded. Use \-\-reapply (which implies
\-\-pop) to push back to the current patch afterwards, but skip
guarded patches.
.sp
Use \-s/\-\-series to print a list of all guards in the series file
(no other arguments needed). Use \-v for more information.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-n,  \-\-none
.
disable all guards
.TP
.B \-s,  \-\-series
.
list all guards in series file
.TP
.B \-\-pop
.
pop to before first guarded applied patch
.TP
.B \-\-reapply
.
pop, then reapply patches
.UNINDENT
.SS qseries
.sp
print the entire series file:
.sp
.nf
.ft C
hg qseries [\-ms]
.ft P
.fi
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-m,  \-\-missing
.
print patches not in series
.TP
.B \-s,  \-\-summary
.
print first line of patch header
.UNINDENT
.SS qtop
.sp
print the name of the current patch:
.sp
.nf
.ft C
hg qtop [\-s]
.ft P
.fi
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-s,  \-\-summary
.
print first line of patch header
.UNINDENT
.SS qunapplied
.sp
print the patches not yet applied:
.sp
.nf
.ft C
hg qunapplied [\-1] [\-s] [PATCH]
.ft P
.fi
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-1,  \-\-first
.
show only the first patch
.TP
.B \-s,  \-\-summary
.
print first line of patch header
.UNINDENT
.SS notify
.sp
hooks for sending email push notifications
.sp
This extension implements hooks to send email notifications when
changesets are sent from or received by the local repository.
.sp
First, enable the extension as explained in \%\fBhg help extensions\fP\:, and
register the hook you want to run. \fBincoming\fP and \fBchangegroup\fP hooks
are run when changesets are received, while \fBoutgoing\fP hooks are for
changesets sent to another repository:
.sp
.nf
.ft C
[hooks]
# one email for each incoming changeset
incoming.notify = python:hgext.notify.hook
# one email for all incoming changesets
changegroup.notify = python:hgext.notify.hook

# one email for all outgoing changesets
outgoing.notify = python:hgext.notify.hook
.ft P
.fi
.sp
This registers the hooks. To enable notification, subscribers must
be assigned to repositories. The \fB[usersubs]\fP section maps multiple
repositories to a given recipient. The \fB[reposubs]\fP section maps
multiple recipients to a single repository:
.sp
.nf
.ft C
[usersubs]
# key is subscriber email, value is a comma\-separated list of repo patterns
user@host = pattern

[reposubs]
# key is repo pattern, value is a comma\-separated list of subscriber emails
pattern = user@host
.ft P
.fi
.sp
A \fBpattern\fP is a \fBglob\fP matching the absolute path to a repository,
optionally combined with a revset expression. A revset expression, if
present, is separated from the glob by a hash. Example:
.sp
.nf
.ft C
[reposubs]
*/widgets#branch(release) = qa\-team@example.com
.ft P
.fi
.sp
This sends to \fBqa\-team@example.com\fP whenever a changeset on the \fBrelease\fP
branch triggers a notification in any repository ending in \fBwidgets\fP.
.sp
In order to place them under direct user management, \fB[usersubs]\fP and
\fB[reposubs]\fP sections may be placed in a separate \fBhgrc\fP file and
incorporated by reference:
.sp
.nf
.ft C
[notify]
config = /path/to/subscriptionsfile
.ft P
.fi
.sp
Notifications will not be sent until the \fBnotify.test\fP value is set
to \fBFalse\fP; see below.
.sp
Notifications content can be tweaked with the following configuration entries:
.INDENT 0.0
.TP
.B notify.test
.
If \fBTrue\fP, print messages to stdout instead of sending them. Default: True.
.TP
.B notify.sources
.
Space\-separated list of change sources. Notifications are activated only
when a changeset\(aqs source is in this list. Sources may be:
.INDENT 7.0
.TP
.B \fBserve\fP
.sp
changesets received via http or ssh
.TP
.B \fBpull\fP
.sp
changesets received via \fBhg pull\fP
.TP
.B \fBunbundle\fP
.sp
changesets received via \fBhg unbundle\fP
.TP
.B \fBpush\fP
.sp
changesets sent or received via \fBhg push\fP
.TP
.B \fBbundle\fP
.sp
changesets sent via \fBhg unbundle\fP
.UNINDENT
.sp
Default: serve.
.TP
.B notify.strip
.
Number of leading slashes to strip from url paths. By default, notifications
reference repositories with their absolute path. \fBnotify.strip\fP lets you
turn them into relative paths. For example, \fBnotify.strip=3\fP will change
\fB/long/path/repository\fP into \fBrepository\fP. Default: 0.
.TP
.B notify.domain
.
Default email domain for sender or recipients with no explicit domain.
.TP
.B notify.style
.
Style file to use when formatting emails.
.TP
.B notify.template
.
Template to use when formatting emails.
.TP
.B notify.incoming
.
Template to use when run as an incoming hook, overriding \fBnotify.template\fP.
.TP
.B notify.outgoing
.
Template to use when run as an outgoing hook, overriding \fBnotify.template\fP.
.TP
.B notify.changegroup
.
Template to use when running as a changegroup hook, overriding
\fBnotify.template\fP.
.TP
.B notify.maxdiff
.
Maximum number of diff lines to include in notification email. Set to 0
to disable the diff, or \-1 to include all of it. Default: 300.
.TP
.B notify.maxsubject
.
Maximum number of characters in email\(aqs subject line. Default: 67.
.TP
.B notify.diffstat
.
Set to True to include a diffstat before diff content. Default: True.
.TP
.B notify.merge
.
If True, send notifications for merge changesets. Default: True.
.TP
.B notify.mbox
.
If set, append mails to this mbox file instead of sending. Default: None.
.TP
.B notify.fromauthor
.
If set, use the committer of the first changeset in a changegroup for
the "From" field of the notification mail. If not set, take the user
from the pushing repo.  Default: False.
.UNINDENT
.sp
If set, the following entries will also be used to customize the
notifications:
.INDENT 0.0
.TP
.B email.from
.
Email \fBFrom\fP address to use if none can be found in the generated
email content.
.TP
.B web.baseurl
.
Root repository URL to combine with repository paths when making
references. See also \fBnotify.strip\fP.
.UNINDENT
.SS pager
.sp
browse command output with an external pager (DEPRECATED)
.sp
Forcibly enable paging for individual commands that don\(aqt typically
request pagination with the attend\-<command> option. This setting
takes precedence over ignore options and defaults:
.sp
.nf
.ft C
[pager]
attend\-cat = false
.ft P
.fi
.SS patchbomb
.sp
command to send changesets as (a series of) patch emails
.sp
The series is started off with a "[PATCH 0 of N]" introduction, which
describes the series as a whole.
.sp
Each patch email has a Subject line of "[PATCH M of N] ...", using the
first line of the changeset description as the subject text. The
message contains two or three body parts:
.INDENT 0.0
.IP \(bu 2
.
The changeset description.
.IP \(bu 2
.
[Optional] The result of running diffstat on the patch.
.IP \(bu 2
.
The patch itself, as generated by \%\fBhg export\fP\:.
.UNINDENT
.sp
Each message refers to the first in the series using the In\-Reply\-To
and References headers, so they will show up as a sequence in threaded
mail and news readers, and in mail archives.
.sp
To configure other defaults, add a section like this to your
configuration file:
.sp
.nf
.ft C
[email]
from = My Name <my@email>
to = recipient1, recipient2, ...
cc = cc1, cc2, ...
bcc = bcc1, bcc2, ...
reply\-to = address1, address2, ...
.ft P
.fi
.sp
Use \fB[patchbomb]\fP as configuration section name if you need to
override global \fB[email]\fP address settings.
.sp
Then you can use the \%\fBhg email\fP\: command to mail a series of
changesets as a patchbomb.
.sp
You can also either configure the method option in the email section
to be a sendmail compatible mailer or fill out the [smtp] section so
that the patchbomb extension can automatically send patchbombs
directly from the commandline. See the [email] and [smtp] sections in
hgrc(5) for details.
.sp
By default, \%\fBhg email\fP\: will prompt for a \fBTo\fP or \fBCC\fP header if
you do not supply one via configuration or the command line.  You can
override this to never prompt by configuring an empty value:
.sp
.nf
.ft C
[email]
cc =
.ft P
.fi
.sp
You can control the default inclusion of an introduction message with the
\fBpatchbomb.intro\fP configuration option. The configuration is always
overwritten by command line flags like \-\-intro and \-\-desc:
.sp
.nf
.ft C
[patchbomb]
intro=auto   # include introduction message if more than 1 patch (default)
intro=never  # never include an introduction message
intro=always # always include an introduction message
.ft P
.fi
.sp
You can specify a template for flags to be added in subject prefixes. Flags
specified by \-\-flag option are exported as \fB{flags}\fP keyword:
.sp
.nf
.ft C
[patchbomb]
flagtemplate = "{separate(\(aq \(aq,
                          ifeq(branch, \(aqdefault\(aq, \(aq\(aq, branch|upper),
                          flags)}"
.ft P
.fi
.sp
You can set patchbomb to always ask for confirmation by setting
\fBpatchbomb.confirm\fP to true.
.SS Commands
.SS email
.sp
send changesets by email:
.sp
.nf
.ft C
hg email [OPTION]... [DEST]...
.ft P
.fi
.sp
By default, diffs are sent in the format generated by
\%\fBhg export\fP\:, one per message. The series starts with a "[PATCH 0
of N]" introduction, which describes the series as a whole.
.sp
Each patch email has a Subject line of "[PATCH M of N] ...", using
the first line of the changeset description as the subject text.
The message contains two or three parts. First, the changeset
description.
.sp
With the \-d/\-\-diffstat option, if the diffstat program is
installed, the result of running diffstat on the patch is inserted.
.sp
Finally, the patch itself, as generated by \%\fBhg export\fP\:.
.sp
With the \-d/\-\-diffstat or \-\-confirm options, you will be presented
with a final summary of all messages and asked for confirmation before
the messages are sent.
.sp
By default the patch is included as text in the email body for
easy reviewing. Using the \-a/\-\-attach option will instead create
an attachment for the patch. With \-i/\-\-inline an inline attachment
will be created. You can include a patch both as text in the email
body and as a regular or an inline attachment by combining the
\-a/\-\-attach or \-i/\-\-inline with the \-\-body option.
.sp
With \-B/\-\-bookmark changesets reachable by the given bookmark are
selected.
.sp
With \-o/\-\-outgoing, emails will be generated for patches not found
in the destination repository (or only those which are ancestors
of the specified revisions if any are provided)
.sp
With \-b/\-\-bundle, changesets are selected as for \-\-outgoing, but a
single email containing a binary Mercurial bundle as an attachment
will be sent. Use the \fBpatchbomb.bundletype\fP config option to
control the bundle type as with \%\fBhg bundle \-\-type\fP\:.
.sp
With \-m/\-\-mbox, instead of previewing each patchbomb message in a
pager or sending the messages directly, it will create a UNIX
mailbox file with the patch emails. This mailbox file can be
previewed with any mail user agent which supports UNIX mbox
files.
.sp
With \-n/\-\-test, all steps will run, but mail will not be sent.
You will be prompted for an email recipient address, a subject and
an introductory message describing the patches of your patchbomb.
Then when all is done, patchbomb messages are displayed.
.sp
In case email sending fails, you will find a backup of your series
introductory message in \fB.hg/last\-email.txt\fP.
.sp
The default behavior of this command can be customized through
configuration. (See \%\fBhg help patchbomb\fP\: for details)
.sp
Examples:
.sp
.nf
.ft C
hg email \-r 3000          # send patch 3000 only
hg email \-r 3000 \-r 3001  # send patches 3000 and 3001
hg email \-r 3000:3005     # send patches 3000 through 3005
hg email 3000             # send patch 3000 (deprecated)

hg email \-o               # send all patches not in default
hg email \-o DEST          # send all patches not in DEST
hg email \-o \-r 3000       # send all ancestors of 3000 not in default
hg email \-o \-r 3000 DEST  # send all ancestors of 3000 not in DEST

hg email \-B feature       # send all ancestors of feature bookmark

hg email \-b               # send bundle of all patches not in default
hg email \-b DEST          # send bundle of all patches not in DEST
hg email \-b \-r 3000       # bundle of all ancestors of 3000 not in default
hg email \-b \-r 3000 DEST  # bundle of all ancestors of 3000 not in DEST

hg email \-o \-m mbox &&    # generate an mbox file...
  mutt \-R \-f mbox         # ... and view it with mutt
hg email \-o \-m mbox &&    # generate an mbox file ...
  formail \-s sendmail \e   # ... and use formail to send from the mbox
    \-bm \-t < mbox         # ... using sendmail
.ft P
.fi
.sp
Before using this command, you will need to enable email in your
hgrc. See the [email] section in hgrc(5) for details.
.sp
Options:
.INDENT 0.0
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.B \-\-plain
.
omit hg patch header
.TP
.B \-o,  \-\-outgoing
.
send changes not found in the target repository
.TP
.B \-b,  \-\-bundle
.
send changes not in target as a binary bundle
.TP
.BI \-B,  \-\-bookmark \ <VALUE>
.
send changes only reachable by given bookmark
.TP
.BI \-\-bundlename \ <NAME>
.
name of the bundle attachment file (default: bundle)
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
a revision to send
.TP
.B \-\-force
.
run even when remote repository is unrelated (with \-b/\-\-bundle)
.TP
.BI \-\-base \ <REV[+]>
.
a base changeset to specify instead of a destination (with \-b/\-\-bundle)
.TP
.B \-\-intro
.
send an introduction email for a single patch
.TP
.B \-\-body
.
send patches as inline message text (default)
.TP
.B \-a,  \-\-attach
.
send patches as attachments
.TP
.B \-i,  \-\-inline
.
send patches as inline attachments
.TP
.BI \-\-bcc \ <VALUE[+]>
.
email addresses of blind carbon copy recipients
.TP
.BI \-c,  \-\-cc \ <VALUE[+]>
.
email addresses of copy recipients
.TP
.B \-\-confirm
.
ask for confirmation before sending
.TP
.B \-d,  \-\-diffstat
.
add diffstat output to messages
.TP
.BI \-\-date \ <VALUE>
.
use the given date as the sending date
.TP
.BI \-\-desc \ <VALUE>
.
use the given file as the series description
.TP
.BI \-f,  \-\-from \ <VALUE>
.
email address of sender
.TP
.B \-n,  \-\-test
.
print messages that would be sent
.TP
.BI \-m,  \-\-mbox \ <VALUE>
.
write messages to mbox file instead of sending them
.TP
.BI \-\-reply\-to \ <VALUE[+]>
.
email addresses replies should be sent to
.TP
.BI \-s,  \-\-subject \ <VALUE>
.
subject of first message (intro or single patch)
.TP
.BI \-\-in\-reply\-to \ <VALUE>
.
message identifier to reply to
.TP
.BI \-\-flag \ <VALUE[+]>
.
flags to add in subject prefixes
.TP
.BI \-t,  \-\-to \ <VALUE[+]>
.
email addresses of recipients
.TP
.BI \-e,  \-\-ssh \ <CMD>
.
specify ssh command to use
.TP
.BI \-\-remotecmd \ <CMD>
.
specify hg command to run on the remote side
.TP
.B \-\-insecure
.
do not verify server certificate (ignoring web.cacerts config)
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS purge
.sp
command to delete untracked files from the working directory
.SS Commands
.SS purge
.sp
removes files not tracked by Mercurial:
.sp
.nf
.ft C
hg purge [OPTION]... [DIR]...
.ft P
.fi
.sp
Delete files not known to Mercurial. This is useful to test local
and uncommitted changes in an otherwise\-clean source tree.
.sp
This means that purge will delete the following by default:
.INDENT 0.0
.IP \(bu 2
.
Unknown files: files marked with "?" by \%\fBhg status\fP\:
.IP \(bu 2
.
Empty directories: in fact Mercurial ignores directories unless
they contain files under source control management
.UNINDENT
.sp
But it will leave untouched:
.INDENT 0.0
.IP \(bu 2
.
Modified and unmodified tracked files
.IP \(bu 2
.
Ignored files (unless \-\-all is specified)
.IP \(bu 2
.
New files added to the repository (with \%\fBhg add\fP\:)
.UNINDENT
.sp
The \-\-files and \-\-dirs options can be used to direct purge to delete
only files, only directories, or both. If neither option is given,
both will be deleted.
.sp
If directories are given on the command line, only files in these
directories are considered.
.sp
Be careful with purge, as you could irreversibly delete some files
you forgot to add to the repository. If you only want to print the
list of files that this program would delete, use the \-\-print
option.
.sp
Options:
.INDENT 0.0
.TP
.B \-a,  \-\-abort\-on\-err
.
abort if an error occurs
.TP
.B \-\-all
.
purge ignored files too
.TP
.B \-\-dirs
.
purge empty directories
.TP
.B \-\-files
.
purge files
.TP
.B \-p,  \-\-print
.
print filenames instead of deleting them
.TP
.B \-0,  \-\-print0
.
end filenames with NUL, for use with xargs (implies \-p/\-\-print)
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.UNINDENT
.sp
[+] marked option can be specified multiple times
.INDENT 0.0
.INDENT 3.5
.sp
aliases: clean
.UNINDENT
.UNINDENT
.SS rebase
.sp
command to move sets of revisions to a different ancestor
.sp
This extension lets you rebase changesets in an existing Mercurial
repository.
.sp
For more information:
\%https://mercurial\-scm.org/wiki/RebaseExtension\:
.SS Commands
.SS rebase
.sp
move changeset (and descendants) to a different branch:
.sp
.nf
.ft C
hg rebase [\-s REV | \-b REV] [\-d REV] [OPTION]
.ft P
.fi
.sp
Rebase uses repeated merging to graft changesets from one part of
history (the source) onto another (the destination). This can be
useful for linearizing \fIlocal\fP changes relative to a master
development tree.
.sp
Published commits cannot be rebased (see \%\fBhg help phases\fP\:).
To copy commits, see \%\fBhg help graft\fP\:.
.sp
If you don\(aqt specify a destination changeset (\fB\-d/\-\-dest\fP), rebase
will use the same logic as \%\fBhg merge\fP\: to pick a destination.  if
the current branch contains exactly one other head, the other head
is merged with by default.  Otherwise, an explicit revision with
which to merge with must be provided.  (destination changeset is not
modified by rebasing, but new changesets are added as its
descendants.)
.sp
Here are the ways to select changesets:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP 1. 3
.
Explicitly select them using \fB\-\-rev\fP.
.IP 2. 3
.
Use \fB\-\-source\fP to select a root changeset and include all of its
descendants.
.IP 3. 3
.
Use \fB\-\-base\fP to select a changeset; rebase will find ancestors
and their descendants which are not also ancestors of the destination.
.IP 4. 3
.
If you do not specify any of \fB\-\-rev\fP, \fBsource\fP, or \fB\-\-base\fP,
rebase will use \fB\-\-base .\fP as above.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Rebase will destroy original changesets unless you use \fB\-\-keep\fP.
It will also move your bookmarks (even if you do).
.sp
Some changesets may be dropped if they do not contribute changes
(e.g. merges from the destination branch).
.sp
Unlike \fBmerge\fP, rebase will do nothing if you are at the branch tip of
a named branch with two heads. You will need to explicitly specify source
and/or destination.
.sp
If you need to use a tool to automate merge/conflict decisions, you
can specify one with \fB\-\-tool\fP, see \%\fBhg help merge\-tools\fP\:.
As a caveat: the tool will not be used to mediate when a file was
deleted, there is no hook presently available for this.
.sp
If a rebase is interrupted to manually resolve a conflict, it can be
continued with \-\-continue/\-c or aborted with \-\-abort/\-a.
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
.
move "local changes" (current commit back to branching point)
to the current branch tip after a pull:
.sp
.nf
.ft C
hg rebase
.ft P
.fi
.IP \(bu 2
.
move a single changeset to the stable branch:
.sp
.nf
.ft C
hg rebase \-r 5f493448 \-d stable
.ft P
.fi
.IP \(bu 2
.
splice a commit and all its descendants onto another part of history:
.sp
.nf
.ft C
hg rebase \-\-source c0c3 \-\-dest 4cf9
.ft P
.fi
.IP \(bu 2
.
rebase everything on a branch marked by a bookmark onto the
default branch:
.sp
.nf
.ft C
hg rebase \-\-base myfeature \-\-dest default
.ft P
.fi
.IP \(bu 2
.
collapse a sequence of changes into a single commit:
.sp
.nf
.ft C
hg rebase \-\-collapse \-r 1520:1525 \-d .
.ft P
.fi
.IP \(bu 2
.
move a named branch while preserving its name:
.sp
.nf
.ft C
hg rebase \-r "branch(featureX)" \-d 1.3 \-\-keepbranches
.ft P
.fi
.UNINDENT
.sp
Configuration Options:
.sp
You can make rebase require a destination if you set the following config
option:
.sp
.nf
.ft C
[commands]
rebase.requiredest = True
.ft P
.fi
.sp
By default, rebase will close the transaction after each commit. For
performance purposes, you can configure rebase to use a single transaction
across the entire rebase. WARNING: This setting introduces a significant
risk of losing the work you\(aqve done in a rebase if the rebase aborts
unexpectedly:
.sp
.nf
.ft C
[rebase]
singletransaction = True
.ft P
.fi
.sp
Return Values:
.sp
Returns 0 on success, 1 if nothing to rebase or there are
unresolved conflicts.
.sp
Options:
.INDENT 0.0
.TP
.BI \-s,  \-\-source \ <REV>
.
rebase the specified changeset and descendants
.TP
.BI \-b,  \-\-base \ <REV>
.
rebase everything from branching point of specified changeset
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
rebase these revisions
.TP
.BI \-d,  \-\-dest \ <REV>
.
rebase onto the specified changeset
.TP
.B \-\-collapse
.
collapse the rebased changesets
.TP
.BI \-m,  \-\-message \ <TEXT>
.
use text as collapse commit message
.TP
.B \-e,  \-\-edit
.
invoke editor on commit messages
.TP
.BI \-l,  \-\-logfile \ <FILE>
.
read collapse commit message from file
.TP
.B \-k,  \-\-keep
.
keep original changesets
.TP
.B \-\-keepbranches
.
keep original branch names
.TP
.B \-D,  \-\-detach
.
(DEPRECATED)
.TP
.B \-i,  \-\-interactive
.
(DEPRECATED)
.TP
.BI \-t,  \-\-tool \ <VALUE>
.
specify merge tool
.TP
.B \-c,  \-\-continue
.
continue an interrupted rebase
.TP
.B \-a,  \-\-abort
.
abort an interrupted rebase
.TP
.BI \-\-style \ <STYLE>
.
display using template map file (DEPRECATED)
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS record
.sp
commands to interactively select changes for commit/qrefresh (DEPRECATED)
.sp
The feature provided by this extension has been moved into core Mercurial as
\%\fBhg commit \-\-interactive\fP\:.
.SS Commands
.SS qrecord
.sp
interactively record a new patch:
.sp
.nf
.ft C
hg qrecord [OPTION]... PATCH [FILE]...
.ft P
.fi
.sp
See \%\fBhg help qnew\fP\: & \%\fBhg help record\fP\: for more information and
usage.
.SS record
.sp
interactively select changes to commit:
.sp
.nf
.ft C
hg record [OPTION]... [FILE]...
.ft P
.fi
.sp
If a list of files is omitted, all changes reported by \%\fBhg status\fP\:
will be candidates for recording.
.sp
See \%\fBhg help dates\fP\: for a list of formats valid for \-d/\-\-date.
.sp
If using the text interface (see \%\fBhg help config\fP\:),
you will be prompted for whether to record changes to each
modified file, and for files with multiple changes, for each
change to use. For each query, the following responses are
possible:
.sp
.nf
.ft C
y \- record this change
n \- skip this change
e \- edit this change manually

s \- skip remaining changes to this file
f \- record remaining changes to this file

d \- done, skip remaining changes and files
a \- record all changes to all remaining files
q \- quit, recording no changes

? \- display help
.ft P
.fi
.sp
This command is not available when committing a merge.
.sp
Options:
.INDENT 0.0
.TP
.B \-A,  \-\-addremove
.
mark new/missing files as added/removed before committing
.TP
.B \-\-close\-branch
.
mark a branch head as closed
.TP
.B \-\-amend
.
amend the parent of the working directory
.TP
.B \-s,  \-\-secret
.
use the secret phase for committing
.TP
.B \-e,  \-\-edit
.
invoke editor on commit messages
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.TP
.BI \-m,  \-\-message \ <TEXT>
.
use text as commit message
.TP
.BI \-l,  \-\-logfile \ <FILE>
.
read commit message from file
.TP
.BI \-d,  \-\-date \ <DATE>
.
record the specified date as commit date
.TP
.BI \-u,  \-\-user \ <USER>
.
record the specified user as committer
.TP
.B \-S,  \-\-subrepos
.
recurse into subrepositories
.TP
.B \-w,  \-\-ignore\-all\-space
.
ignore white space when comparing lines
.TP
.B \-b,  \-\-ignore\-space\-change
.
ignore changes in the amount of white space
.TP
.B \-B,  \-\-ignore\-blank\-lines
.
ignore changes whose lines are all blank
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS releasenotes
.sp
generate release notes from commit messages (EXPERIMENTAL)
.sp
It is common to maintain files detailing changes in a project between
releases. Maintaining these files can be difficult and time consuming.
The \%\fBhg releasenotes\fP\: command provided by this extension makes the
process simpler by automating it.
.SS Commands
.SS releasenotes
.sp
parse release notes from commit messages into an output file:
.sp
.nf
.ft C
hg releasenotes [\-r REV] FILE
.ft P
.fi
.sp
Given an output file and set of revisions, this command will parse commit
messages for release notes then add them to the output file.
.sp
Release notes are defined in commit messages as ReStructuredText
directives. These have the form:
.sp
.nf
.ft C
\&.. directive:: title

   content
.ft P
.fi
.sp
Each \fBdirective\fP maps to an output section in a generated release notes
file, which itself is ReStructuredText. For example, the \fB.. feature::\fP
directive would map to a \fBNew Features\fP section.
.sp
Release note directives can be either short\-form or long\-form. In short\-
form, \fBtitle\fP is omitted and the release note is rendered as a bullet
list. In long form, a sub\-section with the title \fBtitle\fP is added to the
section.
.sp
The \fBFILE\fP argument controls the output file to write gathered release
notes to. The format of the file is:
.sp
.nf
.ft C
Section 1
=========

\&...

Section 2
=========

\&...
.ft P
.fi
.sp
Only sections with defined release notes are emitted.
.sp
If a section only has short\-form notes, it will consist of bullet list:
.sp
.nf
.ft C
Section
=======

* Release note 1
* Release note 2
.ft P
.fi
.sp
If a section has long\-form notes, sub\-sections will be emitted:
.sp
.nf
.ft C
Section
=======

Note 1 Title
\-\-\-\-\-\-\-\-\-\-\-\-

Description of the first long\-form note.

Note 2 Title
\-\-\-\-\-\-\-\-\-\-\-\-

Description of the second long\-form note.
.ft P
.fi
.sp
If the \fBFILE\fP argument points to an existing file, that file will be
parsed for release notes having the format that would be generated by this
command. The notes from the processed commit messages will be \fImerged\fP
into this parsed set.
.sp
During release notes merging:
.INDENT 0.0
.IP \(bu 2
.
Duplicate items are automatically ignored
.IP \(bu 2
.
Items that are different are automatically ignored if the similarity is
greater than a threshold.
.UNINDENT
.sp
This means that the release notes file can be updated independently from
this command and changes should not be lost when running this command on
that file. A particular use case for this is to tweak the wording of a
release note after it has been added to the release notes file.
.sp
Options:
.INDENT 0.0
.TP
.BI \-r,  \-\-rev \ <REV>
.
revisions to process for release notes
.UNINDENT
.SS relink
.sp
recreates hardlinks between repository clones
.SS Commands
.SS relink
.sp
recreate hardlinks between two repositories:
.sp
.nf
.ft C
hg relink [ORIGIN]
.ft P
.fi
.sp
When repositories are cloned locally, their data files will be
hardlinked so that they only use the space of a single repository.
.sp
Unfortunately, subsequent pulls into either repository will break
hardlinks for any files touched by the new changesets, even if
both repositories end up pulling the same changes.
.sp
Similarly, passing \-\-rev to "hg clone" will fail to use any
hardlinks, falling back to a complete copy of the source
repository.
.sp
This command lets you recreate those hardlinks and reclaim that
wasted space.
.sp
This repository will be relinked to share space with ORIGIN, which
must be on the same local disk. If ORIGIN is omitted, looks for
"default\-relink", then "default", in [paths].
.sp
Do not attempt any read operations on this repository while the
command is running. (Both repositories will be locked against
writes.)
.SS schemes
.sp
extend schemes with shortcuts to repository swarms
.sp
This extension allows you to specify shortcuts for parent URLs with a
lot of repositories to act like a scheme, for example:
.sp
.nf
.ft C
[schemes]
py = http://code.python.org/hg/
.ft P
.fi
.sp
After that you can use it like:
.sp
.nf
.ft C
hg clone py://trunk/
.ft P
.fi
.sp
Additionally there is support for some more complex schemas, for
example used by Google Code:
.sp
.nf
.ft C
[schemes]
gcode = http://{1}.googlecode.com/hg/
.ft P
.fi
.sp
The syntax is taken from Mercurial templates, and you have unlimited
number of variables, starting with \fB{1}\fP and continuing with
\fB{2}\fP, \fB{3}\fP and so on. This variables will receive parts of URL
supplied, split by \fB/\fP. Anything not specified as \fB{part}\fP will be
just appended to an URL.
.sp
For convenience, the extension adds these schemes by default:
.sp
.nf
.ft C
[schemes]
py = http://hg.python.org/
bb = https://bitbucket.org/
bb+ssh = ssh://hg@bitbucket.org/
gcode = https://{1}.googlecode.com/hg/
kiln = https://{1}.kilnhg.com/Repo/
.ft P
.fi
.sp
You can override a predefined scheme by defining a new scheme with the
same name.
.SS Commands
.SS share
.sp
share a common history between several working directories
.SS Automatic Pooled Storage for Clones
.sp
When this extension is active, \%\fBhg clone\fP\: can be configured to
automatically share/pool storage across multiple clones. This
mode effectively converts \%\fBhg clone\fP\: to \%\fBhg clone\fP\: + \%\fBhg share\fP\:.
The benefit of using this mode is the automatic management of
store paths and intelligent pooling of related repositories.
.sp
The following \fBshare.\fP config options influence this feature:
.INDENT 0.0
.TP
.B \fBshare.pool\fP
.sp
Filesystem path where shared repository data will be stored. When
defined, \%\fBhg clone\fP\: will automatically use shared repository
storage instead of creating a store inside each clone.
.TP
.B \fBshare.poolnaming\fP
.sp
How directory names in \fBshare.pool\fP are constructed.
.sp
"identity" means the name is derived from the first changeset in the
repository. In this mode, different remotes share storage if their
root/initial changeset is identical. In this mode, the local shared
repository is an aggregate of all encountered remote repositories.
.sp
"remote" means the name is derived from the source repository\(aqs
path or URL. In this mode, storage is only shared if the path or URL
requested in the \%\fBhg clone\fP\: command matches exactly to a repository
that was cloned before.
.sp
The default naming mode is "identity."
.UNINDENT
.SS Commands
.SS share
.sp
create a new shared repository:
.sp
.nf
.ft C
hg share [\-U] [\-B] SOURCE [DEST]
.ft P
.fi
.sp
Initialize a new repository and working directory that shares its
history (and optionally bookmarks) with another repository.
.IP Note
.
using rollback or extensions that destroy/modify history (mq,
rebase, etc.) can cause considerable confusion with shared
clones. In particular, if two shared clones are both updated to
the same changeset, and one of them destroys that changeset
with rollback, the other clone will suddenly stop working: all
operations will fail with "abort: working directory has unknown
parent". The only known workaround is to use debugsetparents on
the broken clone to reset it to a changeset that still exists.
.RE
.sp
Options:
.INDENT 0.0
.TP
.B \-U,  \-\-noupdate
.
do not create a working directory
.TP
.B \-B,  \-\-bookmarks
.
also share bookmarks
.TP
.B \-\-relative
.
point to source using a relative path (EXPERIMENTAL)
.UNINDENT
.SS unshare
.sp
convert a shared repository to a normal one:
.sp
.nf
.ft C
hg unshare
.ft P
.fi
.sp
Copy the store data to the repo and remove the sharedpath data.
.SS shelve
.sp
save and restore changes to the working directory
.sp
The "hg shelve" command saves changes made to the working directory
and reverts those changes, resetting the working directory to a clean
state.
.sp
Later on, the "hg unshelve" command restores the changes saved by "hg
shelve". Changes can be restored even after updating to a different
parent, in which case Mercurial\(aqs merge machinery will resolve any
conflicts if necessary.
.sp
You can have more than one shelved change outstanding at a time; each
shelved change has a distinct name. For details, see the help for "hg
shelve".
.SS Commands
.SS shelve
.sp
save and set aside changes from the working directory:
.sp
.nf
.ft C
hg shelve [OPTION]... [FILE]...
.ft P
.fi
.sp
Shelving takes files that "hg status" reports as not clean, saves
the modifications to a bundle (a shelved change), and reverts the
files so that their state in the working directory becomes clean.
.sp
To restore these changes to the working directory, using "hg
unshelve"; this will work even if you switch to a different
commit.
.sp
When no files are specified, "hg shelve" saves all not\-clean
files. If specific files or directories are named, only changes to
those files are shelved.
.sp
In bare shelve (when no files are specified, without interactive,
include and exclude option), shelving remembers information if the
working directory was on newly created branch, in other words working
directory was on different branch than its first parent. In this
situation unshelving restores branch information to the working directory.
.sp
Each shelved change has a name that makes it easier to find later.
The name of a shelved change defaults to being based on the active
bookmark, or if there is no active bookmark, the current named
branch.  To specify a different name, use \fB\-\-name\fP.
.sp
To see a list of existing shelved changes, use the \fB\-\-list\fP
option. For each shelved change, this will print its name, age,
and description; use \fB\-\-patch\fP or \fB\-\-stat\fP for more details.
.sp
To delete specific shelved changes, use \fB\-\-delete\fP. To delete
all shelved changes, use \fB\-\-cleanup\fP.
.sp
Options:
.INDENT 0.0
.TP
.B \-A,  \-\-addremove
.
mark new/missing files as added/removed before shelving
.TP
.B \-u,  \-\-unknown
.
store unknown files in the shelve
.TP
.B \-\-cleanup
.
delete all shelved changes
.TP
.BI \-\-date \ <DATE>
.
shelve with the specified commit date
.TP
.B \-d,  \-\-delete
.
delete the named shelved change(s)
.TP
.B \-e,  \-\-edit
.
invoke editor on commit messages
.TP
.B \-l,  \-\-list
.
list current shelves
.TP
.BI \-m,  \-\-message \ <TEXT>
.
use text as shelve message
.TP
.BI \-n,  \-\-name \ <NAME>
.
use the given name for the shelved commit
.TP
.B \-p,  \-\-patch
.
show patch
.TP
.B \-i,  \-\-interactive
.
interactive mode, only works while creating a shelve
.TP
.B \-\-stat
.
output diffstat\-style summary of changes
.TP
.BI \-I,  \-\-include \ <PATTERN[+]>
.
include names matching the given patterns
.TP
.BI \-X,  \-\-exclude \ <PATTERN[+]>
.
exclude names matching the given patterns
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS unshelve
.sp
restore a shelved change to the working directory:
.sp
.nf
.ft C
hg unshelve [[\-n] SHELVED]
.ft P
.fi
.sp
This command accepts an optional name of a shelved change to
restore. If none is given, the most recent shelved change is used.
.sp
If a shelved change is applied successfully, the bundle that
contains the shelved changes is moved to a backup location
(.hg/shelve\-backup).
.sp
Since you can restore a shelved change on top of an arbitrary
commit, it is possible that unshelving will result in a conflict
between your changes and the commits you are unshelving onto. If
this occurs, you must resolve the conflict, then use
\fB\-\-continue\fP to complete the unshelve operation. (The bundle
will not be moved until you successfully complete the unshelve.)
.sp
(Alternatively, you can use \fB\-\-abort\fP to abandon an unshelve
that causes a conflict. This reverts the unshelved changes, and
leaves the bundle in place.)
.sp
If bare shelved change(when no files are specified, without interactive,
include and exclude option) was done on newly created branch it would
restore branch information to the working directory.
.sp
After a successful unshelve, the shelved changes are stored in a
backup directory. Only the N most recent backups are kept. N
defaults to 10 but can be overridden using the \fBshelve.maxbackups\fP
configuration option.
.sp
Timestamp in seconds is used to decide order of backups. More
than \fBmaxbackups\fP backups are kept, if same timestamp
prevents from deciding exact order of them, for safety.
.sp
Options:
.INDENT 0.0
.TP
.B \-a,  \-\-abort
.
abort an incomplete unshelve operation
.TP
.B \-c,  \-\-continue
.
continue an incomplete unshelve operation
.TP
.B \-k,  \-\-keep
.
keep shelve after unshelving
.TP
.BI \-n,  \-\-name \ <NAME>
.
restore shelved change with given name
.TP
.BI \-t,  \-\-tool \ <VALUE>
.
specify merge tool
.TP
.BI \-\-date \ <DATE>
.
set date for temporary commits (DEPRECATED)
.UNINDENT
.SS show
.sp
unified command to show various repository information (EXPERIMENTAL)
.sp
This extension provides the \%\fBhg show\fP\: command, which provides a central
command for displaying commonly\-accessed repository data and views of that
data.
.sp
The following config options can influence operation.
.SS \fBcommands\fP
.INDENT 0.0
.TP
.B \fBshow.aliasprefix\fP
.sp
List of strings that will register aliases for views. e.g. \fBs\fP will
effectively set config options \fBalias.s<view> = show <view>\fP for all
views. i.e. \fIhg swork\fP would execute \fIhg show work\fP.
.sp
Aliases that would conflict with existing registrations will not be
performed.
.UNINDENT
.SS Commands
.SS show
.sp
show various repository information:
.sp
.nf
.ft C
hg show VIEW
.ft P
.fi
.sp
A requested view of repository data is displayed.
.sp
If no view is requested, the list of available views is shown and the
command aborts.
.IP Note
.
There are no backwards compatibility guarantees for the output of this
command. Output may change in any future Mercurial release.
.sp
Consumers wanting stable command output should specify a template via
\fB\-T/\-\-template\fP.
.RE
.sp
List of available views:
.sp
bookmarks   bookmarks and their associated changeset
.sp
stack       current line of work
.sp
work        changesets that aren\(aqt finished
.sp
Options:
.INDENT 0.0
.TP
.BI \-T,  \-\-template \ <TEMPLATE>
.
display with template
.UNINDENT
.SS sparse
.sp
allow sparse checkouts of the working directory (EXPERIMENTAL)
.sp
(This extension is not yet protected by backwards compatibility
guarantees. Any aspect may break in future releases until this
notice is removed.)
.sp
This extension allows the working directory to only consist of a
subset of files for the revision. This allows specific files or
directories to be explicitly included or excluded. Many repository
operations have performance proportional to the number of files in
the working directory. So only realizing a subset of files in the
working directory can improve performance.
.SS Sparse Config Files
.sp
The set of files that are part of a sparse checkout are defined by
a sparse config file. The file defines 3 things: includes (files to
include in the sparse checkout), excludes (files to exclude from the
sparse checkout), and profiles (links to other config files).
.sp
The file format is newline delimited. Empty lines and lines beginning
with \fB#\fP are ignored.
.sp
Lines beginning with \fB%include \(ga\(ga denote another sparse config file
to include. e.g. \(ga\(ga%include tests.sparse\fP. The filename is relative
to the repository root.
.sp
The special lines \fB[include]\fP and \fB[exclude]\fP denote the section
for includes and excludes that follow, respectively. It is illegal to
have \fB[include]\fP after \fB[exclude]\fP.
.sp
Non\-special lines resemble file patterns to be added to either includes
or excludes. The syntax of these lines is documented by \%\fBhg help patterns\fP\:.
Patterns are interpreted as \fBglob:\fP by default and match against the
root of the repository.
.sp
Exclusion patterns take precedence over inclusion patterns. So even
if a file is explicitly included, an \fB[exclude]\fP entry can remove it.
.sp
For example, say you have a repository with 3 directories, \fBfrontend/\fP,
\fBbackend/\fP, and \fBtools/\fP. \fBfrontend/\fP and \fBbackend/\fP correspond
to different projects and it is uncommon for someone working on one
to need the files for the other. But \fBtools/\fP contains files shared
between both projects. Your sparse config files may resemble:
.sp
.nf
.ft C
# frontend.sparse
frontend/**
tools/**

# backend.sparse
backend/**
tools/**
.ft P
.fi
.sp
Say the backend grows in size. Or there\(aqs a directory with thousands
of files you wish to exclude. You can modify the profile to exclude
certain files:
.sp
.nf
.ft C
[include]
backend/**
tools/**

[exclude]
tools/tests/**
.ft P
.fi
.SS Commands
.SS strip
.sp
strip changesets and their descendants from history
.sp
This extension allows you to strip changesets and all their descendants from the
repository. See the command help for details.
.SS Commands
.SS strip
.sp
strip changesets and all their descendants from the repository:
.sp
.nf
.ft C
hg strip [\-k] [\-f] [\-B bookmark] [\-r] REV...
.ft P
.fi
.sp
The strip command removes the specified changesets and all their
descendants. If the working directory has uncommitted changes, the
operation is aborted unless the \-\-force flag is supplied, in which
case changes will be discarded.
.sp
If a parent of the working directory is stripped, then the working
directory will automatically be updated to the most recent
available ancestor of the stripped parent after the operation
completes.
.sp
Any stripped changesets are stored in \fB.hg/strip\-backup\fP as a
bundle (see \%\fBhg help bundle\fP\: and \%\fBhg help unbundle\fP\:). They can
be restored by running \%\fBhg unbundle .hg/strip\-backup/BUNDLE\fP\:,
where BUNDLE is the bundle file created by the strip. Note that
the local revision numbers will in general be different after the
restore.
.sp
Use the \-\-no\-backup option to discard the backup bundle once the
operation completes.
.sp
Strip is not a history\-rewriting operation and can be used on
changesets in the public phase. But if the stripped changesets have
been pushed to a remote repository you will likely pull them again.
.sp
Return 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.BI \-r,  \-\-rev \ <REV[+]>
.
strip specified revision (optional, can specify revisions without this option)
.TP
.B \-f,  \-\-force
.
force removal of changesets, discard uncommitted changes (no backup)
.TP
.B \-\-no\-backup
.
no backups
.TP
.B \-\-nobackup
.
no backups (DEPRECATED)
.TP
.B \-n
.
ignored  (DEPRECATED)
.TP
.B \-k,  \-\-keep
.
do not modify working directory during strip
.TP
.BI \-B,  \-\-bookmark \ <VALUE[+]>
.
remove revs only reachable from given bookmark
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS transplant
.sp
command to transplant changesets from another branch
.sp
This extension allows you to transplant changes to another parent revision,
possibly in another repository. The transplant is done using \(aqdiff\(aq patches.
.sp
Transplanted patches are recorded in .hg/transplant/transplants, as a
map from a changeset hash to its hash in the source repository.
.SS Commands
.SS transplant
.sp
transplant changesets from another branch:
.sp
.nf
.ft C
hg transplant [\-s REPO] [\-b BRANCH [\-a]] [\-p REV] [\-m REV] [REV]...
.ft P
.fi
.sp
Selected changesets will be applied on top of the current working
directory with the log of the original changeset. The changesets
are copied and will thus appear twice in the history with different
identities.
.sp
Consider using the graft command if everything is inside the same
repository \- it will use merges and will usually give a better result.
Use the rebase extension if the changesets are unpublished and you want
to move them instead of copying them.
.sp
If \-\-log is specified, log messages will have a comment appended
of the form:
.sp
.nf
.ft C
(transplanted from CHANGESETHASH)
.ft P
.fi
.sp
You can rewrite the changelog message with the \-\-filter option.
Its argument will be invoked with the current changelog message as
$1 and the patch as $2.
.sp
\-\-source/\-s specifies another repository to use for selecting changesets,
just as if it temporarily had been pulled.
If \-\-branch/\-b is specified, these revisions will be used as
heads when deciding which changesets to transplant, just as if only
these revisions had been pulled.
If \-\-all/\-a is specified, all the revisions up to the heads specified
with \-\-branch will be transplanted.
.sp
Example:
.INDENT 0.0
.IP \(bu 2
.
transplant all changes up to REV on top of your current revision:
.sp
.nf
.ft C
hg transplant \-\-branch REV \-\-all
.ft P
.fi
.UNINDENT
.sp
You can optionally mark selected transplanted changesets as merge
changesets. You will not be prompted to transplant any ancestors
of a merged transplant, and you can merge descendants of them
normally instead of transplanting them.
.sp
Merge changesets may be transplanted directly by specifying the
proper parent changeset by calling \%\fBhg transplant \-\-parent\fP\:.
.sp
If no merges or revisions are provided, \%\fBhg transplant\fP\: will
start an interactive changeset browser.
.sp
If a changeset application fails, you can fix the merge by hand
and then resume where you left off by calling \%\fBhg transplant
\-\-continue/\-c\fP\:.
.sp
Options:
.INDENT 0.0
.TP
.BI \-s,  \-\-source \ <REPO>
.
transplant changesets from REPO
.TP
.BI \-b,  \-\-branch \ <REV[+]>
.
use this source changeset as head
.TP
.B \-a,  \-\-all
.
pull all changesets up to the \-\-branch revisions
.TP
.BI \-p,  \-\-prune \ <REV[+]>
.
skip over REV
.TP
.BI \-m,  \-\-merge \ <REV[+]>
.
merge at REV
.TP
.BI \-\-parent \ <REV>
.
parent to choose when transplanting merge
.TP
.B \-e,  \-\-edit
.
invoke editor on commit messages
.TP
.B \-\-log
.
append transplant info to log message
.TP
.B \-c,  \-\-continue
.
continue last transplant session after fixing conflicts
.TP
.BI \-\-filter \ <CMD>
.
filter changesets through command
.UNINDENT
.sp
[+] marked option can be specified multiple times
.SS win32mbcs
.sp
allow the use of MBCS paths with problematic encodings
.sp
Some MBCS encodings are not good for some path operations (i.e.
splitting path, case conversion, etc.) with its encoded bytes. We call
such a encoding (i.e. shift_jis and big5) as "problematic encoding".
This extension can be used to fix the issue with those encodings by
wrapping some functions to convert to Unicode string before path
operation.
.sp
This extension is useful for:
.INDENT 0.0
.IP \(bu 2
.
Japanese Windows users using shift_jis encoding.
.IP \(bu 2
.
Chinese Windows users using big5 encoding.
.IP \(bu 2
.
All users who use a repository with one of problematic encodings on
case\-insensitive file system.
.UNINDENT
.sp
This extension is not needed for:
.INDENT 0.0
.IP \(bu 2
.
Any user who use only ASCII chars in path.
.IP \(bu 2
.
Any user who do not use any of problematic encodings.
.UNINDENT
.sp
Note that there are some limitations on using this extension:
.INDENT 0.0
.IP \(bu 2
.
You should use single encoding in one repository.
.IP \(bu 2
.
If the repository path ends with 0x5c, .hg/hgrc cannot be read.
.IP \(bu 2
.
win32mbcs is not compatible with fixutf8 extension.
.UNINDENT
.sp
By default, win32mbcs uses encoding.encoding decided by Mercurial.
You can specify the encoding by config option:
.sp
.nf
.ft C
[win32mbcs]
encoding = sjis
.ft P
.fi
.sp
It is useful for the users who want to commit with UTF\-8 log message.
.SS win32text
.sp
perform automatic newline conversion (DEPRECATED)
.INDENT 0.0
.INDENT 3.5
.sp
Deprecation: The win32text extension requires each user to configure
the extension again and again for each clone since the configuration
is not copied when cloning.
.sp
We have therefore made the \fBeol\fP as an alternative. The \fBeol\fP
uses a version controlled file for its configuration and each clone
will therefore use the right settings from the start.
.UNINDENT
.UNINDENT
.sp
To perform automatic newline conversion, use:
.sp
.nf
.ft C
[extensions]
win32text =
[encode]
** = cleverencode:
# or ** = macencode:

[decode]
** = cleverdecode:
# or ** = macdecode:
.ft P
.fi
.sp
If not doing conversion, to make sure you do not commit CRLF/CR by accident:
.sp
.nf
.ft C
[hooks]
pretxncommit.crlf = python:hgext.win32text.forbidcrlf
# or pretxncommit.cr = python:hgext.win32text.forbidcr
.ft P
.fi
.sp
To do the same check on a server to prevent CRLF/CR from being
pushed or pulled:
.sp
.nf
.ft C
[hooks]
pretxnchangegroup.crlf = python:hgext.win32text.forbidcrlf
# or pretxnchangegroup.cr = python:hgext.win32text.forbidcr
.ft P
.fi
.SS zeroconf
.sp
discover and advertise repositories on the local network
.sp
Zeroconf\-enabled repositories will be announced in a network without
the need to configure a server or a service. They can be discovered
without knowing their actual IP address.
.sp
To allow other people to discover your repository using run
\%\fBhg serve\fP\: in your repository:
.sp
.nf
.ft C
$ cd test
$ hg serve
.ft P
.fi
.sp
You can discover Zeroconf\-enabled repositories by running
\%\fBhg paths\fP\::
.sp
.nf
.ft C
$ hg paths
zc\-test = http://example.com:8000/test
.ft P
.fi
.SH FILES
.INDENT 0.0
.TP
.B \fB/etc/mercurial/hgrc\fP, \fB$HOME/.hgrc\fP, \fB.hg/hgrc\fP
.sp
This file contains defaults and configuration. Values in
\fB.hg/hgrc\fP override those in \fB$HOME/.hgrc\fP, and these override
settings made in the global \fB/etc/mercurial/hgrc\fP configuration.
See \%\fBhgrc\fP(5)\: for details of the contents and format of these
files.
.TP
.B \fB.hgignore\fP
.sp
This file contains regular expressions (one per line) that
describe file names that should be ignored by \fBhg\fP. For details,
see \%\fBhgignore\fP(5)\:.
.TP
.B \fB.hgsub\fP
.sp
This file defines the locations of all subrepositories, and
tells where the subrepository checkouts came from. For details, see
\%\fBhg help subrepos\fP\:.
.TP
.B \fB.hgsubstate\fP
.sp
This file is where Mercurial stores all nested repository states. \fINB: This
file should not be edited manually.\fP
.TP
.B \fB.hgtags\fP
.sp
This file contains changeset hash values and text tag names (one
of each separated by spaces) that correspond to tagged versions of
the repository contents. The file content is encoded using UTF\-8.
.TP
.B \fB.hg/last\-message.txt\fP
.sp
This file is used by \%\fBhg commit\fP\: to store a backup of the commit message
in case the commit fails.
.TP
.B \fB.hg/localtags\fP
.sp
This file can be used to define local tags which are not shared among
repositories. The file format is the same as for \fB.hgtags\fP, but it is
encoded using the local system encoding.
.UNINDENT
.sp
Some commands (e.g. revert) produce backup files ending in \fB.orig\fP,
if the \fB.orig\fP file already exists and is not tracked by Mercurial,
it will be overwritten.
.SH BUGS
.sp
Probably lots, please post them to the mailing list (see \%Resources\:
below) when you find them.
.SH SEE ALSO
.sp
\%\fBhgignore\fP(5)\:, \%\fBhgrc\fP(5)\:
.SH AUTHOR
.sp
Written by Matt Mackall <\%mpm@selenic.com\:>
.SH RESOURCES
.sp
Main Web Site: \%https://mercurial\-scm.org/\:
.sp
Source code repository: \%https://www.mercurial\-scm.org/repo/hg\:
.sp
Mailing list: \%https://www.mercurial\-scm.org/mailman/listinfo/mercurial/\:
.SH COPYING
.sp
Copyright (C) 2005\-2017 Matt Mackall.
Free use of this software is granted under the terms of the GNU General
Public License version 2 or any later version.
.\" Common link and substitution definitions.
.
.SH AUTHOR
Matt Mackall <mpm@selenic.com>

Organization: Mercurial
.\" Generated by docutils manpage writer.
.\" 
.
