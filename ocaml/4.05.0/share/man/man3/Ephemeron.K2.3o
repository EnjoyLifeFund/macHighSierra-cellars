.TH "Ephemeron.K2" 3 source: 2017-07-30 OCamldoc "OCaml library"
.SH NAME
Ephemeron.K2 \- no description
.SH Module
Module   Ephemeron.K2
.SH Documentation
.sp
Module
.BI "K2"
 : 
.B sig  end

.sp

.sp

.sp
.sp
.I type 
.B ('k1, 'k2, 'd)
.I t 

.sp
an ephemeron with two keys

.sp

.I val create 
: 
.B unit -> ('k1, 'k2, 'd) t
.sp
Same as 
.B Ephemeron\&.K1\&.create


.sp

.I val get_key1 
: 
.B ('k1, 'k2, 'd) t -> 'k1 option
.sp
Same as 
.B Ephemeron\&.K1\&.get_key


.sp

.I val get_key1_copy 
: 
.B ('k1, 'k2, 'd) t -> 'k1 option
.sp
Same as 
.B Ephemeron\&.K1\&.get_key_copy


.sp

.I val set_key1 
: 
.B ('k1, 'k2, 'd) t -> 'k1 -> unit
.sp
Same as 
.B Ephemeron\&.K1\&.set_key


.sp

.I val unset_key1 
: 
.B ('k1, 'k2, 'd) t -> unit
.sp
Same as 
.B Ephemeron\&.K1\&.unset_key


.sp

.I val check_key1 
: 
.B ('k1, 'k2, 'd) t -> bool
.sp
Same as 
.B Ephemeron\&.K1\&.check_key


.sp

.I val get_key2 
: 
.B ('k1, 'k2, 'd) t -> 'k2 option
.sp
Same as 
.B Ephemeron\&.K1\&.get_key


.sp

.I val get_key2_copy 
: 
.B ('k1, 'k2, 'd) t -> 'k2 option
.sp
Same as 
.B Ephemeron\&.K1\&.get_key_copy


.sp

.I val set_key2 
: 
.B ('k1, 'k2, 'd) t -> 'k2 -> unit
.sp
Same as 
.B Ephemeron\&.K1\&.set_key


.sp

.I val unset_key2 
: 
.B ('k1, 'k2, 'd) t -> unit
.sp
Same as 
.B Ephemeron\&.K1\&.unset_key


.sp

.I val check_key2 
: 
.B ('k1, 'k2, 'd) t -> bool
.sp
Same as 
.B Ephemeron\&.K1\&.check_key


.sp

.I val blit_key1 
: 
.B ('k1, 'a, 'b) t -> ('k1, 'c, 'd) t -> unit
.sp
Same as 
.B Ephemeron\&.K1\&.blit_key


.sp

.I val blit_key2 
: 
.B ('a, 'k2, 'b) t -> ('c, 'k2, 'd) t -> unit
.sp
Same as 
.B Ephemeron\&.K1\&.blit_key


.sp

.I val blit_key12 
: 
.B ('k1, 'k2, 'a) t -> ('k1, 'k2, 'b) t -> unit
.sp
Same as 
.B Ephemeron\&.K1\&.blit_key


.sp

.I val get_data 
: 
.B ('k1, 'k2, 'd) t -> 'd option
.sp
Same as 
.B Ephemeron\&.K1\&.get_data


.sp

.I val get_data_copy 
: 
.B ('k1, 'k2, 'd) t -> 'd option
.sp
Same as 
.B Ephemeron\&.K1\&.get_data_copy


.sp

.I val set_data 
: 
.B ('k1, 'k2, 'd) t -> 'd -> unit
.sp
Same as 
.B Ephemeron\&.K1\&.set_data


.sp

.I val unset_data 
: 
.B ('k1, 'k2, 'd) t -> unit
.sp
Same as 
.B Ephemeron\&.K1\&.unset_data


.sp

.I val check_data 
: 
.B ('k1, 'k2, 'd) t -> bool
.sp
Same as 
.B Ephemeron\&.K1\&.check_data


.sp

.I val blit_data 
: 
.B ('k1, 'k2, 'd) t -> ('k1, 'k2, 'd) t -> unit
.sp
Same as 
.B Ephemeron\&.K1\&.blit_data


.sp
.I module Make : 
.B functor (H1 : Hashtbl.HashedType) (H2 : Hashtbl.HashedType) -> sig  end

.sp
Functor building an implementation of a weak hash table

.sp
.I module MakeSeeded : 
.B functor (H1 : Hashtbl.SeededHashedType) (H2 : Hashtbl.SeededHashedType) ->
.B   sig  end

.sp
Functor building an implementation of a weak hash table\&.
The seed is similar to the one of 
.B Hashtbl\&.MakeSeeded
\&.

.sp
