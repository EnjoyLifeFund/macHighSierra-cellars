.TH "Marshal" 3 source: 2017-07-30 OCamldoc "OCaml library"
.SH NAME
Marshal \- Marshaling of data structures.
.SH Module
Module   Marshal
.SH Documentation
.sp
Module
.BI "Marshal"
 : 
.B sig  end

.sp
Marshaling of data structures\&.
.sp
This module provides functions to encode arbitrary data structures
as sequences of bytes, which can then be written on a file or
sent over a pipe or network connection\&.  The bytes can then
be read back later, possibly in another process, and decoded back
into a data structure\&. The format for the byte sequences
is compatible across all machines for a given version of OCaml\&.
.sp
Warning: marshaling is currently not type\-safe\&. The type
of marshaled data is not transmitted along the value of the data,
making it impossible to check that the data read back possesses the
type expected by the context\&. In particular, the result type of
the 
.B Marshal\&.from_*
functions is given as 
.B \&'a
, but this is
misleading: the returned OCaml value does not possess type 
.B \&'a
for all 
.B \&'a
; it has one, unique type which cannot be determined
at compile\-type\&.  The programmer should explicitly give the expected
type of the returned value, using the following syntax:
.sp
\-
.B (Marshal\&.from_channel chan : type)
\&.
Anything can happen at run\-time if the object in the file does not
belong to the given type\&.

Values of extensible variant types, for example exceptions (of
extensible type 
.B exn
), returned by the unmarhsaller should not be
pattern\-matched over through 
.B match \&.\&.\&. with
or 
.B try \&.\&.\&. with
,
because unmarshalling does not preserve the information required for
matching their constructors\&. Structural equalities with other
extensible variant values does not work either\&.  Most other uses such
as Printexc\&.to_string, will still work as expected\&.
.sp
The representation of marshaled values is not human\-readable,
and uses bytes that are not printable characters\&. Therefore,
input and output channels used in conjunction with 
.B Marshal\&.to_channel
and 
.B Marshal\&.from_channel
must be opened in binary mode, using e\&.g\&.
.B open_out_bin
or 
.B open_in_bin
; channels opened in text mode will
cause unmarshaling errors on platforms where text channels behave
differently than binary channels, e\&.g\&. Windows\&.

.sp

.sp
.sp
.I type extern_flags 
=
 | No_sharing  (* Don\&'t preserve sharing
 *)
 | Closures  (* Send function closures
 *)
 | Compat_32  (* Ensure 32\-bit compatibility
 *)
 
.sp
The flags to the 
.B Marshal\&.to_*
functions below\&.

.sp

.I val to_channel 
: 
.B Pervasives.out_channel -> 'a -> extern_flags list -> unit
.sp

.B Marshal\&.to_channel chan v flags
writes the representation
of 
.B v
on channel 
.B chan
\&. The 
.B flags
argument is a
possibly empty list of flags that governs the marshaling
behavior with respect to sharing, functional values, and compatibility
between 32\- and 64\-bit platforms\&.
.sp
If 
.B flags
does not contain 
.B Marshal\&.No_sharing
, circularities
and sharing inside the value 
.B v
are detected and preserved
in the sequence of bytes produced\&. In particular, this
guarantees that marshaling always terminates\&. Sharing
between values marshaled by successive calls to
.B Marshal\&.to_channel
is neither detected nor preserved, though\&.
If 
.B flags
contains 
.B Marshal\&.No_sharing
, sharing is ignored\&.
This results in faster marshaling if 
.B v
contains no shared
substructures, but may cause slower marshaling and larger
byte representations if 
.B v
actually contains sharing,
or even non\-termination if 
.B v
contains cycles\&.
.sp
If 
.B flags
does not contain 
.B Marshal\&.Closures
, marshaling fails
when it encounters a functional value inside 
.B v
: only \&'pure\&' data
structures, containing neither functions nor objects, can safely be
transmitted between different programs\&. If 
.B flags
contains
.B Marshal\&.Closures
, functional values will be marshaled as a the
position in the code of the program together with the values
corresponding to the free variables captured in the closure\&.  In
this case, the output of marshaling can only be read back in
processes that run exactly the same program, with exactly the same
compiled code\&. (This is checked at un\-marshaling time, using an MD5
digest of the code transmitted along with the code position\&.)
.sp
The exact definition of which free variables are captured in a
closure is not specified and can vary between bytecode and native
code (and according to optimization flags)\&.  In particular, a
function value accessing a global reference may or may not include
the reference in its closure\&.  If it does, unmarshaling the
corresponding closure will create a new reference, different from
the global one\&.
.sp
If 
.B flags
contains 
.B Marshal\&.Compat_32
, marshaling fails when
it encounters an integer value outside the range 
.B [\-2{^30}, 2{^30}\-1]
of integers that are representable on a 32\-bit platform\&.  This
ensures that marshaled data generated on a 64\-bit platform can be
safely read back on a 32\-bit platform\&.  If 
.B flags
does not
contain 
.B Marshal\&.Compat_32
, integer values outside the
range 
.B [\-2{^30}, 2{^30}\-1]
are marshaled, and can be read back on
a 64\-bit platform, but will cause an error at un\-marshaling time
when read back on a 32\-bit platform\&.  The 
.B Mashal\&.Compat_32
flag
only matters when marshaling is performed on a 64\-bit platform;
it has no effect if marshaling is performed on a 32\-bit platform\&.

.sp

.I val to_bytes 
: 
.B 'a -> extern_flags list -> bytes
.sp

.B Marshal\&.to_bytes v flags
returns a byte sequence containing
the representation of 
.B v
\&.
The 
.B flags
argument has the same meaning as for
.B Marshal\&.to_channel
\&.

.sp
.B "Since"
4.02.0

.sp

.I val to_string 
: 
.B 'a -> extern_flags list -> string
.sp
Same as 
.B to_bytes
but return the result as a string instead of
a byte sequence\&.

.sp

.I val to_buffer 
: 
.B bytes -> int -> int -> 'a -> extern_flags list -> int
.sp

.B Marshal\&.to_buffer buff ofs len v flags
marshals the value 
.B v
,
storing its byte representation in the sequence 
.B buff
,
starting at index 
.B ofs
, and writing at most
.B len
bytes\&.  It returns the number of bytes
actually written to the sequence\&. If the byte representation
of 
.B v
does not fit in 
.B len
characters, the exception 
.B Failure
is raised\&.

.sp

.I val from_channel 
: 
.B Pervasives.in_channel -> 'a
.sp

.B Marshal\&.from_channel chan
reads from channel 
.B chan
the
byte representation of a structured value, as produced by
one of the 
.B Marshal\&.to_*
functions, and reconstructs and
returns the corresponding value\&.
.sp
It raises 
.B End_of_file
if the function has already reached the
end of file when starting to read from the channel, and raises
.B Failure "input_value: truncated object"
if it reaches the end
of file later during the unmarshalling\&.

.sp

.I val from_bytes 
: 
.B bytes -> int -> 'a
.sp

.B Marshal\&.from_bytes buff ofs
unmarshals a structured value
like 
.B Marshal\&.from_channel
does, except that the byte
representation is not read from a channel, but taken from
the byte sequence 
.B buff
, starting at position 
.B ofs
\&.
The byte sequence is not mutated\&.

.sp
.B "Since"
4.02.0

.sp

.I val from_string 
: 
.B string -> int -> 'a
.sp
Same as 
.B from_bytes
but take a string as argument instead of a
byte sequence\&.

.sp

.I val header_size 
: 
.B int
.sp
The bytes representing a marshaled value are composed of
a fixed\-size header and a variable\-sized data part,
whose size can be determined from the header\&.
.B Marshal\&.header_size
is the size, in bytes, of the header\&.
.B Marshal\&.data_size
.B  buff ofs
is the size, in bytes,
of the data part, assuming a valid header is stored in
.B buff
starting at position 
.B ofs
\&.
Finally, 
.B Marshal\&.total_size
.B buff ofs
is the total size,
in bytes, of the marshaled value\&.
Both 
.B Marshal\&.data_size
and 
.B Marshal\&.total_size
raise 
.B Failure
if 
.B buff
, 
.B ofs
does not contain a valid header\&.
.sp
To read the byte representation of a marshaled value into
a byte sequence, the program needs to read first
.B Marshal\&.header_size
bytes into the sequence,
then determine the length of the remainder of the
representation using 
.B Marshal\&.data_size
,
make sure the sequence is large enough to hold the remaining
data, then read it, and finally call 
.B Marshal\&.from_bytes
to unmarshal the value\&.

.sp

.I val data_size 
: 
.B bytes -> int -> int
.sp
See 
.B Marshal\&.header_size
\&.

.sp

.I val total_size 
: 
.B bytes -> int -> int
.sp
See 
.B Marshal\&.header_size
\&.

.sp
