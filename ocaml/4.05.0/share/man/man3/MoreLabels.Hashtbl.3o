.TH "MoreLabels.Hashtbl" 3 source: 2017-07-30 OCamldoc "OCaml library"
.SH NAME
MoreLabels.Hashtbl \- no description
.SH Module
Module   MoreLabels.Hashtbl
.SH Documentation
.sp
Module
.BI "Hashtbl"
 : 
.B sig  end

.sp

.sp

.sp
.sp
.I type 
.B ('a, 'b)
.I t 
= 
.B ('a, 'b) Hashtbl.t

.sp

.sp

.I val create 
: 
.B ?random:bool -> int -> ('a, 'b) t
.sp

.sp

.I val clear 
: 
.B ('a, 'b) t -> unit
.sp

.sp

.I val reset 
: 
.B ('a, 'b) t -> unit
.sp

.sp

.I val copy 
: 
.B ('a, 'b) t -> ('a, 'b) t
.sp

.sp

.I val add 
: 
.B ('a, 'b) t -> key:'a -> data:'b -> unit
.sp

.sp

.I val find 
: 
.B ('a, 'b) t -> 'a -> 'b
.sp

.sp

.I val find_opt 
: 
.B ('a, 'b) t -> 'a -> 'b option
.sp

.sp

.I val find_all 
: 
.B ('a, 'b) t -> 'a -> 'b list
.sp

.sp

.I val mem 
: 
.B ('a, 'b) t -> 'a -> bool
.sp

.sp

.I val remove 
: 
.B ('a, 'b) t -> 'a -> unit
.sp

.sp

.I val replace 
: 
.B ('a, 'b) t -> key:'a -> data:'b -> unit
.sp

.sp

.I val iter 
: 
.B f:(key:'a -> data:'b -> unit) -> ('a, 'b) t -> unit
.sp

.sp

.I val filter_map_inplace 
: 
.B f:(key:'a -> data:'b -> 'b option) -> ('a, 'b) t -> unit
.sp

.sp

.I val fold 
: 
.B f:(key:'a -> data:'b -> 'c -> 'c) ->
.B   ('a, 'b) t -> init:'c -> 'c
.sp

.sp

.I val length 
: 
.B ('a, 'b) t -> int
.sp

.sp

.I val randomize 
: 
.B unit -> unit
.sp

.sp

.I val is_randomized 
: 
.B unit -> bool
.sp

.sp
.I type statistics 
= 
.B Hashtbl.statistics

.sp

.sp

.I val stats 
: 
.B ('a, 'b) t -> statistics
.sp

.sp
.I module type HashedType = 
.B Hashtbl.HashedType

.sp

.sp
.I module type SeededHashedType = 
.B Hashtbl.SeededHashedType

.sp

.sp
.I module type S = 
.B sig  end

.sp

.sp
.I module type SeededS = 
.B sig  end

.sp

.sp
.I module Make : 
.B functor (H : HashedType) -> sig  end

.sp

.sp
.I module MakeSeeded : 
.B functor (H : SeededHashedType) -> sig  end

.sp

.sp

.I val hash 
: 
.B 'a -> int
.sp

.sp

.I val seeded_hash 
: 
.B int -> 'a -> int
.sp

.sp

.I val hash_param 
: 
.B int -> int -> 'a -> int
.sp

.sp

.I val seeded_hash_param 
: 
.B int -> int -> int -> 'a -> int
.sp

.sp
