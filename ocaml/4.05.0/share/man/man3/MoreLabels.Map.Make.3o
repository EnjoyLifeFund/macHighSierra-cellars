.TH "MoreLabels.Map.Make" 3 source: 2017-07-30 OCamldoc "OCaml library"
.SH NAME
MoreLabels.Map.Make \- no description
.SH Module
Module   MoreLabels.Map.Make
.SH Documentation
.sp
Module
.BI "Make"
 : 
.B functor (Ord : OrderedType) -> sig  end

.sp

.sp
.B "Parameters:"
.sp
"Ord"

.B MoreLabels.Map.OrderedType





.sp
.sp
.I type key 

.sp

.sp
.I type 
.B +'a
.I t 

.sp

.sp

.I val empty 
: 
.B 'a t
.sp

.sp

.I val is_empty 
: 
.B 'a t -> bool
.sp

.sp

.I val mem 
: 
.B key -> 'a t -> bool
.sp

.sp

.I val add 
: 
.B key:key ->
.B   data:'a -> 'a t -> 'a t
.sp

.sp

.I val singleton 
: 
.B key -> 'a -> 'a t
.sp

.sp

.I val remove 
: 
.B key -> 'a t -> 'a t
.sp

.sp

.I val merge 
: 
.B f:(key -> 'a option -> 'b option -> 'c option) ->
.B   'a t -> 'b t -> 'c t
.sp

.sp

.I val union 
: 
.B f:(key -> 'a -> 'a -> 'a option) ->
.B   'a t -> 'a t -> 'a t
.sp

.sp

.I val compare 
: 
.B cmp:('a -> 'a -> int) ->
.B   'a t -> 'a t -> int
.sp

.sp

.I val equal 
: 
.B cmp:('a -> 'a -> bool) ->
.B   'a t -> 'a t -> bool
.sp

.sp

.I val iter 
: 
.B f:(key:key -> data:'a -> unit) ->
.B   'a t -> unit
.sp

.sp

.I val fold 
: 
.B f:(key:key -> data:'a -> 'b -> 'b) ->
.B   'a t -> init:'b -> 'b
.sp

.sp

.I val for_all 
: 
.B f:(key -> 'a -> bool) -> 'a t -> bool
.sp

.sp

.I val exists 
: 
.B f:(key -> 'a -> bool) -> 'a t -> bool
.sp

.sp

.I val filter 
: 
.B f:(key -> 'a -> bool) ->
.B   'a t -> 'a t
.sp

.sp

.I val partition 
: 
.B f:(key -> 'a -> bool) ->
.B   'a t -> 'a t * 'a t
.sp

.sp

.I val cardinal 
: 
.B 'a t -> int
.sp

.sp

.I val bindings 
: 
.B 'a t -> (key * 'a) list
.sp

.sp

.I val min_binding 
: 
.B 'a t -> key * 'a
.sp

.sp

.I val min_binding_opt 
: 
.B 'a t -> (key * 'a) option
.sp

.sp

.I val max_binding 
: 
.B 'a t -> key * 'a
.sp

.sp

.I val max_binding_opt 
: 
.B 'a t -> (key * 'a) option
.sp

.sp

.I val choose 
: 
.B 'a t -> key * 'a
.sp

.sp

.I val choose_opt 
: 
.B 'a t -> (key * 'a) option
.sp

.sp

.I val split 
: 
.B key ->
.B   'a t ->
.B   'a t * 'a option * 'a t
.sp

.sp

.I val find 
: 
.B key -> 'a t -> 'a
.sp

.sp

.I val find_opt 
: 
.B key -> 'a t -> 'a option
.sp

.sp

.I val find_first 
: 
.B f:(key -> bool) ->
.B   'a t -> key * 'a
.sp

.sp

.I val find_first_opt 
: 
.B f:(key -> bool) ->
.B   'a t -> (key * 'a) option
.sp

.sp

.I val find_last 
: 
.B f:(key -> bool) ->
.B   'a t -> key * 'a
.sp

.sp

.I val find_last_opt 
: 
.B f:(key -> bool) ->
.B   'a t -> (key * 'a) option
.sp

.sp

.I val map 
: 
.B f:('a -> 'b) -> 'a t -> 'b t
.sp

.sp

.I val mapi 
: 
.B f:(key -> 'a -> 'b) ->
.B   'a t -> 'b t
.sp

.sp
