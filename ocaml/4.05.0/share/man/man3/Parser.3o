.TH "Parser" 3 source: 2017-07-30 OCamldoc "OCaml library"
.SH NAME
Parser \- no description
.SH Module
Module   Parser
.SH Documentation
.sp
Module
.BI "Parser"
 : 
.B sig  end

.sp

.sp

.sp
.sp
.I type token 
=
 | AMPERAMPER
 | AMPERSAND
 | AND
 | AS
 | ASSERT
 | BACKQUOTE
 | BANG
 | BAR
 | BARBAR
 | BARRBRACKET
 | BEGIN
 | CHAR
.B of 
.B char
 | CLASS
 | COLON
 | COLONCOLON
 | COLONEQUAL
 | COLONGREATER
 | COMMA
 | CONSTRAINT
 | DO
 | DONE
 | DOT
 | DOTDOT
 | DOWNTO
 | ELSE
 | END
 | EOF
 | EQUAL
 | EXCEPTION
 | EXTERNAL
 | FALSE
 | FLOAT
.B of 
.B (string * char option)
 | FOR
 | FUN
 | FUNCTION
 | FUNCTOR
 | GREATER
 | GREATERRBRACE
 | GREATERRBRACKET
 | IF
 | IN
 | INCLUDE
 | INFIXOP0
.B of 
.B string
 | INFIXOP1
.B of 
.B string
 | INFIXOP2
.B of 
.B string
 | INFIXOP3
.B of 
.B string
 | INFIXOP4
.B of 
.B string
 | INHERIT
 | INITIALIZER
 | INT
.B of 
.B (string * char option)
 | LABEL
.B of 
.B string
 | LAZY
 | LBRACE
 | LBRACELESS
 | LBRACKET
 | LBRACKETBAR
 | LBRACKETLESS
 | LBRACKETGREATER
 | LBRACKETPERCENT
 | LBRACKETPERCENTPERCENT
 | LESS
 | LESSMINUS
 | LET
 | LIDENT
.B of 
.B string
 | LPAREN
 | LBRACKETAT
 | LBRACKETATAT
 | LBRACKETATATAT
 | MATCH
 | METHOD
 | MINUS
 | MINUSDOT
 | MINUSGREATER
 | MODULE
 | MUTABLE
 | NEW
 | NONREC
 | OBJECT
 | OF
 | OPEN
 | OPTLABEL
.B of 
.B string
 | OR
 | PERCENT
 | PLUS
 | PLUSDOT
 | PLUSEQ
 | PREFIXOP
.B of 
.B string
 | PRIVATE
 | QUESTION
 | QUOTE
 | RBRACE
 | RBRACKET
 | REC
 | RPAREN
 | SEMI
 | SEMISEMI
 | HASH
 | HASHOP
.B of 
.B string
 | SIG
 | STAR
 | STRING
.B of 
.B (string * string option)
 | STRUCT
 | THEN
 | TILDE
 | TO
 | TRUE
 | TRY
 | TYPE
 | UIDENT
.B of 
.B string
 | UNDERSCORE
 | VAL
 | VIRTUAL
 | WHEN
 | WHILE
 | WITH
 | COMMENT
.B of 
.B (string * Location.t)
 | DOCSTRING
.B of 
.B Docstrings.docstring
 | EOL
 
.sp

.sp

.I val implementation 
: 
.B (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Parsetree.structure
.sp

.sp

.I val interface 
: 
.B (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Parsetree.signature
.sp

.sp

.I val toplevel_phrase 
: 
.B (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Parsetree.toplevel_phrase
.sp

.sp

.I val use_file 
: 
.B (Lexing.lexbuf -> token) ->
.B   Lexing.lexbuf -> Parsetree.toplevel_phrase list
.sp

.sp

.I val parse_core_type 
: 
.B (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Parsetree.core_type
.sp

.sp

.I val parse_expression 
: 
.B (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Parsetree.expression
.sp

.sp

.I val parse_pattern 
: 
.B (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Parsetree.pattern
.sp

.sp
