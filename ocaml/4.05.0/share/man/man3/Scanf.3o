.TH "Scanf" 3 source: 2017-07-30 OCamldoc "OCaml library"
.SH NAME
Scanf \- Formatted input functions.
.SH Module
Module   Scanf
.SH Documentation
.sp
Module
.BI "Scanf"
 : 
.B sig  end

.sp
Formatted input functions\&.

.sp

.sp
.sp

.PP

.B === 
.B Introduction
.B  ===

.PP

.PP

.B === 
.B Functional input with format strings
.B  ===

.PP

.PP

.B === The module Scanf provides formatted input functions or scanners\&.
.B 
.B     The formatted input functions can read from any kind of input, including
.B     strings, files, or anything that can return characters\&. The more general
.B     source of characters is named a formatted input channel (or     scanning buffer) and has type Scanf\&.Scanning\&.in_channel\&. The more general
.B     formatted input function reads from any scanning buffer and is named
.B     bscanf\&.
.B 
.B     Generally speaking, the formatted input functions have 3 arguments:
.B \- the first argument is a source of characters for the input,
.B \- the second argument is a format string that specifies the values to
.B       read,
.B \- the third argument is a receiver function that is applied to the
.B       values read\&.
.B 
.B     Hence, a typical call to the formatted input function Scanf\&.bscanf is
.B     bscanf ic fmt f, where:
.B 
.B \- ic is a source of characters (typically a     formatted input channel with type Scanf\&.Scanning\&.in_channel),
.B 
.B \- fmt is a format string (the same format strings as those used to print
.B     material with module Printf or Format),
.B 
.B \- f is a function that has as many arguments as the number of values to
.B     read in the input according to fmt\&.
.B  ===

.PP

.PP

.B === 
.B A simple example
.B  ===

.PP

.PP

.B === As suggested above, the expression bscanf ic "%d" f reads a decimal
.B     integer n from the source of characters ic and returns f n\&.
.B 
.B     For instance,
.B 
.B \- if we use stdin as the source of characters (Scanf\&.Scanning\&.stdin is
.B     the predefined formatted input channel that reads from standard input),
.B 
.B \- if we define the receiver f as let f x = x + 1,
.B 
.B     then bscanf Scanning\&.stdin "%d" f reads an integer n from the
.B     standard input and returns f n (that is n + 1)\&. Thus, if we
.B     evaluate bscanf stdin "%d" f, and then enter 41 at the
.B     keyboard, the result we get is 42\&. ===

.PP

.PP

.B === 
.B Formatted input as a functional feature
.B  ===

.PP

.PP

.B === The OCaml scanning facility is reminiscent of the corresponding C feature\&.
.B     However, it is also largely different, simpler, and yet more powerful:
.B     the formatted input functions are higher\-order functionals and the
.B     parameter passing mechanism is just the regular function application not
.B     the variable assignment based mechanism which is typical for formatted
.B     input in imperative languages; the OCaml format strings also feature
.B     useful additions to easily define complex tokens; as expected within a
.B     functional programming language, the formatted input functions also
.B     support polymorphism, in particular arbitrary interaction with
.B     polymorphic user\-defined scanners\&. Furthermore, the OCaml formatted input
.B     facility is fully type\-checked at compile time\&. ===

.PP

.PP

.B === 
.B Formatted input channel
.B  ===

.PP
.I module Scanning : 
.B sig  end

.sp

.sp

.PP

.B === 
.B Type of formatted input functions
.B  ===

.PP
.I type 
.B ('a, 'b, 'c, 'd)
.I scanner 
= 
.B ('a, Scanning.in_channel, 'b, 'c, 'a -> 'd, 'd) Pervasives.format6 ->
.B   'c

.sp
The type of formatted input scanners: 
.B (\&'a, \&'b, \&'c, \&'d) scanner
is the type of a formatted input function that reads from some
formatted input channel according to some format string; more
precisely, if 
.B scan
is some formatted input function, then 
.B scan
.B     ic fmt f
applies 
.B f
to all the arguments specified by format
string 
.B fmt
, when 
.B scan
has read those arguments from the
.B Scanf\&.Scanning\&.in_channel
formatted input channel 
.B ic
\&.
.sp
For instance, the 
.B Scanf\&.scanf
function below has type
.B (\&'a, \&'b, \&'c, \&'d) scanner
, since it is a formatted input function that
reads from 
.B Scanf\&.Scanning\&.stdin
: 
.B scanf fmt f
applies 
.B f
to the arguments
specified by 
.B fmt
, reading those arguments from 
.B !Pervasives\&.stdin
as
expected\&.
.sp
If the format 
.B fmt
has some 
.B %r
indications, the corresponding
formatted input functions must be provided before receiver function
.B f
\&. For instance, if 
.B read_elem
is an input function for values of type
.B t
, then 
.B bscanf ic "%r;" read_elem f
reads a value 
.B v
of type 
.B t
followed by a 
.B \&';\&'
character, and returns 
.B f v
\&.

.sp
.B "Since"
3.10.0

.sp

.I exception Scan_failure 
.B of 
.B string

.sp
When the input can not be read according to the format string
specification, formatted input functions typically raise exception
.B Scan_failure
\&.

.sp

.PP

.B === 
.B The general formatted input function
.B  ===

.PP

.I val bscanf 
: 
.B Scanning.in_channel -> ('a, 'b, 'c, 'd) scanner
.sp

.sp

.PP

.B === bscanf ic fmt r1 \&.\&.\&. rN f reads characters from the
.B     Scanf\&.Scanning\&.in_channel formatted input channel ic and converts them to
.B     values according to format string fmt\&.
.B     As a final step, receiver function f is applied to the values read and
.B     gives the result of the bscanf call\&.
.B 
.B     For instance, if f is the function fun s i \-> i + 1, then
.B     Scanf\&.sscanf "x= 1" "%s = %i" f returns 2\&.
.B 
.B     Arguments r1 to rN are user\-defined input functions that read the
.B     argument corresponding to the %r conversions specified in the format
.B     string\&. ===

.PP

.PP

.B === 
.B Format string description
.B  ===

.PP

.PP

.B === The format string is a character string which contains three types of
.B     objects:
.B \- plain characters, which are simply matched with the characters of the
.B       input (with a special case for space and line feed, see Scanf\&.space),
.B \- conversion specifications, each of which causes reading and conversion of
.B       one argument for the function f (see Scanf\&.conversion),
.B \- scanning indications to specify boundaries of tokens
.B       (see scanning Scanf\&.indication)\&.
.B  ===

.PP

.PP

.B === 
.B The space character in format strings
.B  ===

.PP

.PP

.B === As mentioned above, a plain character in the format string is just
.B     matched with the next character of the input; however, two characters are
.B     special exceptions to this rule: the space character (\&' \&' or ASCII code
.B     32) and the line feed character (\&'\(rsn\&' or ASCII code 10)\&.
.B     A space does not match a single space character, but any amount of
.B     \&'whitespace\&' in the input\&. More precisely, a space inside the format
.B     string matches any number of tab, space, line feed and carriage
.B     return characters\&. Similarly, a line feed character in the format string
.B     matches either a single line feed or a carriage return followed by a line
.B     feed\&.
.B 
.B     Matching any amount of whitespace, a space in the format string
.B     also matches no amount of whitespace at all; hence, the call bscanf ib
.B     "Price = %d $" (fun p \-> p) succeeds and returns 1 when reading an
.B     input with various whitespace in it, such as Price = 1 $,
.B     Price  =  1    $, or even Price=1$\&. ===

.PP

.PP

.B === 
.B Conversion specifications in format strings
.B  ===

.PP

.PP

.B === Conversion specifications consist in the % character, followed by
.B     an optional flag, an optional field width, and followed by one or
.B     two conversion characters\&.
.B 
.B     The conversion characters and their meanings are:
.B 
.B \- d: reads an optionally signed decimal integer (0\-9+)\&.
.B \- i: reads an optionally signed integer
.B       (usual input conventions for decimal (0\-9+), hexadecimal
.B        (0x[0\-9a\-f]+ and 0X[0\-9A\-F]+), octal (0o[0\-7]+), and binary
.B        (0b[0\-1]+) notations are understood)\&.
.B \- u: reads an unsigned decimal integer\&.
.B \- x or X: reads an unsigned hexadecimal integer ([0\-9a\-fA\-F]+)\&.
.B \- o: reads an unsigned octal integer ([0\-7]+)\&.
.B \- s: reads a string argument that spreads as much as possible, until the
.B       following bounding condition holds: 
.B \- a whitespace has been found (see Scanf\&.space),
.B \- a scanning indication (see scanning Scanf\&.indication) has been
.B          encountered,
.B \- the end\-of\-input has been reached\&.
.B 
.B       Hence, this conversion always succeeds: it returns an empty
.B       string if the bounding condition holds when the scan begins\&.
.B \- S: reads a delimited string argument (delimiters and special
.B       escaped characters follow the lexical conventions of OCaml)\&.
.B \- c: reads a single character\&. To test the current input character
.B       without reading it, specify a null field width, i\&.e\&. use
.B       specification %0c\&. Raise Invalid_argument, if the field width
.B       specification is greater than 1\&.
.B \- C: reads a single delimited character (delimiters and special
.B       escaped characters follow the lexical conventions of OCaml)\&.
.B \- f, e, E, g, G: reads an optionally signed
.B       floating\-point number in decimal notation, in the style dddd\&.ddd
.B       e/E+\-dd\&.
.B \- h, H: reads an optionally signed floating\-point number
.B       in hexadecimal notation\&.
.B \- F: reads a floating point number according to the lexical
.B       conventions of OCaml (hence the decimal point is mandatory if the
.B       exponent part is not mentioned)\&.
.B \- B: reads a boolean argument (true or false)\&.
.B \- b: reads a boolean argument (for backward compatibility; do not use
.B       in new programs)\&.
.B \- ld, li, lu, lx, lX, lo: reads an int32 argument to
.B       the format specified by the second letter for regular integers\&.
.B \- nd, ni, nu, nx, nX, no: reads a nativeint argument to
.B       the format specified by the second letter for regular integers\&.
.B \- Ld, Li, Lu, Lx, LX, Lo: reads an int64 argument to
.B       the format specified by the second letter for regular integers\&.
.B \- [ range ]: reads characters that matches one of the characters
.B       mentioned in the range of characters range (or not mentioned in
.B       it, if the range starts with ^)\&. Reads a string that can be
.B       empty, if the next input character does not match the range\&. The set of
.B       characters from c1 to c2 (inclusively) is denoted by c1\-c2\&.
.B       Hence, %[0\-9] returns a string representing a decimal number
.B       or an empty string if no decimal digit is found; similarly,
.B       %[0\-9a\-f] returns a string of hexadecimal digits\&.
.B       If a closing bracket appears in a range, it must occur as the
.B       first character of the range (or just after the ^ in case of
.B       range negation); hence []] matches a ] character and
.B       [^]] matches any character that is not ]\&.
.B       Use %% and %@ to include a % or a @ in a range\&.
.B \- r: user\-defined reader\&. Takes the next ri formatted input
.B       function and applies it to the scanning buffer ib to read the
.B       next argument\&. The input function ri must therefore have type
.B       Scanning\&.in_channel \-> \&'a and the argument read has type \&'a\&.
.B \- { fmt %}: reads a format string argument\&. The format string
.B       read must have the same type as the format string specification
.B       fmt\&. For instance, "%{ %i %}" reads any format string that
.B       can read a value of type int; hence, if s is the string
.B       "fmt:\(rs"number is %u\(rs"", then Scanf\&.sscanf s "fmt: %{%i%}"
.B       succeeds and returns the format string "number is %u"\&.
.B \- ( fmt %): scanning sub\-format substitution\&.
.B       Reads a format string rf in the input, then goes on scanning with
.B       rf instead of scanning with fmt\&.
.B       The format string rf must have the same type as the format string
.B       specification fmt that it replaces\&.
.B       For instance, "%( %i %)" reads any format string that can read a value
.B       of type int\&.
.B       The conversion returns the format string read rf, and then a value
.B       read using rf\&.
.B       Hence, if s is the string "\(rs"%4d\(rs"1234\&.00", then
.B       Scanf\&.sscanf s "%(%i%)" (fun fmt i \-> fmt, i) evaluates to
.B       ("%4d", 1234)\&.
.B       This behaviour is not mere format substitution, since the conversion
.B       returns the format string read as additional argument\&. If you need
.B       pure format substitution, use special flag _ to discard the
.B       extraneous argument: conversion %_( fmt %) reads a format string
.B       rf and then behaves the same as format string rf\&.  Hence, if s is
.B       the string "\(rs"%4d\(rs"1234\&.00", then Scanf\&.sscanf s "%_(%i%)" is
.B       simply equivalent to Scanf\&.sscanf "1234\&.00" "%4d"\&.
.B \- l: returns the number of lines read so far\&.
.B \- n: returns the number of characters read so far\&.
.B \- N or L: returns the number of tokens read so far\&.
.B \- !: matches the end of input condition\&.
.B \- %: matches one % character in the input\&.
.B \- @: matches one @ character in the input\&.
.B \- ,: does nothing\&.
.B 
.B     Following the % character that introduces a conversion, there may be
.B     the special flag _: the conversion that follows occurs as usual,
.B     but the resulting value is discarded\&.
.B     For instance, if f is the function fun i \-> i + 1, and s is the
.B     string "x = 1", then Scanf\&.sscanf s "%_s = %i" f returns 2\&.
.B 
.B     The field width is composed of an optional integer literal
.B     indicating the maximal width of the token to read\&.
.B     For instance, %6d reads an integer, having at most 6 decimal digits;
.B     %4f reads a float with at most 4 characters; and %8[\(rs000\-\(rs255]
.B     returns the next 8 characters (or all the characters still available,
.B     if fewer than 8 characters are available in the input)\&.
.B 
.B     Notes:
.B 
.B \- as mentioned above, a %s conversion always succeeds, even if there is
.B       nothing to read in the input: in this case, it simply returns ""\&.
.B 
.B \- in addition to the relevant digits, \&'_\&' characters may appear
.B     inside numbers (this is reminiscent to the usual OCaml lexical
.B     conventions)\&. If stricter scanning is desired, use the range
.B     conversion facility instead of the number conversions\&.
.B 
.B \- the scanf facility is not intended for heavy duty lexical
.B     analysis and parsing\&. If it appears not expressive enough for your
.B     needs, several alternative exists: regular expressions (module
.B     Str), stream parsers, ocamllex\-generated lexers,
.B     ocamlyacc\-generated parsers\&.
.B  ===

.PP

.PP

.B === 
.B Scanning indications in format strings
.B  ===

.PP

.PP

.B === Scanning indications appear just after the string conversions %s
.B     and %[ range ] to delimit the end of the token\&. A scanning
.B     indication is introduced by a @ character, followed by some
.B     plain character c\&. It means that the string token should end
.B     just before the next matching c (which is skipped)\&. If no c
.B     character is encountered, the string token spreads as much as
.B     possible\&. For instance, "%s@\(rst" reads a string up to the next
.B     tab character or to the end of input\&. If a @ character appears
.B     anywhere else in the format string, it is treated as a plain character\&.
.B 
.B     Note:
.B 
.B \- As usual in format strings, % and @ characters must be escaped
.B     using %% and %@; this rule still holds within range specifications
.B     and scanning indications\&.
.B     For instance, format "%s@%%" reads a string up to the next %
.B     character, and format "%s@%@" reads a string up to the next @\&.
.B \- The scanning indications introduce slight differences in the syntax of
.B     Scanf format strings, compared to those used for the Printf
.B     module\&. However, the scanning indications are similar to those used in
.B     the Format module; hence, when producing formatted text to be scanned
.B     by Scanf\&.bscanf, it is wise to use printing functions from the
.B     Format module (or, if you need to use functions from Printf, banish
.B     or carefully double check the format strings that contain \&'@\&'
.B     characters)\&.
.B  ===

.PP

.PP

.B === 
.B Exceptions during scanning
.B  ===

.PP

.PP

.B === Scanners may raise the following exceptions when the input cannot be read
.B     according to the format string:
.B 
.B \- Raise Scanf\&.Scan_failure if the input does not match the format\&.
.B 
.B \- Raise Failure if a conversion to a number is not possible\&.
.B 
.B \- Raise End_of_file if the end of input is encountered while some more
.B       characters are needed to read the current conversion specification\&.
.B 
.B \- Raise Invalid_argument if the format string is invalid\&.
.B 
.B     Note:
.B 
.B \- as a consequence, scanning a %s conversion never raises exception
.B     End_of_file: if the end of input is reached the conversion succeeds and
.B     simply returns the characters read so far, or "" if none were ever read\&.
.B  ===

.PP

.PP

.B === 
.B Specialised formatted input functions
.B  ===

.PP

.I val sscanf 
: 
.B string -> ('a, 'b, 'c, 'd) scanner
.sp
Same as 
.B Scanf\&.bscanf
, but reads from the given string\&.

.sp

.I val scanf 
: 
.B ('a, 'b, 'c, 'd) scanner
.sp
Same as 
.B Scanf\&.bscanf
, but reads from the predefined formatted input
channel 
.B Scanf\&.Scanning\&.stdin
that is connected to 
.B Pervasives\&.stdin
\&.

.sp

.I val kscanf 
: 
.B Scanning.in_channel ->
.B   (Scanning.in_channel -> exn -> 'd) -> ('a, 'b, 'c, 'd) scanner
.sp
Same as 
.B Scanf\&.bscanf
, but takes an additional function argument
.B ef
that is called in case of error: if the scanning process or
some conversion fails, the scanning function aborts and calls the
error handling function 
.B ef
with the formatted input channel and the
exception that aborted the scanning process as arguments\&.

.sp

.I val ksscanf 
: 
.B string ->
.B   (Scanning.in_channel -> exn -> 'd) -> ('a, 'b, 'c, 'd) scanner
.sp
Same as 
.B Scanf\&.kscanf
but reads from the given string\&.

.sp
.B "Since"
4.02.0

.sp

.PP

.B === 
.B Reading format strings from input
.B  ===

.PP

.I val bscanf_format 
: 
.B Scanning.in_channel ->
.B   ('a, 'b, 'c, 'd, 'e, 'f) Pervasives.format6 ->
.B   (('a, 'b, 'c, 'd, 'e, 'f) Pervasives.format6 -> 'g) -> 'g
.sp

.B bscanf_format ic fmt f
reads a format string token from the formatted
input channel 
.B ic
, according to the given format string 
.B fmt
, and
applies 
.B f
to the resulting format string value\&.
Raise 
.B Scanf\&.Scan_failure
if the format string value read does not have the
same type as 
.B fmt
\&.

.sp
.B "Since"
3.09.0

.sp

.I val sscanf_format 
: 
.B string ->
.B   ('a, 'b, 'c, 'd, 'e, 'f) Pervasives.format6 ->
.B   (('a, 'b, 'c, 'd, 'e, 'f) Pervasives.format6 -> 'g) -> 'g
.sp
Same as 
.B Scanf\&.bscanf_format
, but reads from the given string\&.

.sp
.B "Since"
3.09.0

.sp

.I val format_from_string 
: 
.B string ->
.B   ('a, 'b, 'c, 'd, 'e, 'f) Pervasives.format6 ->
.B   ('a, 'b, 'c, 'd, 'e, 'f) Pervasives.format6
.sp

.B format_from_string s fmt
converts a string argument to a format string,
according to the given format string 
.B fmt
\&.
Raise 
.B Scanf\&.Scan_failure
if 
.B s
, considered as a format string, does not
have the same type as 
.B fmt
\&.

.sp
.B "Since"
3.10.0

.sp

.I val unescaped 
: 
.B string -> string
.sp

.B unescaped s
return a copy of 
.B s
with escape sequences (according to
the lexical conventions of OCaml) replaced by their corresponding special
characters\&.
More precisely, 
.B Scanf\&.unescaped
has the following property:
for all string 
.B s
, 
.B Scanf\&.unescaped (String\&.escaped s) = s
\&.
.sp
Always return a copy of the argument, even if there is no escape sequence
in the argument\&.
Raise 
.B Scanf\&.Scan_failure
if 
.B s
is not properly escaped (i\&.e\&. 
.B s
has invalid
escape sequences or special characters that are not properly escaped)\&.
For instance, 
.B String\&.unescaped "\(rs""
will fail\&.

.sp
.B "Since"
4.00.0

.sp

.PP

.B === 
.B Deprecated
.B  ===

.PP

.I val fscanf 
: 
.B Pervasives.in_channel -> ('a, 'b, 'c, 'd) scanner
.sp
.B "Deprecated."

.B Scanf\&.fscanf
is error prone and deprecated since 4\&.03\&.0\&.
.sp
This function violates the following invariant of the 
.B Scanf
module:
To preserve scanning semantics, all scanning functions defined in 
.B Scanf
must read from a user defined 
.B Scanf\&.Scanning\&.in_channel
formatted input
channel\&.
.sp
If you need to read from a 
.B Pervasives\&.in_channel
input channel
.B ic
, simply define a 
.B Scanf\&.Scanning\&.in_channel
formatted input channel as in
.B let ib = Scanning\&.from_channel ic
,
then use 
.B Scanf\&.bscanf ib
as usual\&.

.sp

.I val kfscanf 
: 
.B Pervasives.in_channel ->
.B   (Scanning.in_channel -> exn -> 'd) -> ('a, 'b, 'c, 'd) scanner
.sp
.B "Deprecated."

.B Scanf\&.kfscanf
is error prone and deprecated since 4\&.03\&.0\&.

.sp
