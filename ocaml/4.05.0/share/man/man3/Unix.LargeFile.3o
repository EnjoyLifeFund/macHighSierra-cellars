.TH "Unix.LargeFile" 3 source: 2017-07-30 OCamldoc "OCaml library"
.SH NAME
Unix.LargeFile \- File operations on large files.
.SH Module
Module   Unix.LargeFile
.SH Documentation
.sp
Module
.BI "LargeFile"
 : 
.B sig  end

.sp
File operations on large files\&.
This sub\-module provides 64\-bit variants of the functions
.B Unix\&.lseek
(for positioning a file descriptor),
.B Unix\&.truncate
and 
.B Unix\&.ftruncate
(for changing the size of a file),
and 
.B Unix\&.stat
, 
.B Unix\&.lstat
and 
.B Unix\&.fstat
(for obtaining
information on files)\&.  These alternate functions represent
positions and sizes by 64\-bit integers (type 
.B int64
) instead of
regular integers (type 
.B int
), thus allowing operating on files
whose sizes are greater than 
.B max_int
\&.

.sp

.sp
.sp

.I val lseek 
: 
.B Unix.file_descr -> int64 -> Unix.seek_command -> int64
.sp
See 
.B Unix\&.lseek
\&.

.sp

.I val truncate 
: 
.B string -> int64 -> unit
.sp
See 
.B Unix\&.truncate
\&.

.sp

.I val ftruncate 
: 
.B Unix.file_descr -> int64 -> unit
.sp
See 
.B Unix\&.ftruncate
\&.

.sp
.I type stats 
= {
 st_dev : 
.B int
;  (* Device number
 *) 
 st_ino : 
.B int
;  (* Inode number
 *) 
 st_kind : 
.B Unix.file_kind
;  (* Kind of the file
 *) 
 st_perm : 
.B Unix.file_perm
;  (* Access rights
 *) 
 st_nlink : 
.B int
;  (* Number of links
 *) 
 st_uid : 
.B int
;  (* User id of the owner
 *) 
 st_gid : 
.B int
;  (* Group ID of the file\&'s group
 *) 
 st_rdev : 
.B int
;  (* Device minor number
 *) 
 st_size : 
.B int64
;  (* Size in bytes
 *) 
 st_atime : 
.B float
;  (* Last access time
 *) 
 st_mtime : 
.B float
;  (* Last modification time
 *) 
 st_ctime : 
.B float
;  (* Last status change time
 *) 
 }

.sp

.sp

.I val stat 
: 
.B string -> stats
.sp

.sp

.I val lstat 
: 
.B string -> stats
.sp

.sp

.I val fstat 
: 
.B Unix.file_descr -> stats
.sp

.sp
