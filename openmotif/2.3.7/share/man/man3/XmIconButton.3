.DT
.TH XmIconButton 3X "15 July 1992"
.SH NAME
The Icon Button widget
.SH SYNOPSIS
Documents the XmIconButton widget
.SH DESCRIPTION
.PP
.TS
tab (%);
l l.
.TE
.PP
The Icon Button widget is a selectable area of the screen that contains both a label and 
a string. When the user selects this button with the OSF/Motif select button its activateCallback
is called. This widget can also be used as a Toggle button, although it 
will have no indicator. The placement of the icon relative to the text can be modified 
by using the iconPlacement resource.
.PP
Note: This widget takes a String as its label, not an XmString, so there is no need to 
use XmStringCreate to get a properly formatted string. Internationalized text is not 
currently supported.
.PP
.SH Normal Resources
.PP
.TS
tab (%);
l l l l.
Name%Class%Type%Initial Value
activateCallback%Callback%Callback%NULL
alignment%Alignment%Alignment%XmALIGNMENT_
%%% BEGINNING
armColor%ArmColor%Pixel%<dynamic>
doubleClickCallback%Callback%Callback%NULL
fontList%FontList%FontList%fixed
horizontalMargin%Space%HorizontalDimension%2
iconTextPadding%Space%VerticalDimension%2
iconPlacement%IconPlacement%IconPlacement%XmIconTop
label%Label%String%Widget name
labelString%LabelString%XmString%Widget name
pixmap%Pixmap%Pixmap%None
recomputeSize%Boolean%Boolean%True
set%Boolean%Boolean%False
stringDirection%StringDirection%StringDirection%XmSTRING_
%%%DIRECTION_L_TO_R
verticalMargin%Space%VerticalDimension%2
.TE
.PP
All resource names begin with XmN and all resource class names begin with XmC.
.PP
.SH activateCallback
.PP
This list of callback routines is called whenever the icon button is clicked on by 
the user. The format of the callback routines is specified below.
.PP
.SH armColor
.PP
This is the pixel index that describes the color to fill the widget with when it is set.
.PP
.SH doubleClickCallback
.PP
This list of callback routines is called whenever the user double clicks on this 
widget. The format of the callback routines is specified below.
.PP
.SH fontList
.PP 
The default font in this list is used to render the label string of the icon button.
.PP
.SH horizontalMargin
.PP
.SH verticalMargin
.PP
The amount of space to be left between the edge of the shadow and the text or 
pixmap displayed. The vertical and horizontal spacing can be controlled 
independently.
.PP
.SH iconTextPadding
.PP
The amount of space to be left between the pixmap and the label string.
.PP
.SH iconPlacement
.PP
The location of the pixmap (icon) with respect to the displayed text. This resource 
can take one of the following values: XmIconTop, XmIconBottom, XmIconLeft, 
XmIconRight, XmIconNone, and XmIconOnly. A type converter has been 
registered that converts the following strings: "top", "bottom", "left", "right", 
"none", and "iconOnly".
.PP
If only a string is displayed in the Icon Button, this resource can be used to change 
the justification of the label. XmIconTop=bottom, XmIconBottom=top, 
XmIconRight=Left, XmIconLeft=Right, XmIconNone=Center. In order to use 
these options, pixmap must be set to None.
.PP
.SH label
.PP
The string to display in this button. This string can only have one font, but can be 
any number of lines long. Use the NEW_LINE character ( '\n' ) to separate lines. This resource has been superceded by labelString, but is included for backwards compatibility. If XmNlabelString is set , XmNlabel is ignored
.PP
.SH labelString
.PP
Specifies the compound string to be displayed in the button. If this value is NULL, the value of XmNlabel is used. If both are NULL, labelString is initialized by converting the name of the widget to a compound string. Refer to XmString(3X) in the OSD/Motif Programmers' Reference for more information on the creation and structure of compound strings.
.SH pixmap
.PP
The pixmap to display. This pixmap may either be of depth one (1), or the same 
depth as the screen this widget is being displayed on. If the pixmap is of depth one 
then XCopyPlane is used to render the pixmap in the foreground and background 
colors. If the pixmap is not of depth one then XCopyArea is used and all the 
original colors of the pixmap are preserved. Unlike the Motif PushButton widget 
the pixmap is automatically stippled when the Icon Button becomes insensitive.
.PP
.SH recomputeSize
.PP
If this Boolean value is True then the icon button will ask its parent to resize it to 
be just large enough to contain the pixmap, label and shadows. If it is False then 
the icon button will not attempt a resize.
.PP
.SH set
.PP
This Boolean value represents the current state of the icon button. If this value is 
True then the icon button is set and is rendered as depressed. Otherwise it is unset 
and is rendered normally.
.PP
.SH stringDirection
.PP
Specifies the direction in which the string is to be drawn. XmNSTRING_DIRECTION_L_TO_R is drawn left to right, while XmNSTRING_DIRECTION_R_TO_L is drawn right to left. The default for this resource is determined at creation time. If no value is specified for this resource and the widget's parent is a manager, the value is inherited from the parent; otherwise, it defaults to XmNSTRING_DIRECTION_L_TO_R.
.PP
.SH Callback Routines
.PP
Whenever the user selects the icon button the activate callbacks will be called. When-
ever the user double clicks on this widget the first click will call the activateCallback, 
and if the second occurs within MultiClickTime it will call the doubleClickCallback.. 
These callbacks have the following parameters:

.HP 20
void (activate_callback)(Widget w, XtPointer client_data, XtPointer call_data)

.ta 15
.HP 15
w	the Icon Button widget
.HP 15
client_data	the client data specified by the application
.HP 15
call_data	a pointer to an XmIconButtonCallbackInfo structure

.HP 20
void (double_click_callback)(Widget w, XtPointer client_data, XtPointer call_data)

.ta 15
.HP 15
w	the Icon Button widget
.HP 15
client_data	the client data specified by the application
.HP 15
call_data	a pointer to an XmIconButtonCallbackInfo structure
.PP
All procedures on the Icon Button's activateCallback and doubleClickCallback lists 
will have a pointer to an IconButtonCallbackInfo structure passed to them in the 
call_data field. This structure is defined in the Icon Button widget's public header file 
as follows:

.ta 5,10,15,20,25,30,35
.df
typedef struct _XmIconButtonCallbackInfo {

	Boolean state;   /* The current state of the icon button.*/

	XEvent * event;  /* The event that caused this action.*/

} XmIconButtonCallbackInfo;

.ta 15
.HP 15
state	the current state of the icon button. When this is used as a push 
button (the default) the state variable will always be True.
.HP 15
event	the X Event that caused this action, see Translations and Actions 
below for details on the events that can cause these callbacks to 
be called.
.PP
.SH Convenience Routine
.PP
.SH 
.HP 5
.SH XmCreateIconButton  - Widget creation convenience routine 
.nf

Widget XmCreateIconButton( 
	Widget parent,		/* Widget id of parent for IconButton */
	String name, 		/* Name of the created widget */
	ArgList args,		/* argument list */
	Cardinal num_args	/* number of items in argument list */
	)				 

.nf
.PP
Translations and Actions:
.PP
The following are the default translation bindings used by the icon button:
.PP
.TS
tab (%);
l l.
<Btn1Down>,<Btn1Up>:%XmToggle() XmNotify()
<Btn1Down>(2):%XmDoubleNotify()
<Btn1Down>:%XmGetFocus() XmToggle()
<Key>osfSelect:%XmArmAndActivate()
<Key>osfActivate:%XmArmAndActivate()
None<Key>space:%XmArmAndActivate()
None<Key>Return:%XmArmAndActivate()
<Btn1Down>,<Leave>%XmToggle()
.TE
.PP
The following actions are supported by the icon button:

.ta 15
.HP 15
XmToggle()	Toggles the state of the icon button.
.HP 15
XmNotify()	Calls all routines on activateCallback list.
.HP 15
XmDoubleNotify()	Calls all routines on the doubleClickCallback list. 
.HP 15
XmArmAndActivated()	This action will arm the button, call the actions on the activateCallback 
list, wait a fraction of a second and then disarm the button.
.PP
To use this button as a toggle button rather than a push button, replace the default 
translation table with the following table.
.PP
.TS
tab (%);
l l.
<Btn1Down>:%XmToggle() XmNotify()
<Btn1Up>(2):%XmDoubleNotify()
<Key>osfSelect:%XmToggle() XmNotify()
<Key>osfActivate:%XmToggle() XmNotify()
None<Key>space:%XmToggle() XmNotify()
None<Key>Return:%XmToggle() XmNotify()
.TE
.PP
.SH COPYRIGHT
.PP
Copyright (c) 1992 by Integrated Computer Solutions, Inc.
