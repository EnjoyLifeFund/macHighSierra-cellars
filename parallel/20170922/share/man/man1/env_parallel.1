.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ENV_PARALLEL 1"
.TH ENV_PARALLEL 1 "2017-04-16" "20170522" "parallel"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
env_parallel \- export environment to GNU parallel
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBenv_parallel\fR [options for \s-1GNU\s0 Parallel]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBenv_parallel\fR is a shell function that exports the current
environment to \s-1GNU \s0\fBparallel\fR.
.PP
If the shell function is not loaded, a dummy script will be run
instead that explains how to install the function.
.PP
\&\fBenv_parallel\fR is beta quality and not production ready, but please
use it for everyday use and report bugs.
.PP
\&\fBenv_parallel\fR is 0.1 sec slower at startup than pure \s-1GNU
\&\s0\fBparallel\fR, and takes up to 15 ms to start a job.
.PP
Due to the problem with environment space (see below) the recommended
usage is:
.PP
.Vb 2
\&  # Record the "clean" environment (this only needs to be run once)
\&  env_parallel \-\-record\-env
\&
\&  # Optionally edit ~/.parallel/ignored_vars (only needed once)
\&
\&  # Define whatever you want to use
\&  alias myalias=echo
\&  myvar=it
\&  myfunc() { myalias $1 $myvar works.; }
\&
\&  # Use \-\-env _ to only transfer the names not in the "empty" environment
\&  env_parallel \-\-env _ \-S localhost myfunc ::: Yay,
.Ve
.PP
In \fBcsh\fR:
.PP
.Vb 2
\&  # Record the "clean" environment (this only needs to be run once)
\&  env_parallel \-\-record\-env
\&
\&  # Optionally edit ~/.parallel/ignored_vars (only needed once)
\&
\&  # Define whatever you want to use
\&  alias myalias \*(Aqecho \e!* $myvar works.\*(Aq
\&  set myvar=it
\&
\&  # Use \-\-env _ to only transfer the names not in the "empty" environment
\&  env_parallel \-\-env _ \-S localhost myalias ::: Yay,
.Ve
.SS "Environment space"
.IX Subsection "Environment space"
By default \fBenv_parallel\fR will export all environment variables,
arrays, aliases, functions and shell options (see details for the
individual shells below).
.PP
But this only works if the size of the current environment is smaller
than the maximal length of a command and smaller than half of the max
if running remotely. E.g. The max size of Bash's command is 128 \s-1KB,\s0 so
\&\fBenv_parallel\fR will fail if '\fBset | wc \-c\fR' is bigger than 128
\&\s-1KB.\s0 Technically the limit is in \fIexecve\fR\|(1) which IPC::open3 uses.
.PP
Bash completion functions are well-known for taking up well over 128
\&\s-1KB\s0 of environment space and the primary reason for causing
\&\fBenv_parallel\fR to fail.
.PP
Instead you can use \fB\-\-env\fR to specify which variables, arrays,
aliases and functions to export as this will only export those with
the given name. Or follow the recommended usage in shown in
\&\s-1DESCRIPTION.\s0
.SH "OPTIONS"
.IX Header "OPTIONS"
Same as \s-1GNU \s0\fBparallel\fR.
.SH "SUPPORTED SHELLS"
.IX Header "SUPPORTED SHELLS"
.SS "Ash"
.IX Subsection "Ash"
\&\fB\-\-env\fR is supported to export only the variable, or alias with the
given name. Multiple \fB\-\-env\fRs can be given.
.PP
Installation
.PP
Put this in \f(CW$HOME\fR/.profile:
.PP
.Vb 1
\&  . \`which env_parallel.ash\`
.Ve
.PP
E.g. by doing:
.PP
.Vb 1
\&  echo \*(Aq. \`which env_parallel.ash\`\*(Aq >> $HOME/.profile
.Ve
.IP "aliases" 8
.IX Item "aliases"
.Vb 5
\&  alias myecho=\*(Aqecho aliases\*(Aq
\&  env_parallel myecho ::: work
\&  env_parallel \-S server myecho ::: work
\&  env_parallel \-\-env myecho myecho ::: work
\&  env_parallel \-\-env myecho \-S server myecho ::: work
.Ve
.IP "functions" 8
.IX Item "functions"
.Vb 1
\&  ash cannot list defined functions \- thus is not supported.
.Ve
.IP "variables" 8
.IX Item "variables"
.Vb 5
\&  myvar=variables
\&  env_parallel echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-S server echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-\-env myvar echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-\-env myvar \-S server echo \*(Aq$myvar\*(Aq ::: work
.Ve
.IP "arrays" 8
.IX Item "arrays"
Arrays are not supported by Ash.
.SS "Bash"
.IX Subsection "Bash"
\&\fB\-\-env\fR is supported to export only the variable, alias, function, or
array with the given name. Multiple \fB\-\-env\fRs can be given.
.PP
Installation
.PP
Put this in \f(CW$HOME\fR/.bashrc:
.PP
.Vb 1
\&  . \`which env_parallel.bash\`
.Ve
.PP
E.g. by doing:
.PP
.Vb 1
\&  echo \*(Aq. \`which env_parallel.bash\`\*(Aq >> $HOME/.bashrc
.Ve
.IP "aliases" 8
.IX Item "aliases"
.Vb 5
\&  alias myecho=\*(Aqecho aliases\*(Aq
\&  env_parallel myecho ::: work
\&  env_parallel \-S server myecho ::: work
\&  env_parallel \-\-env myecho myecho ::: work
\&  env_parallel \-\-env myecho \-S server myecho ::: work
.Ve
.IP "functions" 8
.IX Item "functions"
.Vb 5
\&  myfunc() { echo functions $*; }
\&  env_parallel myfunc ::: work
\&  env_parallel \-S server myfunc ::: work
\&  env_parallel \-\-env myfunc myfunc ::: work
\&  env_parallel \-\-env myfunc \-S server myfunc ::: work
.Ve
.IP "variables" 8
.IX Item "variables"
.Vb 5
\&  myvar=variables
\&  env_parallel echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-S server echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-\-env myvar echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-\-env myvar \-S server echo \*(Aq$myvar\*(Aq ::: work
.Ve
.IP "arrays" 8
.IX Item "arrays"
.Vb 5
\&  myarray=(arrays work, too)
\&  env_parallel \-k echo \*(Aq${myarray[{}]}\*(Aq ::: 0 1 2
\&  env_parallel \-k \-S server echo \*(Aq${myarray[{}]}\*(Aq ::: 0 1 2
\&  env_parallel \-k \-\-env myarray echo \*(Aq${myarray[{}]}\*(Aq ::: 0 1 2
\&  env_parallel \-k \-\-env myarray \-S server echo \*(Aq${myarray[{}]}\*(Aq ::: 0 1 2
.Ve
.SS "csh"
.IX Subsection "csh"
\&\fB\-\-env\fR is supported to export only the variable, alias, or
array with the given name. Multiple \fB\-\-env\fRs can be given.
.PP
\&\fBenv_parallel\fR for \fBcsh\fR breaks \fB\f(CB$PARALLEL\fB\fR, so do not use
\&\fB\f(CB$PARALLEL\fB\fR.
.PP
Installation
.PP
Put this in \f(CW$HOME\fR/.cshrc:
.PP
.Vb 1
\&  source \`which env_parallel.csh\`
.Ve
.PP
E.g. by doing:
.PP
.Vb 1
\&  echo \*(Aqsource \`which env_parallel.csh\`\*(Aq >> $HOME/.cshrc
.Ve
.IP "aliases" 8
.IX Item "aliases"
.Vb 5
\&  alias myecho \*(Aqecho aliases\*(Aq
\&  env_parallel myecho ::: work
\&  env_parallel \-S server myecho ::: work
\&  env_parallel \-\-env myecho myecho ::: work
\&  env_parallel \-\-env myecho \-S server myecho ::: work
.Ve
.IP "functions" 8
.IX Item "functions"
Not supported by \fBcsh\fR.
.IP "variables" 8
.IX Item "variables"
.Vb 5
\&  set myvar=variables
\&  env_parallel echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-S server echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-\-env myvar echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-\-env myvar \-S server echo \*(Aq$myvar\*(Aq ::: work
.Ve
.IP "arrays with no special chars" 8
.IX Item "arrays with no special chars"
.Vb 5
\&  set myarray=(arrays work, too)
\&  env_parallel \-k echo \e$\*(Aq{myarray[{}]}\*(Aq ::: 1 2 3
\&  env_parallel \-k \-S server echo \e$\*(Aq{myarray[{}]}\*(Aq ::: 1 2 3
\&  env_parallel \-k \-\-env myarray echo \e$\*(Aq{myarray[{}]}\*(Aq ::: 1 2 3
\&  env_parallel \-k \-\-env myarray \-S server echo \e$\*(Aq{myarray[{}]}\*(Aq ::: 1 2 3
.Ve
.SS "Dash"
.IX Subsection "Dash"
\&\fB\-\-env\fR is supported to export only the variable, or alias with the
given name. Multiple \fB\-\-env\fRs can be given.
.PP
Installation
.PP
Put this in \f(CW$HOME\fR/.profile:
.PP
.Vb 1
\&  . \`which env_parallel.dash\`
.Ve
.PP
E.g. by doing:
.PP
.Vb 1
\&  echo \*(Aq. \`which env_parallel.dash\`\*(Aq >> $HOME/.profile
.Ve
.IP "aliases" 8
.IX Item "aliases"
.Vb 5
\&  alias myecho=\*(Aqecho aliases\*(Aq
\&  env_parallel myecho ::: work
\&  env_parallel \-S server myecho ::: work
\&  env_parallel \-\-env myecho myecho ::: work
\&  env_parallel \-\-env myecho \-S server myecho ::: work
.Ve
.IP "functions" 8
.IX Item "functions"
.Vb 1
\&  dash cannot list defined functions \- thus is not supported.
.Ve
.IP "variables" 8
.IX Item "variables"
.Vb 5
\&  myvar=variables
\&  env_parallel echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-S server echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-\-env myvar echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-\-env myvar \-S server echo \*(Aq$myvar\*(Aq ::: work
.Ve
.IP "arrays" 8
.IX Item "arrays"
.Vb 1
\&  dash does not support arrays.
.Ve
.SS "fish"
.IX Subsection "fish"
\&\fB\-\-env\fR is supported to export only the variable, alias, function, or
array with the given name. Multiple \fB\-\-env\fRs can be given.
.PP
Installation
.PP
Put this in \f(CW$HOME\fR/.config/fish/config.fish:
.PP
.Vb 1
\&  source (which env_parallel.fish)
.Ve
.PP
E.g. by doing:
.PP
.Vb 1
\&  echo \*(Aqsource (which env_parallel.fish)\*(Aq >> $HOME/.config/fish/config.fish
.Ve
.IP "aliases" 8
.IX Item "aliases"
.Vb 5
\&  alias myecho \*(Aqecho aliases\*(Aq
\&  env_parallel myecho ::: work
\&  env_parallel \-S server myecho ::: work
\&  env_parallel \-\-env myecho myecho ::: work
\&  env_parallel \-\-env myecho \-S server myecho ::: work
.Ve
.IP "functions" 8
.IX Item "functions"
.Vb 7
\&  function myfunc
\&    echo functions $argv
\&  end
\&  env_parallel myfunc ::: work
\&  env_parallel \-S server myfunc ::: work
\&  env_parallel \-\-env myfunc myfunc ::: work
\&  env_parallel \-\-env myfunc \-S server myfunc ::: work
.Ve
.IP "variables" 8
.IX Item "variables"
.Vb 5
\&  set myvar variables
\&  env_parallel echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-S server echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-\-env myvar echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-\-env myvar \-S server echo \*(Aq$myvar\*(Aq ::: work
.Ve
.IP "arrays" 8
.IX Item "arrays"
.Vb 5
\&  set myarray arrays work, too
\&  env_parallel \-k echo \*(Aq$myarray[{}]\*(Aq ::: 1 2 3
\&  env_parallel \-k \-S server echo \*(Aq$myarray[{}]\*(Aq ::: 1 2 3
\&  env_parallel \-k \-\-env myarray echo \*(Aq$myarray[{}]\*(Aq ::: 1 2 3
\&  env_parallel \-k \-\-env myarray \-S server echo \*(Aq$myarray[{}]\*(Aq ::: 1 2 3
.Ve
.SS "ksh"
.IX Subsection "ksh"
\&\fB\-\-env\fR is supported to export only the variable, alias, function, or
array with the given name. Multiple \fB\-\-env\fRs can be given.
.PP
Installation
.PP
Put this in \f(CW$HOME\fR/.kshrc:
.PP
.Vb 1
\&  source \`which env_parallel.ksh\`
.Ve
.PP
E.g. by doing:
.PP
.Vb 1
\&  echo \*(Aqsource \`which env_parallel.ksh\`\*(Aq >> $HOME/.kshrc
.Ve
.IP "aliases" 8
.IX Item "aliases"
.Vb 5
\&  alias myecho=\*(Aqecho aliases\*(Aq
\&  env_parallel myecho ::: work
\&  env_parallel \-S server myecho ::: work
\&  env_parallel \-\-env myecho myecho ::: work
\&  env_parallel \-\-env myecho \-S server myecho ::: work
.Ve
.IP "functions" 8
.IX Item "functions"
.Vb 5
\&  myfunc() { echo functions $*; }
\&  env_parallel myfunc ::: work
\&  env_parallel \-S server myfunc ::: work
\&  env_parallel \-\-env myfunc myfunc ::: work
\&  env_parallel \-\-env myfunc \-S server myfunc ::: work
.Ve
.IP "variables" 8
.IX Item "variables"
.Vb 5
\&  myvar=variables
\&  env_parallel echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-S server echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-\-env myvar echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-\-env myvar \-S server echo \*(Aq$myvar\*(Aq ::: work
.Ve
.IP "arrays" 8
.IX Item "arrays"
.Vb 5
\&  myarray=(arrays work, too)
\&  env_parallel \-k echo \*(Aq${myarray[{}]}\*(Aq ::: 0 1 2
\&  env_parallel \-k \-S server echo \*(Aq${myarray[{}]}\*(Aq ::: 0 1 2
\&  env_parallel \-k \-\-env myarray echo \*(Aq${myarray[{}]}\*(Aq ::: 0 1 2
\&  env_parallel \-k \-\-env myarray \-S server echo \*(Aq${myarray[{}]}\*(Aq ::: 0 1 2
.Ve
.SS "pdksh"
.IX Subsection "pdksh"
\&\fB\-\-env\fR is supported to export only the variable, alias, function, or
array with the given name. Multiple \fB\-\-env\fRs can be given.
.PP
Installation
.PP
Put this in \f(CW$HOME\fR/.profile:
.PP
.Vb 1
\&  source \`which env_parallel.pdksh\`
.Ve
.PP
E.g. by doing:
.PP
.Vb 1
\&  echo \*(Aqsource \`which env_parallel.pdksh\`\*(Aq >> $HOME/.profile
.Ve
.IP "aliases" 8
.IX Item "aliases"
.Vb 5
\&  alias myecho="echo aliases";
\&  env_parallel myecho ::: work;
\&  env_parallel \-S server myecho ::: work;
\&  env_parallel \-\-env myecho myecho ::: work;
\&  env_parallel \-\-env myecho \-S server myecho ::: work
.Ve
.IP "functions" 8
.IX Item "functions"
.Vb 5
\&  myfunc() { echo functions $*; };
\&  env_parallel myfunc ::: work;
\&  env_parallel \-S server myfunc ::: work;
\&  env_parallel \-\-env myfunc myfunc ::: work;
\&  env_parallel \-\-env myfunc \-S server myfunc ::: work
.Ve
.IP "variables" 8
.IX Item "variables"
.Vb 5
\&  myvar=variables;
\&  env_parallel echo "\e$myvar" ::: work;
\&  env_parallel \-S server echo "\e$myvar" ::: work;
\&  env_parallel \-\-env myvar echo "\e$myvar" ::: work;
\&  env_parallel \-\-env myvar \-S server echo "\e$myvar" ::: work
.Ve
.IP "arrays" 8
.IX Item "arrays"
.Vb 5
\&  myarray=(arrays work, too);
\&  env_parallel \-k echo "\e${myarray[{}]}" ::: 0 1 2;
\&  env_parallel \-k \-S server echo "\e${myarray[{}]}" ::: 0 1 2;
\&  env_parallel \-k \-\-env myarray echo "\e${myarray[{}]}" ::: 0 1 2;
\&  env_parallel \-k \-\-env myarray \-S server echo "\e${myarray[{}]}" ::: 0 1 2
.Ve
.SS "sh"
.IX Subsection "sh"
\&\fB\-\-env\fR is supported to export only the variable, or alias with the
given name. Multiple \fB\-\-env\fRs can be given.
.PP
Installation
.PP
Put this in \f(CW$HOME\fR/.profile:
.PP
.Vb 1
\&  . \`which env_parallel.sh\`
.Ve
.PP
E.g. by doing:
.PP
.Vb 1
\&  echo \*(Aq. \`which env_parallel.sh\`\*(Aq >> $HOME/.profile
.Ve
.IP "aliases" 8
.IX Item "aliases"
.Vb 1
\&  sh does not support aliases.
.Ve
.IP "functions" 8
.IX Item "functions"
.Vb 5
\&  myfunc() { echo functions $*; }
\&  env_parallel myfunc ::: work
\&  env_parallel \-S server myfunc ::: work
\&  env_parallel \-\-env myfunc myfunc ::: work
\&  env_parallel \-\-env myfunc \-S server myfunc ::: work
.Ve
.IP "variables" 8
.IX Item "variables"
.Vb 5
\&  myvar=variables
\&  env_parallel echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-S server echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-\-env myvar echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-\-env myvar \-S server echo \*(Aq$myvar\*(Aq ::: work
.Ve
.IP "arrays" 8
.IX Item "arrays"
.Vb 1
\&  sh does not support arrays.
.Ve
.SS "tcsh"
.IX Subsection "tcsh"
\&\fB\-\-env\fR is supported to export only the variable, alias, or
array with the given name. Multiple \fB\-\-env\fRs can be given.
.PP
\&\fBenv_parallel\fR for \fBtcsh\fR breaks \fB\f(CB$PARALLEL\fB\fR, so do not use
\&\fB\f(CB$PARALLEL\fB\fR.
.PP
Installation
.PP
Put this in \f(CW$HOME\fR/.tcshrc:
.PP
.Vb 1
\&  source \`which env_parallel.tcsh\`
.Ve
.PP
E.g. by doing:
.PP
.Vb 1
\&  echo \*(Aqsource \`which env_parallel.tcsh\`\*(Aq >> $HOME/.tcshrc
.Ve
.IP "aliases" 8
.IX Item "aliases"
.Vb 5
\&  alias myecho \*(Aqecho aliases\*(Aq
\&  env_parallel myecho ::: work
\&  env_parallel \-S server myecho ::: work
\&  env_parallel \-\-env myecho myecho ::: work
\&  env_parallel \-\-env myecho \-S server myecho ::: work
.Ve
.IP "functions" 8
.IX Item "functions"
Not supported by \fBtcsh\fR.
.IP "variables" 8
.IX Item "variables"
.Vb 5
\&  set myvar=variables
\&  env_parallel echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-S server echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-\-env myvar echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-\-env myvar \-S server echo \*(Aq$myvar\*(Aq ::: work
.Ve
.IP "arrays with no special chars" 8
.IX Item "arrays with no special chars"
.Vb 5
\&  set myarray=(arrays work, too)
\&  env_parallel \-k echo \e$\*(Aq{myarray[{}]}\*(Aq ::: 1 2 3
\&  env_parallel \-k \-S server echo \e$\*(Aq{myarray[{}]}\*(Aq ::: 1 2 3
\&  env_parallel \-k \-\-env myarray echo \e$\*(Aq{myarray[{}]}\*(Aq ::: 1 2 3
\&  env_parallel \-k \-\-env myarray \-S server echo \e$\*(Aq{myarray[{}]}\*(Aq ::: 1 2 3
.Ve
.SS "Zsh"
.IX Subsection "Zsh"
\&\fB\-\-env\fR is supported to export only the variable, alias, function, or
array with the given name. Multiple \fB\-\-env\fRs can be given.
.PP
Installation
.PP
Put this in \f(CW$HOME\fR/.zshrc:
.PP
.Vb 1
\&  . \`which env_parallel.zsh\`
.Ve
.PP
E.g. by doing:
.PP
.Vb 1
\&  echo \*(Aq. \`which env_parallel.zsh\`\*(Aq >> $HOME/.zshenv
.Ve
.IP "aliases" 8
.IX Item "aliases"
.Vb 5
\&  alias myecho=\*(Aqecho aliases\*(Aq
\&  env_parallel myecho ::: work
\&  env_parallel \-S server myecho ::: work
\&  env_parallel \-\-env myecho myecho ::: work
\&  env_parallel \-\-env myecho \-S server myecho ::: work
.Ve
.IP "functions" 8
.IX Item "functions"
.Vb 5
\&  myfunc() { echo functions $*; }
\&  env_parallel myfunc ::: work
\&  env_parallel \-S server myfunc ::: work
\&  env_parallel \-\-env myfunc myfunc ::: work
\&  env_parallel \-\-env myfunc \-S server myfunc ::: work
.Ve
.IP "variables" 8
.IX Item "variables"
.Vb 5
\&  myvar=variables
\&  env_parallel echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-S server echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-\-env myvar echo \*(Aq$myvar\*(Aq ::: work
\&  env_parallel \-\-env myvar \-S server echo \*(Aq$myvar\*(Aq ::: work
.Ve
.IP "arrays" 8
.IX Item "arrays"
.Vb 5
\&  myarray=(arrays work, too)
\&  env_parallel \-k echo \*(Aq${myarray[{}]}\*(Aq ::: 1 2 3
\&  env_parallel \-k \-S server echo \*(Aq${myarray[{}]}\*(Aq ::: 1 2 3
\&  env_parallel \-k \-\-env myarray echo \*(Aq${myarray[{}]}\*(Aq ::: 1 2 3
\&  env_parallel \-k \-\-env myarray \-S server echo \*(Aq${myarray[{}]}\*(Aq ::: 1 2 3
.Ve
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
Same as \s-1GNU \s0\fBparallel\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
When using \s-1GNU \s0\fBparallel\fR for a publication please cite:
.PP
O. Tange (2011): \s-1GNU\s0 Parallel \- The Command-Line Power Tool, ;login:
The \s-1USENIX\s0 Magazine, February 2011:42\-47.
.PP
This helps funding further development; and it won't cost you a cent.
If you pay 10000 \s-1EUR\s0 you should feel free to use \s-1GNU\s0 Parallel without citing.
.PP
Copyright (C) 2007\-10\-18 Ole Tange, http://ole.tange.dk
.PP
Copyright (C) 2008,2009,2010 Ole Tange, http://ole.tange.dk
.PP
Copyright (C) 2010,2011,2012,2013,2014,2015,2016,2017 Ole Tange,
http://ole.tange.dk and Free Software Foundation, Inc.
.PP
Parts of the manual concerning \fBxargs\fR compatibility is inspired by
the manual of \fBxargs\fR from \s-1GNU\s0 findutils 4.4.2.
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2016
Ole Tange and Free Software Foundation, Inc.
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 3 of the License, or
at your option any later version.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE. \s0 See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
.SS "Documentation license I"
.IX Subsection "Documentation license I"
Permission is granted to copy, distribute and/or modify this documentation
under the terms of the \s-1GNU\s0 Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the file fdl.txt.
.SS "Documentation license \s-1II\s0"
.IX Subsection "Documentation license II"
You are free:
.IP "\fBto Share\fR" 9
.IX Item "to Share"
to copy, distribute and transmit the work
.IP "\fBto Remix\fR" 9
.IX Item "to Remix"
to adapt the work
.PP
Under the following conditions:
.IP "\fBAttribution\fR" 9
.IX Item "Attribution"
You must attribute the work in the manner specified by the author or
licensor (but not in any way that suggests that they endorse you or
your use of the work).
.IP "\fBShare Alike\fR" 9
.IX Item "Share Alike"
If you alter, transform, or build upon this work, you may distribute
the resulting work only under the same, similar or a compatible
license.
.PP
With the understanding that:
.IP "\fBWaiver\fR" 9
.IX Item "Waiver"
Any of the above conditions can be waived if you get permission from
the copyright holder.
.IP "\fBPublic Domain\fR" 9
.IX Item "Public Domain"
Where the work or any of its elements is in the public domain under
applicable law, that status is in no way affected by the license.
.IP "\fBOther Rights\fR" 9
.IX Item "Other Rights"
In no way are any of the following rights affected by the license:
.RS 9
.IP "\(bu" 2
Your fair dealing or fair use rights, or other applicable
copyright exceptions and limitations;
.IP "\(bu" 2
The author's moral rights;
.IP "\(bu" 2
Rights other persons may have either in the work itself or in
how the work is used, such as publicity or privacy rights.
.RE
.RS 9
.RE
.IP "\fBNotice\fR" 9
.IX Item "Notice"
For any reuse or distribution, you must make clear to others the
license terms of this work.
.PP
A copy of the full license is included in the file as cc\-by\-sa.txt.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
\&\fBenv_parallel\fR uses \s-1GNU \s0\fBparallel\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBparallel\fR(1),
.PP
\&\fBbash\fR(1), \fBcsh\fR(1), \fBfish\fR(1), \fBksh\fR(1), \fBpdksh\fR(1) \fBtcsh\fR(1),
\&\fBzsh\fR(1).
