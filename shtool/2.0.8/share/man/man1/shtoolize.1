.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SHTOOLIZE.TMP 1"
.TH SHTOOLIZE.TMP 1 "shtool 2.0.8" "18-Jul-2008" "GNU Portable Shell Tool"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
shtoolize \- Build individual GNU shtool scripts
.SH "VERSION"
.IX Header "VERSION"
\&\s-1GNU\s0 shtool \s-12.0.8 (18-Jul-2008)\s0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBshtoolize\fR
[\fB\-h\fR]
[\fB\-v\fR]
[\fB\-q\fR]
[\fB\-o\fR \fIscript\fR]
\&\fImodule\fR
[ \fImodule\fR ... ]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBshtoolize\fR program builds individual \s-1GNU \s0\fBshtool\fR scripts (written to
the default output file \f(CW\*(C`shtool\*(C'\fR or to the specified \fIscript\fR) out of one or
more \fBshtool\fR ingredient \fImodule\fRs.  Available \fImodule\fRs are:
.PP
.Vb 10
\& echo       Print string with optional construct expansion
\& mdate      Pretty\-print modification time of a file or dir
\& table      Pretty print a field\-separated list as a table
\& prop       Display progress with a running propeller
\& move       Move files with simultan substitution
\& install    Install a program, script or datafile
\& mkdir      Make one or more directories
\& mkln       Make link with calculation of relative paths
\& mkshadow   Make a shadow tree
\& fixperm    Fix file permissions inside a source tree
\& rotate     Rotate a logfile
\& tarball    Roll distribution tarballs
\& subst      Apply sed(1) substitution operations
\& platform   Platform identification utility
\& arx        Extended archive command
\& slo        Separate linker options by library class
\& scpp       Sharing C Pre\-Processor
\& version    Generate and maintain a version information file
\& path       Deal with program paths
.Ve
.PP
Additionally there is a pseudo-module ``\f(CW\*(C`all\*(C'\fR'' which can be used as a
short-hand for ``\f(CW\*(C`echo mdate table prop move install mkdir mkln mkshadow
fixperm platform arx slo scpp version path\*(C'\fR'', i.e. to build a \fBshtool\fR script
with all modules in the standard order. An installed \fBshtool\fR is usually
built this way via ``\f(CW\*(C`shtoolize \-o shtool all\*(C'\fR''.
.PP
Use the \fBshtoolize\fR program to build individual \fBshtool\fR scripts in case you
want a smaller sized script and you don't need all of the available \fBshtool\fR
functionality.  For instance for the classical \fBAutoconf\fR based free software
package a \f(CW\*(C`shtool\*(C'\fR script build via ``\f(CW\*(C`shtoolize \-o shtool install mkdir\*(C'\fR''
might be sufficient.
.SH "OPTIONS"
.IX Header "OPTIONS"
The following command line options exist:
.IP "\fB\-h\fR" 4
.IX Item "-h"
Displays a short help page describing the usage of \fBshtoolize\fR.
.IP "\fB\-v\fR" 4
.IX Item "-v"
Displays the version number of \fBshtoolize\fR/\fBshtool\fR.
.IP "\fB\-q\fR" 4
.IX Item "-q"
Displays no processing information.
.IP "\fB\-o\fR \fIscript\fR" 4
.IX Item "-o script"
Writes the output to file \fIscript\fR instead to file ``\f(CW\*(C`shtool\*(C'\fR''.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
The typical free software package which is based on \s-1GNU \s0\fBlibtool\fR and \s-1GNU
\&\s0\fBshtool\fR one uses a \f(CW\*(C`Makefile\*(C'\fR entry like the following:
.PP
.Vb 4
\& #   Makefile entry for upgrading GNU tools
\& upgrade\-tools:
\&     libtoolize \-f \-c
\&     shtoolize \-q all
.Ve
.PP
This upgrades the three files \f(CW\*(C`ltmain.sh\*(C'\fR, \f(CW\*(C`ltconfig\*(C'\fR and \f(CW\*(C`shtool\*(C'\fR in the
current source tree to the latest versions.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIshtool\fR\|(1).
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\& Ralf S. Engelschall
\& rse@engelschall.com
\& www.engelschall.com
.Ve
