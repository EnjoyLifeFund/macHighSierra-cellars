.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "native::Core 3"
.TH native::Core 3 "2013-05-28" "perl v5.26.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SVN::Core \- Core module of the subversion perl bindings
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use SVN::Core; # does apr_initialize and cleanup for you
\&
\&    # create a root pool and set it as default pool for later use
\&    my $pool = SVN::Pool\->new_default;
\&
\&    sub something {
\&        # create a subpool of the current default pool
\&        my $pool = SVN::Pool\->new_default_sub;
\&        # some svn operations...
\&
\&        # $pool gets destroyed and the previous default pool
\&        # is restored when $pool\*(Aqs lexical scope ends
\&    }
\&
\&    # svn_stream_t as native perl io handle
\&    my $stream = $txn\->root\->apply_text(\*(Aqtrunk/filea\*(Aq, undef);
\&    print $stream $text;
\&    close $stream;
\&
\&    # native perl io handle as svn_stream_t
\&    SVN::Repos::dump_fs($repos, \e*STDOUT, \e*STDERR,
\&                        0, $repos\->fs\->youngest_rev, 0);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SVN::Core implements higher level functions of fundamental subversion
functions.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "SVN::Core::auth_open([auth provider array]);" 4
.IX Item "SVN::Core::auth_open([auth provider array]);"
Takes a reference to an array of authentication providers
and returns an auth_baton.  If you use prompt providers
you can not use this function, but need to use the
auth_open_helper.
.IP "SVN::Core::auth_open_helper([auth provider array]);" 4
.IX Item "SVN::Core::auth_open_helper([auth provider array]);"
Prompt providers return two values instead of one.  The
2nd parameter is a reference to whatever was passed into
them as the callback.  auth_open_helper splits up these
arguments, passing the provider objects into auth_open
which gives it an auth_baton and putting the other
ones in an array.  The first return value of this
function is the auth_baton, the second is a reference
to an array containing the references to the callbacks.
.Sp
These callback arrays should be stored in the object
the auth_baton is attached to.
.SH "OTHER OBJECTS"
.IX Header "OTHER OBJECTS"
.SS "svn_stream_t \- SVN::Stream"
.IX Subsection "svn_stream_t - SVN::Stream"
You can use native perl io handles (including io globs) as
svn_stream_t in subversion functions. Returned svn_stream_t are also
translated into perl io handles, so you could access them with regular
print, read, etc.
.PP
Note that some functions take a stream to read from or write to, but do not
close the stream while still holding the reference to the io handle.
In this case the handle won't be destroyed properly.
You should always set up the correct default pool before calling
such functions.
.SS "svn_pool_t \- SVN::Pool"
.IX Subsection "svn_pool_t - SVN::Pool"
The perl bindings significantly simplify the usage of pools, while
still being manually adjustable.
.PP
For functions requiring a pool as the last argument (which are, almost all
of the subversion functions), the pool argument is optional. The default pool
is used if it is omitted. When \f(CW\*(C`SVN::Core\*(C'\fR is loaded, it creates a
new default pool, which is also available from \f(CW\*(C`SVN::Core\->gpool\*(C'\fR.
.PP
For callback functions providing a pool to your subroutine, you could
also use \f(CW$pool\fR\->default to make it the default pool in the scope.
.PP
\fIMethods\fR
.IX Subsection "Methods"
.IP "new([$parent])" 4
.IX Item "new([$parent])"
Create a new pool. The pool is a root pool if \f(CW$parent\fR is not supplied.
.IP "new_default([$parent])" 4
.IX Item "new_default([$parent])"
Create a new pool. The pool is a root pool if \f(CW$parent\fR is not supplied.
Set the new pool as default pool.
.IP "new_default_sub" 4
.IX Item "new_default_sub"
Create a new subpool of the current default pool, and set the
resulting pool as new default pool.
.IP "clear" 4
.IX Item "clear"
Clear the pool.
.IP "\s-1DESTROY\s0" 4
.IX Item "DESTROY"
Destroy the pool. If the pool was the default pool, restore the
previous default pool. This is normally called
automatically when the SVN::Pool object is no longer used and
destroyed by the perl garbage collector.
.SS "svn_error_t \- SVN::Error"
.IX Subsection "svn_error_t - SVN::Error"
By default the perl bindings handle exceptions for you.  The default handler
automatically croaks with an appropriate error message.  This is likely
sufficient for simple scripts, but more complex usage may demand handling of
errors.
.PP
You can override the default exception handler by changing the
\&\f(CW$SVN::Error::handler\fR variable.  This variable holds a reference to a perl sub
that should be called whenever an error is returned by a svn function.  This
sub will be passed a svn_error_t object.   Its return value is ignored.
.PP
If you set the \f(CW$SVN::Error::handler\fR to undef then each call will return an
svn_error_t object as its first return in the case of an error, followed by the
normal return values.  If there is no error then a svn_error_t will not be
returned and only the normal return values will be returned.  When using this
mode you should be careful only to call functions in array context.  For
example: my ($ci) = \f(CW$ctx\fR\->mkdir('http://svn/foo');  In this case \f(CW$ci\fR will
be an svn_error_t object if an error occurs and a svn_client_commit_info object
otherwise.  If you leave the parenthesis off around \f(CW$ci\fR (scalar context) it
will be the commit_info object, which in the case of an error will be undef.
.PP
If you plan on using explicit exception handling, understanding the exception
handling system the C \s-1API\s0 uses is helpful.  You can find information on it in
the \s-1HACKING\s0 file and the \s-1API\s0 documentation.  Looking at the implementation of
SVN::Error::croak_on_error and SVN::Error::expanded_message may be helpful as
well.
.ie n .IP "$svn_error_t\->\fIapr_err()\fR" 4
.el .IP "\f(CW$svn_error_t\fR\->\fIapr_err()\fR" 4
.IX Item "$svn_error_t->apr_err()"
\&\s-1APR\s0 error value, possibly \s-1SVN_\s0 custom error.
.ie n .IP "$svn_error_t\->\fImessage()\fR" 4
.el .IP "\f(CW$svn_error_t\fR\->\fImessage()\fR" 4
.IX Item "$svn_error_t->message()"
Details from producer of error.
.ie n .IP "$svn_error_t\->\fIchild()\fR" 4
.el .IP "\f(CW$svn_error_t\fR\->\fIchild()\fR" 4
.IX Item "$svn_error_t->child()"
svn_error_t object of the error that's wrapped.
.ie n .IP "$svn_error_t\->\fIpool()\fR" 4
.el .IP "\f(CW$svn_error_t\fR\->\fIpool()\fR" 4
.IX Item "$svn_error_t->pool()"
The pool holding this error and any child errors it wraps.
.ie n .IP "$svn_error_t\->\fIfile()\fR" 4
.el .IP "\f(CW$svn_error_t\fR\->\fIfile()\fR" 4
.IX Item "$svn_error_t->file()"
Source file where the error originated.
.ie n .IP "$svn_error_t\->\fIline()\fR" 4
.el .IP "\f(CW$svn_error_t\fR\->\fIline()\fR" 4
.IX Item "$svn_error_t->line()"
Source line where the error originated.
.IP "SVN::Error::strerror($apr_status_t)" 4
.IX Item "SVN::Error::strerror($apr_status_t)"
Returns the english description of the status code.
.ie n .IP "$svn_error_t\->\fIstrerror()\fR" 4
.el .IP "\f(CW$svn_error_t\fR\->\fIstrerror()\fR" 4
.IX Item "$svn_error_t->strerror()"
Returns the english description of the apr_err status code set on the
\&\f(CW$svn_error_t\fR.  This is short for:
SVN::Error::strerror($svn_error_t\->\fIapr_err()\fR);
.ie n .IP "SVN::Error::create($apr_err, $child, $message);" 4
.el .IP "SVN::Error::create($apr_err, \f(CW$child\fR, \f(CW$message\fR);" 4
.IX Item "SVN::Error::create($apr_err, $child, $message);"
Returns a new svn_error_t object with the error status specified in \f(CW$apr_err\fR,
the child as \f(CW$child\fR, and error message of \f(CW$message\fR.
.ie n .IP "SVN::Error::quick_wrap($child, $new_msg); or $child\->quick_wrap($new_msg);" 4
.el .IP "SVN::Error::quick_wrap($child, \f(CW$new_msg\fR); or \f(CW$child\fR\->quick_wrap($new_msg);" 4
.IX Item "SVN::Error::quick_wrap($child, $new_msg); or $child->quick_wrap($new_msg);"
A quick n' easy way to create a wrappered exception with your own message
before throwing it up the stack.
.Sp
\&\f(CW$child\fR is the svn_error_t object you want to wrap and \f(CW$new_msg\fR is the new error
string you want to set.
.ie n .IP "SVN::Error::compose($chain, $new_error); or $chain\->compose($new_error);" 4
.el .IP "SVN::Error::compose($chain, \f(CW$new_error\fR); or \f(CW$chain\fR\->compose($new_error);" 4
.IX Item "SVN::Error::compose($chain, $new_error); or $chain->compose($new_error);"
Add new_err to the end of \f(CW$chain\fR's chain of errors.
.Sp
The \f(CW$new_err\fR chain will be copied into \f(CW$chain\fR's pool and destroyed, so \f(CW$new_err\fR
itself becomes invalid after this function.
.ie n .IP "SVN::Error::clear($svn_error_t); or $svn_error_t\->\fIclear()\fR;" 4
.el .IP "SVN::Error::clear($svn_error_t); or \f(CW$svn_error_t\fR\->\fIclear()\fR;" 4
.IX Item "SVN::Error::clear($svn_error_t); or $svn_error_t->clear();"
Free the memory used by \f(CW$svn_error_t\fR, as well as all ancestors and descendants
of \f(CW$svn_error_t\fR.
.Sp
You must call this on every svn_error_t object you get or you will leak memory.
.ie n .IP "SVN::Error::expanded_message($svn_error_t) or $svn_error_t\->\fIexpanded_message()\fR" 4
.el .IP "SVN::Error::expanded_message($svn_error_t) or \f(CW$svn_error_t\fR\->\fIexpanded_message()\fR" 4
.IX Item "SVN::Error::expanded_message($svn_error_t) or $svn_error_t->expanded_message()"
Returns the error message by tracing through the svn_error_t object and its
children and concatenating the error messages.  This is how the internal
exception handlers get their error messages.
.IP "SVN::Error::is_error($value)" 4
.IX Item "SVN::Error::is_error($value)"
Returns true if value is of type svn_error.  Returns false if value is
anything else or undefined.  This is useful for seeing if a call has returned
an error.
.IP "SVN::Error::croak_on_error" 4
.IX Item "SVN::Error::croak_on_error"
Default error handler.  It takes an svn_error_t and extracts the error messages
from it and croaks with those messages.
.Sp
It can be used in two ways.  The first is detailed above as setting it as the
automatic exception handler via setting \f(CW$SVN::Error::handler\fR.
.Sp
The second is if you have \f(CW$SVN::Error::handler\fR set to undef as a wrapper for
calls you want to croak on when there is an error, but you don't want to write
an explicit error handler. For example:
.Sp
my \f(CW$result_rev\fR=SVN::Error::croak_on_error($ctx\->checkout($url,$path,'\s-1HEAD\s0',1));
.Sp
If there is no error then croak_on_error will return the arguments passed to it
unchanged.
.IP "SVN::Error::confess_on_error" 4
.IX Item "SVN::Error::confess_on_error"
The same as croak_on_error except it will give a more detailed stack backtrace,
including internal calls within the implementation of the perl bindings.
This is useful when you are doing development work on the bindings themselves.
.IP "SVN::Error::ignore_error" 4
.IX Item "SVN::Error::ignore_error"
This is useful for wrapping around calls which you wish to ignore any potential
error.  It checks to see if the first parameter is an error and if it is it
clears it.  It then returns all the other parameters.
.SS "svn_log_changed_path_t"
.IX Subsection "svn_log_changed_path_t"
.ie n .IP "$lcp\->\fIaction()\fR" 4
.el .IP "\f(CW$lcp\fR\->\fIaction()\fR" 4
.IX Item "$lcp->action()"
\&'A'dd, 'D'elete, 'R'eplace, 'M'odify
.ie n .IP "$lcp\->\fIcopyfrom_path()\fR" 4
.el .IP "\f(CW$lcp\fR\->\fIcopyfrom_path()\fR" 4
.IX Item "$lcp->copyfrom_path()"
Source path of copy, or \f(CW\*(C`undef\*(C'\fR if there isn't any previous revision
history.
.ie n .IP "$lcp\->\fIcopyfrom_rev()\fR" 4
.el .IP "\f(CW$lcp\fR\->\fIcopyfrom_rev()\fR" 4
.IX Item "$lcp->copyfrom_rev()"
Source revision of copy, or \f(CW$SVN::Core::INVALID_REVNUM\fR if there is
no previous history.
.SS "svn_log_changed_path2_t"
.IX Subsection "svn_log_changed_path2_t"
An object to represent a path that changed for a log entry.
.ie n .IP "$lcp\->\fIaction()\fR" 4
.el .IP "\f(CW$lcp\fR\->\fIaction()\fR" 4
.IX Item "$lcp->action()"
\&'A'dd, 'D'elete, 'R'eplace, 'M'odify
.ie n .IP "$lcp\->\fIcopyfrom_path()\fR" 4
.el .IP "\f(CW$lcp\fR\->\fIcopyfrom_path()\fR" 4
.IX Item "$lcp->copyfrom_path()"
Source path of copy, or \f(CW\*(C`undef\*(C'\fR if there isn't any previous revision
history.
.ie n .IP "$lcp\->\fIcopyfrom_rev()\fR" 4
.el .IP "\f(CW$lcp\fR\->\fIcopyfrom_rev()\fR" 4
.IX Item "$lcp->copyfrom_rev()"
Source revision of copy, or \f(CW$SVN::Core::INVALID_REVNUM\fR if there is
no previous history.
.ie n .IP "$lcp\->\fInode_kind()\fR" 4
.el .IP "\f(CW$lcp\fR\->\fInode_kind()\fR" 4
.IX Item "$lcp->node_kind()"
The type of the node, a \f(CW$SVN::Node\fR enum; may be \f(CW$SVN::Node::unknown\fR.
.ie n .IP "$lcp\->\fItext_modified()\fR" 4
.el .IP "\f(CW$lcp\fR\->\fItext_modified()\fR" 4
.IX Item "$lcp->text_modified()"
Is the text modified, a \f(CW\*(C`SVN::Tristate\*(C'\fR enum, 
may be \f(CW$SVN::Tristate::unknown\fR.
.ie n .IP "$lcp\->\fIprops_modified()\fR" 4
.el .IP "\f(CW$lcp\fR\->\fIprops_modified()\fR" 4
.IX Item "$lcp->props_modified()"
Are properties modified, a \f(CW\*(C`SVN::Tristate\*(C'\fR enum,
may be \f(CW$SVN::Tristate::unknown\fR.
.SS "svn_node_kind_t \- SVN::Node"
.IX Subsection "svn_node_kind_t - SVN::Node"
An enum of the following constants:
.PP
\&\f(CW$SVN::Node::none\fR, \f(CW$SVN::Node::file\fR,
\&\f(CW$SVN::Node::dir\fR, \f(CW$SVN::Node::unknown\fR.
.SS "svn_tristate_t \- SVN::Tristate"
.IX Subsection "svn_tristate_t - SVN::Tristate"
An enum of the following constants:
.PP
\&\f(CW$SVN::Tristate::true\fR, \f(CW$SVN::Tristate::false\fR, \f(CW$SVN::Tristate::unknown\fR
.PP
Note that these true/false values have nothing to do with Perl's concept 
of truth. In fact, each constant would evaluate to true in a boolean context.
.SS "svn_depth_t \- SVN::Depth"
.IX Subsection "svn_depth_t - SVN::Depth"
An enum of the following constants:
.ie n .IP "$SVN::Depth::unknown" 4
.el .IP "\f(CW$SVN::Depth::unknown\fR" 4
.IX Item "$SVN::Depth::unknown"
Depth undetermined or ignored.  In some contexts, this means the client should
choose an appropriate default depth.  The server will generally treat it as
\&\f(CW$SVN::Depth::infinity\fR.
.ie n .IP "$SVN::Depth::exclude" 4
.el .IP "\f(CW$SVN::Depth::exclude\fR" 4
.IX Item "$SVN::Depth::exclude"
Exclude (i.e., don't descend into) directory D.
.Sp
Note: In Subversion 1.5, \f(CW$SVN::Depth::exclude\fR is \fBnot\fR supported anyhwere in
the client-side (Wc/Client/etc) code; it is only supported as an argument to
set_path functions in the Ra and Repos reporters.  (This will enable future
versions of Subversion to run updates, etc, against 1.5 servers with proper
\&\f(CW$SVN::Depth::exclude\fR behavior, once we get a chance to implement client side
support for \f(CW$SVN::Depth::exclude\fR).
.ie n .IP "$SVN::Depth::empty" 4
.el .IP "\f(CW$SVN::Depth::empty\fR" 4
.IX Item "$SVN::Depth::empty"
Just the named directory D, no entries.
.Sp
Updates will not pull in any files or subdirectories not already present.
.ie n .IP "$SVN::Depth::files" 4
.el .IP "\f(CW$SVN::Depth::files\fR" 4
.IX Item "$SVN::Depth::files"
D + its files children, but not subdirs.
.Sp
Updates will pull in any files not already present, but not subdirectories.
.ie n .IP "$SVN::Depth::immediates" 4
.el .IP "\f(CW$SVN::Depth::immediates\fR" 4
.IX Item "$SVN::Depth::immediates"
D + immediate children (D and its entries).
.Sp
Updates will pull in any files or subdirectories not already present; those
subdirectories' this_dir entries will have depth-empty.
.ie n .IP "$SVN::Depth::infinity" 4
.el .IP "\f(CW$SVN::Depth::infinity\fR" 4
.IX Item "$SVN::Depth::infinity"
D + all descendants (full recursion from D).
.Sp
Updates will pull in any files or subdirectories not already present; those
subdirectories' this_dir entries will have depth-infinity.  Equivalent to the
pre 1.5 default update behavior.
.SS "svn_opt_revision_t"
.IX Subsection "svn_opt_revision_t"
A revision, specified in one of \f(CW\*(C`SVN::Core::opt_revision_*\*(C'\fR ways.
.ie n .IP "$rev\->\fIkind()\fR" 4
.el .IP "\f(CW$rev\fR\->\fIkind()\fR" 4
.IX Item "$rev->kind()"
An enum denoting how the revision \f(CW$rev\fR was specified.  One of 
\&\f(CW$SVN::Core::opt_revision_unspecified\fR,
\&\f(CW$SVN::Core::opt_revision_number\fR,
\&\f(CW$SVN::Core::opt_revision_date\fR,
\&\f(CW$SVN::Core::opt_revision_committed\fR,
\&\f(CW$SVN::Core::opt_revision_previous\fR,
\&\f(CW$SVN::Core::opt_revision_base\fR,
\&\f(CW$SVN::Core::opt_revision_working\fR
or \f(CW$SVN::Core::opt_revision_head\fR.
.ie n .IP "$rev\->\fIvalue()\fR" 4
.el .IP "\f(CW$rev\fR\->\fIvalue()\fR" 4
.IX Item "$rev->value()"
Extra data about the revision. Only relevant if \f(CW\*(C`$rev\->kind\*(C'\fR is
\&\f(CW$SVN::Core::opt_revision_number\fR (where it contains the revision number)
or \f(CW$SVN::Core::opt_revision_date\fR (where it contains a date).
.SS "svn_opt_revision_range_t"
.IX Subsection "svn_opt_revision_range_t"
An object representing a range of revisions.
.ie n .IP "$range\->\fIstart()\fR" 4
.el .IP "\f(CW$range\fR\->\fIstart()\fR" 4
.IX Item "$range->start()"
The first revision in the range, a \f(CW\*(C`_p_svn_opt_revision_t\*(C'\fR object.
.ie n .IP "$range\->\fIend()\fR" 4
.el .IP "\f(CW$range\fR\->\fIend()\fR" 4
.IX Item "$range->end()"
The last revision in the range, a \f(CW\*(C`_p_svn_opt_revision_t\*(C'\fR object.
.SS "svn_config_t"
.IX Subsection "svn_config_t"
Opaque object describing a set of configuration options.
.SS "svn_dirent_t"
.IX Subsection "svn_dirent_t"
.ie n .IP "$dirent\->\fIkind()\fR" 4
.el .IP "\f(CW$dirent\fR\->\fIkind()\fR" 4
.IX Item "$dirent->kind()"
Node kind.  A number which matches one of these constants:
\&\f(CW$SVN::Node::none\fR, \f(CW$SVN::Node::file\fR,
\&\f(CW$SVN::Node::dir\fR, \f(CW$SVN::Node::unknown\fR.
.ie n .IP "$dirent\->\fIsize()\fR" 4
.el .IP "\f(CW$dirent\fR\->\fIsize()\fR" 4
.IX Item "$dirent->size()"
Length of file text, or 0 for directories.
.ie n .IP "$dirent\->\fIhas_props()\fR" 4
.el .IP "\f(CW$dirent\fR\->\fIhas_props()\fR" 4
.IX Item "$dirent->has_props()"
Does the node have properties?
.ie n .IP "$dirent\->\fIcreated_rev()\fR" 4
.el .IP "\f(CW$dirent\fR\->\fIcreated_rev()\fR" 4
.IX Item "$dirent->created_rev()"
Last revision in which this node changed.
.ie n .IP "$dirent\->\fItime()\fR" 4
.el .IP "\f(CW$dirent\fR\->\fItime()\fR" 4
.IX Item "$dirent->time()"
Time of created_rev (mod-time).
.ie n .IP "$dirent\->\fIlast_author()\fR" 4
.el .IP "\f(CW$dirent\fR\->\fIlast_author()\fR" 4
.IX Item "$dirent->last_author()"
Author of created rev.
.SS "svn_commit_info_t"
.IX Subsection "svn_commit_info_t"
.ie n .IP "$commit\->\fIrevision()\fR" 4
.el .IP "\f(CW$commit\fR\->\fIrevision()\fR" 4
.IX Item "$commit->revision()"
Just committed revision.
.ie n .IP "$commit\->\fIdate()\fR" 4
.el .IP "\f(CW$commit\fR\->\fIdate()\fR" 4
.IX Item "$commit->date()"
Server-side date of the commit.
.ie n .IP "$commit\->\fIauthor()\fR" 4
.el .IP "\f(CW$commit\fR\->\fIauthor()\fR" 4
.IX Item "$commit->author()"
Author of the commit.
.ie n .IP "$commit\->\fIpost_commit_err()\fR" 4
.el .IP "\f(CW$commit\fR\->\fIpost_commit_err()\fR" 4
.IX Item "$commit->post_commit_err()"
Error message from the post-commit hook, or undef.
.ie n .IP "$commit\->\fIrepos_root()\fR" 4
.el .IP "\f(CW$commit\fR\->\fIrepos_root()\fR" 4
.IX Item "$commit->repos_root()"
Repository root, may be \f(CW\*(C`undef\*(C'\fR if unknown.
.SS "svn_log_entry_t"
.IX Subsection "svn_log_entry_t"
.ie n .IP "$entry\->\fIrevision()\fR" 4
.el .IP "\f(CW$entry\fR\->\fIrevision()\fR" 4
.IX Item "$entry->revision()"
The revision of the commit.
.ie n .IP "$entry\->\fIrevprops()\fR" 4
.el .IP "\f(CW$entry\fR\->\fIrevprops()\fR" 4
.IX Item "$entry->revprops()"
A reference to a hash of requested revision properties, 
which may be \f(CW\*(C`undef\*(C'\fR if it would contain no revprops.
.ie n .IP "$entry\->\fIhas_children()\fR" 4
.el .IP "\f(CW$entry\fR\->\fIhas_children()\fR" 4
.IX Item "$entry->has_children()"
Whether or not this message has children.
.ie n .IP "$entry\->\fIchanged_paths2()\fR" 4
.el .IP "\f(CW$entry\fR\->\fIchanged_paths2()\fR" 4
.IX Item "$entry->changed_paths2()"
A reference to hash containing as keys every path committed in 
\&\f(CW\*(C`$entry\->revision()\*(C'\fR; the values are \f(CW\*(C`_p_svn_log_changed_path2_t\*(C'\fR
objects.
.ie n .IP "$entry\->\fInon_inheritable()\fR" 4
.el .IP "\f(CW$entry\fR\->\fInon_inheritable()\fR" 4
.IX Item "$entry->non_inheritable()"
Whether \f(CW\*(C`$entry\->revision()\*(C'\fR should be interpreted as non-inheritable 
in the same sense of \f(CW\*(C`_p_svn_merge_range_t\*(C'\fR.
.ie n .IP "$entry\->\fIsubtractive_merge()\fR" 4
.el .IP "\f(CW$entry\fR\->\fIsubtractive_merge()\fR" 4
.IX Item "$entry->subtractive_merge()"
Whether \f(CW\*(C`$entry\->revision()\*(C'\fR is a merged revision resulting 
from a reverse merge.
.SS "svn_auth_cred_simple_t"
.IX Subsection "svn_auth_cred_simple_t"
.ie n .IP "$simple\->\fIusername()\fR" 4
.el .IP "\f(CW$simple\fR\->\fIusername()\fR" 4
.IX Item "$simple->username()"
Username.
.ie n .IP "$simple\->\fIpassword()\fR" 4
.el .IP "\f(CW$simple\fR\->\fIpassword()\fR" 4
.IX Item "$simple->password()"
Password.
.ie n .IP "$simple\->\fImay_save()\fR" 4
.el .IP "\f(CW$simple\fR\->\fImay_save()\fR" 4
.IX Item "$simple->may_save()"
Indicates if the credentials may be saved (to disk).
.SS "svn_auth_cred_username_t"
.IX Subsection "svn_auth_cred_username_t"
.ie n .IP "$username\->\fIusername()\fR" 4
.el .IP "\f(CW$username\fR\->\fIusername()\fR" 4
.IX Item "$username->username()"
Username.
.ie n .IP "$username\->\fImay_save()\fR" 4
.el .IP "\f(CW$username\fR\->\fImay_save()\fR" 4
.IX Item "$username->may_save()"
Indicates if the credentials may be saved (to disk).
.SS "svn_auth_cred_ssl_server_trust_t"
.IX Subsection "svn_auth_cred_ssl_server_trust_t"
.ie n .IP "$strust\->\fImay_save()\fR" 4
.el .IP "\f(CW$strust\fR\->\fImay_save()\fR" 4
.IX Item "$strust->may_save()"
Indicates if the credentials may be saved (to disk).
.ie n .IP "$strust\->\fIaccepted_failures()\fR" 4
.el .IP "\f(CW$strust\fR\->\fIaccepted_failures()\fR" 4
.IX Item "$strust->accepted_failures()"
Bit mask of the accepted failures.
.SS "svn_auth_ssl_server_cert_info_t"
.IX Subsection "svn_auth_ssl_server_cert_info_t"
.ie n .IP "$scert\->\fIhostname()\fR" 4
.el .IP "\f(CW$scert\fR\->\fIhostname()\fR" 4
.IX Item "$scert->hostname()"
Primary \s-1CN.\s0
.ie n .IP "$scert\->\fIfingerprint()\fR" 4
.el .IP "\f(CW$scert\fR\->\fIfingerprint()\fR" 4
.IX Item "$scert->fingerprint()"
\&\s-1ASCII\s0 fingerprint.
.ie n .IP "$scert\->\fIvalid_from()\fR" 4
.el .IP "\f(CW$scert\fR\->\fIvalid_from()\fR" 4
.IX Item "$scert->valid_from()"
\&\s-1ASCII\s0 date from which the certificate is valid.
.ie n .IP "$scert\->\fIvalid_until()\fR" 4
.el .IP "\f(CW$scert\fR\->\fIvalid_until()\fR" 4
.IX Item "$scert->valid_until()"
\&\s-1ASCII\s0 date until which the certificate is valid.
.ie n .IP "$scert\->\fIissuer_dname()\fR" 4
.el .IP "\f(CW$scert\fR\->\fIissuer_dname()\fR" 4
.IX Item "$scert->issuer_dname()"
\&\s-1DN\s0 of the certificate issuer.
.ie n .IP "$scert\->\fIascii_cert()\fR" 4
.el .IP "\f(CW$scert\fR\->\fIascii_cert()\fR" 4
.IX Item "$scert->ascii_cert()"
Base\-64 encoded \s-1DER\s0 certificate representation.
.SS "svn_auth_cred_ssl_client_cert_t"
.IX Subsection "svn_auth_cred_ssl_client_cert_t"
.ie n .IP "$ccert\->\fIcert_file()\fR" 4
.el .IP "\f(CW$ccert\fR\->\fIcert_file()\fR" 4
.IX Item "$ccert->cert_file()"
Full paths to the certificate file.
.ie n .IP "$ccert\->\fImay_save()\fR" 4
.el .IP "\f(CW$ccert\fR\->\fImay_save()\fR" 4
.IX Item "$ccert->may_save()"
Indicates if the credentials may be saved (to disk).
.SS "svn_auth_cred_ssl_client_cert_pw_t"
.IX Subsection "svn_auth_cred_ssl_client_cert_pw_t"
.ie n .IP "$ccertpw\->\fIpassword()\fR" 4
.el .IP "\f(CW$ccertpw\fR\->\fIpassword()\fR" 4
.IX Item "$ccertpw->password()"
Certificate password.
.ie n .IP "$ccertpw\->\fImay_save()\fR" 4
.el .IP "\f(CW$ccertpw\fR\->\fImay_save()\fR" 4
.IX Item "$ccertpw->may_save()"
Indicates if the credentials may be saved (to disk).
.SH "CONSTANTS"
.IX Header "CONSTANTS"
.SS "SVN::Auth::SSL"
.IX Subsection "SVN::Auth::SSL"
.ie n .IP "$SVN::Auth::SSL::NOTYETVALID" 4
.el .IP "\f(CW$SVN::Auth::SSL::NOTYETVALID\fR" 4
.IX Item "$SVN::Auth::SSL::NOTYETVALID"
Certificate is not yet valid.
.ie n .IP "$SVN::Auth::SSL::EXPIRED" 4
.el .IP "\f(CW$SVN::Auth::SSL::EXPIRED\fR" 4
.IX Item "$SVN::Auth::SSL::EXPIRED"
Certificate has expired.
.ie n .IP "$SVN::Auth::SSL::CNMISMATCH" 4
.el .IP "\f(CW$SVN::Auth::SSL::CNMISMATCH\fR" 4
.IX Item "$SVN::Auth::SSL::CNMISMATCH"
Certificate's \s-1CN\s0 (hostname) does not match the remote hostname.
.ie n .IP "$SVN::Auth::SSL::UNKNOWNCA" 4
.el .IP "\f(CW$SVN::Auth::SSL::UNKNOWNCA\fR" 4
.IX Item "$SVN::Auth::SSL::UNKNOWNCA"
Certificate authority is unknown (i.e. not trusted).
.ie n .IP "$SVN::Auth::SSL::OTHER" 4
.el .IP "\f(CW$SVN::Auth::SSL::OTHER\fR" 4
.IX Item "$SVN::Auth::SSL::OTHER"
Other failure. This can happen if some unknown error condition occurs.
.SS "_p_svn_lock_t"
.IX Subsection "_p_svn_lock_t"
Objects of this class contain information about locks placed on files
in a repository.  It has the following accessor methods:
.IP "path" 4
.IX Item "path"
The full path to the file which is locked, starting with a forward slash (\f(CW\*(C`/\*(C'\fR).
.IP "token" 4
.IX Item "token"
A string containing the lock token, which is a unique \s-1URI.\s0
.IP "owner" 4
.IX Item "owner"
The username of whoever owns the lock.
.IP "comment" 4
.IX Item "comment"
A comment associated with the lock, or undef if there isn't one.
.IP "is_dav_comment" 4
.IX Item "is_dav_comment"
True if the comment was made by a generic \s-1DAV\s0 client.
.IP "creation_date" 4
.IX Item "creation_date"
Time at which the lock was created, as the number of microseconds since
00:00:00 January 1, 1970 \s-1UTC.\s0  Divide it by 1_000_000 to get a Unix
time_t value.
.IP "expiration_date" 4
.IX Item "expiration_date"
When the lock will expire.  Has the value '0' if the lock will never expire.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chia-liang Kao <clkao@clkao.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 7
\&    Licensed to the Apache Software Foundation (ASF) under one
\&    or more contributor license agreements.  See the NOTICE file
\&    distributed with this work for additional information
\&    regarding copyright ownership.  The ASF licenses this file
\&    to you under the Apache License, Version 2.0 (the
\&    "License"); you may not use this file except in compliance
\&    with the License.  You may obtain a copy of the License at
\&
\&      http://www.apache.org/licenses/LICENSE\-2.0
\&
\&    Unless required by applicable law or agreed to in writing,
\&    software distributed under the License is distributed on an
\&    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
\&    KIND, either express or implied.  See the License for the
\&    specific language governing permissions and limitations
\&    under the License.
.Ve
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 962:" 4
.IX Item "Around line 962:"
\&'=item' outside of any '=over'
.IP "Around line 996:" 4
.IX Item "Around line 996:"
You forgot a '=back' before '=head2'
