.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "native::Wc 3"
.TH native::Wc 3 "2013-02-07" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SVN::Wc \- Subversion working copy functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Incomplete
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .IP "SVN::Wc::parse_externals_description3($parent_directory, $desc, $canonicalize_url, $pool);" 4
.el .IP "SVN::Wc::parse_externals_description3($parent_directory, \f(CW$desc\fR, \f(CW$canonicalize_url\fR, \f(CW$pool\fR);" 4
.IX Item "SVN::Wc::parse_externals_description3($parent_directory, $desc, $canonicalize_url, $pool);"
Parse the string \f(CW$desc\fR as an \f(CW\*(C`svn:externals\*(C'\fR value and return a reference 
to an array of _p_svn_wc_external_item2_t objects. 
If \f(CW$canonicalize_url\fR is true, canonicalize the \f(CW\*(C`url\*(C'\fR member of those objects.  
\&\f(CW$parent_directory\fR is only used in constructing error strings.
.SH "OBJECTS"
.IX Header "OBJECTS"
.SS "svn_wc_status2_t"
.IX Subsection "svn_wc_status2_t"
.ie n .IP "$wcstat\->\fIentry()\fR" 4
.el .IP "\f(CW$wcstat\fR\->\fIentry()\fR" 4
.IX Item "$wcstat->entry()"
A svn_wc_entry_t object for the item.  Can be undef if not under version
control.
.ie n .IP "$wcstat\->\fItext_status()\fR" 4
.el .IP "\f(CW$wcstat\fR\->\fItext_status()\fR" 4
.IX Item "$wcstat->text_status()"
An integer representing the status of the item's text.  Can be one of the
\&\f(CW$SVN::Wc::Status::\fR* constants.
.ie n .IP "$wcstat\->\fIprop_status()\fR" 4
.el .IP "\f(CW$wcstat\fR\->\fIprop_status()\fR" 4
.IX Item "$wcstat->prop_status()"
An integer representing the status of the item's properties.  Can be one of the
\&\f(CW$SVN::Wc::Status::\fR* constants.
.ie n .IP "$wcstat\->\fIlocked()\fR" 4
.el .IP "\f(CW$wcstat\fR\->\fIlocked()\fR" 4
.IX Item "$wcstat->locked()"
A boolean telling if the item is locked.  A directory can be locked if a
working copy update was interrupted.
.ie n .IP "$wcstat\->\fIcopied()\fR" 4
.el .IP "\f(CW$wcstat\fR\->\fIcopied()\fR" 4
.IX Item "$wcstat->copied()"
A boolean telling if the item was copied.  A file or directory can be copied if
it's scheduled for addition-with-history (or part of a subtree that is
scheduled as such).
.ie n .IP "$wcstat\->\fIswitched()\fR" 4
.el .IP "\f(CW$wcstat\fR\->\fIswitched()\fR" 4
.IX Item "$wcstat->switched()"
A boolean telling if the item was switched.  A file or directory can be
switched if the switch command has been used.
.ie n .IP "$wcstat\->\fIrepos_text_status()\fR" 4
.el .IP "\f(CW$wcstat\fR\->\fIrepos_text_status()\fR" 4
.IX Item "$wcstat->repos_text_status()"
An integer representing the status of the item's text in the repository.  Can
be one of the \f(CW$SVN::Wc::Status::\fR* constants.
.ie n .IP "$wcstat\->\fIrepos_prop_status()\fR" 4
.el .IP "\f(CW$wcstat\fR\->\fIrepos_prop_status()\fR" 4
.IX Item "$wcstat->repos_prop_status()"
An integer representing the status of the item's properties in the repository.
Can be one of the \f(CW$SVN::Wc::Status::\fR* constants.
.ie n .IP "$wcstat\->\fIrepos_lock()\fR" 4
.el .IP "\f(CW$wcstat\fR\->\fIrepos_lock()\fR" 4
.IX Item "$wcstat->repos_lock()"
A svn_lock_t object representing the entry's lock in the repository, if any.
.ie n .IP "$wcstat\->\fIurl()\fR" 4
.el .IP "\f(CW$wcstat\fR\->\fIurl()\fR" 4
.IX Item "$wcstat->url()"
The url (actual or expected) of the item.
.ie n .IP "$wcstat\->\fIood_last_cmt_rev()\fR" 4
.el .IP "\f(CW$wcstat\fR\->\fIood_last_cmt_rev()\fR" 4
.IX Item "$wcstat->ood_last_cmt_rev()"
An integer representing the youngest committed revision or \f(CW$SVN::Core::INVALID_REVNUM\fR is not out of date.
.ie n .IP "$wcstat\->\fIood_last_cmt_date()\fR" 4
.el .IP "\f(CW$wcstat\fR\->\fIood_last_cmt_date()\fR" 4
.IX Item "$wcstat->ood_last_cmt_date()"
The date of the most recent commit as microseconds since 00:00:00 January 1, 1970 \s-1UTC\s0 or 0 if not out of date.
.ie n .IP "$wcstat\->\fIood_kind()\fR" 4
.el .IP "\f(CW$wcstat\fR\->\fIood_kind()\fR" 4
.IX Item "$wcstat->ood_kind()"
An integer representing the kind of the youngest commit.  Can be any of the \f(CW$SVN::Node::\fR* constants.  Will be \f(CW$SVN::Node::none\fR if not out of date.
.ie n .IP "$wcstat\->\fItree_conflict()\fR" 4
.el .IP "\f(CW$wcstat\fR\->\fItree_conflict()\fR" 4
.IX Item "$wcstat->tree_conflict()"
A svn_wc_conflict_description_t object if the entry is the victim of a tree conflict or undef.
.ie n .IP "$wcstat\->\fIfile_external()\fR" 4
.el .IP "\f(CW$wcstat\fR\->\fIfile_external()\fR" 4
.IX Item "$wcstat->file_external()"
A boolean telling if the item is a file that was added to the working copy as an svn:externals.  If file_external is \s-1TRUE,\s0 then switched is always \s-1FALSE.\s0
.ie n .IP "$wcstat\->\fIpristine_text_status()\fR" 4
.el .IP "\f(CW$wcstat\fR\->\fIpristine_text_status()\fR" 4
.IX Item "$wcstat->pristine_text_status()"
An integer representing the status of the item's text as compared to the pristine base of the file.  Can be one of the \f(CW$SVN::Wc::Status::\fR* constants.
.ie n .IP "$wcstat\->\fIpristine_prop_status()\fR" 4
.el .IP "\f(CW$wcstat\fR\->\fIpristine_prop_status()\fR" 4
.IX Item "$wcstat->pristine_prop_status()"
An integer representing the status of the item's properties as compared to the pristine base of the node.  Can be one of the \f(CW$SVN::Wc::Status::\fR* constants.
.SS "svn_wc_status_t"
.IX Subsection "svn_wc_status_t"
Same as svn_wc_status2_t, but without the repos_lock, url, ood_last_cmt_rev, ood_last_cmt_date, ood_kind, ood_last_cmt_author, tree_conflict, file_external, pristine_text_status, pristine_prop_status fields.
.SS "svn_wc_entry_t"
.IX Subsection "svn_wc_entry_t"
.ie n .IP "$wcent\->\fIname()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fIname()\fR" 4
.IX Item "$wcent->name()"
Entry's name.
.ie n .IP "$wcent\->\fIrevision()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fIrevision()\fR" 4
.IX Item "$wcent->revision()"
Base revision.
.ie n .IP "$wcent\->\fIurl()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fIurl()\fR" 4
.IX Item "$wcent->url()"
\&\s-1URL\s0 in repository.
.ie n .IP "$wcent\->\fIrepos()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fIrepos()\fR" 4
.IX Item "$wcent->repos()"
Canonical repository \s-1URL.\s0
.ie n .IP "$wcent\->\fIuuid()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fIuuid()\fR" 4
.IX Item "$wcent->uuid()"
Repository uuid.
.ie n .IP "$wcent\->\fIkind()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fIkind()\fR" 4
.IX Item "$wcent->kind()"
The kind of node.  One of the following constants:
\&\f(CW$SVN::Node::none\fR, \f(CW$SVN::Node::file\fR,
\&\f(CW$SVN::Node::dir\fR, \f(CW$SVN::Node::unknown\fR.
.ie n .IP "$wcent\->\fIschedule()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fIschedule()\fR" 4
.IX Item "$wcent->schedule()"
Scheduling.  One of the SVN::Wc::Schedule::* constants.
.ie n .IP "$wcent\->\fIcopied()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fIcopied()\fR" 4
.IX Item "$wcent->copied()"
In a copied state.
.ie n .IP "$wcent\->\fIdeleted()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fIdeleted()\fR" 4
.IX Item "$wcent->deleted()"
Deleted, but parent rev lags behind.
.ie n .IP "$wcent\->\fIabsent()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fIabsent()\fR" 4
.IX Item "$wcent->absent()"
Absent \*(-- we know an entry of this name exists, but that's all (usually this
happens because of authz restrictions)
.ie n .IP "$wcent\->\fIincomplete()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fIincomplete()\fR" 4
.IX Item "$wcent->incomplete()"
For \s-1THIS_DIR\s0 entry, implies whole entries file is incomplete.
.ie n .IP "$wcent\->\fIcopyfrom_url()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fIcopyfrom_url()\fR" 4
.IX Item "$wcent->copyfrom_url()"
Copyfrom location.
.ie n .IP "$wcent\->\fIcopyfrom_rev()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fIcopyfrom_rev()\fR" 4
.IX Item "$wcent->copyfrom_rev()"
Copyfrom revision.
.ie n .IP "$wcent\->\fIconflict_old()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fIconflict_old()\fR" 4
.IX Item "$wcent->conflict_old()"
Old version of conflicted file.
.ie n .IP "$wcent\->\fIconflict_new()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fIconflict_new()\fR" 4
.IX Item "$wcent->conflict_new()"
New version of conflicted file.
.ie n .IP "$wcent\->\fIconflict_wrk()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fIconflict_wrk()\fR" 4
.IX Item "$wcent->conflict_wrk()"
Working version of conflicted file.
.ie n .IP "$wcent\->\fIprejfile()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fIprejfile()\fR" 4
.IX Item "$wcent->prejfile()"
Property reject file.
.ie n .IP "$wcent\->\fItext_time()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fItext_time()\fR" 4
.IX Item "$wcent->text_time()"
Last up-to-date time for text contents (0 means no information available).
.ie n .IP "$wcent\->\fIprop_time()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fIprop_time()\fR" 4
.IX Item "$wcent->prop_time()"
Last up-to-date time for properties (0 means no information available).
.ie n .IP "$wcent\->\fIchecksum()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fIchecksum()\fR" 4
.IX Item "$wcent->checksum()"
Base\-64 encoded checksum for the untranslated text base file, can be undef for
backwards compatibility.
.ie n .IP "$wcent\->\fIcmt_rev()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fIcmt_rev()\fR" 4
.IX Item "$wcent->cmt_rev()"
Last revision this was changed.
.ie n .IP "$wcent\->\fIcmt_date()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fIcmt_date()\fR" 4
.IX Item "$wcent->cmt_date()"
Last date this was changed.
.ie n .IP "$wcent\->\fIcmt_author()\fR" 4
.el .IP "\f(CW$wcent\fR\->\fIcmt_author()\fR" 4
.IX Item "$wcent->cmt_author()"
Last commit author of this item.
.SS "svn_wc_external_item2_t"
.IX Subsection "svn_wc_external_item2_t"
.ie n .IP "$ext\->\fItarget_dir()\fR" 4
.el .IP "\f(CW$ext\fR\->\fItarget_dir()\fR" 4
.IX Item "$ext->target_dir()"
The name of the subdirectory into which this external should be
checked out.  This is relative to the parent directory that
holds this external item.
.ie n .IP "$ext\->\fIurl()\fR" 4
.el .IP "\f(CW$ext\fR\->\fIurl()\fR" 4
.IX Item "$ext->url()"
Where to check out from. This is possibly a relative external \s-1URL,\s0 as
allowed in externals definitions, but without the peg revision.
.ie n .IP "$ext\->\fIrevision()\fR" 4
.el .IP "\f(CW$ext\fR\->\fIrevision()\fR" 4
.IX Item "$ext->revision()"
What revision to check out,
a svn_opt_revision_t object.
The only valid \fIkind()\fRs for this are \f(CW$SVN::Core::opt_revision_number\fR,
\&\f(CW$SVN::Core::opt_revision_date\fR, and \f(CW$SVN::Core::opt_revision_head\fR.
.ie n .IP "$ext\->\fIpeg_revision()\fR" 4
.el .IP "\f(CW$ext\fR\->\fIpeg_revision()\fR" 4
.IX Item "$ext->peg_revision()"
The peg revision to use when checking out, 
a svn_opt_revision_t object.
The only valid \fIkind()\fRs for this are \f(CW$SVN::Core::opt_revision_number\fR,
\&\f(CW$SVN::Core::opt_revision_date\fR, and \f(CW$SVN::Core::opt_revision_head\fR.
.SH "CONSTANTS"
.IX Header "CONSTANTS"
.SS "SVN::Wc::Notify::Action"
.IX Subsection "SVN::Wc::Notify::Action"
.ie n .IP "$SVN::Wc::Notify::Action::add" 4
.el .IP "\f(CW$SVN::Wc::Notify::Action::add\fR" 4
.IX Item "$SVN::Wc::Notify::Action::add"
Adding a path to revision control.
.ie n .IP "$SVN::Wc::Notify::Action::copy" 4
.el .IP "\f(CW$SVN::Wc::Notify::Action::copy\fR" 4
.IX Item "$SVN::Wc::Notify::Action::copy"
Copying a versioned path.
.ie n .IP "$SVN::Wc::Notify::Action::delete" 4
.el .IP "\f(CW$SVN::Wc::Notify::Action::delete\fR" 4
.IX Item "$SVN::Wc::Notify::Action::delete"
Deleting a versioned path.
.ie n .IP "$SVN::Wc::Notify::Action::restore" 4
.el .IP "\f(CW$SVN::Wc::Notify::Action::restore\fR" 4
.IX Item "$SVN::Wc::Notify::Action::restore"
Restoring a missing path from the pristine text-base.
.ie n .IP "$SVN::Wc::Notify::Action::revert" 4
.el .IP "\f(CW$SVN::Wc::Notify::Action::revert\fR" 4
.IX Item "$SVN::Wc::Notify::Action::revert"
Reverting a modified path.
.ie n .IP "$SVN::Wc::Notify::Action::failed_revert" 4
.el .IP "\f(CW$SVN::Wc::Notify::Action::failed_revert\fR" 4
.IX Item "$SVN::Wc::Notify::Action::failed_revert"
A revert operation has failed.
.ie n .IP "$SVN::Wc::Notify::Action::resolved" 4
.el .IP "\f(CW$SVN::Wc::Notify::Action::resolved\fR" 4
.IX Item "$SVN::Wc::Notify::Action::resolved"
Resolving a conflict.
.ie n .IP "$SVN::Wc::Notify::Action::skip" 4
.el .IP "\f(CW$SVN::Wc::Notify::Action::skip\fR" 4
.IX Item "$SVN::Wc::Notify::Action::skip"
Skipping a path.
.ie n .IP "$SVN::Wc::Notify::Action::update_delete" 4
.el .IP "\f(CW$SVN::Wc::Notify::Action::update_delete\fR" 4
.IX Item "$SVN::Wc::Notify::Action::update_delete"
Got a delete in an update.
.ie n .IP "$SVN::Wc::Notify::Action::update_add" 4
.el .IP "\f(CW$SVN::Wc::Notify::Action::update_add\fR" 4
.IX Item "$SVN::Wc::Notify::Action::update_add"
Got an add in an update.
.ie n .IP "$SVN::Wc::Notify::Action::update_update" 4
.el .IP "\f(CW$SVN::Wc::Notify::Action::update_update\fR" 4
.IX Item "$SVN::Wc::Notify::Action::update_update"
Got any other action in an update.
.ie n .IP "$SVN::Wc::Notify::Action::update_completed" 4
.el .IP "\f(CW$SVN::Wc::Notify::Action::update_completed\fR" 4
.IX Item "$SVN::Wc::Notify::Action::update_completed"
The last notification in an update (including updates of externals).
.ie n .IP "$SVN::Wc::Notify::Action::update_external" 4
.el .IP "\f(CW$SVN::Wc::Notify::Action::update_external\fR" 4
.IX Item "$SVN::Wc::Notify::Action::update_external"
Updating an external module.
.ie n .IP "$SVN::Wc::Notify::Action::status_completed" 4
.el .IP "\f(CW$SVN::Wc::Notify::Action::status_completed\fR" 4
.IX Item "$SVN::Wc::Notify::Action::status_completed"
The last notification in a status (including status on externals).
.ie n .IP "$SVN::Wc::Notify::Action::status_external" 4
.el .IP "\f(CW$SVN::Wc::Notify::Action::status_external\fR" 4
.IX Item "$SVN::Wc::Notify::Action::status_external"
Running status on an external module.
.ie n .IP "$SVN::Wc::Notify::Action::commit_modified" 4
.el .IP "\f(CW$SVN::Wc::Notify::Action::commit_modified\fR" 4
.IX Item "$SVN::Wc::Notify::Action::commit_modified"
Committing a modification.
.ie n .IP "$SVN::Wc::Notify::Action::commit_added" 4
.el .IP "\f(CW$SVN::Wc::Notify::Action::commit_added\fR" 4
.IX Item "$SVN::Wc::Notify::Action::commit_added"
Committing an addition.
.ie n .IP "$SVN::Wc::Notify::Action::commit_deleted" 4
.el .IP "\f(CW$SVN::Wc::Notify::Action::commit_deleted\fR" 4
.IX Item "$SVN::Wc::Notify::Action::commit_deleted"
Committing a deletion.
.ie n .IP "$SVN::Wc::Notify::Action::commit_replaced" 4
.el .IP "\f(CW$SVN::Wc::Notify::Action::commit_replaced\fR" 4
.IX Item "$SVN::Wc::Notify::Action::commit_replaced"
Committing a replacement.
.ie n .IP "$SVN::Wc::Notify::Action::commit_postfix_txdelta" 4
.el .IP "\f(CW$SVN::Wc::Notify::Action::commit_postfix_txdelta\fR" 4
.IX Item "$SVN::Wc::Notify::Action::commit_postfix_txdelta"
Transmitting post-fix text-delta data for a file.
.ie n .IP "$SVN::Wc::Notify::Action::blame_revision" 4
.el .IP "\f(CW$SVN::Wc::Notify::Action::blame_revision\fR" 4
.IX Item "$SVN::Wc::Notify::Action::blame_revision"
Processed a single revision's blame.
.SS "SVN::Wc::Notify::State"
.IX Subsection "SVN::Wc::Notify::State"
.ie n .IP "$SVN::Wc::Notify::State::unknown" 4
.el .IP "\f(CW$SVN::Wc::Notify::State::unknown\fR" 4
.IX Item "$SVN::Wc::Notify::State::unknown"
Notifier doesn't know or isn't saying.
.ie n .IP "$SVN::Wc::Notify::State::unchanged" 4
.el .IP "\f(CW$SVN::Wc::Notify::State::unchanged\fR" 4
.IX Item "$SVN::Wc::Notify::State::unchanged"
The state did not change.
.ie n .IP "$SVN::Wc::Notify::State::missing" 4
.el .IP "\f(CW$SVN::Wc::Notify::State::missing\fR" 4
.IX Item "$SVN::Wc::Notify::State::missing"
The item wasn't present.
.ie n .IP "$SVN::Wc::Notify::State::obstructed" 4
.el .IP "\f(CW$SVN::Wc::Notify::State::obstructed\fR" 4
.IX Item "$SVN::Wc::Notify::State::obstructed"
An unversioned item obstructed work.
.ie n .IP "$SVN::Wc::Notify::State::changed" 4
.el .IP "\f(CW$SVN::Wc::Notify::State::changed\fR" 4
.IX Item "$SVN::Wc::Notify::State::changed"
Pristine state was modified.
.ie n .IP "$SVN::Wc::Notify::State::merged" 4
.el .IP "\f(CW$SVN::Wc::Notify::State::merged\fR" 4
.IX Item "$SVN::Wc::Notify::State::merged"
Modified state had mods merged in.
.ie n .IP "$SVN::Wc::Notify::State::conflicted" 4
.el .IP "\f(CW$SVN::Wc::Notify::State::conflicted\fR" 4
.IX Item "$SVN::Wc::Notify::State::conflicted"
Modified state got conflicting mods.
.SS "SVN::Wc::Schedule"
.IX Subsection "SVN::Wc::Schedule"
.ie n .IP "$SVN::Wc::Schedule::normal" 4
.el .IP "\f(CW$SVN::Wc::Schedule::normal\fR" 4
.IX Item "$SVN::Wc::Schedule::normal"
Nothing special here.
.ie n .IP "$SVN::Wc::Schedule::add" 4
.el .IP "\f(CW$SVN::Wc::Schedule::add\fR" 4
.IX Item "$SVN::Wc::Schedule::add"
Slated for addition.
.ie n .IP "$SVN::Wc::Schedule::delete" 4
.el .IP "\f(CW$SVN::Wc::Schedule::delete\fR" 4
.IX Item "$SVN::Wc::Schedule::delete"
Slated for deletion.
.ie n .IP "$SVN::Wc::Schedule::replace" 4
.el .IP "\f(CW$SVN::Wc::Schedule::replace\fR" 4
.IX Item "$SVN::Wc::Schedule::replace"
Slated for replacement (delete + add)
.SS "SVN::Wc::Status"
.IX Subsection "SVN::Wc::Status"
.ie n .IP "$SVN::Wc::Status::none" 4
.el .IP "\f(CW$SVN::Wc::Status::none\fR" 4
.IX Item "$SVN::Wc::Status::none"
Does not exist.
.ie n .IP "$SVN::Wc::Status::unversioned" 4
.el .IP "\f(CW$SVN::Wc::Status::unversioned\fR" 4
.IX Item "$SVN::Wc::Status::unversioned"
Is not a versioned node in this working copy.
.ie n .IP "$SVN::Wc::Status::normal" 4
.el .IP "\f(CW$SVN::Wc::Status::normal\fR" 4
.IX Item "$SVN::Wc::Status::normal"
Exists, but uninteresting.
.ie n .IP "$SVN::Wc::Status::added" 4
.el .IP "\f(CW$SVN::Wc::Status::added\fR" 4
.IX Item "$SVN::Wc::Status::added"
Is scheduled for addition.
.ie n .IP "$SVN::Wc::Status::missing" 4
.el .IP "\f(CW$SVN::Wc::Status::missing\fR" 4
.IX Item "$SVN::Wc::Status::missing"
Under version control but missing.
.ie n .IP "$SVN::Wc::Status::deleted" 4
.el .IP "\f(CW$SVN::Wc::Status::deleted\fR" 4
.IX Item "$SVN::Wc::Status::deleted"
Scheduled for deletion.
.ie n .IP "$SVN::Wc::Status::replaced" 4
.el .IP "\f(CW$SVN::Wc::Status::replaced\fR" 4
.IX Item "$SVN::Wc::Status::replaced"
Was deleted and then re-added.
.ie n .IP "$SVN::Wc::Status::modified" 4
.el .IP "\f(CW$SVN::Wc::Status::modified\fR" 4
.IX Item "$SVN::Wc::Status::modified"
Text or props have been modified.
.ie n .IP "$SVN::Wc::Status::merged" 4
.el .IP "\f(CW$SVN::Wc::Status::merged\fR" 4
.IX Item "$SVN::Wc::Status::merged"
Local mods received repos mods.
.ie n .IP "$SVN::Wc::Status::conflicted" 4
.el .IP "\f(CW$SVN::Wc::Status::conflicted\fR" 4
.IX Item "$SVN::Wc::Status::conflicted"
Local mods received conflicting mods.
.ie n .IP "$SVN::Wc::Status::ignored" 4
.el .IP "\f(CW$SVN::Wc::Status::ignored\fR" 4
.IX Item "$SVN::Wc::Status::ignored"
A node marked as ignored.
.ie n .IP "$SVN::Wc::Status::obstructed" 4
.el .IP "\f(CW$SVN::Wc::Status::obstructed\fR" 4
.IX Item "$SVN::Wc::Status::obstructed"
An unversioned resource is in the way of the versioned resource.
.ie n .IP "$SVN::Wc::Status::external" 4
.el .IP "\f(CW$SVN::Wc::Status::external\fR" 4
.IX Item "$SVN::Wc::Status::external"
An unversioned path populated by an svn:externals property.
.ie n .IP "$SVN::Wc::Status::incomplete" 4
.el .IP "\f(CW$SVN::Wc::Status::incomplete\fR" 4
.IX Item "$SVN::Wc::Status::incomplete"
A directory doesn't contain a complete entries list.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 7
\&    Licensed to the Apache Software Foundation (ASF) under one
\&    or more contributor license agreements.  See the NOTICE file
\&    distributed with this work for additional information
\&    regarding copyright ownership.  The ASF licenses this file
\&    to you under the Apache License, Version 2.0 (the
\&    "License"); you may not use this file except in compliance
\&    with the License.  You may obtain a copy of the License at
\&
\&      http://www.apache.org/licenses/LICENSE\-2.0
\&
\&    Unless required by applicable law or agreed to in writing,
\&    software distributed under the License is distributed on an
\&    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
\&    KIND, either express or implied.  See the License for the
\&    specific language governing permissions and limitations
\&    under the License.
.Ve
