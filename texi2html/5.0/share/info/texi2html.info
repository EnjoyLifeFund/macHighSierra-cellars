This is texi2html.info, produced by makeinfo version 4.13 from
texi2html.texi.

Portions  
of        
`texi2html'
          Copyright (C) 1999, 2000 Lionel Cons
          Copyright (C) 1999, 2000 Karl Berry
          Copyright (C) 1999, 2000 Olaf Bachmann
          Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007 Patrice Dumas
          Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006 Derek Price
          Copyright (C) many others.


Portions  
of this   
manual    
          Copyright (C) 1999, 2000 Karl Heinz Marbaise (manual)
          Copyright (C) 2003, 2007 Derek Price (manual)
          Copyright (C) 2003, 2004, 2005, 2006, 2007 Patrice Dumas
          (manual)

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.

INFO-DIR-SECTION Texinfo documentation system
START-INFO-DIR-ENTRY
* Texi2HTML: (texi2html).  Texinfo to HTML Converter.
END-INFO-DIR-ENTRY

   This file, last updated 30 June 2010, documents the `texi2html'
script which converts Texinfo (http://www.texinfo.org) into HTML
(http://w3c.org).  This edition is for `texi2html' version 4.13.

Portions  
of        
`texi2html'
          Copyright (C) 1999, 2000 Lionel Cons
          Copyright (C) 1999, 2000 Karl Berry
          Copyright (C) 1999, 2000 Olaf Bachmann
          Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007 Patrice Dumas
          Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006 Derek Price
          Copyright (C) many others.


Portions  
of this   
manual    
          Copyright (C) 1999, 2000 Karl Heinz Marbaise (manual)
          Copyright (C) 2003, 2007 Derek Price (manual)
          Copyright (C) 2003, 2004, 2005, 2006, 2007 Patrice Dumas
          (manual)

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.


File: texi2html.info,  Node: Top,  Next: Overview,  Up: (dir)

Texi2HTML
*********

This manual, last updated 30 June 2010, describes version 4.13 of the
`texi2html' Perl script which converts Texinfo (*note Texinfo:
(Texinfo)Top.) into HTML.

   Please send bug reports concerning this manual to the Texi2HTML
developement list <bug-texinfo@gnu.org>. Please state the exact version
of the manual which contains the bug, as given above.

Portions  
of        
`texi2html'
          Copyright (C) 1999, 2000 Lionel Cons
          Copyright (C) 1999, 2000 Karl Berry
          Copyright (C) 1999, 2000 Olaf Bachmann
          Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007 Patrice Dumas
          Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006 Derek Price
          Copyright (C) many others.


Portions  
of this   
manual    
          Copyright (C) 1999, 2000 Karl Heinz Marbaise (manual)
          Copyright (C) 2003, 2007 Derek Price (manual)
          Copyright (C) 2003, 2004, 2005, 2006, 2007 Patrice Dumas
          (manual)

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.

     *This manual is currently under construction and of course incomplete.  ;-)*

* Menu:

* Overview::
* Obtaining texi2html::
                              Obtaining a copy of the `texi2html'
                              source code distribution
* Installation::              Installing `texi2html'
* Invoking texi2html::        Description of the command line options
* Initialization files::      What kind of variables and subroutines appear
                              in init files and how they are called
* Changing the page layout::  Fine tuning of the page layout
* Customizing HTML::          Fine tuning of the HTML elements
                              associated with the texinfo constructs
* Internationalization::      Help translating!
* Incompatibilities::         Incompatibilities with previous versions
* Specificities::             The minor differences with regard with texinfo
                              valid for makeinfo or texi2dvi
* Indexop::                   Command Line Option Index
* Indexvr::                   Variable Index
* Indexcp::                   Concept Index


File: texi2html.info,  Node: Overview,  Next: Obtaining texi2html,  Prev: Top,  Up: Top

1 Overview
**********

Texinfo (http://www.texinfo.org) is the official documentation format
of the GNU (http://www.gnu.org) project.  It uses a single source file
to produce both online information and printed output.

   It is often desirable to have a way to produce HTML from Texinfo
sources, as GNU-Info files are produced.  It is much simpler to run a
converter than it is to rewrite all the documentation in HTML,
especially considering that there is so much Texinfo documentation in
the world.

   Some time ago `makeinfo' wasn't able to produce HTML output format,
but people still wanted documentation in HTML.  This was the birthing
hour for `texi2html'.  The basic purpose of `texi2html' is to convert
Texinfo documents into HTML.

   Since then, HTML support in `makeinfo' has improved, but `texi2html'
is still stronger in many areas, including the degree to which it
allows customization.  With `texi2html', some important aspects of the
resulting HTML files may be specified via command line options, and
configuration files provide an even finer degree of control over the
final output, allowing most every aspect of the final output not
specified in the Texinfo input file to be specified.  Configuration
files are written in `perl', like the main program, and anything which
may be specified on the command line may also be specified within a
configuration file.

   For an example of the kind of pages `texi2html' is capable of
producing, have a look at the following sites: the Singular Manual
(http://www.singular.uni-kl.de/Manual/html/), the Cederqvist (CVS
Manual) (http://ccvs.cvshome.org/docs/manual).

* Menu:

* whytexi2html::       Why `texi2html' and not `makeinfo'?.


File: texi2html.info,  Node: whytexi2html,  Up: Overview

1.1 Why `texi2html' and not `makeinfo'?
=======================================

You would like to produce HTML files from your existing Texinfo files?
There are two programs you can use to do this.  The first is `makeinfo'
(*note Generating HTML: (texinfo)Generating HTML.).  The second is
`texi2html'.

   The design goal of `makeinfo''s HTML output was to produce readable
HTML output. It is now possible to use CSS for HTML customization.
Another possibility is to use intermediate formats, like docbook or
`makeinfo' XML and XSL stylesheets to customize the resulting document.
Still the output produced by `makeinfo' isn't customizable.

   The current development of `texi2html' tries to provide for
producing the more interesting and sophisticated HTML pages that
today's Internet users have come to expect.  The goal behind
`texi2html' is to generate attractive HTML by default but also to allow
users considerable freedom to affect the final style and design of the
output HTML pages.  This is achieved via command line options and
flexible configuration files.

   In contrast to the HTML produced by `makeinfo --html' (the
`makeinfo' program is part of the Texinfo distribution), the
`texi2html' program, among other differences, allows for the
customization of the entire page layout, including headers, footers,
style sheets, etc., allows for customization of the low level HTML
formatting, provides for splitting documents at various levels, and
provides for using the `latex2html' program to convert `@tex' sections
of the Texinfo source.

   The focus on HTML is still present but with the help of the
customization files it is now possible to use `texi2html' to produce
other formats as well. `texi2html' may for example be turned into a
texinfo to roff translator with the help of a customization file
provided with the distribution.

   `texi2html' should reasonably convert all Texinfo 4.8 constructs.
If you find it does not, please send a bug report to the
<texi2html-bug@nongnu.org> email list.


File: texi2html.info,  Node: Obtaining texi2html,  Next: Installation,  Prev: Overview,  Up: Top

2 Obtaining `texi2html'
***********************

The latest version of the source code for `texi2html' should be
available from www.nongnu.org/texi2html/
(http://www.nongnu.org/texi2html/).  `texi2html' is also available with
teTeX (http://www.tug.org/teTeX/) and TeX Live
(http://www.tug.org/texlive/).


File: texi2html.info,  Node: Installation,  Next: Invoking texi2html,  Prev: Obtaining texi2html,  Up: Top

3 Installation of `texi2html'
*****************************

* Menu:

* Requirements::
* Configuring and rebuilding::
* Installing::
* Advanced build features::


File: texi2html.info,  Node: Requirements,  Next: Configuring and rebuilding,  Up: Installation

3.1 Requirements
================

To install `texi2html', you must first obtain a copy of the source
distribution.  *Note Obtaining texi2html::.

   `texi2html' requires `perl' version 5.00405 or above to be run. An
older perl 5 version with `File::Spec' is also likely to work.  The
current version has been lightly tested on a wide range of perl, but
has not been tested extensively on versions of `perl' below 5.6.  To
play nice with encodings you also need the `Encode' and
`Unicode::Normalize' modules.

   To rebuild the script perl isn't required in most cases. For more
information about advanced build features, see *note Advanced build
features::.


File: texi2html.info,  Node: Configuring and rebuilding,  Next: Installing,  Prev: Requirements,  Up: Installation

3.2 Configuring the source and rebuilding
=========================================

`texi2html' is a standard Automake-based distribution.  If you have a
source version, you should run `./configure' to configure the sources
and `make' to build the script.

   `./configure' accepts options to select the installation directory
for the `texi2html' file, the default directories `texi2html' will use
to look for configuration files, and other details.  Run `./configure
--help' for more information.  Running `./configure' creates
`texi2html_configured.pl' from `texi2html.pl', and also builds the
`make' configuration files (`Makefile's).

   Running `make' combines five files into the final `texi2html'
program file:
   * `texi2html_configured.pl' contains the base program,

   * `MySimple.pm' handles the command line options,

   * `texi2html.init' is the default configuration file, and

   * `T2h_i18n.pm' is used for internationalization.

   * `translations.pl' contains the translations of the strings used in
     documents.

   Running `make' also rebuilds the documentation if needed.


File: texi2html.info,  Node: Installing,  Next: Advanced build features,  Prev: Configuring and rebuilding,  Up: Installation

3.3 Installing
==============

`make install' performs the installation to the locations specified to
the `./configure' script.  This usually involves placing the actual
`texi2html' file someplace in your path, such as `/usr/local/bin' or
`/usr/bin'.

   Installing `texi2html' in your path should be sufficient to run it.
To use default initialization files, or a configuration file for
LaTeX2HTML when using `latex2html' to convert `@tex' sections (*note
Expanding TeX regions::), install them in the package data directory
specified to configure.  This is `/usr/local/share/texi2html/' by
default, but depends on the value of the `--pkgdatadir=DIR'  option
passed to the `./configure' script.  *Note Using init files:: for more.


File: texi2html.info,  Node: Advanced build features,  Prev: Installing,  Up: Installation

3.4 Advanced build features
===========================

This section documents features that are unlikely to be used but deserve
a bit of documentation.

   A `./configure' switch, `--with-unicode'  allows to choose whether
the unicode code should be used or not. The default is to detect it
with a test. This code requires `Encode' and `Unicode::Normalize'
modules.

   A similar `./configure' switch, `--with-unidecode'  allows to choose
whether the perl module `Text::Unidecode' should be used or not. The
default is to detect it with a test. This code requires the
`Text::Unidecode' module.

   `perl' isn't needed to build the script. the script is build by
`./configure' and a shell script launched by `make' which is a simple
wrapper around a `sed' one-liner. The `perl' command can be specified
with the environment variable `$PERL', otherwise it is detected. `perl'
is required to rebuild the documentation as the HTML documentation is
rebuild with `texi2html' itself.

   Old style translations are managed by a script `manage_i18n.pl',
created by `./configure'. `manage_i18n.pl' requires `Data::Dumper' to
function normally. If this module isn't there `./configure' detects it
and `manage_i18n.pl' doesn't really rebuild the translations, but only
copy files. It is possible to use the `./configure' switch
`--enable-translations' 

   to override the `./configure' detection. For more about
translations, see *note Internationalization::.

   It is possible to build from outside of the source directory, for
example the following should work:

     tar xzvf texi2html-4.13.tar.gz
     mkdir texi2html_build
     cd texi2html_build
     ../texi2html-4.13/configure && make

   All these features enables to build `texi2html' on a platform in
order to run it on another platform, a kind of cross-building. The
`./configure' switches and `$PERL' allows to specify everything needed
for the build of the `texi2html' script.


File: texi2html.info,  Node: Invoking texi2html,  Next: Initialization files,  Prev: Installation,  Up: Top

4 Invoking `texi2html'
**********************

To produce an HTML manual, run `texi2html' with a Texinfo file as an
argument.  For example, this manual is created with:

     $ texi2html texi2html.texi

   `texi2html' can accept more than one manual on the command line, and
will proceed with each of the manuals in turn.

   The behaviour of `texi2html' may be changed with command line
options.  These command line options are always associated with
corresponding `perl' variables which may appear in init files, and these
variables are presented in this chapter each time a switch is described.

   Boolean command line switches always have a corresponding negated
switch, obtained by prepending `no' or `no-' to the switch name. For
example `--nomenu'  does the reverse of `--menu' .

   When more than one manual is processed, the command line apply to
all the manuals, except for command-line switches setting the output
file names.

* Menu:

* General options::
* Splitting output::          The HTML output may be split at
                              different levels
* Output files::
* Expansion::
* Texinfo related options::
* Page layout options::       Customizing page layout
* Style options::             Customizing the HTML and text style
* Expanding TeX regions::
* Using init files::          Specifying initialization files for fine tuning


File: texi2html.info,  Node: General options,  Next: Splitting output,  Up: Invoking texi2html

4.1 General options
===================

Miscellaneous general options:
`--error-limit=NUM'
     
     Quit after NUM errors (default 1000), (variable `$ERROR_LIMIT' ).

`--help'
     
     Display a short help and exit.

`--verbose'
     
     Be verbose.

`--version'
     
     Display version information and exit.


File: texi2html.info,  Node: Splitting output,  Next: Output files,  Prev: General options,  Up: Invoking texi2html

4.2 Specifying where to split the generated document
====================================================

The HTML manual resulting from the processing of the Texinfo source may
be split into files at different levels.  This is specified with the
option `--split'  which takes an argument, namely the level of splitting
(variable: `$SPLIT' ). This level may be:

`chapter'
     The document is split at `@chapter', `@appendix', or `@unnumbered'.

`section'
     The document is split at the same places as it is using the
     `chapter' argument, and also at `@section', `@appendixsec' or
     `@unnumberedsec'.

`node'
     The document is split at every sectioning command.  It is not
     necessarily split at each node, if the `@node' structure doesn't
     correspond with the sectioning command structure (see below).

`none'
     The document isn't split.  This is the default.

   There are two kinds of commands which may be used to define
sectioning elements in Texinfo: `@node' and the structuring commands
(`@top', `@section', `@appendixsubsec',  and so on).  A node just
preceding a structuring command is considered to be part of the same
sectioning element as that command.  If the `@node Top' isn't
associated with a structuring command it also defines a sectioning
element.

   By default, nodes which aren't associated with a structuring command
are not considered to be sectioning commands.  They are always
considered to be part of a sectioning element defined by a structuring
command.  It is possible to change this behaviour via the `--use-nodes'  option
(variable `$USE_NODES' ).  In this case, nodes not associated with
structuring commands are also considered to be sectioning commands
defining a sectioning element.

   This default behaviour mimics `texi2dvi' behaviour, which ignores
`@node' commands for the purprose of sectioning, while the second looks
like `makeinfo' behaviour (*note Two Paths: (texinfo)Two Paths.).

   As an illustration, the following table shows how a sample Texinfo
document is divided into sectioning elements when `--use-nodes'  is
used and not:

Texinfo code           default case           with
                                              `--use-nodes'
     @node node1        first element:         first element:
     @chapter node 1                               
     node1 text             @node node1             @node node1
                            @chapter node 1             @chapter node 1
     @node node2             node1 text             node1 text
     node2 text                                  second
                            @node node2        element:
     @node node3             node2 text        
     node3 text           second                   @node node2
     @chapter node 3        element:                    node2 text
     chapter text                                  third
                            @node node3        element:
                            node3 text        
                            @chapter node 3             @node node3
                            chapter text             node3 text
                                                   @chapter node 3
                                                   chapter text


File: texi2html.info,  Node: Output files,  Next: Expansion,  Prev: Splitting output,  Up: Invoking texi2html

4.3 Setting output file and directory names
===========================================

The manual name is constructed by stripping the `.texi', `.txi',
`.texinfo', or `.txinfo' extension from the Texinfo file name.

   By default, `texi2html' generates the manual file in the current
directory if the manual isn't split. A `.html' file extension is
appended to the manual name.

   If the manual is split the files are put in a directory named after
the manual name. The file name is constructed using the manual name as
basename.  An underscore followed by a number is appended to the
basename for each files corresponding with sectioning elements, with the
exception of the top element. For the top element there is nothing
appended.  The files containing special elements pages have an
underscore and a 3 letter code corresponding to their content (`toc'
for table of contents, `abt' for about, `ovr' for overview, `fot' for
footnotes if they are separated) appended.  Lastly, an `.html' file
extension is appended.

   Thus, if the texinfo file `afile.texi' is processed and split at
chapters into 3 files, the generated files (in directory `afile') will
be:

     afile.html         --> `@node Top' or `@top' section
     afile_1.html       --> Chapter 1
     afile_2.html       --> Chapter 2
     afile_toc.html     --> Table of Contents
     afile_abt.html     --> About Page

   This default behavior may be modified by several command line
options. If the output isn't split, the prefix file name may be
overrided by the `--output'  command line option (variable `$OUT' ). If
the output is split, and `--output'  is set, the files are placed in
the directory specified by the argument to the option.

   The basename may be overridden with `--prefix'  (variable `$PREFIX' ).
If `--short-ext'  is given, `.htm' is appended instead of `.html' in
the final step (variable `$SHORTEXTN' ).  The `--top-file'  option
overrides the top element file name (variable `$TOP_FILE' ).  This can
be used to name the top element file `index.html'.  Similarly,
`--toc-file'  changes the name of the table of contents file (variable
`$TOC_FILE' ).

   Reusing the example above, but this time calling `texi2html' like so:

     $ texi2html -split chapter -prefix manual -short-ext -top-file index.htm -toc-file contents.htm afile.texi

   we get, in `manual':

     index.htm          --> `@node Top' or `@top' section
     manual_1.htm       --> Chapter 1
     manual_2.htm       --> Chapter 2
     contents.htm       --> Table of Contents
     manual_abt.htm     --> About Page

   The file names generated by `texi2html' differ from those generated
by `makeinfo'. `makeinfo' uses the `@setfilename' to determine the
manual name(1) (*note Output files-Footnote-1::).  Also `makeinfo' uses
the node name to construct the file names while splitting at nodes.

   It is possible to get the same behaviour out of `texi2html' by
specifying the `--node-files'  option (variable `$NODE_FILES' ).  The
default is false for this option.  If the output isn't split at nodes,
`texi2html' will still output files named after the nodes, without real
content but redirecting to the right file.  This trick enables the
generated HTML manual to be a target for the cross-references of other
manuals generated by `makeinfo' or `texi2html'.

   In case the files are named after the node names, another
command-line option, `--transliterate-file-names' 

   can be set to trigger ASCII transliteration of node file names
(variable `$TRANSLITERATE_FILE_NAMES' ). Transliteration is set in the
default case.


File: texi2html.info,  Node: Output files-Footnotes,  Up: Output files

   (1) This behaviour is triggered only by a variable set in an init
file,  `$USE_SETFILENAME' 

   (*note Using init files::).


File: texi2html.info,  Node: Expansion,  Next: Texinfo related options,  Prev: Output files,  Up: Invoking texi2html

4.4 Specifying which regions get expanded
=========================================

The default for `texi2html' is to expand the `@ifhtml', `@html', and
`@menu' regions, all the `@ifnot' regions except `@ifnothtml', and no
other `@if' regions.

   It is possible to expand other regions by setting `--if<region>' ,
where `<region>' is replaced by the literal name of the region (for
example, `--iftex').  Symetrically, if `--no-if<region>'  is specified,
the `<region>' region is ignored.  The configuration file array,
`@EXPAND' , holds the names of regions which should be expanded. The
only region name present in `@EXPAND' in the default case is `html'.

   If `--nomenu'  is set, the `@menu' sections are not expanded
(variable `$SHOW_MENU' ). The default is to expand `@menu' sections.


File: texi2html.info,  Node: Texinfo related options,  Next: Page layout options,  Prev: Expansion,  Up: Invoking texi2html

4.5 Command line options related to Texinfo language features
=============================================================

Miscalleneous Texinfo related things may be specified via command line
options.

`--document-language=LANG'
     
     Sets the document language similar to the Texinfo directive,
     `@documentlanguage LANG' (variable `$DOCUMENTLANGUAGE' ).  The
     default is `en', that is, use the english language strings.

`-DVAR'
     
     Sets VAR.  Equivalent to, `@set VAR 1', in Texinfo.

`-UVAR'
     
     Clears VAR.  Equivalent to, `@clear VAR', in Texinfo.

`-PDIR'
     
     Prepend DIR to the list of directories to search for `@include'
     files (the associated array is `@PREPEND_DIRS' , empty in the
     default case).

`-IDIR'
     
     Append DIR to the list of directories to search for `@include'
     files (the associated array is `@INCLUDE_DIRS' , empty in the
     default case).

   The include files are always searched for in the current directory.


File: texi2html.info,  Node: Page layout options,  Next: Style options,  Prev: Texinfo related options,  Up: Invoking texi2html

4.6 Page layout related command line options
============================================

If the `--frames'  option is specified, HTML frames are used.  A file
describing the frame layout is generated, and the document page is
associated with a frame where the short table of content appears
(variable `$FRAMES' ). The default is not to use frames.

   It is also possible to suppress the section navigation panel with
`--no-headers'  (variable `$HEADERS' , the default is to output all the
navigation panels), and to specify whether footnotes should appear at
the foot of the same page which contains the reference to the note with
`--footnote-style'  set to `end' or on a separate page with
`--footnote-style' set to `separate' (variable `$FOOTNOTESTYLE' ).  The
default is to have separated footnotes.


File: texi2html.info,  Node: Style options,  Next: Expanding TeX regions,  Prev: Page layout options,  Up: Invoking texi2html

4.7 Customizing the HTML and text style
=======================================

Miscalleneous style changes may be achieved with command line options.

`--doctype=DTD'
     
`--frameset-doctype=DTD'
     
     You can specify the document DTD by setting these options.
     `--frameset-doctype'  applies to the file describing the frames
     when frames are used (corresponding variables are `$DOCTYPE'  and
     `$FRAMESET_DOCTYPE' ).

     The default for the document doctype for HTML is:
          <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
     And for the frameset doctype:
          <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd">

`--iso'
     
     If this option is set, ISO8859 entities are used for some special
     symbols, like Copyright (C) (variable `$USE_ISO' ). It is the
     default.

`--css-include=FILE'
     
     This command line switch provides for the inclusion of an external
     Cascading Style Sheet (CSS) file.  More than one file may be
     specified, and `-' stands for the standard input (array
     `@CSS_FILES' ).

     The option use is the same than for `makeinfo' and is described
     extensively in *note HTML CSS: (texinfo)HTML CSS.  Briefly, the
     CSS `@import' lines from the external file CSS file are pasted
     before the `texi2html' CSS rules, and the external file CSS rules
     are pasted after the `texi2html' CSS rules.

`--css-ref=URL'
     
     This command line switch provides for the inclusion of an reference
     to a Cascading Style Sheet (CSS) URL.  More than one URL may be
     specified (array `@CSS_REFS' ).

`--html-xref-prefix=PATH'
     
     This option sets the base directory for external HTML texinfo
     manuals (variable `$EXTERNAL_DIR' ).  Defaults to `../'.

`--def-table'
     
     If this option is set, HTML tables are used to format definition
     commands, rather than HTML definition tables (variable `$DEF_TABLE' ).
     Default is false.

`--short-ref'
     
     If this option is set, cross-references are given without section
     numbers (variable `$SHORT_REF' ). Default is false.

`--number-sections'
     
     If this option is set, sections are numbered (variable
     `$NUMBER_SECTIONS' ).  This is the default.

`--toc-links'
     
     If this option is set, links from headings to TOC entries are
     created (variable `$TOC_LINKS' ). Default is false.


File: texi2html.info,  Node: Expanding TeX regions,  Next: Using init files,  Prev: Style options,  Up: Invoking texi2html

4.8 Expanding `@tex' and `@math' regions using LaTeX2HTML
=========================================================

It is possible to use LaTeX2HTML (http://www.latex2html.org/) to
process `@tex' regions and `@math{}' commands.  This is an attractive
way to display mathematical constructs in the HTML manual.  The `--l2h'  option
activates this feature (variable $L2H).  It is usually desirable to
expand `@tex' sections when this option is specified (*note
Expansion::). The default is not to use this feature.

   The `--l2h-l2h=PROGRAM'  option enables changing the name/location
of the LaTeX2HTML program processing TeX regions (variable `$L2H_L2H' ).
The default is `latex2html'.

   `--l2h-tmp'  sets the directory used for temporary files, this name
shouldn't contain a dot `.' (variable is `$L2H_TMP' ). Defaults to the
current dir.

   The file specified by `--l2h-file'  is used as LaTeX2HTML init file.
It is searched at the same places than init files (*note Using init
files::), and the default is `l2h.init'.


File: texi2html.info,  Node: Using init files,  Prev: Expanding TeX regions,  Up: Invoking texi2html

4.9 Use initialization files for fine tuning
============================================

Initialization variables are read first from
`/usr/local/share/texi2html/Config' (the exact location being
changeable with the `--pkgdatadir=dir'  option of the `configure'
script, see *note Installation::), `/usr/local/etc/texi2html/Config'
(the exact location being changeable with the `--sysconfdir=dir'  option
of the `configure' script, see *note Installation::), from `./Config'
then from `$HOME/.texi2html/Config'. Any command-line option can
override the corresponding option set in init file, and the option
`--init-file'  specifies an init file to be loaded, with later settings
overriding earlier ones.

   The init files specified with `--init-file'  are searched first in
the current directory, then in the `$HOME/.texi2html/' directory, in
the `/usr/local/etc/texi2html/' directory and lastly in the
`/usr/local/share/texi2html/' directory.

   A file is also included based on the language selected, by
`$DOCUMENTLANGUAGE' , `--document-language'  or `@documentlanguage'.
All the files with name the language name in
`/usr/local/share/texi2html/i18n/', `/usr/local/etc/texi2html/i18n/',
`$HOME/.texi2html/i18n/' and then `./i18n/' are included.

   The default initialization options are defined in the
`texi2html.init' file contained in the `texi2html' distribution (which
gets included near the beginning of the `texi2html' script that gets
installed).

   To customize `texi2html' it is best if you copy the appropriate
sections from the `texi2html.init' contents into an appropriate local
initialization file, make the necessary changes there, and then have
`texi2html' read this initialization file by one of the means described
above.

   Some init files are provided with `texi2html', for example
`book.init' which produces an output more in line with what could be in
a book, or `chm.init' outputs files that can be used to produce a CHM
file.


File: texi2html.info,  Node: Initialization files,  Next: Changing the page layout,  Prev: Invoking texi2html,  Up: Top

5 Overview of initialization files content and loading
******************************************************

The initialization files are `perl' files, read as explained in *note
Using init files::. You don't need to know much of `perl' to do some
simple changes in variable values, however, to be able to really take
advantage of all the features of the initialization file, a good
knowledge of `perl' is required.

   In initialization file two kind of variables appear. These are normal
variables (including arrays and hashes) and references on functions.
The later permits the dynamic redefinition of functions used to produce
the HTML manual. You should be able to change the value of some normal
variables without a deep knowledge of `perl', by looking at the
existing examples. The possible mistakes in that case could be omitted
`;', and bad quoting.

   Initialization file are loaded from the main program by the mean of
a `require', while in the `Texi2HTML::Config' namespace. This means
that the namespace of the main program and the namespace of
initialization files are distinct, which ensures that no name clash
should happen. The variables are declared with `use vars', such that it
should be possible to use the `use strict' pragma in the initialization
file code.

   To avoid messing with the variables in the `main' namespace all the
global variables which could be of use in the init files are in the
`Texi2HTML' namespace. Notice that the functions of the main program
are still in the `main' namespace.

   Since `texi2html' can proceed more than one file on the command
line, you should make sure that you initialize the variables that are
used during a manual formatting. The handlers explained later can be
used for that (*note Bypassing normal formatting::).

* Menu:

* Encodings::                 Setting the encodings.
* Redefining functions::      Function redefinition is achieved with
                              redefinition of references on functions.
* Function prototypes::       Conventions used in that manual for function
                              reference prototypes display.


File: texi2html.info,  Node: Encodings,  Next: Redefining functions,  Up: Initialization files

5.1 Setting the encodings
=========================

There are four encodings relevant for `texi2html', they are associated
with corresponding configuration variables. If these variables are
defined they determine a corresponding value in `%Texi2HTML::THISDOC'
which is otherwise autodetected:
  1. The variable `$DOCUMENT_ENCODING'  corresponds with the document
     encoding.  If defined, this variable sets
     `$Texi2HTML::THISDOC{'DOCUMENT_ENCODING'}' . If not defined, the
     encoding appearing in `@documentencoding' will be used to set
     `$Texi2HTML::THISDOC{'DOCUMENT_ENCODING'}' . The
     `@documentencoding' value appears in
     `$Texi2HTML::THISDOC{'documentencoding'}' .

  2. The texinfo files encoding.  If `$IN_ENCODING'  is set, this sets
     `$Texi2HTML::THISDOC{'IN_ENCODING'}' . Otherwise, when
     `$Texi2HTML::THISDOC{'DOCUMENT_ENCODING'}' is set,
     `$Texi2HTML::THISDOC{'IN_ENCODING'}' is also set if the encoding
     is supported by perl.

  3. The out files encoding. It is associated with the variable
     `$OUT_ENCODING' . If defined, `$Texi2HTML::THISDOC{'OUT_ENCODING'}'  is
     set accordingly.  If not defined, the value of
     `$Texi2HTML::THISDOC{'ENCODING_NAME'}' or
     `$Texi2HTML::THISDOC{'IN_ENCODING'}' is used if one of these
     variables is set.

  4. The encoding advertized in out files, associated with the variable
     `$ENCODING_NAME' . It sets `$Texi2HTML::THISDOC{'ENCODING_NAME'}'  if
     defined.

     If unset the value of this variable is based on the other ENCODING
     values, and if they are all undefined, the variable
     `$DEFAULT_ENCODING'  is used.

   The values for the encoding related variables are set in the default
`init_out' function reference (*note Output initialization::).

   In general the `$DOCUMENT_ENCODING' and `$IN_ENCODING' are set to
the right values. `$OUT_ENCODING' is also rightly set according to
`$ENCODING_NAME'.  To force a given encoding for the output, the
`$ENCODING_NAME' value may be set. The current default output encoding
is UTF-8.


File: texi2html.info,  Node: Redefining functions,  Next: Function prototypes,  Prev: Encodings,  Up: Initialization files

5.2 Redefining functions in initialization files
================================================

To redefine a function you must replace the corresponding funtion
reference with a reference on your function.  Thus you should write
your function, give it a name you are certain it is unique in the
`Texi2HTML::Config' namespace, and override the value of the function
reference with your own function reference. When another function from
the main program (or from another functions of an initialization file)
calls the reference, your function will be used.

   For example the function reference corresponding with the function
called when doing an anchor is called `$anchor'. Thus if you want to
override the corresponding function you could write:

     # override the function reference
     $anchor = \&my_own_function;

     # the function reference now refers to
     sub my_own_function {
     # process arguments and return an html anchor
     }


File: texi2html.info,  Node: Function prototypes,  Prev: Redefining functions,  Up: Initialization files

5.3 Conventions used for function prototypes
============================================

As the functions are defined by a reference name, we will always use
the reference name in function prototypes. For the function arguments
we will use `\@array' for a reference on an array and similarly
`\%hash' for a reference on a hash.

   Thus, the prototype for the function associated with the function
reference `$formatting_function' will be:

 -- Function Reference: $text formatting_function $arg1 \@arg2
     `formatting_function' takes as first argument $ARG2, as second
     argument a reference on an array \@ARG2 and returns the formatted
     text $TEXT.

   To redefined the corresponding function, you should write:

     $formatting_function = \&my_formatting_function

     sub my_formatting_function($ $)
     {
         my $arg1 = shift;
         my $arg2 = shift;
         # prepare $formatted_text
         .....
         return $formatted_text
     }


File: texi2html.info,  Node: Changing the page layout,  Next: Customizing HTML,  Prev: Initialization files,  Up: Top

6 Fine tuning of the page layout
********************************

Some features of the page layout might be specified with command line
options, the corresponding variables are described in *note Page layout
options::.  Fine tuning of the page layout may be achieved with
redefinition of other variables and function references in the
initialization files.

* Menu:

* The different pages::       The different categories of pages.
* The page layout::           The elements of a page.
* Navigation panel::          How to change the navigation panel.
* Program variables::         The available main program variables and some
                              usefull functions from the main program.
* Output initialization::     Setting variables before the document
                              production but after the texinfo parsing.
* Output finalization::       Cleaning after document generation.
* css::                       Customizing css lines.
* Customizing header::
* Customizing section::
* Customizing footer::
* Special pages::             Customizing table of contents, top, about page.
* File and target names::     Customizing the file and target names.
* External index files::      Putting index entries in external files.


File: texi2html.info,  Node: The different pages,  Next: The page layout,  Up: Changing the page layout

6.1 The different categories of pages and sectioning elements
=============================================================

The following sectioning elements can be associated with pages:

_Normal elements_
     These are normal sections or nodes. Their association with pages is
     determined by the splitting of the document. *Note Splitting
     output::.

_Top element_
     The top element is the higher element in the document structure.
     If there is a `@top' section it is the element associated with
     that section. Otherwise it is the element associated with the
     `@node Top'. If there is no `@node Top' the first element is the
     top element.

     The top element is formatted differently than a normal element if
     there is a `@top' section or the `@node Top' isn't associated with
     a sectioning command.

_Misc elements_
     These elements are associated with pages if the document is split.
     There are four misc elements:
       1. Table of contents

       2. Short table of contents, also called Overview

       3. Footnotes page

       4. About page

     The _About page_ shouldn't be present for documents consisting in
     only one sectioning element, or for documents unsplit and without
     navigation information. The _Footnote page_ should only be present
     if the footnotes appear on a separated page (*note Page layout
     options::), however a footnote element is present if the document
     isn't split. The _Table of contents_ should only be formatted if
     `@contents' is present in the document.  Similarly the _Overview_
     should only appear if `@shortcontents' or `@summarycontents' is
     present. The Table of contents and the Overview may also be
     directly included within the document, not as separate pages
     (*note Contents and Overview text::).


File: texi2html.info,  Node: The page layout,  Next: Navigation panel,  Prev: The different pages,  Up: Changing the page layout

6.2 Page layout and navigation panel overview
=============================================

A page is broken up in three parts. A page header, the sections and a
page footer. A common element in the page layout is a navigation panel
with icons or text linking to other sections or pages. Another common
element is a rule, separating sections or footer. The navigation panel
and the rules may be part of the sections or part of headers or
footers. You may use the variables `$SMALL_RULE' , `$DEFAULT_RULE' ,
`$MIDDLE_RULE'  and `$BIG_RULE' 

   for rules of different sizes.  The defaults are
     $SMALL_RULE = '<hr size="1">';
     $DEFAULT_RULE = '<hr>';
     $MIDDLE_RULE = '<hr size="2">';
     $BIG_RULE = '<hr size="6">';

   In the header some important meta data may be defined, like the
title or style information, and textual informations may be present in
comments. All this doesn't appear directly in the displayed HTML,
though.

   The page layout is mainly controlled by functions, the precise
functions called depending on the document splitting. The navigation
panel, however, can be customized with variables.

Element labels
--------------

There are 19 items associated with elements. Each of these is
associated with a name and a reference to the element they represent,
when such an element exists.  The element is either a global element or
an element relative to the current element. The relative elements are
found with respect with the document structure defined by the section
structuring commands (`@chapter', `@unnumbered'...) or by the nodes (in
that case the node directions are specified on node line or in menu
organization).  These items are called "element labels". They may be
associated with a button (*note Button specifications::), and used in
the formatting functions (*note Program variables::).

   Here is the list:

_` '_
     An empty button

_Top_
     Top element. The associated name is `$TOP_HEADING'  if that
     variable is defined. This variable is not set by default.

_Contents_
     Table of contents

_About_
     About (help) page

_Overview_
     Overview, short table of contents

_First_
     First element in reading order

_Last_
     Last element in reading order

_Index_
     The first chapter with `@printindex'. The associated name is
     `$INDEX_CHAPTER' , if the variable is set. This variable is not set
     by default.

_This_
     The current element

_Back_
     Preceding element in reading order

_FastBack_
     Beginning of this chapter or previous chapter if the element is a
     chapter

_Prev_
     Previous section on the same level

_NodePrev_
     Previous node

_Forward_
     Next element in reading order

_FastForward_
     Next chapter

_Next_
     Next section on the same level

_NodeNext_
     Next node

_Following_
     Next node in node reading order

_Up_
     Up section

_NodeUp_
     Up node

_FileNext_
     Forward element first in the next page (or file)

_FilePrev_
     Backward element first in the previous page (or file)


File: texi2html.info,  Node: Navigation panel,  Next: Program variables,  Prev: The page layout,  Up: Changing the page layout

6.3 Customization of the navigation panels buttons
==================================================

A lot of customization of the navigation panel may be achieved without
redefining functions, with variables redefinition.  In case it isn't
enough, it is also possible to redefine the function doing the
navigation panel formatting.

* Menu:

* General purpose variables::      Variables controlling the navigation panel
                                   at a global level
* Button specifications::
* Panel formatting function::


File: texi2html.info,  Node: General purpose variables,  Next: Button specifications,  Up: Navigation panel

6.3.1 Controlling the navigation panel panel at a high level
------------------------------------------------------------

The global formatting of the navigation panels may be changed with the
following variables:

`$VERTICAL_HEAD_NAVIGATION'
     A vertical navigation panel will be used for the header navigation
     panel if this variable is true.

`$ICONS'
     Icons are used instead of textual buttons if this variable is true.

`$HEADERS'
     If this variable is false there is no section navigation, no
     navigation panels for the elements within the pages, only at the
     beginning and the end of the page (*note Page layout options::).


File: texi2html.info,  Node: Button specifications,  Next: Panel formatting function,  Prev: General purpose variables,  Up: Navigation panel

6.3.2 Specifying the buttons formatting
---------------------------------------

Several arrays and hashes enable a precise control on the buttons and
their display.  The following arrays determine the buttons present in
navigation panels:

`@SECTION_BUTTONS'
     This array is used for the navigation panel buttons present at the
     begining of sectioning elements. If split at node or section they
     are also used at the page footer, and in the case of section
     navigation at the page header.

`@SECTION_FOOTER_BUTTONS'
`@NODE_FOOTER_BUTTONS'
     This array is used for the navigation panel buttons present at the
     footer of pages when split at node or at section.

     If `$WORDS_IN_PAGE'  is set and the output is split at nodes, these
     buttons are only present if there are more than `$WORDS_IN_PAGE' 

     words in the sectioning element text. This counting is very rough
     and include punctuation marks, html elements, numbers.  The
     default is to include the buttons after 300 words.

`@CHAPTER_BUTTONS'
     This array is used for the buttons appearing at the page footer if
     split at chapter, and at the page header if split at chapter and
     there is no section navigation.

`@MISC_BUTTONS'
     These buttons appear at the beginning of special and sections and
     at the end of these section pages if the output is split.

`@LINKS_BUTTONS'
     These are used for `<link>' elements if they are output in the
     headers.

   The array specify the buttons displayed in navigation panels, and
how the button is displayed.  Each element is associated with a button
of the navigation panel from left to right.  The signification of the
array element value is the following:

_reference on a function_
     The function is called with argument a boolean true if the
     navigation panel should be vertical. Should return the formatted
     button text.

_reference on a scalar_
     The scalar value is printed. For some possibly usefull scalars,
     *note Elements hashes::.

_reference on an array_
     In this case the first array element should be a reference on text
     and the second element an element label. In that case a link to the
     element associated with the element label with the scalar value
     text is generated.

     For example if the buttons array element is
          [ 'Next', \$Texi2HTML::NODE{Next} ]

     The button will be a link to the next section with text
     `$Texi2HTML::NODE{Next}' .

_element label_
     If icons are not used, the button is a link to the corresponding
     element which text is defined by the value associated with the
     element label in the `%NAVIGATION_TEXT'  hash, surrounded by `['
     and `]'. If the element label is ` ', there is no `[' and `]'.
     The element of the `%NAVIGATION_TEXT' hash are defined
     dynamically, in the `init_out' function reference (*note Output
     initialization::).

     If icons are used, the button is an image with file determined by
     the value associated with the element label in the `%ACTIVE_ICONS' 

     hash if the the link really leads to an element, or in the
     `%PASSIVE_ICONS' 

     hash if there is no element to link to. Of course if there is a
     link to the element the icon links to that element. The button
     name and the button description are used in HTML attributes to
     have a textual description of the icon. The corresponding strings
     are in `%BUTTONS_NAME'   for the button name and
     `%NAVIGATION_TEXT' for the description.

   If `$USE_ACCESSKEY'  is set, the `accesskey' attribute is used in
navigation. In that case the `%BUTTONS_ACCESSKEY' 

   hash is used for the access key.

   Similarly, if If `$USE_REL_REV'  is set, the `rel' attribute is used
in navigation. In that case the `%BUTTONS_REL'  hash is used for the
rel attribute.


File: texi2html.info,  Node: Panel formatting function,  Prev: Button specifications,  Up: Navigation panel

6.3.3 Changing the navigation panel formatting
----------------------------------------------

If you are not satisfied with this scheme, it is possible to control
exactly the formatting of navigation panels by redefining a function
reference. The function controlling the display of navigation panel is
associated with the following function reference:

 -- Function Reference: $navigation_text print_navigation \@buttons
          $vertical
     \@BUTTONS is an array reference which should hold the
     specification of the buttons for that navigation panel. $VERTICAL
     is true if the navigation panel should be vertical.  Returns the
     formatted navigation panel in $NAVIGATION_TEXT.


File: texi2html.info,  Node: Program variables,  Next: Output initialization,  Prev: Navigation panel,  Up: Changing the page layout

6.4 Main program variables and usefull functions
================================================

In the functions controlling the page layout some global variables set
by the main program are available, with value corresponding with the
current layout element.

* Menu:

* Elements hashes::             Accessing information related with the
                                different elements
* Global informations::         Accessing global informations, like date,
                                title...
* Global functions::            main program usefull functions


File: texi2html.info,  Node: Elements hashes,  Next: Global informations,  Up: Program variables

6.4.1 Accessing elements informations
-------------------------------------

Four hashes are available, with key the elements labels (as described
in *note Element labels::) and values:

`%Texi2HTML::NAME'
     The formatted element name

`%Texi2HTML::HREF'
     The element hypertext reference

`%Texi2HTML::NODE'
     The element node name

`%Texi2HTML::NO_TEXI'
     The element name after removal of texi commands

   If `$USE_NODE_TARGET'  is set, the node anchors are used as target
for the section HREF, if there is a node associated to that section.


File: texi2html.info,  Node: Global informations,  Next: Global functions,  Prev: Elements hashes,  Up: Program variables

6.4.2 Accessing global informations
-----------------------------------

Three kinds of global informations are available, miscalleneous global
strings, flags set by `@set' and special flags and section lines.

Strings that can be set by some @-commands
..........................................

Some information may be set up by @-commands, by a variable in the init
file, and sometime on the command-line.  This is the case, for example,
for `@footnotestyle', `--footnote-style' and `$FOOTNOTESTYLE'.  The
value associated with these should be read by calling the `get_conf'
function, in the `Texi2HTML::Config' namespace, for example:

     if (get_conf('footnotestyle') eq 'separate') { .... }

   When it exists, the associated variable that sets the default value
have the same name, in upper case.  Currently the following information
corresponding with @-commands is available through `get_conf':
kbdinputstyle, paragraphindent, setchapternewpage, headings,
footnotestyle,   exampleindent, firstparagraphindent, everyheading,
everyfooting,   evenheading, evenfooting, oddheading, oddfooting,
setcontentsaftertitlepage,  setshortcontentsaftertitlepage,
frenchspacing, fillcolumn, documentlanguage,  novalidate.

   Information nthat can be set on the command line and in init files,
or that could be modified on a per-output file basis are also available
through `get_conf':

`SPLIT'
     How the manual is split.

`SPLIT_SIZE'
     The split size, only relevant for info output.

`doctype'
     The current doctype.

`headers'
     True if headers are to be output.

Global strings
..............

The `%Texi2HTML::THISDOC'  hash holds some global informations:

`fulltitle'
     title set by `@settitle'. If there is no `@settitle' other
     possibilities are tried (`@title', `@shorttitlepage'...).

`fulltitle_no_texi'
     fulltitle without texi formatting

`fulltitle_texi'
     fulltitle with texi commands

`title'
     title set by `@title'.

`title_no_texi'
     title without texi formatting

`title_texi'
     title with texi commands

`author'
     Authors list set by `@author'.

`authors'
     A reference on an array containing each author set by `@author'.

`copying_comment'
     Text appearing in `@copying' with all the texinfo commands removed,
     put in comments.

`program'
     The name and version of `texi2html'.

`program_homepage'
     Homepage for `texi2html'.

`program_authors'
     Authors of `texi2html'.

`file_base_name'
     base name of the texinfo manual file.

`filename'
     This is a reference on a hash that holds the filenames for special
     elements.  These files may not be used in certain cases, for
     example the `toc' element file name may not be relevant if table
     of contents is not output separately.  The keys are
    `doc'
          the document file if not split, if split should be the top
          element file.

    `top'
          Top element file name.

    `toc'
          Table of contents element file name.

    `stoc'
          Overview (also called short table of contents) element file
          name.

    `about'
          About element file name.

    `foot'
          Footnotes element file name.

    `frame'
          Main frame file.

    `toc_frame'
          Table of contents frame file name.

`input_file_name'
     Name of the texinfo manual file given on the command line.

`destination_directory'
     Destination directory for the resulting files.

`extension'
     Extension for the output files.

`toc_file'
     The file name of the table of contents, should always be valid,
     even when table of contents are output directly in the document.

`inline_contents'
     A reference on a hash containing two key, one for each type of
     table of contents:
    `contents'
          The associated value is a reference on an array containg the
          line resulting from formatting the table of contents,
          including a heading and a reference.

    `shortcontents'
          The associated value is a reference on an array containg the
          line resulting from formatting the short table of contents,
          including a heading and a reference.

`today'
     The date. May be overriden by `$DATE'.

`css_import_lines'
     reference on an array containing the `@import' lines of CSS files.

`css_lines'
     reference on an array containing the normal lines of CSS files.

Flags
.....

Flags defined by `@set' may be accessed through the `%main::value'  hash.
The key is the flag name, the value is the flag value at the end of the
document.

Section lines
.............

The following array references or arrays holds formatted lines:

`$Texi2HTML::THIS_SECTION'
     Lines of the current element.

`$Texi2HTML::OVERVIEW'
     Lines of short table of contents. *Note Special pages::.

`$Texi2HTML::TOC_LINES'
     Lines of table of contents. *Note Special pages::.

`$Texi2HTML::TITLEPAGE'
     The title page formatted. *Note Title page::.


File: texi2html.info,  Node: Global functions,  Prev: Global informations,  Up: Program variables

6.4.3 Function usefull in page formatting
-----------------------------------------

The usefull function is a function used to print an array of lines,
which also counts the number of words in the array, if needed.

 -- Function: $words_number main::print_lines $filehandle \@lines_array
     $FILEHANDLE is the opened filehandle the function should write to.
     \@LINES_ARRAY is the array line the function should write to the
     file.  If this argument is omitted, the function uses
     `$Texi2HTML::THIS_SECTION' . $WORDS_NUMBER is the number of words
     in the array, only defined if split at nodes and `$WORDS_IN_PAGE'  is
     defined.


File: texi2html.info,  Node: Output initialization,  Next: Output finalization,  Prev: Program variables,  Up: Changing the page layout

6.5 Preparing the output
========================

After the texinfo file has been parsed, some information is available
which can be used to modify some variables and prepare the outputting.
For example the document language, the document encoding, values set
with `@set' or `@setfilename' and other similar @-commands are not
known before the texinfo parsing.

   The following function reference may be redefined to be called after
texinfo processing and before document generation:

 -- Function Reference: init_out
     This function perform the initialization of variables and any other
     task before document outputting.

   In the default case the `$BODYTEXT'  (*note Customizing header::)
and the hashes `%NAVIGATION_TEXT' , `%BUTTONS_NAME'   (*note Button
specifications::), `%BUTTONS_GOTO'  (*note About text::) are
initialized.  Indeed the initialization of these variables is dependent
upon the document language selection. Similarly the encoding variables
are set based on the information now available (*note Encodings::).

   To perform the default initializations and also add more code, you
could do as in the following example (save the default function
reference and call it in your own function) :

     my $default_init_out = $init_out;
     $init_out = \&makeinfo_like_init_out;
     sub makeinfo_like_init_out()
     {
        &$default_init_out();
        $NAVIGATION_TEXT{'Following'} = ' &gt; ';
     }


File: texi2html.info,  Node: Output finalization,  Next: css,  Prev: Output initialization,  Up: Changing the page layout

6.6 Finalizing the output
=========================

If you want to do some cleaning after the document was generated (close
files, write at the end of files and so on), the following function
reference may be redefined:

 -- Function Reference: finish_out
     This function is called after the document generation.

   The default is to do nothing.


File: texi2html.info,  Node: css,  Next: Customizing header,  Prev: Output finalization,  Up: Changing the page layout

6.7 Customizing the `texi2html' css lines
=========================================

If the variable `$CSS_LINES'  is set it is used for the css entries.
For example if you don't want any css entries, set

     $CSS_LINES = '';

   If this variable is `undef' (as in th edefault case), it is possible
to modify the `texi2html' css lines by modifying the entries or adding
to the `%css_map'  hash. Each key is a css selector, the corresponding
value is a style string.

   Another possiblility is to modify the array corresponding with the
array reference `$Texi2HTML::THISDOC{'css_import_lines'}' that contains
the `@import' lines of CSS files, and similarly it is possible to
modify the array corresponding with the array reference
`$Texi2HTML::THISDOC{'css_lines'}'  that contains the normal CSS files
lines (for details on what corresponds with those different lines, see
*note HTML CSS: (texinfo)HTML CSS.).  The right place to modify these
arrays is in a function appearing in the `@command_handler_process'
array (*note Bypassing normal formatting::). Later, the CSS lines are
allready expanded, by the function reference below.

   In th edefault case, the resulting css lines are in
`$Texi2html::THISDOC{'CSS_LINES'}' . It is also possible to change
completely the way `$Texi2html::THISDOC{'CSS_LINES'}' are generated by
redefining the following function reference:

 -- Function Reference: css_lines \@import_lines \@rule_lines
     This function should be used to construct the variable
     `$Texi2html::THISDOC{'CSS_LINES'}'.  \@IMPORT_LINES are the
     `@import' lines of the files specified with `--include-css' , and
     \@RULE_LINES are the css commands lines of these files.  *Note
     Style options::.


File: texi2html.info,  Node: Customizing header,  Next: Customizing section,  Prev: css,  Up: Changing the page layout

6.8 Customizing the page header
===============================

It is possible to add lines to the text within the `<head>' HTML
elements, by defining the variable `$EXTRA_HEAD' . Similarly it is
possible to add text just after the `<body>' element with the variable
`$AFTER_BODY_OPEN' . These variables are empty by default.

   The HTML encoding of the resulting document is defined by
`$ENCODING_NAME' . If the variable isn't defined, the
`@documentencoding' value is used, or the `$OUT_ENCODING'  value, if
set. `$ENCODING_NAME' may influence the value of `$OUT_ENCODING', which
corresponds with the encoding used when writing to the resulting files.
*Note Encodings::.

   The description of the document may be specified in
`$DOCUMENT_DESCRIPTION' . If this variable is undef, the text
associated with `@documentdescription' is used, and if there isn't such
test a default description is constructed using the document title and
the name of the first section of the file.  The value used during
document formatting is `$Texi2HTML::THISDOC{'DOCUMENT_DESCRIPTION'}' .

   The `<body>' element attributes may be set by defining the variable
`$BODYTEXT' .  The resulting attributes are in
`$Texi2HTML::THISDOC{'BODYTEXT'}' . If you want to define that variable
dynamically, you should use the `init_out' function reference (*note
Output initialization::).

   `<link>' element are used in the header if `$USE_LINKS' 

   is set. `@LINKS_BUTTONS'  determines which links are used.
`%BUTTONS_REL'  determines the link type associated with the `rel'
attribute.

   The default functions call the function associated with
`$print_head_navigation'  to format the navigation panel for the page
header. Thus you can control parts of the formatting by redefining the
function reference.

 -- Function Reference: print_head_navigation $filehandle \@buttons
     $FILEHANDLE is the opened filehandle the function should write to.
     \@BUTTONS is an array reference which should hold the
     specification of the buttons for the navigation panel.

   If you want even more control, you can have full control over the
page header formatting by redefining three function references. The
function associated with `$print_page_head'  is called for all the
pages, and after that, the function associated with
`$print_chapter_header'  is called if the document is split at
chapters, or the function associated with `$print_section_header'  is
called if the document is split at sections.

 -- Function Reference: print_page_head $filehandle
     $FILEHANDLE is the opened filehandle the function should write to.
     This function should print the page head, including the `<body>'
     element.

 -- Function Reference: print_chapter_header $filehandle
     $FILEHANDLE is the opened filehandle the function should write to.
     This function is called if the document is split at chapters, after
     `print_page_head'.

 -- Function Reference: print_section_header $filehandle
     $FILEHANDLE is the opened filehandle the function should write to.
     This function is called if the document is split at sections, after
     `print_page_head'.


File: texi2html.info,  Node: Customizing section,  Next: Customizing footer,  Prev: Customizing header,  Up: Changing the page layout

6.9 Customizing the sections
============================

The functions associated with the following function references are
used for the formatting of sections:

 -- Function Reference: print_section $filehandle $first_in_page
          $previous_is_top
     $FILEHANDLE is the opened filehandle the function should write to.
     $FIRST_IN_PAGE is true if this section is the first section in the
     page.  $PREVIOUS_IS_TOP is true if this section is the section
     following the Top section.  This function should print the current
     section contents.

 -- Function Reference: end_section $filehandle
          $last_element_or_before_top
     $FILEHANDLE is the opened filehandle the function should write to.
     $LAST_ELEMENT_OR_BEFORE_TOP is true if this section precedes the
     top element or is the last one in page, or before the special
     elements.


File: texi2html.info,  Node: Customizing footer,  Next: Special pages,  Prev: Customizing section,  Up: Changing the page layout

6.10 Customizing the page footer
================================

It is possible to add text just before the `</body>' element with the
variable `$PRE_BODY_CLOSE' . Nothing is added by default.

   A date is collected to be output in the footer. You can change it by
defining `$DATE'  in the initialization file.

   The default functions call the function associated with
`$print_foot_navigation'  to format the navigation panel for the page
footer. Thus you can control parts of the formatting by redefining the
function reference.

 -- Function Reference: print_foot_navigation $filehandle \@buttons
     $FILEHANDLE is the opened filehandle the function should write to.
     \@BUTTONS is an array reference which should hold the
     specification of the buttons for the navigation panel.

   If you want even more control, you can have more control over the
page footer formatting by redefining three function references.  The
function associated with `$print_chapter_footer'  is called if the
document is split at chapters, or the function associated with
`$print_section_footer'  is called if the document is split at sections.
After that the function associated with `$print_page_foot'  is called.

 -- Function Reference: print_page_foot $filehandle
     $FILEHANDLE is the opened filehandle the function should write to.
     This function should print the page foot, including the `</body>'
     element.

 -- Function Reference: print_chapter_footer $filehandle
     $FILEHANDLE is the opened filehandle the function should write to.
     This function is called if the document is split at chapters,
     before `print_page_foot'.

 -- Function Reference: print_section_footer $filehandle
     $FILEHANDLE is the opened filehandle the function should write to.
     This function is called if the document is split at sections,
     before `print_page_foot'.


File: texi2html.info,  Node: Special pages,  Next: File and target names,  Prev: Customizing footer,  Up: Changing the page layout

6.11 Special pages formatting
=============================

For the special elements, two things must be formatted: the content and
the page layout

* Menu:

* Special pages content::
* Special pages layout::


File: texi2html.info,  Node: Special pages content,  Next: Special pages layout,  Up: Special pages

6.11.1 Customizing the content of the special pages
---------------------------------------------------

The label for the special elements, except for the Top element is
formatted according to the function reference `$misc_element_label' :

 -- Function Reference: $misc_element_label misc_element_label
          $identifier $page_name
     $IDENTIFIER is the identifier associated with the special element.
     $PAGE_NAME is the special element name. It should return a label
     that can be used for references to the special element.

* Menu:

* Top element text::
* Contents and Overview text::
* Footnotes text::
* About text::
* Title page::


File: texi2html.info,  Node: Top element text,  Next: Contents and Overview text,  Up: Special pages content

6.11.1.1 Top element text formatting
....................................

The top element formatting is controlled by three function which also
controls the layout of the top element page or section. The associated
function references are:

 -- Function Reference: print_Top_header $filehandle $begin_page
     $FILEHANDLE is the opened filehandle the function should write to.
     $BEGIN_PAGE is true if the element is the first in a page.  This
     function should begin the Top element. At the time this function
     is called the top element text hasn't been parsed.

 -- Function Reference: print_Top $filehandle $has_top_heading
     $FILEHANDLE is the opened filehandle the function should write to.
     $HAS_TOP_HEADING is true if there is a `@heading' command or
     `@titlefont' command appearing in the Top element text.  This
     function should be used to format the Top element text and
     navigation panel.

 -- Function Reference: print_Top_footer $filehandle $end_page
     $FILEHANDLE is the opened filehandle the function should write to.
     $END_PAGE is true if the element is the last in a page.  This
     function should end the Top element.


File: texi2html.info,  Node: Contents and Overview text,  Next: Footnotes text,  Prev: Top element text,  Up: Special pages content

6.11.1.2 Table of contents and Short table of contents
......................................................

Two possibilities exist for the formatting of table of contents (and
short table of contents). In the default case, the table of contents
are in separate elements, at the end of the document if the document is
unsplit or in separate files. This is consistent with `makeinfo' where
menus are used for navigation. Another mode may be selected by setting
`$INLINE_CONTENTS' . In that case the table of contents are not output
as separate elements but are instead output where the corresponding
@-command, for example `@contents', is set. This behaviour is more
consistent with `texi2dvi'.  If `@setcontentsaftertitlepage' appears in
the document, and even if `$INLINE_CONTENTS' is set, the table of
contents are merged in the title (which isn't output in the default
case, see *note Title page::).

   Several variables may be used to control the formatting of table of
contents and short table of contents:

`$CONTENTS'
     If the variable is true a table of contents is done even if there
     is no `@contents' command.  If it is defined and false, no table
     of contents is done even if there is a `@contents' command.

`$SHORTCONTENTS'
     If the variable is true a short table of contents is done even if
     there is no `@summarycontents' command.  If it is defined and
     false, no short table of contents is done even if there is a
     `@summarycontents' command.

`$BEFORE_OVERVIEW'
     The variable value is inserted before the short table of contents
     text.

`$AFTER_OVERVIEW'
     The variable value is inserted after the short table of contents
     text.

`$BEFORE_TOC_LINES'
     The variable value is inserted before the table of contents text.

`$AFTER_TOC_LINES'
     The variable value is inserted after the table of contents text.

`$NO_BULLET_LIST_STYLE'
     This should contain a css style used for the list style when there
     is no bullet.

`$NO_BULLET_LIST_CLASS'
     This should contain the class assocciated with the
     $NO_BULLET_LIST_STYLE css style.

`$NO_BULLET_LIST_ATTRIBUTE'
     This should contain an attribute text used for the list element
     when there is no bullet. For example it is used in the tables of
     if they are formatted with a list.

   More control on the table of contents and short table of contents
formatting may be achieved by redefining a function with the following
associated function reference:

 -- Function Reference: toc_body \@elements
     \@ELEMENTS is an array reference contining informations about all
     the elements of the document. Each of the entry of this array is
     an hash reference which entries correspond with different
     informations about the element. Interesting keys have the
     following meaning:

    `top'
          true if the element is the top element,

    `index_page'
          true if the element is an index page added because of index
          splitting,

    `toc_level'
          level of the element in the table of content. Highest level
          is 1 for the top element and for chapters, appendix and so on,
          2 for section, unnumberedsec and so on...

    `tocid'
          label used for reference linking to the element in table of
          contents,

    `file'
          the file containing the element, usefull to do href to that
          file in case the document is split,

    `text'
          text of the element, with section number,

    `name'
          text of the element, without section number.

     This function doesn't return anything but should fill the array
     corresponding with the `$Texi2HTML::TOC_LINES'  and
     `$Texi2HTML::OVERVIEW'  references with the table of contents and
     short table of contents.


   Another function reference is used to add a heading and a reference,
to be used with `$INLINE_CONTENTS' or merged in the title. Its output
is not used when the table of contents are separate elements.

 -- Function Reference: \ @inline_contents_lines inline_contents
          $filehandle $command $element
     This function reference returns a reference on an array holding
     the lines containing the contents, heading and reference.
     $FILEHANDLE is a reference on the currently opened file if the
     function is called because a `@contents' or `@shortcontents'
     command was encountered, it is undef otherwise.  $COMMAND is
     either `contents' or  `shortcontents'.  $ELEMENT is a hash
     reference containing informations about the table of contents
     context. Relevant keys are:
    `target'
          The identifier associated with the table of contents, used
          for example to do references to the table of contents using
          href in HTML.

    `id'
          The identifier associated with the element, used to do
          labels. In general the same than the `target', but not
          necessarily.

    `file'
          The file name containing the table of contents.



File: texi2html.info,  Node: Footnotes text,  Next: About text,  Prev: Contents and Overview text,  Up: Special pages content

6.11.1.3 Formatting of footnotes text
.....................................

The footnotes text is allready formatting when `@footnote' commands are
expanded. *Note Footnotes::.


File: texi2html.info,  Node: About text,  Next: Title page,  Prev: Footnotes text,  Up: Special pages content

6.11.1.4 Formatting of about text
.................................

The default about element contains an explaination of the buttons used
in the document (`@SECTION_BUTTONS', *note Button specifications::) and
an example locating the buttons targets in an example.  The formatting
of this text may be influenced by the following hashes and variables:

`$PRE_ABOUT'
`$AFTER_ABOUT'
     This variable may be a scalar or a function reference.  If it is a
     scalar, the value is used.  If this is a function reference it is
     expanded and the returned text is used. The text is added before
     or after the main about text.

`%BUTTONS_GOTO'
     The keys of this hash are element labels (*note Element labels::).
     The value is the text associated with the element label in the
     about text.  The element of the hash are defined dynamically, you
     should in the `init_out' function reference (*note Output
     initialization::).

`%BUTTONS_EXAMPLE'
     The keys of this hash are  element labels (*note Element
     labels::). The value is the text associated with the element label
     in the about example, typically a section number.


   If this is not enough and you want to control exactly the formatting
of the about text, you can redefine the function associated with the
following function reference:

 -- Function Reference: $about_text print_about
     This function should return the about text.


File: texi2html.info,  Node: Title page,  Prev: About text,  Up: Special pages content

6.11.1.5 Formatting of title page
.................................

The title page is first formatted using the text appearing in the
`@titlepage' section, and put in `$Texi2HTML::TITLEPAGE' . More
formatting can be done using the following function reference:

 -- Function Reference: titlepage
     This function should complete `$Texi2HTML::TITLEPAGE'.

   In the default case, in this function the title is output if there
is no titlepage, the table of contents and short table of contents are
also added if they are to be output and `@setcontentsaftertitlepage' or
`@setshortcontentsaftertitlepage' appear in the document (*note
Contents and Overview text::).

   In the default case the resulting title page output is not used in
the document, except if the top node is not associated with any content.


File: texi2html.info,  Node: Special pages layout,  Prev: Special pages content,  Up: Special pages

6.11.2 Customizing the layout of the special pages
--------------------------------------------------

The formatting of each of the special pages, or section in case the
document is not split, is controlled by a function.  The associated
function reference is called accordingly:

`print_Top'

`print_Top_header'

`print_Top_footer'
     Formatting of top element page or section. It is also used for the
     formatting of the top element text (*note Top element text::).

`print_Toc'
     Formatting of table of contents page or section

`print_Overview'
     Formatting of short table of contents page or section

`print_About'
     Formatting of about (help) page or section

`print_Footnotes'
     Formatting of footnotes section or page in case footnotes are on a
     separated page or the document isn't split.

   In the default case, `$print_Top'  calls `$print_Top_header'  for
the header and `$print_Top_footer'  for the footer of top element.  All
the other function call `$print_misc'  which in turn calls
`$print_misc_header'  for the headers and  `$print_misc_footer' 

   for the footers.


File: texi2html.info,  Node: File and target names,  Next: External index files,  Prev: Special pages,  Up: Changing the page layout

6.12 Customizing the file and target names
==========================================

File names
----------

It is possible to specify the file names with more control than with the
command line options (*note Output files::).  First the extension may
be overrided by the variable `$EXTENSION' 

   value. The variable should be `undef' if no extension is to be added.
Two function references enable further customization. One is usefull in
case `$NODE_FILES'  is true and it is used to customize the node file
name.

 -- Function Reference: $node_file node_file_name \%node
     \%NODE is a hash reference with the following interesting keys
     (there are much more keys):
    `texi'
          The texinfo node name.

    `with_section'
          True if associated with a section.
     The result is the node file name $NODE_FILE.

   The other is used to customize the file names associated with each
element, and the name of the file associated with the special elements.

 -- Function Reference: $file element_file_name \%element $type
          $docu_name
     \%ELEMENT is undefined for the special elements (about, overview,
     table of contents, footnotes).  Otherwise it is a hash reference
     with the following interesting keys (there are much more keys):
    `texi'
          The texinfo element name.

    `number'
          The number associated with a section.

    `doc_nr'
          A number incremented whenever a new file should begin, based
          on how the document is split (*note Splitting output::).

    `text'
          The element text.

    `name'
          The element text without section number.
     $TYPE is empty for normal elements.  For the top element it is
     `top', for the table of contents it is `toc', for the overview it
     is `stoc', for the footnotes it is `foot' and for about is
     `about'. If frames are used (*note Page layout options::), the
     function reference is also called for `frame', the frame file
     name, and `toc_frame' the table of content frame file name.
     $DOCU_NAME is the basename of the texinfo manual.  The result is
     the element or special element file name.

target names
------------

Similarly target and id may be set. The "id" is placed where the item
is located, the "target" is used to construct references to that item.
In general they should be equal, but not always, for example in the
default case, the target for a section is the node id.  The following
function reference, is for target items (nodes, anchors, floats):

 -- Function Reference: ($target,$id) node_target_name \%node,
          $default_target, $default_id
     \%NODE is the same as in the `node_file_name' function reference
     above.  $DEFAULT_TARGET is the target already set (it is also in
     `$node->{'target'}'), and $DEFAULT_ID is similarly the id already
     set.

   For element associated with files (which may be nodes), the function
reference is:

 -- Function Reference: ($target,$id) element_target_name \%element,
          $default_target, $default_id
     the \%ELEMENT is the same than in `element_file_name', and
     $DEFAULT_TARGET and $DEFAULT_ID are the target and id already set.

   Placed items (floats, footnotes, index entries, anchors, contents,
shortcontents and headings) file and target may also be set. In the
default case, they should be rightly set, so be careful when changing
them. The following function reference can be used:

 -- Function Reference: ($target, $id, $file) placed_target_file_name
          \%placed_item, \%element, $default_target, $default_id,
          $default_file, $context
     \%PLACED_ITEM is a hash reference describing the placed item, in
     the same vein than above.  the \%ELEMENT is the same than in
     `element_file_name', corresponding with the element containing the
     placed item.  $DEFAULT_FILE, DEFAULT_ID and $DEFAULT_TARGET are
     the file, id and target already set.  $CONTEXT describes the
     context, it is empty in the normal cases, and can also be set to
     `footnotes' if in footnotes, or to `no_associated_element' if the
     placed item is out of any element (typically in `@titlepage',
     `@copying').

   For special elements, the `%misc_pages_targets'  hash is used to set
the target and id. The possibilities for the keys are `Overview',
`Contents', `Footnotes' and `About'.


File: texi2html.info,  Node: External index files,  Prev: File and target names,  Up: Changing the page layout

6.13 Generation of external files for index entries
===================================================

Within the document, `@printindex' commands are expanded as explained
in *note Index list::. In case you want to do something special with
index entries, outside of the document, you should first set the
variable `$IDX_SUMMARY'  true. After that some function reference will
be called for each non empty index. For each index there are 3 function
references, one called for initialization, one called for each index
entry and the last one called for finalization.

 -- Function Reference: index_summary_file_begin $index_name
          $is_printed $manual_name
     $INDEX_NAME is the two letters name for the index.  This function
     is called for each index appearing in the document, before
     `index_summary_file_entry'.  $IS_PRINTED is true if there is a
     `@printindex' for that index.  $MANUAL_NAME is the manual basename.

 -- Function Reference: index_summary_file_entry $index_name
          $entry_text $entry_reference $formatted_entry $texi_entry
          $entry_element_reference $entry_element_header $is_printed
          $manual_name
     This function is called for each entry of an index. INDEX_NAME is
     the name of the index. $ENTRY_TEXT is the entry in plain text,
     $FORMATTED_ENTRY is the index entry formatted, $TEXI_ENTRY is the
     entry with texinfo commands. $ENTRY_REFERENCE is the reference
     placed at the index entry place, in the form `file#id'.
     $ENTRY_ELEMENT_HEADER is the formatted header of the element
     containing the index entry. ENTRY_ELEMENT_HEADER is the reference
     to the beginning of the element containing the index entry, in the
     form `file#id'.  $IS_PRINTED is true if there is a `@printindex'
     for that index.  $MANUAL_NAME is the manual basename.

 -- Function Reference: index_summary_file_end $index_name $is_printed
          $manual_name
     $INDEX_NAME is the two letters name for the index. This function
     is called for each index appearing in the document, after
     `index_summary_file_entry'.  $IS_PRINTED is true if there is a
     `@printindex' for that index.  $MANUAL_NAME is the manual basename.


File: texi2html.info,  Node: Customizing HTML,  Next: Internationalization,  Prev: Changing the page layout,  Up: Top

7 Customizing HTML and text style in init files
***********************************************

Some simple customization may be achieved with the redefinition of the
variables associated with the command line options. For the description
and an explanation of the meaning of these variables, *note Style
options::.

   Other variables and hash entries can be modified in initialization
file to achieve more customization.  Lastly, functions references
corresponding with functions called from the main program and
initialization files may be redefined.

* Menu:

* Three contexts::               there are three different contexts for command
                                 expansion: normal text, preformatted text and
                                 strings.
* Three passes::                 `texi2html' process texinfo in 3 passes.
                                 In almost every cases, you shouldn't care.
* Commands without argument::
* Punctuation commands::         `@:'
* Style and accent commands::
* Anchors images and spaces::    Formatting of `@anchor', `@image', `@sp', `@acronym', `@abbr'
* Text::                         Some characters are processed specially
* Line commands::                Formatting of @-commands taking a line as
                                 argument
* Strings::                      `texi2html' write some strings in the output
                                 different for each languages
* References::
* Alignement commands::           `@center', `@flushleft'...
* Paragraph and preformatted region::
* Complex formats::              `@example', `@display'...
* Lists tables::
* Definitions::
* Headings::
* Special regions::              `@verbatim', `@cartouche', `@quotation'
* Menus::
* Indices::
* Floats and lists of floats::   `@float' and `@listoffloats'
* Footnotes::
* Customizing format opening::   How to run some code when a format is opened
                                 (like `@table', `@flushleft', `@example'...
* Bypassing normal formatting::
* Handling special regions::     Keep `@titlepage', `@documentdescription' or `@copying'
                                 and format `@insertcopying'
* Other and unknown commands::   You can handle specifically other commands


File: texi2html.info,  Node: Three contexts,  Next: Three passes,  Up: Customizing HTML

7.1 Three contexts for expansions: preformatted, normal and string
==================================================================

There are three contexts of interest, one is the normal context, the
other is a special context, called the "preformatted" context and the
last is the string context. The preformatted context occurs when the
spacing between words is kept. This is the case, for example, in
`@display' or `@example' regions, and in menu comments (*note Menus::).
The preformatted regions are usually rendered in `<pre>' elements in
HTML.  The string context occurs when rendering strings without
formatting elements, in comments or titles for example.


File: texi2html.info,  Node: Three passes,  Next: Commands without argument,  Prev: Three contexts,  Up: Customizing HTML

7.2 Three passes: macro expansion, document structure and output
================================================================

There are three passes in `texi2html'. During pass 0, the `@macro' are
expanded, in pass 1 the document structure is gathered and in pass 2
the result is output. In most cases you shouldn't care about it, as
almost all of the output customization is done in pass 2.  Only if you
want to do something before the pass 2 should you care.


File: texi2html.info,  Node: Commands without argument,  Next: Punctuation commands,  Prev: Three passes,  Up: Customizing HTML

7.3 Customizing the formatting of commands without argument
===========================================================

This includes the commands whose name is a nonletter character like
`@@', the commands with lettered characters and braces but whose braces
should be empty, like `@TeX{}', or some commands associated with
accentted letters like `@AA{}'. If there happens to be something within
the braces, it is put after the command, thus
     @TeX{something}
   leads to the same than
     @TeX{} something

   Each of these categories of commands have three associated hashes,
one for normal context, the other for preformatted context and the last
in strings. The keys of the hashes are the command names, the
associated value is the text replacing the command.

   The hashes are:
command type                normal text   preformatted text   string
one nonlettered character   `%simple_map' `%simple_map_pre'   `%simple_map_texi'
nothing in braces           `%things_map' `%pre_map'          `%texi_map'

   To change the HTML resulting from these constructs, just change the
value. For example, if you want `&shy;' to be outputted for `@-' in
normal and preformatted context, write in your init file:

     $simple_map{'-'} = '&shy;';
     $simple_map_pre{'-'} = '&shy;';


File: texi2html.info,  Node: Punctuation commands,  Next: Style and accent commands,  Prev: Commands without argument,  Up: Customizing HTML

7.4 Punctuation commands
========================

The formatting of a punctuation character followed by `' is determined
by the hash `%colon_command_punctuation_characters' . If a `' command
is preceded by a character in th is hash, it is replaced by the
associated value. In the default case, the associated value is also the
character, so this leave the punctuation character unmodified.

   The following function reference may be redefined to handle
characters that are in `%colon_command_punctuation_characters':

 -- Function Reference: $punctuation $colon_command $character
     The $CHARACTER is a character appearing in
     `%colon_command_punctuation_characters' and preceding a `'
     command. In the default case the associated value in
     `%colon_command_punctuation_characters' is returned.


File: texi2html.info,  Node: Style and accent commands,  Next: Anchors images and spaces,  Prev: Punctuation commands,  Up: Customizing HTML

7.5 Customizing accent, style and other simple commands
=======================================================

The formatting of the HTML produced by style and indicatric commands
(`@tt', `@code', `@email', `@titlefont'), the accentuation related
commands taking argument (`@'', `@udotaccent', `@dotless') and
miscalleneous commands (`@email', `@verb', `@w', `@uref', `@math',
`@asis') is controlled by two hash in the default case, `%style_map'  for
normal context, `%style_map_pre'  for preformatted context and
`%style_map_texi'  in string context.

   The key of the hashes are the command names. There are two
possibilities for the values corresponding with two interfaces. The
values may be strings or hash references, and you can chose the
interface depending on the one you prefer. The interface with hash
reference is a bit more flexible but might also be regarded as more
complex. If you don't like either of these interfaces you can define
your own.

   Some remarks are in order:

   * The nonlettered accent commands which following character is
     considered to be the argument (like in `@`a') should be keys of the
     hash `%accent_map'  hash, even if no value is associated.

   * `@math' is handled differently if LaTeX2HTML is used.

* Menu:

* Hash reference interface::
* Define your own interface::


File: texi2html.info,  Node: Hash reference interface,  Next: Define your own interface,  Up: Style and accent commands

7.5.1 An interface for commands formatting with a hash reference
----------------------------------------------------------------

The key of the hashes are the command names. The value determine how
the command argument is formatted. This value is a reference on a hash.
In this hash each key corresponds with a type of information for the
formatting, and the value is the corresponding information. For
example, in

     $style_map{'command'} = { 'args' => ['code'], 'inline_attribute' => 'code'};

   the arguments for `@command' are interpreted as specified by the
values associated with the `args' key while the inline_attribute
associated with that command is `code'.

   The following keys in the hashes associated with each command have
the following meaning:

`args'
     The value associated is a reference on an array. Each element of
     the array defines how the arguments (separated by `,' in the
     texinfo code) for the @-command should be formatted. The
     possibilities are
    `normal'
          for normal text,

    `code'
          for text with `---', `--', `''' and  ```' kept as is,

    `keep'
          if the texinfo should be kept as is, without interpretation
          of the @-commands.

     For example, we have
          $style_map{'email'}->{'args'} = ['code', 'normal'];

     because `---', `--', `''' and  ```' should be kept as is in the
     first argument of `@email'.

     The default is `['normal']'.

`attribute'
     If the associated value is a word, it is considered to be an XML
     element name, and the argument is enclosed between the element
     opening and the element closing. For example, if the value is
     `elem', the resulting HTML is `<elem>ARG</elem>'.

     If the text is a word followed by some text, the word and is
     interpreted as above, and the text is considered to be the
     attributes text of the element.  Thus `elem class="elem"' leads to
     `<elem class="elem">ARG</elem>'.  This works only if there is only
     one argument.

`inline_attribute'
     Like an attribute, except that it is closed at each paragraph end
     and reopened at each beginning of paragraph. This is in fact more
     used than `attribute' since it allows to have well formed HTML/XML.

`inline_begin'
     The associated value is added in front of the text and each time a
     paragraph is restarted while within the command.

`inline_end'
     The associated value is added after the text and each time a
     paragraph is ended while within the command.

`begin'
     The associated value is added in front of the text.

`begin'
     The associated value is added after the text.

`quotes'
     If the corresponding value is true, the result is enclosed in
     quotes `$OPEN_QUOTE_SYMBOL'  and `$CLOSE_QUOTE_SYMBOL' , with
     defaults ``' and `''.

`function'
     The corresponding value should be a function reference. The
     corresponding function is called with the following arguments:

    `$command'
          The @-command name

    `$args'
          A reference on an array containing the arguments of the
          @-command.

    `$command_stack'
          A reference on an array containing the name of the @-commands
          containing the @-command being formatted, latest on top.

    `$state'
          A reference on a hash containing a lot of informations about
          the context of the @-command.

    `$line_nr'
          An opaque structure containing the information about the line
          number of the @-command. It can be used to call
          `main::line_error' or `main::line_warn' with first argument a
          message, and second argument `$line_nr'.


File: texi2html.info,  Node: Define your own interface,  Prev: Hash reference interface,  Up: Style and accent commands

7.5.2 Defining the style and indicatric commands interface
----------------------------------------------------------

If you don't like this scheme, it is possible to change how those
commands are processed by redefining the following function reference:

 -- Function Reference: $resulting_text style $style $command $text
          $args $no_close $no_open $line_nr $state $command_stack
     $COMMAND is the @-command, $STYLE is the value associated with the
     $COMMAND in the `%style_map', `%style_map_pre' or
     `%style_map_texi' hashes.  The $TEXT is the text appearing within
     the @-command braces.  ARGS is a reference on an array contening
     the command arguments formatted according to the same conventions
     than with the reference hash style (provided the value associated
     with the @-command is a hash reference with a $ARG key as
     described in *note Reference hash args::).  If $TEXT is split in
     paragraphs each paragraph is passed through the function, and
     $NO_CLOSE is true if it is not the last paragraph, while $NO_OPEN
     is true if it is not the first paragraph.  $LINE_NR is an opaque
     structure containing the information about the line number of the
     @-command. It can be used to call `main::echo_error' or
     `main::echo_warning' with first argument a message, and second
     argument `$line_nr'.  $STATE is a reference on a hash containing a
     lot of informations about the context of the @-command.
     $COMMAND_STACK is a reference on an array containing the name of
     the @-commands containing the @-command being formatted.



File: texi2html.info,  Node: Anchors images and spaces,  Next: Text,  Prev: Style and accent commands,  Up: Customizing HTML

7.6 Formatting of special simple commands
=========================================

The formatting of special simple commands is controlled by functions. To
customize the output, the corresponding function references should be
redefined. All these functions return a formatted text.

   The formatting of anchors is controlled by `$anchor_label' .

 -- Function Reference: $anchor_label anchor_label $identifier $anchor
     $IDENTIFIER is the anchor identifier, $ANCHORis the `@anchor'
     argument.

   In the default case, it uses a function reference,  `$anchor' 

   that can do a reference target or link. It is especially relevant
for HTML but can be used in other formats, it is a rather common element
of different formats.

 -- Function Reference: $anchor anchor $identifier $href $text
          $attributes
     If $IDENTIFIER is not empty, this value should be used to create a
     target for links (typically associated with a name or id attribute
     in HTML).  The $HREF argument specifies a hpertextual reference
     which should be used to link to a target.  In case both
     $IDENTIFIER and  $HREF are given the text produced should be both
     a target for $IDENTIFIER and a link to $HREF.  $TEXT is the text
     to be displayed.  $ATTRIBUTES are additional attributes.  It
     should be reasonable to assume that the attributes are for a `<a>'
     HTML element.

   To customize the images produced by `@image', the first possibility
is to modify the `@IMAGE_EXTENSIONS' , which holds a list of filename
extensions for image files. It is also possible to redefine the
function used to determine the filename of the image:

     Warning: This description is wrong. The API is still moving, so
     don't count on it.

 -- Function Reference: $filename image_files $basename $extension
     $BASENAME is the first `@image' argument, $EXTENSION is the
     corresponding `@image' argument. This function reference should
     return an array of image filenames without path that the main
     program should look for.

   Last, it is possible to control the formatting of `@image' by
redefining:

 -- Function Reference: $image image $file_path $basename $preformatted
          $file_name $alt_text $width $height $raw_alt $extension
          $working_dir $file_relative_path
     $FILE_PATH is the image file name with the path from the output
     directory to the source manual directory prepended, $BASENAME the
     file name without extension (the first `@image' argument).
     $PREFORMATTED is true if the image appears in preformatted text.
     $FILE_NAME is the file name without path but with extension.
     $ALT_TEXT is the alternate text, it may be undefined. $WIDTH and
     $HEIGHT are the corresponding arguments of `@image', $RAW_ALT is
     the unmodified alt argument of `@image' and $EXTENSION holds the
     corresponding `@image' argument.  $WORKING_DIR is the path to
     working dir relative to the output directory. $FILE_RELATIVE_PATH
     is the file name relative to the $WORKING_DIR.

   The formatting of `@sp' is controlled by:

 -- Function Reference: $sp sp $number $preformatted
     $NUMBER is the numeric argument of `@sp'.  $PREFORMATTED is true
     if the `@sp' appears in preformatted text.

   The formatting of `@acronym' and `@abbr' is controlled by:

 -- Function Reference: $acronym acronym_like $acronym_texi
          $acronym_text $with_explanation \@explanation_lines
          $explanation_text $explanation_simply_formatted
     $ACRONYM_TEXI is the acronym argument with texinfo @-commands,
     $ACRONYM_TEXT is formatted.

     The other arguments are related with the explanation, the second
     arg of the acronym. $WITH_EXPLANATION is true if the second
     argument of the acronym command is present. If an explanation
     exists, coming from previous `@acronym' or as an arg of this
     command, the other args are defined: \@EXPLANATION_LINES is a
     reference on an array containing the simply fomatted explanation
     lines, $EXPLANATION_TEXT is the explanation text formatted,
     $EXPLANATION_SIMPLY_FORMATTED is the explanation with a light
     formatting, unabling in HTML (or XML) the explanation to be in an
     attribute.


File: texi2html.info,  Node: Text,  Next: Line commands,  Prev: Anchors images and spaces,  Up: Customizing HTML

7.7 Processing special characters in text
=========================================

Some characters are processed especially in text: `---', `--', ```' and
`'''. This is done only if in normal text and not in some commands
(`@code', `@env'...). A function reference is called to process the
text and should take care of those constructs.  It may also be used to
transform the text, for example set it in upper case if it is in `@sc'.
This function should also take care of protecting special characters

 -- Function Reference: $processed_text normal_text $text $in_raw_text
          $in_preformatted $in_code $in_math $in_simple $command_stack
     The function processes $TEXT and returns $PROCESSED_TEXT.  The
     other arguments give some information about the context of the
     text.  $IN_RAW_TEXT is true if the text appears in special place
     where there is no formatting, typically in comments.
     $IN_PREFORMATTED is true if in a preformatted environemnt, and
     $IN_CODE is true if in a special command like `@code', `@env' where
     `---', `--', ```' and `''' should not be touched. $IN_MATH is true
     if in `@math'.  $IN_SIMPLE is true if in string context.
     $COMMAND_STACK is an array containing the name of the formatting
     @-command that enclose the text.

     In the default case the `---', `--', ```' and `''' constructs are
     expanded if needed and the text is upper-cased if in `@sc'.
     Special characters (`&', `"', `<' and `>' in HTML) are protected
     if needed.

   Some characters are special, for example we have  `&', `"', `<' and
`>' in HTML. In some cases some pieces of text don't go through the
above function, but still needs to be protected to appear in text.
This is done by the function associated with the function reference

 -- Function Reference: $protected_text protect_text $text
     The function processes the unprotected text $TEXT and returns the
     resulting protected text $PROTECTED_TEXT.

   Empty lines are processed by the following function reference, which
could be usefull if empty lines are to be removed for example

 -- Function Reference: $resulting_text empty_line $empty_line $state
     This function processes an $EMPTY_LINE and returns the resulting
     text $RESULTING_TEXT. $STATE is a structure that holds informations
     about the state of the parsing.  Empty lines are left as is by
     default except right after a definition @-command.


File: texi2html.info,  Node: Line commands,  Next: Strings,  Prev: Text,  Up: Customizing HTML

7.8 Customizing of line command output
======================================

@-commands that appear on a line and take the line as argument may be
formatted especially, if they are in the `%line_command_map' . In that
case the following function reference is used to format the @-command:

 -- Function Reference: $resulting_text line_command $command $arg_text
          $arg_texi $state
     $COMMAND is the @-command. $ARG_TEXT is the @-command formatted
     argument, $ARG_TEXI is the @-command argument without any
     formatting.  $STATE is a structure that holds informations about
     the state of the parsing.  The resulting text is $RESULTING_TEXT.

   In the default case, @-commands appearing in `@titlepage', `@title',
`@subtitle', `@author' are formatted by this function.


File: texi2html.info,  Node: Strings,  Next: References,  Prev: Line commands,  Up: Customizing HTML

7.9 Customizing strings written by `texi2html'
==============================================

`texi2html' writes some strings in the generated document at various
places, at the page footers, on the help page, for special section
headings, buttons alt text and so on. These strings are customizable.
The string chosen depends on the language of the document (set by
`--document-language' , `$DOCUMENTLANGUAGE'  or `@documentlanguage').
This is the basis for internationalization as it allows for strings
translations.

   The Gettext framework is used for those strings. libintl-perl is
used as a gettext implementation, and more precisely the pure perl
implementation is used, to be sure to have a consistent gettext-like
implementation which is not the case if the system one is used.
libintl-perl is shipped in texi2html and installed to be sure that it
is available. It is also possible to use the system libintl (currently
decided at build-time).

   The texi2html_document domain is used for those strings. These
strings are texinfo strings, which may have @-commands, and the
variable parts of the strings are denoted by `{arg_name}' as is common
practice for perl gettext. For more on internationalization, see *note
Internationalization::.

* Menu:

* Old style translations::


File: texi2html.info,  Node: Old style translations,  Up: Strings

7.9.1 Old style translations
----------------------------

A gettext-like framework appeared in version 5.0.  For reference the
previous handling of strings (up to 1.82) is still documented here.
With that system, the strings are found in a hash reference,
`$LANGUAGES' . Each key is a language code. The associated value is
also a hash reference. The key is an english string and the associated
value is the string replacing the english string, if present. For
example, we have

     $LANGUAGES->{'fr'} = {
                   ' Up ' => 'Plus haut',
     };

   It means that whenever the string ` Up ' is to be written and the
language is `fr', `Plus haut' is written. It is possible to customize
the english strings by redefining the `en' language hash.

   When a string contains a substring like `{' NAME `}' it means that
the string will be expanded by `texi2html'. For example, if we have

     $LANGUAGES->{'fr'} = {
                   'See {node_file_href}' => 'Voir {node_file_href}',
     };

   `{node_file_href}' will be expanded to an href for a node in a file
by `texi2html' in the string.

   When a `@documentlanguage' appears in the document and the language
wasn't set on the command line, it may be convenient for the user to
redefine some variables based on the new language. There is a function
reference that may be used for that, it is called each time  a
`@documentlanguage' is encountered:

 -- Function Reference: $translate_names
     This function is called each time `@documentlanguage' is
     encountered and the language wasn't set on the command line. It
     should be used to retranslate some strings based on the new
     language.


File: texi2html.info,  Node: References,  Next: Alignement commands,  Prev: Strings,  Up: Customizing HTML

7.10 References
===============

* Menu:

* Reference to external manual::
* Internal reference::


File: texi2html.info,  Node: Reference to external manual,  Next: Internal reference,  Up: References

7.10.1 Reference to external manual
-----------------------------------

The references are produced with two function references, one for the
hypertextual reference construction, the other for the full reference to
external manual.

 -- Function Reference: $href external_href $node $node_identifier
          $xml_node_identifier $manual_file_name
     $NODE is the node name, with @-commands. $NODE_IDENTIFER is the
     node name mapped to an identifier acceptable as a file name.
     $XML_NODE_IDENTIFIER is the node name mapped to an identifier
     acceptable as an XML identifier.  Those identifiers are built as
     explained in *note HTML Xref: (texinfo)HTML Xref, thus allowing
     for cross references to external manuals. $FILE is the manual or
     file name of the external reference. This function should return an
     href leading to the external manual.

     The default for this function is to make a reference compatible
     with `makeinfo'  (*note HTML Xref: (texinfo)HTML Xref.).

 -- Function Reference: $text external_ref $command $section $book
          $file $href $cross_ref_name \@args_texi \@formatted_args $node
     This function formats a reference to an external texinfo manual.
     The $COMMAND is the ref command (`ref', `xref' or `pxref', in
     text, at sentence beginning or in parenthesis).  The optionnal
     $SECTION argument is the section in the book and  BOOK is the book
     title.  $NODE_AND_FILE is manual file name. $HREF it an
     hypertextual reference to the distant manual constructed using the
     above function.  $CROSS_REF_NAME is an optionnal cross reference
     name appearing in the reference command.  \@ARGS_TEXI is a
     reference on an array containing the @-command arguments, not
     formatted, with \@FORMATTED_ARGS contains the formatted @-command
     arguments. $NODE is the node name, formatted.  This function
     returns the text corresponding with the external html manual
     reference.  This function returns the full formatted text of the
     external reference.


File: texi2html.info,  Node: Internal reference,  Prev: Reference to external manual,  Up: References

7.10.2 Reference to an internal node
------------------------------------

A function reference is available for internal references.

 -- Function Reference: $text internal_ref $command $href $short_name
          $name $is_section \@args_texi \@formatted_args
     This function formats a reference to a node in the current manual.
     The $COMMAND is the ref command (`ref', `xref' or `pxref', in
     text, at sentence beginning or in parenthesis).  $HREF it an
     hypertextual reference linking to the corresponding node or
     section. $SHORT_NAME and $NAME hold the text for the reference but
     $SHORT_NAME can be the node name which is assumed to be shorter
     than the section name.  $IS_SECTION is a boolean true if the
     reference is a reference to a section.  \@ARGS_TEXI is a reference
     on an array containing the @-command arguments, not formatted,
     with \@FORMATTED_ARGS contains the formatted @-command arguments.
     This function returns the full formatted text of the internal
     reference.


File: texi2html.info,  Node: Alignement commands,  Next: Paragraph and preformatted region,  Prev: References,  Up: Customizing HTML

7.11 Commands used for centering and flushing of text
=====================================================

When a command controlling the alignement of text is used (`@center',
`@flushleft' and `@flushright'), the main program takes care of opening
and closing paragraphs. The alignement commands are the key of the
`%paragraph_style'  hash.  The value is used in the function doing the
formatting of the paragraphs.  *Note Paragraph and preformatted
region::.

   A function references allows for a customization of the formatting
of the text appearing in the command block.

 -- Function Reference: $result paragraph_style_command $command $text
     $COMMAND is the command name, $TEXT is the text appearing within
     the command. This function returns a formatted text.  The default
     is to return the text unmodified.


File: texi2html.info,  Node: Paragraph and preformatted region,  Next: Complex formats,  Prev: Alignement commands,  Up: Customizing HTML

7.12 Formatting (or not) a paragraph and a preformatted region
==============================================================

* Menu:

* Paragraph and preformatted formatting::
* Avoiding paragraphs::


File: texi2html.info,  Node: Paragraph and preformatted formatting,  Next: Avoiding paragraphs,  Up: Paragraph and preformatted region

7.12.1 Paragraph and preformatted region formatting
---------------------------------------------------

The formatting of a paragraph region or a preformatted region, is
controlled by function references:

 -- Function Reference: $paragraph_text paragraph $text $alignement
          $index $formatting_command $formatting_command_formatted
          \$paragraph_number $format $item_number $enumerate_style
          $number $command_stack_at_end $command_stack_at_begin
     This function formats a paragraph. $TEXT is the text of the
     paragraph, $ALIGNEMENT is the empty string when no alignement
     command has been seen, otherwise it is the current alignement
     command name.  *Note Alignement commands::.  $INDENT holds
     `noindent' or `indent' if the corresponding @-command appeared in
     the paragraph.  $COMMAND_STACK_AT_END and $COMMAND_STACK_AT_BEGIN
     are arrays containing the opened @-commands at end and at
     beginning of the paragraph, latest on top.

     The remaining arguments are usefull when the paragraph appears
     within a list or table. It is usefull whenever the paragraph has
     to be formatted differently when appearing in such environments.
     Moreover in that case the format command (`@itemize'...)  may have
     an associated formatting command.  $FORMATTING_COMMAND is this
     formatting command (like `@minus').  $FORMATTING_COMMAND_FORMATTED
     is the command formatted in html in case the formatting command is
     a leading command (like `@minus') which should be leading the
     first paragraph.  \$PARAGRAPH_NUMBER is a reference on the number
     of paragraphs in that format command. The corresponding variable
     should be increased when a paragraph is added. $FORMAT is the
     format command.  *Note Table and list items::.

     If the $FORMAT is an enumerate, $ITEM_NUMBER is the number of the
     item in the list, $ENUMERATE_STYLE is the argument of the
     enumerate, $NUMBER is the number or letter corresponding with this
     item.

 -- Function Reference: $preformatted_text preformatted $text $style
          $region_name $formatting_command
          $formatting_command_formatted \$preformatted_number $format
          $item_number $enumerate_style $number $command_stack_at_end
          $command_stack_at_begin
     This function formats a preformatted region. $TEXT is the text of
     the preformatted region, $STYLE is the css style associated with
     that preformatted region (*note css::). $REGION_NAME is the name
     of the command opening the preformatted region (`example'..., see
     *note Complex formats::) or a identifier for the preformatted
     context (for example `menu-comment', see *note Menus::).  The
     alignment commands are not taken into account, as the spaces are
     preserved in preformatted regions, you should flush and center by
     hand.  $COMMAND_STACK_AT_END and $COMMAND_STACK_AT_BEGIN are arrays
     containing the opened @-commands at end and at beginning of the
     preformatted region, latest on top.

     The remaining arguments are usefull when the preformatted region
     appears within a list or table. It is usefull whenever the
     preformatted region has to be formatted differently when appearing
     in such environments.  Moreover in that case the format command
     (`@itemize'...)  may have an associated formatting command.
     $FORMATTING_COMMAND is this  formatting command (like `@minus').
     $FORMATTING_COMMAND_FORMATTED is the command formatted in html in
     case the formatting command is a leading command (like `@minus')
     which should be leading the first preformatted region.
     \$PREFORMATTED_NUMBER is a reference on the number of preformatted
     regions in that format command. The corresponding variable should
     be increased when a preformatted region is added. $FORMAT is the
     format command.  *Note Table and list items::.

     If the $FORMAT is an enumerate, $ITEM_NUMBER is the number of the
     item in the list, $ENUMERATE_STYLE is the argument of the
     enumerate, $NUMBER is the number or letter corresponding with this
     item.


File: texi2html.info,  Node: Avoiding paragraphs,  Prev: Paragraph and preformatted formatting,  Up: Paragraph and preformatted region

7.12.2 Avoiding paragraphs in formats
-------------------------------------

It is possible to avoid that a format closes the previous paragraph or
preformatted region and reopens one, by putting the format command in a
hash, `%format_in_paragraph'  with a true value. This only makes sense
for few commands since otherwise the nesting of formats and paragraphs
could become wrong.

   If the value of `%no_paragraph_commands'  associated with a command
is true, no paragraph is started by the command if outside of a
paragraph (after an empty line, for example). If the value is set to 0,
it will start a paragraph. If the value is not set, reasonable defaults
are set.

   It is also possible to stop a paragraph when an @-command happens by
putting the @-command in the `%stop_paragraph_command'  hash associated
with a true value.


File: texi2html.info,  Node: Complex formats,  Next: Lists tables,  Prev: Paragraph and preformatted region,  Up: Customizing HTML

7.13 Formatting of complex formats (`@example', `@display'...)
==============================================================

Here we see how a whole complex format is formatted. For the formatting
of the text, see *note Paragraph and preformatted region::.

   The formatting of the complex formats is ultimately controlled by a
function, however the default for this function uses a hash and
changing the hash values should be enough in most cases. This hash is
called `%complex_format_map' . It has a key for each of the complex
format commands (`example', `smallexample', `lisp', `smalllisp',
`display', `smalldisplay', `format', `smallformat').

   The associated value is a reference on a hash. The keys are:

`begin'
     The `begin' should lead to the beginning of the formatted HTML.

`end'
     The `end' should lead to the end of the formatted HTML.

`class'
     The HTML class. If not defined, the command name.

`pre_style'
     The preformatted style. If not defined the corresponding CSS style
     is used.

`style'
     If the associated value is `code', the format is assumed to be in
     code style, where with `---', `--', `''' and  ```' kept as is.  If
     the key is absent the format  inherits the code style and the font
     from the enclosing context.
   The enclosed text will be formatted as described in *note Paragraph
and preformatted region::, and the name of the complex format will be
available to the function formatting the text.

   If you aren't satisfied with this scheme, you can redefine the
following function reference for a better control over the complex
format formatting:

 -- Function Reference: $complex_format_text complex_format
          $format_name $preformatted_text
     $FORMAT_NAME is the complex format name, $PREFORMATTED_TEXT is the
     text allready formatted as described in *note Paragraph and
     preformatted region::.  This function returns the whole complex
     format.


File: texi2html.info,  Node: Lists tables,  Next: Definitions,  Prev: Complex formats,  Up: Customizing HTML

7.14 Customizing the formatting of lists and tables
===================================================

The formatting of lists and tables is done at two levels:
   * At the level of the whole region (table or list),

   * At the level of the individual items, rows or cells of the list or
     table.

* Menu:

* Table and list items::
* Whole table list::


File: texi2html.info,  Node: Table and list items,  Next: Whole table list,  Up: Lists tables

7.14.1 Formatting individual table and list items
-------------------------------------------------

In texinfo it is possible to give `@itemize' or table command (hereafter
called a "format command") a "formatting command".  For example
`@minus' is the formatting command here:
     @table @minus

   The default is to apply the command to the text item, however it is
possible to avoid it.  The hash `%special_list_commands'  has an entry
for each of the format command. Each of these entries is a hash
reference. If a formatting command is a key of the hash reference, then
the formatting command is not applied to the text item for that format
command. For example, if we have:

     $special_list_commands{'itemize'} = { 'bullet' => '' };

   and we have the following `@itemize':
     @itemize @bullet
     @item an item
     @end itemize

   then `@bullet' will not be applied to `an item'.

   More control of the text before formatting of the line or the item is
achieved with the following function reference:

 -- Function Reference: ( $result_line, $open_command)
          format_list_item_texi $format $line $prepended $command
          $number
     The $FORMAT is the list or table @-command, $LINE is the item
     line, $COMMAND is the "format command", $PREPENDED is set to the
     text folllowing the "format command" on the format argument line.
     The $NUMBER is the number of the item, as set in `@enumerate'.
     The $RESULT_LINE replaces the item argument.  $OPEN_COMMAND is an
     obsolete return code that can be set to anything.

_lists_
     The items of lists are formatted using the following function
     reference:

      -- Function Reference: $list_item list_item $text $format
               $command $formatted_command $item_number
               $enumerate_style $number $prepended_texi
               $prepended_formatted
          This function formats the text between `@item' commands. $TEXT
          is the text corresponding with the item. $FORMAT is the type
          of format, `itemize' or `enumerate'. $COMMAND is the
          formatting command given in argument to `@itemize',
          $FORMATTED_COMMAND is this command formatted if it is a
          leading command, like `@minus'.

          If the $FORMAT is an enumerate, $ITEM_NUMBER is the number of
          the item in the list, $ENUMERATE_STYLE is the argument of the
          enumerate, $NUMBER is the number or letter corresponding with
          this item.

          If the $FORMAT is an itemize, $PREPENDED_TEXI is the text that
          appeared on the itemize line, maybe after the formatting
          command (if any), and $PREPENDED_FORMATTED is the
          corresponding text, formatted.

_two column tables_
     The two columns tables (`@table', `@ftable' and `@vtable'), items
     are formatted using two function references, one for the first
     line located on the `@item' line corresponding with the first
     column, the other for the text appearing on the following lines,
     corresponding with the second column text.

      -- Function Reference: $table_item table_item $item_text
               $index_label_text $format $command $command_stack
               $item_command $formatted_index_entry
          This function is used to format the text on the `@item' line.
          $ITEM_TEXT is the text line. In case there is an index entry
          associated with the `@item' (as with `@ftable' and
          `@vtable'), $INDEX_LABEL_TEXT is the text inserted at the
          place where an index entry appears. *Note Index entry place::.
          $FORMAT is the type of format, `table', `ftable' or `vtable'.
          $COMMAND is the formatting command given in argument to the
          table format command.  $COMMAND_STACK is an array with all
          the @-commands opened, latest on top.  $ITEM_COMMAND is the
          item command, `@item' or `@itemx'.  $FORMATTED_INDEX_ENTRY is
          the index entry formatted.

      -- Function Reference: $table_line table_line $text
          This function is used to format the text on the lines
          following the `@item' line. $TEXT is the corresponding text.

_multitable_
     The multitable elements formatting is controlled by the functions
     associated with two function references. One for a cell, and the
     other for a row.

      -- Function Reference: $multitable_cell cell $text $item_command
               \@columnfractions \@prototype_row \@prototype_lengths
               $column_number
          This function is used to format the text of a multitable
          cell, the text following a `@item' or a `@tab'.  $TEXT is the
          corresponding text. $ITEM_COMMAND is the command used to
          introduce the row, such that it is possible to distinguish
          between `@item' and `@headitem'.  \@COLUMNFRACTIONS is a
          reference on an array containing the `@columnfraction'
          arguments, if any, and \@PROTOTYPE_ROW is a reference on an
          array containing the row prototypes given on the
          `@multitable' line, if any.  \@PROTOTYPE_LENGTHS array
          contains the lengths of the row prototypes formatted.
          $COLUMN_NUMBER is the maximal number of columns.

      -- Function Reference: $multitable_row row $text $item_command
               \@columnfractions \@prototype_row \@prototype_lengths
               $column_number
          This function is used to format a multitable row. $TEXT is
          the row text, with cells allready formatted with the `$cell' 

          function reference. $ITEM_COMMAND, \@COLUMNFRACTIONS,
          \@PROTOTYPE_ROW, \@PROTOTYPE_LENGTHS and $COLUMN_NUMBER are
          the same than in the function reference above.


   In the default case, this function is interlinked with
`$begin_format_texi' (*note Customizing format opening::) and
`@multitable' formatting since a stack of possible nested multitables
is kept to know the cell number.


File: texi2html.info,  Node: Whole table list,  Prev: Table and list items,  Up: Lists tables

7.14.2 Formatting of a whole table or list
------------------------------------------

If the Texinfo command is a key of the `%format_map' , the associated
value is used to specify the formatting of the construct, otherwise a
function is called.  The value in `%format_map' associated with a
command is interpreted similarly with values associated with more
simpler commands:

   * If the text is a word, it is considered to be an HTML element
     name, and the whole table or list is enclosed between the element
     opening and the element closing.

   * If the text is a word followed by some text, the word and is
     interpreted as above, and the text is considered to be the
     attributes text of the element.

   * If the text is empty nothing is added to the text.

   In case the `%format_map' isn't used, a function reference called
`$table_list' should be redefined, the associated function will be
called each time a command isn't found in `%format_map'.

 -- Function Reference: $whole_table_list table_list $format_command
          $text $command $formatted_command $item_nr $enumerate_style
          $prepended_texi $prepended_formatted \@columnfractions
          \@prototype_row \@prototype_lengths $column_number
     $FORMAT_COMMAND is the Texinfo command name, $TEXT is the
     formatted items. $COMMAND is the "format command" given in argument
     to the format command, $FORMATTED_COMMAND is the same, but
     formatted.  $PREPENDED_TEXI is the remaining text on the format
     command line, $PREPENDED_FORMATTED is the same, but formatted.
     Only relevant in `@enumerate', $ITEM_NR is the item number, and
     $ENUMERATE_STYLE is the `@enumerate' style. Only relevant in
     `@multitable' \@COLUMNFRACTIONS is a reference on an array
     containing the `@columnfraction' arguments, if any,
     \@PROTOTYPE_ROW is a reference on an array containing the row
     prototypes given on the `@multitable' line, if any,
     \@PROTOTYPE_LENGTHS array contains the lengths of the row
     prototypes formatted and $COLUMN_NUMBER is the maximal number of
     columns.

   If you still want to use `%format_map'  but differently from the
default, it is possible to redefine the following function reference:

 -- Function Reference: $whole_table_list format $command $format $text
     $COMMAND is the @-command, $FORMAT is the entry associated with
     $COMMAND in `%format_map'. $TEXT is the formatted items.


File: texi2html.info,  Node: Definitions,  Next: Headings,  Prev: Lists tables,  Up: Customizing HTML

7.15 Definition commands formatting
===================================

The formatting of definition commands is controlled by a main hash, 3
strings and another hash, and and five functions. The mainhash
describes how the text on the definition line is interpreted, the
functions control the formatting of the definition line and the
definition function text.

* Menu:

* Definition line::
* Definition formatting::


File: texi2html.info,  Node: Definition line,  Next: Definition formatting,  Up: Definitions

7.15.1 Customizing the interpretation of a definition line
----------------------------------------------------------

The keys of the hash `%def_map'  are definition command names.  There
are two types of entries:

   * If the command is a shortcut for another definition command the
     value is a text and the definition command is replaced by the text.

     For example if we have:
          $def_map{'deftruc'} = '@defvr {A truc}';

     and a line like
          @deftruc var

     the line will be transformed in
          @defvr {A truc} var

   * If the command isn't a shortcut, it is associated with an array
     reference. The first element is `f', `v' or `t' corresponding with
     the index type (`f' for function, `v' for variable, `t' for type).

     The remaining of the array describes how to interpret the text
     following the definition command on the definition command line.
     The entry item specify what corresponds with the next bracketed
     item or word. Currently the possibilities are `category', `name',
     `type', `class', `arg' and `argtype'.  `arg' means that the
     arguments are not mixed with type definitions, with `argtype'
     types are mixed with definitions. When there is no `arg' nor
     `argtype' it is the same than  `argtype' (like makeinfo).

     For example if we have
          def_map{'defvr'} = [ 'v', 'category', 'name' ];

     The first bracketed item following `@defvr' is considered to be
     the category and the next one is the name. The index associated
     with the definition line is the variables index.

   Some characters are special with regard with definition parsing, they
are delimiters, the can have a role in definition argument
determination, and also hae a special meaning in arguments parsing.
This is not very well documented in the texinfo manual, so it is
subject to change. Strings allow to determine the delimiters:

`$def_argument_separator_delimiters'
     Characters that separate arguments, currently `()[],'.

`$def_always_delimiters'
     Character that are always delimiters, if they appear in a type or a
     parameter, `()[]'.

`$def_in_type_delimiters'
     Character that are considered as delimiters only if in a type. In
     a parameter they are part of the parameter.


File: texi2html.info,  Node: Definition formatting,  Prev: Definition line,  Up: Definitions

7.15.2 Customization of the definition formatting
-------------------------------------------------

Five functions are used when formatting a definition command:

*category name*
      -- Function Reference: $category definition_category $category
               $class $style $command
          This function precise a category name associating a class
          $CLASS (if given) with $CATEGORY. The $STYLE of the
          definition may be `f', for function, `v', for variable or `t',
          for type. The $COMMAND is the definition @-command.

      -- Function Reference: $entry definition_index_entry $name $class
               $style $command
          This function precise a name associating a class $CLASS (if
          given) with $NAME. This is used to do an index enntry
          associated with th edefinition command. The $STYLE of the
          definition may be `f', for function, `v', for variable or `t',
          for type. The $COMMAND is the definition @-command.

*formatting of the definition line*
      -- Function Reference: $line def_line $class_category_class $name
               $type $arguments $index_label \@arguments_array
               \@arguments_type_array \@unformatted_arguments_array
               $command $class_name $category $class $style
               $original_command
          This function formats the definition line. $CLASS_CATEGORY is
          the category formatted with `$definition_category' , $NAME,
          $TYPE and ARGUMENTS are the element of the definition line.
          $INDEX_LABEL is the text inserted at the place where an index
          entry appears.  *Note Index entry place::.  \@ARGUMENTS_ARRAY
          is an array holding the definition arguments, formatted.
          \@ARGUMENTS_TYPE_ARRAY holds the type of the definition
          arguments, like `name', `type' and similar arguments,
          `paramtype'.  `delimiter' and  `param'.
          \@UNFORMATTED_ARGUMENTS_ARRAY holds the arguments without
          @-command substitution. $COMMAND is the definition command,
          after substitution.  $CLASS_NAME is the class applied on
          name, formatted as specified in `definition_index_entry'.
          $CATEGORY and $CLASS are the corresponding arguments. $STYLE
          corresponds with the index style, as explained above.
          $ORIGINAL_COMMAND is the unmodified definition @-command.

*definition text*
      -- Function Reference: $definition_text def_item $text
          This function formats the definition text, $TEXT.

*the whole definition*
      -- Function Reference: $definition def $text
          This function formats the whole definition. The definition
          line and text formatted by the above functions are in $TEXT.



File: texi2html.info,  Node: Headings,  Next: Special regions,  Prev: Definitions,  Up: Customizing HTML

7.16 Customizing headings formatting
====================================

A function controls the formatting of sectioning element headings, with
the corresponding function reference:

 -- Function Reference: $heading_text heading \%element_reference
     The \%ELEMENT_REFERENCE is a reference on a hash corresponding
     with the sectioning element. The following keys are of interest:
    `text'
          The heading text

    `text_nonumber'
          The heading text without section number

    `node'
          true if the sectioning element is a node without associated
          structuring command

    `level'
          The level of the element in the document tree. `0' is for
          `@top', `1' for `@chapter' and so on

    `tag_level'
          the sectioning element name, with `@raisesections' and
          `@lowersections' taken into account

    `top'
          true if it is the top element

   It is also possible to customize the heading text with section number
with the following function reference (called for headings and nodes):

 -- Function Reference: $result_texi heading_texi $heading_command
          $heading $number
     $HEADING_COMMAND is the sectioning @-command of that heading.
     $HEADING is the texinfo for that heading. $NUMBER is the heading
     number classicaly computed with dots between numbers, and letters
     for top level appendix numbering. This function should return the
     texinfo text corresponding with the numbered heading.

   The label associated with the heading that can appear before the
heading itself and even before the navigation panel is customized with
the following function reference:

 -- Function Reference: $element_label element_label $identifier
          \%element_reference $command $unformatted_line
     $IDENTIFIER is the identifier associated with the heading.
     \%ELEMENT_REFERENCE is the same as above. $COMMAND is the @-command
     appearing on the line, and $UNFORMATTED_LINE is the line,
     unformatted.

   Additionally, for `@node' and sectionning @-commands the formatting
of the label, navigation panel and heading is controlled by:

 -- Function Reference: $element_heagin_text element_heading
          \%element_reference $command $command_texi_arg $formatted_arg
          $in_preformatted $one_section $element_heading $first_in_page
          $is_top $previous_is_top $unformatted_line $element_id
          $new_element
     \%ELEMENT_REFERENCE is the same as above. $COMMAND is the heading
     @-command.  $COMMAND_TEXI_ARG is the argument of the @-command,
     unformatted. $FORMATTED_ARG is is the argument of the @-command,
     formatted. $IN_PREFORMATTED is true if in preformatted
     environment. $ONE_SECTION is true if there is only one section.
     $FIRST_IN_PAGE is true if this is the first heading  in a page.
     $IS_TOP is true if the heading is considered as a top element
     heading.  $PREVIOUS_IS_TOP is true if the previous helement was a
     top element.  $UNFORMATTED_LINE holds the whole line, unformatted.
     $ELEMENT_ID is the id of the heading. $NEW_ELEMENT is true if the
     heading is the first of an element block.


File: texi2html.info,  Node: Special regions,  Next: Menus,  Prev: Headings,  Up: Customizing HTML

7.17 Formatting of special regions (`@verbatim', `@cartouche', `@quotation')
============================================================================

Regions corresponding with raw text, like `@verbatim', `@html', `@tex'
or the content of the file given in `@verbatiminclude' argument are
formatted according to the following function reference:

 -- Function Reference: $raw_region raw $command $text
     $COMMAND is the command name, $TEXT is the raw text.  In the
     default case, if $COMMAND is `verbatiminclude' the text is the
     content of the `@verbatiminclude' file argument.

   If LaTeX2HTML is used, `@tex' regions are handled differently,
(*note Bypassing normal formatting::).

   The `@cartouche' command formatting is controlled by the function
reference:

 -- Function Reference: $cartouche cartouche $text
     $TEXT is the text appearing within the cartouche.

   The formatting of `@quotation' and `@smallquotation' is controlled
by two function references.  The first one is usefull in case the
`@quotation' has an argument, as it allows to prepend a string to the
quotation text:

 -- Function Reference: $prepended_string quotation_prepend_text
          $command $text
     $COMMAND is the @-command.  $TEXT is the argument of the quotation
     with @-commands not interpreted. This function can return a string
     which will be prepended to the quotation text.

   The whole quotation is formatted by:

 -- Function Reference: $quotation quotation $command $quotation_text
          $argument_text $argument_text_texi
     $COMMAND is the @-command.  $QUOTATION_TEXT is the quotation text,
     formatted, with the text prepended by the function above.
     $ARGUMENT_TEXT is the argument of the `@quotation', formatted.
     $ARGUMENT_TEXT_TEXI is the argument of the `@quotation', simply
     formatted.


File: texi2html.info,  Node: Menus,  Next: Indices,  Prev: Special regions,  Up: Customizing HTML

7.18 Menu formatting
====================

There are two possibilities for menu formatting:

   * format the whole menu in a preformatted environment, like in *note
     Complex formats::;

   * format the menu in table with more specialized formatting for each
     part of the menu;

   The simple formatting in a preformatted is used if `$SIMPLE_MENU'  is
true, otherwise the format with tables is used (this is the default).

   If `$USE_ACCESSKEY'  is set, the `accesskey' attribute is used in
anchors. In that case the `%BUTTONS_ACCESSKEY' 

   hash is used for the access key.

   To understand how the formatting of menus is controlled, the
different parts of a menu are first described, then how to control the
formatting of each of these parts, for each possible formatting.

* Menu:

* Menu parts::                  A menu consists in menu entry and menu
                                comments
* Menu components formatting::
* Simple menu formatting::      formatting of a whole menu in a simple
                                preformatted environement
* Table menu formatting::       formatting of a whole menu in a
                                table environment


File: texi2html.info,  Node: Menu parts,  Next: Menu components formatting,  Up: Menus

7.18.1 The structure of a menu
------------------------------

In `texi2html', a menu is considered to be composed of 2 parts, the
"menu entries" and the "menu comments". Menu entries are further
divided in an "entry link" and optionnaly an "entry description".  The
entry link consists in a node name and an optionnal menu entry name.

   A menu entry begins with `*' at the beginning of the line. It begins
with the entry link, followed by the description. The description spans
until the next menu entry, or an empty line not contained within a
command block which begun in the description. An empty line or starts a
menu comment, which spans until the next menu entry.

   Here is an illustration of these rules:

     @menu
     * entry name: node name.        description begins
        description continues
     * another menu entry::
        description begins
                         description continues

        A menu comment, after an empty line

     * node::                        description begins
     still in description.

     * last entry::         description begins @emph{text

     of the description, even if there is an empty line,
     because we are in @emph}.
     @end menu


File: texi2html.info,  Node: Menu components formatting,  Next: Simple menu formatting,  Prev: Menu parts,  Up: Menus

7.18.2 The formatting of the different menu components
------------------------------------------------------

If in a preformatted context (and `$SIMPLE_MENU' isn't set), the menu
link and description are put in the same preformatted environment.
This can be avoided with `$SEPARATE_DESCRIPTION' .

   Two function references are associated with the formatting of the
different parts of a menu:

 -- Function Reference: $link menu_link $section \%state $href $node
          $name $ending $has_name $command_stack $preformatted
     $SECTION is the section name corresponding with the link, $HREF is
     the link hypertextual reference. $HREF may be absent. \%STATE
     holds informations about the current context.  $NODE is the node
     name, $NAME is the name of the node. $ENDING is the text ending
     the link entry, in general `::' followed by some spaces.
     $HAS_NAME is true if the entry has an explicit name, otherwise
     $NAME has been constructed using the formatted node name.
     $COMMAND_STACK is an array containing the commands enclosing the
     menu link. It is used in the default case to detect if the menu
     link is right in the `@menu' or not, since if it is not right
     below the menu the formatting is simpler.  $PREFORMATTED is true
     if in preformatted context.  *Note Three contexts::.

   This command is not called if `$SIMPLE_MENU' is set.

 -- Function Reference: $description menu_description $description_text
          \%state $element_text
     $DESCRIPTION_TEXT is the text of the menu description.  The
     formatted link is also here if in preformatted context and
     `$SEPARATE_DESCRIPTION' is not set.  \%STATE should be used
     similarly than for the menu link. $ELEMENT_TEXT is the heading of
     the element associated with the node.  $COMMAND_STACK and
     $PREFORMATTED are the same than for the menu link.

   The "menu comment" part is formatted like a normal command, called
`menu_comment'. It is only used if not in preformatted environment and
if just below a `@menu' since otherwise one cannot tell if it is a menu
commment or normal text.  The default is to have it be formatted like a
*note Complex formats::, with
     $complex_format_map{'menu_comment'} =
     {
        'begin' => "<tr><th colspan=\"3\" align=\"left\" valign=\"top\">",
        'end' => "</th></tr>", 'class' => 'menu-comment',
     }


File: texi2html.info,  Node: Simple menu formatting,  Next: Table menu formatting,  Prev: Menu components formatting,  Up: Menus

7.18.3 Simple menu formatting in a preformatted environment
-----------------------------------------------------------

If the menu is to be formatted in a single preformatted environment, an
entry for `menu' and `detailmenu' should be added to the
`%complex_format_map' hash (*note Complex formats::).  In the default
case, if the user didn't add an entry himself, a very simple entry is
used, with:

     $complex_format_map->{'menu'} = { 'begin' => '' , 'end' => '',
         'class' => 'menu-preformatted' };


File: texi2html.info,  Node: Table menu formatting,  Prev: Simple menu formatting,  Up: Menus

7.18.4 The formatting of the menu in a table
--------------------------------------------

In the default case, the name of the section corresponding with the
node is used instead of the node name. If `$NODE_NAME_IN_MENU'  is
true, however, node names are used. If `$AVOID_MENU_REDUNDANCY' 

   is true and menu entry equal menu description the description isn't
printed.  This is the default. Likewise, if node or section name equal
entry name, do not print entry name.

   A symbol, `$MENU_SYMBOL'  is put at the beginning of menu entries
when the node name is used. The default is `&bull;'.  If
`$UNNUMBERED_SYMBOL_IN_MENU'  is true it is also put at the beginning
of unnumbered section names. This is not done by default.

   The menu comments are considered to be preformatted text. The style
associated with this preformatted text is determined by
`$MENU_PRE_STYLE' . Default is `font-family: serif'.  The entry similar
with an entry in `%complex_format_map' (*note Complex formats::) used
when the menu appears in a preformatted enviroment is in
`$MENU_PRE_COMPLEX_FORMAT' , and, in the default case is:
     $MENU_PRE_COMPLEX_FORMAT = {
                   'pre_style' => $MENU_PRE_STYLE,
                   'class' => 'menu-preformatted'
        };

   The css class associated with menu comments is `menu-comments'.

   The following function reference controls the formatting of a wole
menu or a detailmenu in that case:

 -- Function Reference: $menu menu_command $command
          $menu_components_text
     $COMMAND is the menu command, currently `menu', `detailmenu' or
     `direntry'.  $MENU_COMPONENTS_TEXT is the formatted menu
     components text, obtained as explained above.


File: texi2html.info,  Node: Indices,  Next: Floats and lists of floats,  Prev: Menus,  Up: Customizing HTML

7.19 Indices formatting
=======================

Two different things needs to be handled for indices formatting, the
place where the index term appears, the index entry, and the index list
itself.  The indexing commands like `@cindex' determines where index
entries appear, and the index list is printed with a `@printindex'
command.

* Menu:

* Index entry place::             Index entries in the main document are
                                  targets for hypertext references
* Index list::                    Customizing the formatting of the index list


File: texi2html.info,  Node: Index entry place,  Next: Index list,  Up: Indices

7.19.1 Formatting of index entries
----------------------------------

Index entry places in the main text may be the target for hypertext
references. Their formatting is controlled by the function associated
with the following function reference:

 -- Function Reference: $target index_entry_label $identifier
          $preformatted $entry $index_name $index_command $texi_entry
          $formatted_entry
     $IDENTIFIER should be used to create a target for links (typically
     associated with a name or id attribute in HTML).  $PREFORMATTED is
     true if the index entry appeared in preformatted text.  $ENTRY is
     the index entry with all the @-commands removed.  $INDEX_NAME is
     the index name, $COMMAND is the index command which may be a index
     command like `@cindex', but also a definition or a table.
     $TEXI_ENTRY is th eindex entry with @-commands, and
     $FORMATTED_ENTRY the entry formatted.

   Regular index entries are (like `@cindex') are formatted using the
following function reference:

 -- Function Reference: $index_entry index_entry_command $command
          $index_name $label $entry_texi $entry_formatted
     $COMMAND, $INDEX_NAME, $ENTRY_TEXI and $ENTRY_FORMATTED are the
     same as above, and $LABEL is what could be used as a label,
     formatted using the function above.


File: texi2html.info,  Node: Index list,  Prev: Index entry place,  Up: Indices

7.19.2 Customizing the formatting of index lists
------------------------------------------------

There is an elaborate default index formatting in texi2html, with index
summary by letter linking to index entries grouped by letters too, with
the possibility of index pages split accross files. This system may be
completly bypassed by redefining the function reference that is called
when `@printindex' is encountered:

 -- Function Reference: $index_text printindex $index_name
     $INDEX_NAME is the index name appearing on the `@printindex' line.
     The index formatted should be returned by this function reference.

   If the default index formatting is used, there are still
possibilities to customize part of the formatting.  The index entries
are sorted alphabetically. A whole index list is considered to be
composed of letter entries. A letter entry is composed by all the index
entries beginning with that letter. A letter may be a non alphabetical
character, but we call it letter here.

   An index summary appears at the beginning and at the end of an index
list, and should be used to jump directly to a letter entry. Indices
lists may be split across pages, thus the different letters may appear
on different files. The number of index entries appearing on each page
is determined by a variable `$SPLIT_INDEX'  if set. The default is to
split indices after 100 entries.

   The formatting of all these elements is controlled by the following
function references:

_formatting of a letter in a summary_
      -- Function Reference: $letter summary_letter $letter $file
               $identifier
          This function is used to format a letter appearing in a
          summary, refering to a letter entry in the index list.
          $LETTER is the letter. $FILE is the file name where the letter
          entry appears. More precisely, it is empty when the letter
          entry is on the same page than the summary, it contains the
          file name when the index page is split accross page.
          $IDENTIFIER is an identifier for the target letter entry.

_formatting of a summary_
      -- Function Reference: $summary index_summary
               \@alphabetical_letters \@nonalphabetical_letters
          \@ALPHABETICAL_LETTERS and \@NONALPHABETICAL_LETTERS contain
          the formatted summary letters, formatted with the above
          function.

_formatting of an index entry_
      -- Function Reference: $entry index_entry $entry_href $entry_text
               $section_href $section_heading
          $ENTRY_HREF is a reference to the place where the index entry
          appeared, $ENTRY_TEXT is the corresponding text. $SECTION_HREF
          is a reference to the beginning of the sectioning element
          containing the index entry, $SECTION_HEADING is the heading
          of the element.

_formatting of letter entry_
      -- Function Reference: $letter_entry index_letter $letter
               $identifier $index_entries_text
          This function formats a letter entry, consisting in all the
          index entries beginning with this letter. $LETTER is the
          letter, $IDENTIFIER should be used to create a target for
          links (typically links from summaries), and
          $INDEX_ENTRIES_TEXT is the text of the index entries
          formatted as described above.

_formatting of whole index_
      -- Function Reference: $index print_index $index_text $index_name
          $INDEX_TEXT is the text of all the index entries grouped by
          letter appearing in that page formatted as above. It is undef
          if there are no entries or theindex name isn't known.
          INDEX_NAME is the name of the index, the argument of
          `@printindex'.


File: texi2html.info,  Node: Floats and lists of floats,  Next: Footnotes,  Prev: Indices,  Up: Customizing HTML

7.20 Floats and lists of floats
===============================

Floats appear in the `@float' environment, optionaly with a style and a
label, and with optionnal `@caption' and `@shortcaption'.  Their list
appear after a `@listoffloats'.

   A hash reference is associated with each float, it is available in
some formatting functions. The keys are:
`caption_texi'
`shortcaption_texi'
     A reference on an array containing the caption or shortcaption
     lines, with texi @-commands.

`style_texi'
     The style with texi @-commands.

`style_id'
     The unique identifier associated with the style.

`style'
     The style formatted.

`nr'
     The number with the same conventions than makeinfo (use the
     chapter number a dot and then the number of the float of that
     style in the chapter, or an absolute number if in unnumbered).

`chapter_nr'
     The number of the chapter containing the float.

`nr_in_chapter'
     The number of the float in the chapter.

`absolut_nr'
     The number of the float in the document.

`texi'
     The label with @-commands.

`name'
     The label formatted.

`id'
     The unique identifier associated with the label. Usefull to make
     an anchor or a reference.

`target'
     The target that can be used to refer to that float.

`element'
     A reference on a structure representing the element the float
     appear in.

* Menu:

* Floats::                           Formatting of floats
* Lists of floats::                  Formatting the lists of floats


File: texi2html.info,  Node: Floats,  Next: Lists of floats,  Up: Floats and lists of floats

7.20.1 Formatting a float
-------------------------

First there is an occasion to construct a texinfo text for the caption,
using the caption texinfo lines and the informations in the float
structure.  The returned lines will be formatted in the main program. A
function reference is used here:

 -- Function Reference: (\@caption_lines_returned,
\@shortcaption_lines_returned) caption_shortcaption \%float
          \@caption_lines \@shortcaption_lines
     \%FLOAT is the structure defined above. \@CAPTION_LINES and
     \@SHORTCAPTION_LINES are references on arrays containing the
     texinfo lines for caption and short caption.
     \@CAPTION_LINES_RETURNED and \@SHORTCAPTION_LINES_RETURNED are
     references on an array containing the texinfo lines for the
     caption and shortcaption.

   Then the float is formatted with the following function reference:

 -- Function Reference: $text float $float_text \%float $caption_text
          $shortcaption_text
     $FLOAT_TEXT is the text appearing within the `@float', formatted.
     \%FLOAT is still the structure defined above. $CAPTION_TEXT and
     $SHORTCAPTION_TEXT are the caption and short caption build with the
     above function and formatted.

   It is also possible to do something when a caption or a shortcaption
appear with t hefollowing function reference:

 -- Function Reference: $text caption_shortcaption_command $command
          $formatted_caption \@texi_lines \%float
     $COMMAND is the @-command, `caption' or `shortcaption'.
     $FORMATTED_CAPTION is the caption text, formatted, while
     \@TEXI_LINES is a reference on an array containing the caption
     lines, this time without any formatting.  \%FLOAT is still the
     structure defined above.

     In the default case this function reference returns an empty
     string.


File: texi2html.info,  Node: Lists of floats,  Prev: Floats,  Up: Floats and lists of floats

7.20.2 Formatting lists of floats
---------------------------------

A list of floats is introduced by `@listoffloats'. The argument of
`@listoffloats' is the "style". First the style texinfo can be modified
with the following function reference:

 -- Function Reference: $style_texi_returned listoffloats_style
          $style_texi
     $STYLE_TEXI is the `@listoffloats' argument with texinfo
     @-commands kept. It is possible to make changes to the $STYLE_TEXI
     and return a modified string, still with @-commands. The modified
     string is formatted in the main program.

   After that, for each of the floats with that style, first there is a
possibility to modify the float style and the float caption before they
are formatted in the main program, with the following function
references:

 -- Function Reference: $float_style_texi_returned
listoffloats_float_style $style_texi \%float
     $STYLE_TEXI is the style, and \%FLOAT is the structure described
     above. This function reference returns a style to be formatted in
     the main program.

 -- Function Reference: ( \@caption_texi_returned,
          $caption_or_shortcaption) listoffloats_caption \%float
     \%FLOAT is the structure described above. This function reference
     returns a caption to be formatted in the main program,
     \@CAPTION_TEXI_RETURNED, and a string, $CAPTION_OR_SHORTCAPTION
     that is either `caption' or `shortcaption' that can be used by the
     main program if this information is needed.

   Each entry is formatted by:

 -- Function Reference: $listoffloats_entry listoffloats_entry
          $style_texi \%float $float_style $caption $href
     $STYLE_TEXI is the style with @-commands, $FLOAT_STYLE is the
     style returned by the above function and formatted. $CAPTION is the
     caption returned by the above function formatted. \%FLOAT is the
     structure corresponding with the float, and $HREF is an href
     pointing to the float location.

   Lastly, the whole `@listoffloats' is formatted by:

 -- Function Reference: $listoffloats listoffloats $style_texi $style
          \@listoffloats_entries
     $STYLE_TEXI is the style with @-commands, $STYLE is the style
     returned by the above function and formatted. The array reference
     \@LISTOFFLOATS_ENTRIES holds the entries formatted by the above
     function.


File: texi2html.info,  Node: Footnotes,  Next: Customizing format opening,  Prev: Floats and lists of floats,  Up: Customizing HTML

7.21 Customizing the footnotes formatting
=========================================

Each footnote is associated with a footnote entry. Several footnote
entries are grouped in a footnote section. When a footnote appears, two
things must be formatted: in the main text the place where the footnote
appear and the footnote text.

   Two functions, with corresponding function references control the
formatting of the footnotes:

 -- Function Reference: (\@lines $text_for_document) foot_line_and_ref
          $number_in_doc $number_in_page $footnote_id $place_id
          $document_file $footnote_file \@lines \%state
     $NUMBER_IN_DOC is the footnote number in the whole document,
     $NUMBER_IN_PAGE is the footnote number in the current page.
     $FOOTNOTE_ID is an identifier for the footnote in the footnote text
     which should be used to make target for references to that
     footnote, while $PLACE_ID is an identifier for the location of the
     footnote in the main document. Similarly, $DOCUMENT_FILE is the
     file name of the file containing the text where the footnote
     appears in the main document, while $FOOTNOTE_FILE is the file
     name of the file where the footnote text appears.

     \@LINES is a reference on an array containing the footnote text
     lines, allready formatted.  And \%STATE holds informations about
     the context at the footnote place in the main document. As usual
     the most usefull entry is `preformatted' which is true if the
     footnote appears in a preformatted context.

     This function returns a reference on an array, \@LINES containing
     the updated footnote text for the footnote entry, and
     $TEXT_FOR_DOCUMENT, the text appearing at the footnote place in
     the main document, linking to the footnote entry.

   The following function is only used when footnotes are at the bottom
of a page and the document is split.  For customization of the
footnotes page in case they are on a separated page or section, *note
Special pages layout::. For the determination of the footnote
locations, *note Page layout options::.

 -- Function Reference: foot_section \@footnotes_lines
     This function formats a group of footnotes. \@FOOTNOTES_LINES is a
     reference on an array holding the lines of all the footnote entries
     formatted as explained above. This function modifies the reference.


File: texi2html.info,  Node: Customizing format opening,  Next: Bypassing normal formatting,  Prev: Footnotes,  Up: Customizing HTML

7.22 Customizing format opening
===============================

The following function reference is called when a format is opened.  A
format is any @-command that ends with a `@end' except @-commands that
only select if the input is processed (like `@ignore' or `@ifhtml') or
raw @-commands (like `@verbatim' and `@html').

 -- Function Reference: $line begin_format_texi $command $line \%state
     The $COMMAND is the format command, the $LINE is the line
     following the @-command, \%STATE is a reference on a hash
     containing many formatting information. It can modify the line and
     return something else.

     In the default case, it is used to keep track of the multitable
     nesting.  As a consequence, it is linked with the multitable
     formating.  *Note Multitable formatting::.


File: texi2html.info,  Node: Bypassing normal formatting,  Next: Handling special regions,  Prev: Customizing format opening,  Up: Customizing HTML

7.23 Bypassing normal formatting
================================

It is possible to bypass completely the normal formatting of @-commands
with braces and raw regions (`@html', `@tex', `@xml'... regions).  In
that case the @-commands and the text within are passed to a user
defined function early, in a pass when no expansion of output takes
place, called the collecting pass. Another user defined function is
called during the output expansion phase.

   Moreover, arbitrary user defined functions may be called between the
different texinfo parsing and outputting passes. This could be used, for
example to initialize some things before collecting the @-commands and
their text, expanding them between the collecting and expansion phase
and doing some cleaning after the expansion pass. These possibilities
are used for the interface to LaTeX2HTML (*note Expanding TeX
regions::), and the examples are taken from that use.

   The @-commands that are keys of the `%command_handler'  hash are
collected in the collecting pass and expanded in the expansion pass
using user defined functions. The associated value is a reference on a
hash used to specify the user defined function references.  The key of
the hash reference are `'init'' for the function reference called
during the collecting pass, and `'expand'' during the expansion pass.
Here is an example for an @-command with braces:

     $command_handler{'math'} =
          { 'init' => \&Texi2HTML::LaTeX2HTML::to_latex,
            'expand' => \&Texi2HTML::LaTeX2HTML::do_tex
          };

   And an example for a raw region @-command:

     $command_handler{'tex'} =
          { 'init' => \&Texi2HTML::LaTeX2HTML::to_latex,
            'expand' => \&Texi2HTML::LaTeX2HTML::do_tex
          };

   The function references are called like:

 -- Function Reference: $status $command_handler{'$command'}->{'init'}
          $command $text $count
     $COMMAND is the @-command name, $TEXT is the text appearing within
     the @-command. $COUNT is a counter counting how many times this
     @-command appeared. $STATUS is a boolean which should be true if
     the collecting was succesfull. If false the @-command and the text
     is discarded.

 -- Function Reference: $result
          $command_handler{'$command'}->{'expand'} $command $count
          $state $text
     $COMMAND is the @-command name, $COUNT is a counter counting how
     many times this @-command appeared. $STATE is a reference on a
     hash containing many informations about the context. $TEXT should
     be empty. $RESULT is the expanded resulting text.

   There are five places for user defined functions, associated with
arrays:
`@command_handler_setup'
     The function references in that array are called before anything
     is done, including collecting the output file names. The input
     file names directory are available.

`@command_handler_init'
     The function references in that array are as soon as the file
     names are known. It may be at different moments, before processing
     anything, right after @sefilename, or at the end of the first pass
     (after @macro and @include expansions).  At that time the
     information available is essentially the file names.

`@command_handler_names'
     The function references in that array are called right after the
     collecting pass. At that time all the special @-commands have been
     collected as explained above but no output has been produced, the
     element (node and section) names hasn't been processed and
     expanded.

`@command_handler_process'
     The function references in that array are called after the element
     names have been processed, but before the main output
     initialization.

`@command_handler_output'
     The function references in that array are called rigth before the
     main output processing, so that more informations are available,
     like the title.

`@command_handler_finish'
     he function references in that array are called after the end of
     the output generation.

   Here is an example of these arrays use:

     push @command_handler_init, \&Texi2HTML::LaTeX2HTML::init;
     push @command_handler_process, \&Texi2HTML::LaTeX2HTML::latex2html;
     push @command_handler_finish, \&Texi2HTML::LaTeX2HTML::finish;


File: texi2html.info,  Node: Handling special regions,  Next: Other and unknown commands,  Prev: Bypassing normal formatting,  Up: Customizing HTML

7.24 Handling special regions
=============================

Special regions `@titlepage', `@documentdescription' and  `@copying'
are removed from the document before the last pass in the default case.
They can be kept if the value associated with the @-command in the
`%region_formats_kept'  hash is true.

   The `@insertcopying' @-command is formatted by

 -- Function Reference: $insertcopying insertcopying $text $comment
          $simple_text
     $TEXT is the text appearing in `@copying', formatted.  $COMMENT is
     the text with texi removed, should be very simple text.
     $SIMPLE_TEXT is the text formatted in string context.

   The title page handling is described in *note Title page::.


File: texi2html.info,  Node: Other and unknown commands,  Prev: Handling special regions,  Up: Customizing HTML

7.25 Customizing other commands, and unknown commands
=====================================================

Many commands without braces are available in texinfo, sometimes with a
specific syntax. For example we have `@sp', `@noindent',
`@documentlanguage', `@oddheading', `@headings', `@shortcontents',
`@shorttitlepage' or `@comment'.  `texi2html' interprets some of these
commands and some functions or variables are used for their formatting
or to access their information.  In the default case, however, most of
these constructs are ignored.

   It is possible to change how the things following these commands on
the line are handled, what is considered to be an arg for those
commands and it is also possible to keep them instead of discarding
them such that it is possible to handle them specially, with the same
function than the one used for unknown commands.

   Those special commands without braces are the key of a hash:
`%misc_command' . The associated value is a reference on a hash
enabling to set the properties of these commands. The keys of this hash
reference is the name of a property, the value is the value of the
property. For example here we have `line' for the `arg' property for
the `command' @-command.

     $misc_command{'command'} = {'arg' => 'line', 'skip' => 'space'};

   The properties and possible values are:

`skip'
     This property enables to set what is skipped after the command
     arguments.  Here are the possible values:
    `line'
          The remaining of the line is skipped.

    `space'
          Spaces are skipped but not newline.

    `whitespace'
          Spaces are skipped

    `linewhitespace'
          Spaces are skipped if there are only spaces remaining on the
          line.

    `linespace'
          Spaces are skipped, but not newline if there are only spaces
          remaining on the line

`arg'
     If the associated value is `line' the line is considered to be the
     argument. If it is a number it is the number of args (separated by
     spaces).

`keep'
     If true the args and the macro are kept, otherwise they are
     discarded.  The defaut is to have `keep' undef for all the
     commands.  If `keep' is true for `@verbatiminclude' the default
     action for this macro isn't done.

   Commands which don't appear in the hashes `%simple_map' ,
`%simple_map_pre' , `%simple_map_texi'  and `%misc_command', or that
appear in `%misc_command' but with `keep' true are processed by the
following function reference:

 -- Function Reference: ($result_line, $result, $result_text, $message)
unknown $command $line $pass
     $COMMAND is the @-command, $LINE is the line following the
     $COMMAND. $PASS is the pass of texi2html (*note Three passes::).
     $RESULT is a boolean. If it is true then the other return values
     are taken into account otherwise the default actions are used. In
     case $RESULT is true, $RESULT_LINE is the new line to be processed
     further, $RESULT_TEXT is the resulting formatted text and
     $MESSAGE, if defined is a message outputted to the output with
     line number added by `texi2html'.

   Commands with braces not specified above nor in `%style_map' ,
`%style_map_pre'  and `%style_map_texi'  are processed by the following
function reference

 -- Function Reference: ($result, $result_text, $message) unknown_style
          $command $text
     $COMMAND is the @-command, $TEXT is the text appearing within the
     braces (allready formatted). $RESULT is a boolean. If it is true
     then the other return values are taken into account otherwise the
     default actions are used. In case $RESULT is true, $RESULT_TEXT is
     the resulting formatted text and $MESSAGE, if defined is a message
     outputted to the output with line number added by `texi2html'.


File: texi2html.info,  Node: Internationalization,  Next: Incompatibilities,  Prev: Customizing HTML,  Up: Top

Appendix A Internationalization
*******************************

The strings written in the document are selected based on the document
language. This can be used to customize the strings, as described in
*note Strings::. This also enables translation of the strings.

   The `gdt' subroutine is used for translated strings:

 -- Function: gdt ($string, \%variables_hash, \%state)
     with $STRING the string to be translated, \%VARIABLES_HASH a
     reference on a hash holding the variable parts of the translated
     string, and \%STATE a hash reference determining the context of
     expansion (use the document state,   expansion in string, no
     expansion...).

   Translated strings are texinfo strings, which may have @-commands.
In translated strings,  the variables parts of the string are not
denoted by %s and the like, but   by `{arg_name}'  (which is common for
perl gettext).  For example, in the following, `{section}' will be
replaced by the section name:
     see {section}

   This is for 2 reasons, first changing the order of   printf
arguments is only available since perl 5.8.0, second the order   of the
argument may not be predictable when commands expansion may lead   to
different orders depending on the output format.

   The expansion of those strings happens that way:
  1. First the string is translated. The locale is
     @documentlanguage.@documentencoding.

     If the @documentlanguage is like ll_CC, ll_CC is tried first, and
     then ll.    If the encoding is not us-ascii, us-ascii is also
     tried. The idea is that   if there is a us-ascii encoding, it
     means that all the characters in the   charset may be expressed as
     @-commands. For example there is a fr.us-ascii   locale that can
     accomodate any encoding, since all the latin1 characters   have
     associated @-commands. For the ja translations, there is only
     ja.utf-8   since there are no @-commands for ja letters.

  2. Next the args in string are protected, for example `{arg_name}'
     becomes
     `@internal_translation_open_brace{}arg_name@internal_translation_close_brace{}'
     (this part is skipped if there is no expansion).

  3. Next the string is expanded as a texinfo string.
     `@internal_translation_open_brace{}' expands as { and
     `@internal_translation_close_brace{}' expands as }, such    that
     in the end    one still gets `{arg_name}' within an expanded string
       (this part is skipped if there is no expansion).

  4. Then the in string arguments are substituted, for example
     `{arg_name}' is    substituted by the corresponding argument.

   For example, in the following `{date}', `{program_homepage}' and
`{program}' are the argument of the string. Since they are used in
`@uref', their order in not predictable. The `{'duplicate'=>1}' means
the the document state should be used when expanding the string.
`{date}', `{program_homepage}' and `{program}' are substituted after
the expansion, which means that they should already be acceptable
output:

     gdt('This document was generated on @i{{date}} using @uref{{program_homepage}, @i{{program}}}.', {
                'date' => $date, 'program_homepage' => $Texi2HTML::THISDOC{'program_homepage'}, 'program' => $Texi2HTML::THISDOC{'program'} },{'duplicate'=>1});

   This approach is a bit complicated, however what is interesting is
that it allows to have translation available in different encodings for
charset that are covered by @-commands, and also to specify how the
formatting for some commands is done independently of the output format
but still allow it to be language dependent. For example, the `@pxref'
string may be:

     see {node_file_href} section `{section}\' in @cite{{book}}

   which allows to specify a string independently of the output format
but with a rich formatting that may be differently translated in other
languages.

   It is also possible to use more regular %s escapes, and also avoid
any expansion (with 'keep_texi' in the state).


File: texi2html.info,  Node: Incompatibilities,  Next: Specificities,  Prev: Internationalization,  Up: Top

2 Incompatibilities with previous versions
******************************************

`texi2html' has accumulated a lot of incompatibilities with previous
versions. They are documented in the `NEWS' file, we discuss them here
nevertheless. Most of the incompatibilities were introduced in version
1.68. API changed also a lot between 1.78 and 1.80. Between 1.82 and
5.0 API changed also quite a bit, and more importantly, the whole
internationalization handling was changed.

   * API changes between 1.82 and 5.0:
        * complex format handling API changed. $complex_format_map is
          replaced by   a real hash %complex_format_map and the begin
          and end are no more   evaluated.

        * In the default case a gettext-like framework is now used for
          in document   string translations. The old framework is still
          available by setting   $I18N_PERL_HASH.

        * Information that can be set by @-commands should now be
          accessed   through get_conf.

        * $format_list_item_texi should now modify directly the @item
          argument   and apply the @-command given as @table argument.
          Correspondingly,   some arguments of $table_item have been
          removed.

        * Formatting of titlepage changed, and @title, @subtitle and
          @author   are now handled by $line_command

        * $SEPARATED_FOOTNOTES has been replaced by $FOOTNOTESTYLE,
          that takes the   same argument than @footnotestyle.

        * replace $LANG by $DOCUMENTLANGUAGE.

        * replace $DO_CONTENTS by $CONTENTS and $DO_SCONTENTS by
          $SHORTCONTENTS.

        * replace $TRANSLITERATE_NODE by $TRANSLITERATE_FILE_NAMES.

        * replace $SECTION_NAVIGATION by $HEADERS.

        * @verbatiminclude is now a $raw command argument distinct from
          @verbatim.

        * @direntry is formatted like a menu and passed down to
          $menu_command.

        * add $NODE_FILENAMES to use node names for files associated
          with nodes,   such that $NODE_FILES is only means creating
          redirection files.

        * Remove the user from footer, and the corresponding USER
          variable and   $Texi2HTML::THISDOC{user}.

        * Don't treat _setfilename as a value set. It should be
          available through   get_conf. Same for all the other
          @-commands previously avaiable as   values.

        * change in class attribute for html elements: for ul to class
          "no-bullet" ($NO_BULLET_LIST_ATTRIBUTE). @top and @centerchap
          have now their command name as class.  @node heading class is
          now "node-heading", instead of "node".  The whole header is
          in an element with class "header" (was "node" when
          !$HEADER_IN_TABLE).

        * print_element_header is obsoleted, things should be directly
          done in element_heading.

        * Add 'inline_attribute' for an XML attribute that should be
          closed at   paragraph end and reopened at paragraph begin.
          Consequently the closing   and opening of 'attribute' isn't
          done anymore in paragraph and   preformatted.

        * USE_ISO now only determines if `''', ```' `---' and `--' are
          transformed   into entities. t2h_default_set_iso_symbols sets
          or unsets USE_ISO,
          %things_map/%pre_map/%simple_format_simple_map_texi,
          $OPEN_QUOTE_SYMBOL and $CLOSE_QUOTE_SYMBOL.    %iso_symbols
          is unused now.

        * change in the normal_text function reference API, now there
          is an   input variable true if in @math.

        * change the external_ref API, fourth argument is now the file
          name and   add the node as an extra argument.

        * rename $Texi2HTML::THISDOC{css_lines} as
          $Texi2HTML::THISDOC{css_rule_lines}

   * API changes between 1.78 and 1.80:
        * what was done in the beginning of the $print_section function
          reference is now done in $print_element_header.

        * there is a new argument for $normal_text.

        * there is a new argument for $menu_link and $simple_menu_link,
          and the name argument is always set, even if there is no
          explicit name. The new argument is true if there really was
          an explicit name.

        * $internal_ref and $external_ref don't change inforef to xref
          anymore.

        * in $table_item the text is not formatted with the format
          command,   the text_formatted argument is.

        * definition index entries are now formatted with
          $definition_index_entry,   not with $definition_category
          anymore.

        * $printindex is called if an index appears, even if the index
          is not defined or there are no index entries.

        * new argument (@-command name) for $quotation and
          $quotation_prepend_text.

        * change in the heading API. THIS_HEADER is not used anymore.
          New function reference, element_heading  to format a node or
          a section   heading, including navigation and label.
          Accordingly, print_Top and   one_section don't print the
          element header anymore. Also it is   reported if the element
          is a new element, is the main element and   more arguments,
          and top element heading is always done in heading.

        * print_element_header and print_navigation now return their
          result.

        * the `copying' key of %Texi2HTML::THISDOC is now called
          `copying_comment'.

        * TOC_LIST_ATTRIBUTE is now called NO_BULLET_LIST_ATTRIBUTE.

        * TOC_LIST_STYLE is now called NO_BULLET_LIST_STYLE.

        * the $unknown function reference has a new argument, the pass
          number.

        * `--sec-nav' is replaced by `--headers'.

        * `--Verbose' is replaced by `--verbose'.

        * `--lang' is replaced by `--document-language'.

        * `--separated-footnotes' is replaced by `--footnote-style'.

        * `--lang' is replaced by `--document-language'.

        * `&$menu_comment' is removed, `menu_comment' is now handled
          like an @-command.

        * `@detailmenu' is now formatted more like `@menu', and the
          `&$menu' function reference is replaced by `&$menu_command'.
          `&$menu' is kept for backward compatibility. If `&$menu' is
          defined, `@detailmenu' is ignored.

        * the API for the formatting of menus completly changed.
          $simple_menu_link   is removed, everything should be done in
          $menu_link.

        * image API changed, and is unstable, so not documented.

        * image file paths are not completed anymore in the default
          case.    The previous   behaviour can be restored with
          `$COMPLETE_IMAGE_PATHS' set to true.

        * in %misc_command `texi' is not used anymore. The value and
          macros are expanded as they should be unconditionnally.

        * there is a new 'style' key in $complex_format_map, to be able
          to   differentiate complex formats inheriting fonts and
          code_style (like   @format, @display).

        * $EXTENSION should be undef if one doesn't want an extension
          to be added.

        * THISDOC{'title'} and similar are now for @title since only
          one @title   should appear in the document. @settitle is
          tried first to set fulltitle.

        * Configuration variables are modified anymore, instead the
          variable   value is put in $Texi2HTML::THISDOC{'VAR'}. This
          is the case for   DO_CONTENTS, DO_SCONTENTS, CSS_LINES,
          BODYTEXT, DOCUMENT_DESCRIPTION,   DOCUMENT_ENCODING,
          IN_ENCODING, ENCODING_NAME, OUT_ENCODING.

          For example, if $CSS_LINES is defined, the value is put in
          $Texi2HTML::THISDOC{'CSS_LINES'} which is used for
          formatting, and if   $CSS_LINES is not defined,
          $Texi2HTML::THISDOC{'CSS_LINES'} is   autodetected.

        * When there is no section and $USE_NODES is not set don't
          split by node.  This behaviour and the previous aren't
          documented, so it could change in the future.

   * API changes between 1.76 and 1.78:
        * paragraph has new arguments with indentation information,
          added as the third argument, and other context information.
          The formatting linked with commands opened before the
          paragraph and closed after the paragraph are done in the
          formatting function. Similar things are done for preformatted.

        * normal_text changed completely. There are much more arguments
          to give informations about the context, and normal_text now
          does more text manipulation.

        * New arguments for image the alt text, the height and width,
          the path to working dir and the path to image file relative
          to working dir. More image formatting is done in the
          formatting function.

        * New argument for empty_line.

        * End of line removal is done in formatting function of
          definition line formatting.

        * node_file_name now should only returns the node file, since
          the redirection file isn't used anymore. element_file_name
          only is used for file names, whatever NODES_FILES is.

   * changes between 1.66 and 1.68:
        * When the manual is split the default is to put resulting
          files in a directory with name the manual file basename
          (previously they were left in  the current directory). To
          avoid that, call texi2html with `-output .'. This has been
          changed to be compatible with `makeinfo' and also because it
          fits better with the cross manuals reference scheme.

        * The option `--output' signification changed. It now has the
          same meaning than for `makeinfo'. It seems that in 1.66 it
          was the same than `-out-file'.  `--output' new meaning allows
          to replace `-out-file' and `-subdir' with a unique option.

          More precisely `-out-file' forces the output to be unsplit
          while `--output' behaves differently when split (it specifies
          the directory where the manual files should be outputted) and
          unsplit (it specifies the output file). `-subdir' is retained
          for backward compatibility.

          If you want a backward compatibility you can use `-subdir'
          for the output directory if the document is split, and
          `-out-file' if the document isn't split. This hasn't been
          tested extensively though.

        * Many options has been obsoleted but they are retained for
          backward compatibility.

        * The init files are searched in new directories, however they
          are still searched for in the old directories for backward
          compatibility.

        * the option `--glossary' doesn't do anything. Likely nothing
          specific is done regarding bibliographies. This has been
          decided because this added some semantics to the texinfo
          formatting language that weren't part of texinfo.

          It should be possible to do something similar with macros.
          See for example `glossary.texi' for glossary and
          `my-bib-macros.texi' for bibliography in the directory
          `examples'. In the web2c package there is an example of use
          of BibTeX, see
          `http://tug.org/texlive/devsrc/Build/source/TeX/texk/web2c/doc/'
          (the examples for bibliography are taken from the texinfo
          home page `http://www.gnu.org/software/texinfo/texinfo.html').

        * don't use `T2H_CENTER_IMAGE'. `@center' should be used
          insead, it will give the right output for all the formats.

        * If a directory creation fails the program aborts. This is
          much safer.

        * The interface for internationalisation changed, although the
          previous wasn't documented a lot.

        * the API described in this manual changed a lot. A important
          change was to use the `Texi2HTML::Config' names space instead
          of variables prefixed with `T2H_' or  `t2h_'. To cope with
          the change the prefix should be removed from variables in
          init files.  Some variables are now in `%Texi2HTML::THISDOC'.

        * `@ifinfo' regions are not expanded by default. This may lead
          to warnings or errors especially if the Top node is enclosed
          in `@ifinfo', as some node won't appear in menus. The quick
          fix is to call `texi2html' with the option `--ifinfo' and the
          right way should be to make more use of `@ifnottex'.

        * The code appearing before the first node is now outputted, it
          was ignored before. `--ignore-preamble-text' revert to the
          previous behaviour. Enclosing in `@ifnothtml' would be much
          cleaner.



File: texi2html.info,  Node: Specificities,  Next: Indexop,  Prev: Incompatibilities,  Up: Top

3 How little texi2html texinfo differs from GNU texinfo
*******************************************************

For features documented in the texinfo manual, the texinfo
interpretation by `texi2html' shouldn't differ from the interpretation
of `makeinfo' or `texi2dvi'. However for constructs with unspecified
behaviour `texi2html' often doesn't lead to the same result than
`makeinfo' or `texi2dvi'. `makeinfo' and `texi2dvi' are also
inconsistent in most of these cases (or broken). You are urged not to
use these features unless absolutely necessary.  This information is
only here to help understand why `texi2html' differ from other texinfo
interpreters, it may be inacurate and the `texi2html' behaviour may
change in the future and was different in the past.

@-commands with text on the line
     In the texinfo manual it is specified that block @-commands should
     appear on a line without text and the closing `@end' should also
     be on a line by himself. With `texi2html' it is possible to add
     text before and after the command, so the following is right:

          something @example the example @end example after the example

     `makeinfo' and `texi2dvi' may also accept text before the command
     and text after the `@end' command, sometimes ignoring it after the
     `@end'.

     This is a feature you should especially not rely on.

special @-commands handling
     The special @-commands are commands like `@pagesizes', `@sp',
     `@evenheading', `@raisesections', `@defindex' and a lot more. In
     many cases `makeinfo' and `texi2dvi' don't parse those commands
     the same way too. `texi2html' may also show some differences in
     parsing of the arguments of these commands, in case there are
     wrong arguments, and also ignore differently things following
     those commands. How user defined macros, set and values are
     expanded in those commands may also be different.  Part of the
     specification of how these commands are handled is configureable
     (*note Other and unknown commands::), but not what happens during
     the beginning of the parsing for some of those commands.

features different between `makeinfo' and `texi2dvi'
     When `makeinfo' or `texi2dvi' use a feature which is reserved for
     one or the other translator, `texi2html' uses that feature. So for
     example `@definfoenclose' which is ignored by `texi2dvi' is taken
     into account and `@kbdinputstyle' which is ignored by `makeinfo'
     is taken into account.

user defined macros and values
     In this area `makeinfo' and `texi2dvi' also differ a lot.  The
     reference implementation is the `makeinfo' implementation as
     `texi2dvi' is easily broken when macros are not used simply.

        * `@rmacro' and `@macro' behave exactly the same. In fact this
          goes against a documented behaviour, however if a user don't
          want a recursive macro he can simply avoid reusing the macro
          in the definition. If somebody report that the feature is
          usefull we could try to implement it.

        * It is possible to escape the end of a macro definition with
               \@end macro
          with the `\' being removed after the first expansion.
          Otherwise it is not possible to produce a `\@end macro' in a
          macro.

        * `@unmacro' is interpreted during the macro argument expansion.
          Don't know what `makeinfo' exactly do.

        * Some `@value' may be expanded later than the others, those
          that are in special commands, like `@node'.

`@,' in `@node'
     Like `texi2dvi' but unlike `makeinfo' `@,' don't break `@node'
     arguments like a regular `,'.

Things before first node or preamble
     Things before the first node or before the preamble may not be
     exactly interpreted or discarded as `makeinfo' or `texi2dvi' do.

encodings
     `texi2html' knows more encodings, in fact all encodings `perl'
     knows about.

commands in `@ifset' and `@ifclear'
     `texi2html' doesn't need a proper nesting of internal `@ifset' or
     `@ifclear' if they are in ignored or raw regions (like `@html' or
     `@verbatim'). For example the following is accepted by `texi2html'
     and not by `makeinfo':

          @ifset notset
          @ignore
          @ifset
          @end ignore
          @end ifset

     In `@ifset' and `@ifclear' texi2html also accepts a lot more of
     invalid constructs. For example the following is accepted by
     `texi2html' but not by `makeinfo':

          @set flag
          @ifset flag
          @itemize
          @item my item
          @end ifset
          text
          @ifset flag
          @end itemize
          @end ifset


File: texi2html.info,  Node: Indexop,  Next: Indexvr,  Prev: Specificities,  Up: Top

Appendix A Command Line Option Index
************************************

 [index ]
* Menu:

* css-include=FILE:                      Style options.        (line 29)
* css-ref=URL:                           Style options.        (line 42)
* def-table:                             Style options.        (line 53)
* doctype=DTD:                           Style options.        (line  9)
* document-language <1>:                 Strings.              (line 10)
* document-language:                     Using init files.     (line 23)
* document-language=LANG:                Texinfo related options.
                                                               (line 10)
* DVAR:                                  Texinfo related options.
                                                               (line 16)
* enable-translations:                   Advanced build features.
                                                               (line 31)
* error-limit=NUM:                       General options.      (line  8)
* footnote-style:                        Page layout options.  (line 15)
* frames:                                Page layout options.  (line  6)
* frameset-doctype:                      Style options.        (line 13)
* frameset-doctype=DTD:                  Style options.        (line 11)
* help:                                  General options.      (line 12)
* html-xref-prefix=PATH:                 Style options.        (line 48)
* IDIR:                                  Texinfo related options.
                                                               (line 30)
* if<region>:                            Expansion.            (line 10)
* include-css:                           css.                  (line 35)
* init-file:                             Using init files.     (line 14)
* iso:                                   Style options.        (line 23)
* l2h:                                   Expanding TeX regions.
                                                               (line  8)
* l2h-file:                              Expanding TeX regions.
                                                               (line 21)
* l2h-l2h=PROGRAM:                       Expanding TeX regions.
                                                               (line 13)
* l2h-tmp:                               Expanding TeX regions.
                                                               (line 17)
* menu:                                  Invoking texi2html.   (line 21)
* no-headers:                            Page layout options.  (line 12)
* no-if<region>:                         Expansion.            (line 12)
* node-files:                            Output files.         (line 66)
* nomenu <1>:                            Expansion.            (line 17)
* nomenu:                                Invoking texi2html.   (line 21)
* number-sections:                       Style options.        (line 64)
* output:                                Output files.         (line 36)
* PDIR:                                  Texinfo related options.
                                                               (line 24)
* pkgdatadir=dir:                        Using init files.     (line  8)
* pkgdatadir=DIR:                        Installing.           (line 16)
* prefix:                                Output files.         (line 40)
* short-ext:                             Output files.         (line 41)
* short-ref:                             Style options.        (line 59)
* split:                                 Splitting output.     (line  8)
* sysconfdir=dir:                        Using init files.     (line 10)
* toc-file:                              Output files.         (line 45)
* toc-links:                             Style options.        (line 69)
* top-file:                              Output files.         (line 42)
* transliterate-file-names:              Output files.         (line 74)
* use-nodes:                             Splitting output.     (line 38)
* UVAR:                                  Texinfo related options.
                                                               (line 20)
* verbose:                               General options.      (line 16)
* version:                               General options.      (line 20)
* with-unicode:                          Advanced build features.
                                                               (line  9)
* with-unidecode:                        Advanced build features.
                                                               (line 14)


File: texi2html.info,  Node: Indexvr,  Next: Indexcp,  Prev: Indexop,  Up: Top

Appendix B Variable Index
*************************

 [index ]
* Menu:

* $AFTER_BODY_OPEN:                      Customizing header.  (line   9)
* $AFTER_OVERVIEW:                       Contents and Overview text.
                                                              (line  37)
* $AFTER_TOC_LINES:                      Contents and Overview text.
                                                              (line  44)
* $anchor:                               Anchors images and spaces.
                                                              (line  16)
* $anchor_label:                         Anchors images and spaces.
                                                              (line  10)
* $AVOID_MENU_REDUNDANCY:                Table menu formatting.
                                                              (line   8)
* $BEFORE_OVERVIEW:                      Contents and Overview text.
                                                              (line  33)
* $BEFORE_TOC_LINES:                     Contents and Overview text.
                                                              (line  41)
* $BIG_RULE:                             The page layout.     (line  12)
* $BODYTEXT <1>:                         Customizing header.  (line  26)
* $BODYTEXT:                             Output initialization.
                                                              (line  19)
* $cell:                                 Table and list items.
                                                              (line 115)
* $CLOSE_QUOTE_SYMBOL:                   Hash reference interface.
                                                              (line  77)
* $CONTENTS:                             Contents and Overview text.
                                                              (line  22)
* $CSS_LINES:                            css.                 (line   6)
* $DATE:                                 Customizing footer.  (line  10)
* $def_always_delimiters:                Definition line.     (line  50)
* $def_argument_separator_delimiters:    Definition line.     (line  47)
* $def_in_type_delimiters:               Definition line.     (line  54)
* $DEF_TABLE:                            Style options.       (line  55)
* $DEFAULT_ENCODING:                     Encodings.           (line  37)
* $DEFAULT_RULE:                         The page layout.     (line  11)
* $definition_category:                  Definition formatting.
                                                              (line  31)
* $DOCTYPE:                              Style options.       (line  14)
* $DOCUMENT_DESCRIPTION:                 Customizing header.  (line  19)
* $DOCUMENT_ENCODING:                    Encodings.           (line  10)
* $DOCUMENTLANGUAGE <1>:                 Strings.             (line  10)
* $DOCUMENTLANGUAGE <2>:                 Using init files.    (line  23)
* $DOCUMENTLANGUAGE:                     Texinfo related options.
                                                              (line  12)
* $ENCODING_NAME <1>:                    Customizing header.  (line  12)
* $ENCODING_NAME:                        Encodings.           (line  32)
* $ERROR_LIMIT:                          General options.     (line   9)
* $EXTENSION:                            File and target names.
                                                              (line  11)
* $EXTERNAL_DIR:                         Style options.       (line  50)
* $EXTRA_HEAD:                           Customizing header.  (line   7)
* $FOOTNOTESTYLE:                        Page layout options. (line  16)
* $FRAMES:                               Page layout options. (line   9)
* $FRAMESET_DOCTYPE:                     Style options.       (line  15)
* $HEADERS <1>:                          General purpose variables.
                                                              (line  16)
* $HEADERS:                              Page layout options. (line  12)
* $ICONS:                                General purpose variables.
                                                              (line  13)
* $IDX_SUMMARY:                          External index files.
                                                              (line   9)
* $IN_ENCODING:                          Encodings.           (line  18)
* $INDEX_CHAPTER:                        The page layout.     (line  69)
* $INLINE_CONTENTS:                      Contents and Overview text.
                                                              (line  11)
* $L2H_L2H:                              Expanding TeX regions.
                                                              (line  14)
* $L2H_TMP:                              Expanding TeX regions.
                                                              (line  18)
* $LANGUAGES:                            Old style translations.
                                                              (line   9)
* $MENU_PRE_COMPLEX_FORMAT:              Table menu formatting.
                                                              (line  24)
* $MENU_PRE_STYLE:                       Table menu formatting.
                                                              (line  21)
* $MENU_SYMBOL:                          Table menu formatting.
                                                              (line  14)
* $MIDDLE_RULE:                          The page layout.     (line  12)
* $misc_element_label:                   Special pages content.
                                                              (line   7)
* $NO_BULLET_LIST_ATTRIBUTE:             Contents and Overview text.
                                                              (line  55)
* $NO_BULLET_LIST_CLASS:                 Contents and Overview text.
                                                              (line  51)
* $NO_BULLET_LIST_STYLE:                 Contents and Overview text.
                                                              (line  47)
* $NODE_FILES <1>:                       File and target names.
                                                              (line  15)
* $NODE_FILES:                           Output files.        (line  66)
* $NODE_NAME_IN_MENU:                    Table menu formatting.
                                                              (line   7)
* $NUMBER_SECTIONS:                      Style options.       (line  66)
* $OPEN_QUOTE_SYMBOL:                    Hash reference interface.
                                                              (line  77)
* $OUT:                                  Output files.        (line  36)
* $OUT_ENCODING <1>:                     Customizing header.  (line  13)
* $OUT_ENCODING:                         Encodings.           (line  25)
* $PRE_BODY_CLOSE:                       Customizing footer.  (line   7)
* $PREFIX:                               Output files.        (line  40)
* $print_chapter_footer:                 Customizing footer.  (line  24)
* $print_chapter_header:                 Customizing header.  (line  51)
* $print_foot_navigation:                Customizing footer.  (line  13)
* $print_head_navigation:                Customizing header.  (line  38)
* $print_misc:                           Special pages layout.
                                                              (line  33)
* $print_misc_footer:                    Special pages layout.
                                                              (line  34)
* $print_misc_header:                    Special pages layout.
                                                              (line  34)
* $print_page_foot:                      Customizing footer.  (line  27)
* $print_page_head:                      Customizing header.  (line  49)
* $print_section_footer:                 Customizing footer.  (line  26)
* $print_section_header:                 Customizing header.  (line  52)
* $print_Top:                            Special pages layout.
                                                              (line  31)
* $print_Top_footer:                     Special pages layout.
                                                              (line  32)
* $print_Top_header:                     Special pages layout.
                                                              (line  31)
* $SEPARATE_DESCRIPTION:                 Menu components formatting.
                                                              (line   8)
* $SHORT_REF:                            Style options.       (line  61)
* $SHORTCONTENTS:                        Contents and Overview text.
                                                              (line  27)
* $SHORTEXTN:                            Output files.        (line  42)
* $SHOW_MENU:                            Expansion.           (line  18)
* $SIMPLE_MENU:                          Menus.               (line  14)
* $SMALL_RULE:                           The page layout.     (line  11)
* $SPLIT:                                Splitting output.    (line   9)
* $SPLIT_INDEX:                          Index list.          (line  27)
* $Texi2HTML::NODE{Next}:                Button specifications.
                                                              (line  65)
* $Texi2HTML::OVERVIEW <1>:              Contents and Overview text.
                                                              (line  99)
* $Texi2HTML::OVERVIEW:                  Global informations. (line 172)
* $Texi2HTML::THIS_SECTION <1>:          Global functions.    (line  13)
* $Texi2HTML::THIS_SECTION:              Global informations. (line 169)
* $Texi2HTML::THISDOC{'BODYTEXT'}:       Customizing header.  (line  27)
* $Texi2html::THISDOC{'CSS_LINES'}:      css.                 (line  28)
* $Texi2HTML::THISDOC{'DOCUMENT_DESCRIPTION'}: Customizing header.
                                                              (line  23)
* $Texi2HTML::THISDOC{'DOCUMENT_ENCODING'}: Encodings.        (line  12)
* $Texi2HTML::THISDOC{'documentencoding'}: Encodings.         (line  16)
* $Texi2HTML::THISDOC{'ENCODING_NAME'}:  Encodings.           (line  32)
* $Texi2HTML::THISDOC{'IN_ENCODING'}:    Encodings.           (line  19)
* $Texi2HTML::THISDOC{'OUT_ENCODING'}:   Encodings.           (line  25)
* $Texi2HTML::TITLEPAGE <1>:             Title page.          (line   7)
* $Texi2HTML::TITLEPAGE:                 Global informations. (line 178)
* $Texi2HTML::TOC_LINES <1>:             Contents and Overview text.
                                                              (line  98)
* $Texi2HTML::TOC_LINES:                 Global informations. (line 175)
* $TOC_FILE:                             Output files.        (line  46)
* $TOC_LINKS:                            Style options.       (line  71)
* $TOP_FILE:                             Output files.        (line  43)
* $TOP_HEADING:                          The page layout.     (line  49)
* $TRANSLITERATE_FILE_NAMES:             Output files.        (line  77)
* $UNNUMBERED_SYMBOL_IN_MENU:            Table menu formatting.
                                                              (line  16)
* $USE_ACCESSKEY <1>:                    Menus.               (line  17)
* $USE_ACCESSKEY:                        Button specifications.
                                                              (line  89)
* $USE_ISO:                              Style options.       (line  25)
* $USE_LINKS:                            Customizing header.  (line  31)
* $USE_NODE_TARGET:                      Elements hashes.     (line  21)
* $USE_NODES:                            Splitting output.    (line  39)
* $USE_REL_REV:                          Button specifications.
                                                              (line  94)
* $USE_SETFILENAME:                      Output files.        (line   4)
* $VERTICAL_HEAD_NAVIGATION:             General purpose variables.
                                                              (line   9)
* $WORDS_IN_PAGE <1>:                    Global functions.    (line  14)
* $WORDS_IN_PAGE:                        Button specifications.
                                                              (line  21)
* %accent_map:                           Style and accent commands.
                                                              (line  26)
* %ACTIVE_ICONS:                         Button specifications.
                                                              (line  77)
* %BUTTONS_ACCESSKEY <1>:                Menus.               (line  18)
* %BUTTONS_ACCESSKEY:                    Button specifications.
                                                              (line  90)
* %BUTTONS_GOTO:                         Output initialization.
                                                              (line  21)
* %BUTTONS_NAME <1>:                     Output initialization.
                                                              (line  20)
* %BUTTONS_NAME:                         Button specifications.
                                                              (line  86)
* %BUTTONS_REL <1>:                      Customizing header.  (line  34)
* %BUTTONS_REL:                          Button specifications.
                                                              (line  95)
* %colon_command_punctuation_characters: Punctuation commands.
                                                              (line   7)
* %command_handler:                      Bypassing normal formatting.
                                                              (line  21)
* %complex_format_map:                   Complex formats.     (line  12)
* %css_map:                              css.                 (line  13)
* %def_map:                              Definition line.     (line   6)
* %format_in_paragraph:                  Avoiding paragraphs. (line   8)
* %format_map:                           Whole table list.    (line   6)
* %line_command_map:                     Line commands.       (line   7)
* %main::value:                          Global informations. (line 160)
* %misc_command:                         Other and unknown commands.
                                                              (line  21)
* %misc_pages_targets:                   File and target names.
                                                              (line 102)
* %NAVIGATION_TEXT <1>:                  Output initialization.
                                                              (line  20)
* %NAVIGATION_TEXT:                      Button specifications.
                                                              (line  70)
* %no_paragraph_commands:                Avoiding paragraphs. (line  12)
* %paragraph_style:                      Alignement commands. (line   9)
* %PASSIVE_ICONS:                        Button specifications.
                                                              (line  80)
* %pre_map:                              Commands without argument.
                                                              (line  23)
* %region_formats_kept:                  Handling special regions.
                                                              (line   9)
* %simple_map <1>:                       Other and unknown commands.
                                                              (line  62)
* %simple_map:                           Commands without argument.
                                                              (line  22)
* %simple_map_pre <1>:                   Other and unknown commands.
                                                              (line  63)
* %simple_map_pre:                       Commands without argument.
                                                              (line  22)
* %simple_map_texi <1>:                  Other and unknown commands.
                                                              (line  63)
* %simple_map_texi:                      Commands without argument.
                                                              (line  22)
* %special_list_commands:                Table and list items.
                                                              (line  12)
* %stop_paragraph_command:               Avoiding paragraphs. (line  19)
* %style_map <1>:                        Other and unknown commands.
                                                              (line  78)
* %style_map:                            Style and accent commands.
                                                              (line  10)
* %style_map_pre <1>:                    Other and unknown commands.
                                                              (line  79)
* %style_map_pre:                        Style and accent commands.
                                                              (line  11)
* %style_map_texi <1>:                   Other and unknown commands.
                                                              (line  79)
* %style_map_texi:                       Style and accent commands.
                                                              (line  12)
* %Texi2HTML::HREF:                      Elements hashes.     (line  12)
* %Texi2HTML::NAME:                      Elements hashes.     (line   9)
* %Texi2HTML::NO_TEXI:                   Elements hashes.     (line  18)
* %Texi2HTML::NODE:                      Elements hashes.     (line  15)
* %Texi2HTML::THISDOC:                   Global informations. (line  48)
* %texi_map:                             Commands without argument.
                                                              (line  23)
* %things_map:                           Commands without argument.
                                                              (line  23)
* @CHAPTER_BUTTONS:                      Button specifications.
                                                              (line  28)
* @command_handler_finish:               Bypassing normal formatting.
                                                              (line  90)
* @command_handler_init:                 Bypassing normal formatting.
                                                              (line  66)
* @command_handler_names:                Bypassing normal formatting.
                                                              (line  73)
* @command_handler_output:               Bypassing normal formatting.
                                                              (line  85)
* @command_handler_process:              Bypassing normal formatting.
                                                              (line  80)
* @command_handler_setup:                Bypassing normal formatting.
                                                              (line  61)
* @CSS_FILES:                            Style options.       (line  33)
* @CSS_REFS:                             Style options.       (line  45)
* @EXPAND:                               Expansion.           (line  14)
* @IMAGE_EXTENSIONS:                     Anchors images and spaces.
                                                              (line  35)
* @INCLUDE_DIRS:                         Texinfo related options.
                                                              (line  32)
* @LINKS_BUTTONS <1>:                    Customizing header.  (line  33)
* @LINKS_BUTTONS:                        Button specifications.
                                                              (line  37)
* @MISC_BUTTONS:                         Button specifications.
                                                              (line  33)
* @NODE_FOOTER_BUTTONS:                  Button specifications.
                                                              (line  17)
* @PREPEND_DIRS:                         Texinfo related options.
                                                              (line  26)
* @SECTION_BUTTONS:                      Button specifications.
                                                              (line  10)
* @SECTION_FOOTER_BUTTONS:               Button specifications.
                                                              (line  16)


File: texi2html.info,  Node: Indexcp,  Prev: Indexvr,  Up: Top

Appendix C Concept Index
************************

 [index ]
* Menu:

* Avoid paragraph opening:               Avoiding paragraphs.   (line 6)
* bug report:                            Top.                   (line 6)
* centering:                             Alignement commands.   (line 6)
* complex format:                        Complex formats.       (line 6)
* Config:                                Using init files.      (line 6)
* configure:                             Installation.          (line 6)
* CSS <1>:                               css.                   (line 6)
* CSS:                                   Style options.         (line 6)
* downloading texi2html source:          Obtaining texi2html.   (line 6)
* examples of manuals:                   Overview.              (line 6)
* external manual:                       Reference to external manual.
                                                                (line 6)
* flushing text:                         Alignement commands.   (line 6)
* i18n <1>:                              Internationalization.  (line 6)
* i18n:                                  Strings.               (line 6)
* Installation:                          Installation.          (line 6)
* internationalization:                  Using init files.      (line 6)
* makeinfo:                              whytexi2html.          (line 6)
* paragraph:                             Paragraph and preformatted formatting.
                                                                (line 6)
* preformatted region:                   Paragraph and preformatted formatting.
                                                                (line 6)
* reference:                             References.            (line 6)
* skipped command:                       Other and unknown commands.
                                                                (line 6)
* source code for texi2html, downloading: Obtaining texi2html.  (line 6)
* texi2html source, downloading:         Obtaining texi2html.   (line 6)
* Texinfo:                               Overview.              (line 6)
* text alignement:                       Alignement commands.   (line 6)
* Translation:                           Internationalization.  (line 6)
* unknown command:                       Other and unknown commands.
                                                                (line 6)



Tag Table:
Node: Top2965
Node: Overview5791
Node: whytexi2html7581
Node: Obtaining texi2html9661
Node: Installation10066
Node: Requirements10338
Node: Configuring and rebuilding11097
Node: Installing12314
Node: Advanced build features13176
Node: Invoking texi2html15205
Node: General options16678
Node: Splitting output17096
Node: Output files20459
Node: Output files-Footnotes24157
Ref: Output files-Footnote-124231
Node: Expansion24360
Node: Texinfo related options25274
Node: Page layout options26399
Node: Style options27337
Node: Expanding TeX regions29947
Node: Using init files31099
Node: Initialization files33162
Node: Encodings35412
Node: Redefining functions37565
Node: Function prototypes38649
Node: Changing the page layout39725
Node: The different pages41094
Node: The page layout43038
Ref: Element labels44330
Node: Navigation panel46202
Node: General purpose variables46865
Node: Button specifications47631
Node: Panel formatting function51622
Node: Program variables52430
Node: Elements hashes53140
Node: Global informations53799
Node: Global functions58893
Node: Output initialization59645
Node: Output finalization61218
Node: css61695
Node: Customizing header63541
Node: Customizing section66804
Node: Customizing footer67817
Node: Special pages69824
Node: Special pages content70169
Node: Top element text70925
Node: Contents and Overview text72214
Node: Footnotes text77365
Node: About text77673
Node: Title page79212
Node: Special pages layout80113
Node: File and target names81324
Node: External index files85826
Node: Customizing HTML88151
Node: Three contexts90515
Node: Three passes91276
Node: Commands without argument91868
Node: Punctuation commands93283
Node: Style and accent commands94239
Node: Hash reference interface95710
Ref: Reference hash args96609
Node: Define your own interface99501
Node: Anchors images and spaces101233
Node: Text105596
Node: Line commands108156
Node: Strings109048
Node: Old style translations110440
Node: References112178
Node: Reference to external manual112387
Node: Internal reference114551
Node: Alignement commands115690
Node: Paragraph and preformatted region116657
Node: Paragraph and preformatted formatting117001
Node: Avoiding paragraphs121289
Node: Complex formats122263
Node: Lists tables124343
Node: Table and list items124815
Ref: Multitable formatting129105
Node: Whole table list130891
Node: Definitions133435
Node: Definition line133959
Node: Definition formatting136338
Node: Headings139196
Node: Special regions142479
Node: Menus144426
Node: Menu parts145709
Node: Menu components formatting147009
Node: Simple menu formatting149517
Node: Table menu formatting150164
Node: Indices151960
Node: Index entry place152637
Node: Index list154050
Node: Floats and lists of floats157880
Node: Floats159510
Node: Lists of floats161433
Node: Footnotes163882
Node: Customizing format opening166397
Node: Bypassing normal formatting167341
Node: Handling special regions171786
Node: Other and unknown commands172644
Node: Internationalization176563
Node: Incompatibilities180674
Node: Specificities193680
Node: Indexop198486
Node: Indexvr203178
Node: Indexcp223436

End Tag Table
